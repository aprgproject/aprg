StaticAnalysisJobIdentifier: [011]
2023-09-11T17:18:11
[35m2023-09-11T17:19:24[0m | [33mBuildAndRun.sh:28[0m | The current path is [/d/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples].
[35m2023-09-11T17:19:24[0m | [33mBuildAndRun.sh:29[0m | The scriptPath is [/d/a/aprg/aprg/AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh].
[35m2023-09-11T17:19:24[0m | [33mBuildAndRun.sh:30[0m | The scriptOption is [buildOnOneCore].
[35m2023-09-11T17:19:24[0m | [33mBuildAndRun.sh:31[0m | The buildDirectoryName is [StaticAnalyzersBuild].
[35m2023-09-11T17:19:24[0m | [33mBuildAndRun.sh:32[0m | The argument1 is [Debug] and argument2 is [].
[35m2023-09-11T17:19:24[0m | [33mBuildAndRun.sh:33[0m | The immediateDirectoryName is [CPlusPlusExamples].
[35m2023-09-11T17:19:24[0m | [33mBuildAndRun.sh:84[0m | The buildType is [Debug].
[35m2023-09-11T17:19:24[0m | [33mBuildAndRun.sh:85[0m | The numberOfCores is [2].
[35m2023-09-11T17:19:24[0m | [33mBuildAndRun.sh:68[0m | The build path is [/d/a/aprg/aprg/CPlusPlusExamples/StaticAnalyzersBuild] and the output of [ls -la --color=auto]:
total 176
drwxr-xr-x 1 runneradmin 197121      0 Sep 11 17:19 .
drwxr-xr-x 1 runneradmin 197121      0 Sep 11 17:18 ..
-rw-r--r-- 1 runneradmin 197121  18070 Sep 11 17:19 CMakeCache.txt
drwxr-xr-x 1 runneradmin 197121      0 Sep 11 17:19 CMakeFiles
-rw-r--r-- 1 runneradmin 197121    592 Sep 11 17:19 CTestTestfile.cmake
-rw-r--r-- 1 runneradmin 197121 139842 Sep 11 17:19 build.ninja
-rw-r--r-- 1 runneradmin 197121   2319 Sep 11 17:19 cmake_install.cmake
[1/62] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc.obj
In file included from D:/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc:49:
D:/a/aprg/aprg/gtest/gtest/googletest\src/gtest.cc:2604:3: warning: extension used [-Wlanguage-extension-token]
  __try {
  ^
1 warning generated.
[2/62] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest_main.cc.obj
[3/62] Linking CXX static library gtest.lib
[4/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Container/AlbaContainerHelper.cpp.obj
[5/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/File/AlbaFileReader.cpp.obj
[6/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Angle/AlbaAngle.cpp.obj
[7/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComplexNumberHelpers.cpp.obj
[8/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComputationHelpers.cpp.obj
[9/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/FactorAndMulitplesHelpers.cpp.obj
[10/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PowerHelpers.cpp.obj
[11/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PrecisionHelpers.cpp.obj
[12/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/StatisticsHelpers.cpp.obj
[13/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaComplexNumber.cpp.obj
[14/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaNumber.cpp.obj
[15/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberInterval.cpp.obj
[16/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalEndpoint.cpp.obj
[17/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalHelpers.cpp.obj
[18/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Ratio/AlbaRatio.cpp.obj
[19/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Memory/AlbaMemoryBuffer.cpp.obj
[20/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaPathHandler.cpp.obj
[21/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaWebPathHandler.cpp.obj
[22/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Print/AlbaPrintFunctions.cpp.obj
[23/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/AlbaOldRandomizer.cpp.obj
[24/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaCombinedEntropySource.cpp.obj
[25/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaEntropySourceBasedOnTime.cpp.obj
[26/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitReader.cpp.obj
[27/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitWriter.cpp.obj
[28/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterReader.cpp.obj
[29/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterWriter.cpp.obj
[30/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/String/AlbaStringHelper.cpp.obj
[31/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTime.cpp.obj
[32/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTimeHelper.cpp.obj
[33/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
1 warning generated.
[34/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimer.cpp.obj
[35/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/AlbaUserInterface.cpp.obj
[36/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/DisplayTable.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:205:67: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
int DisplayTablePrinter::getVerticalBorderLength() const { return m_verticalBorder.length(); }
                                                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:208:12: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return ((m_maxLengthAtColumn.size() + 1) * getVerticalBorderLength()) + m_totalColumnLength;
           ^
[37/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Utility/AlbaScopeGuard.cpp.obj
[38/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/BaseFileReaderTest.cpp.obj
[39/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/FileUtilities.cpp.obj
[40/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/PathHandler/AlbaWindowsPathHandler.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:28:24: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const length = fullPath.length();
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:30:45: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int const indexWithSlashCharacter = fullPath.find_first_of(m_slashCharacterString, index);
                                            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:270:23: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const index = m_directory.find_first_of(m_slashCharacterString + ":");
                      ^
[41/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Time\AlbaWindowsTimeHelper.cpp:6:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return AlbaDateTime(
           ^
[42/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimer.cpp.obj
[43/62] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Windows/AlbaWindowsHelper.cpp.obj
[44/62] Linking CXX static library APRG_COMMON.lib
[45/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/AlgorithmExamples/AlgorithmExamples_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:28:5: warning: variable 'input' of type 'array<typename _Enforce_same<int, int, int, int, int, int, int, int, int, int>::type, 1 + sizeof...(_Rest)>' (aka 'array<int, 1 + sizeof...(_Rest)>') can be declared 'const' [misc-const-correctness]
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:28:11: note: FIX-IT applied suggested code changes
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:41:5: warning: variable 'input' of type 'array<typename _Enforce_same<int, int, int, int, int, int, int, int, int, int>::type, 1 + sizeof...(_Rest)>' (aka 'array<int, 1 + sizeof...(_Rest)>') can be declared 'const' [misc-const-correctness]
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:41:11: note: FIX-IT applied suggested code changes
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:54:5: warning: variable 'input' of type 'array<typename _Enforce_same<int, int, int, int, int, int, int, int, int, int>::type, 1 + sizeof...(_Rest)>' (aka 'array<int, 1 + sizeof...(_Rest)>') can be declared 'const' [misc-const-correctness]
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:54:11: note: FIX-IT applied suggested code changes
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:76:5: warning: variable 'input' of type 'array<typename _Enforce_same<int, int, int, int, int, int, int, int, int, int>::type, 1 + sizeof...(_Rest)>' (aka 'array<int, 1 + sizeof...(_Rest)>') can be declared 'const' [misc-const-correctness]
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:76:11: note: FIX-IT applied suggested code changes
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:87:5: warning: variable 'input' of type 'array<typename _Enforce_same<int, int, int, int, int, int, int, int, int, int>::type, 1 + sizeof...(_Rest)>' (aka 'array<int, 1 + sizeof...(_Rest)>') can be declared 'const' [misc-const-correctness]
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:87:11: note: FIX-IT applied suggested code changes
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:98:5: warning: variable 'input' of type 'array<typename _Enforce_same<int, int, int, int, int, int, int, int, int, int>::type, 1 + sizeof...(_Rest)>' (aka 'array<int, 1 + sizeof...(_Rest)>') can be declared 'const' [misc-const-correctness]
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:98:11: note: FIX-IT applied suggested code changes
    array input = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:119:5: warning: variable 'input' of type 'array<typename _Enforce_same<int, int, int, int, int, int, int, int, int>::type, 1 + sizeof...(_Rest)>' (aka 'array<int, 1 + sizeof...(_Rest)>') can be declared 'const' [misc-const-correctness]
    array input = {2, 8, 1, 9, 3, 5, 7, 4, 6};
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:119:11: note: FIX-IT applied suggested code changes
    array input = {2, 8, 1, 9, 3, 5, 7, 4, 6};
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:157:5: warning: variable 'input' of type 'array<typename _Enforce_same<int, int, int, int, int>::type, 1 + sizeof...(_Rest)>' (aka 'array<int, 1 + sizeof...(_Rest)>') can be declared 'const' [misc-const-correctness]
    array input = {2, 1, 3, 5, 4};
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:157:11: note: FIX-IT applied suggested code changes
    array input = {2, 1, 3, 5, 4};
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:227:5: warning: variable 'elevations' of type 'array<typename _Enforce_same<int, int, int, int, int, int, int, int, int, int, int, int>::type, 1 + sizeof...(_Rest)>' (aka 'array<int, 1 + sizeof...(_Rest)>') can be declared 'const' [misc-const-correctness]
    array elevations = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\AlgorithmExamples\AlgorithmExamples_unit.cpp:227:11: note: FIX-IT applied suggested code changes
    array elevations = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
          ^
[46/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/ArgumentDependentLookupExamples/ArgumentDependentLookupExamples_unit.cpp.obj
[47/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/ConstExamples/ConstExamples_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ConstExamples\ConstExamples_unit.cpp:13:10: warning: variable 'a' set but not used [clang-diagnostic-unused-but-set-variable]
    long a = 0;
         ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ConstExamples\ConstExamples_unit.cpp:40:16: warning: variable 'c' set but not used [clang-diagnostic-unused-but-set-variable]
    int const* c = a;
               ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ConstExamples\ConstExamples_unit.cpp:68:5: warning: variable 'data1' of type 'int' can be declared 'const' [misc-const-correctness]
    int data1 = 1;
    ^
        const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ConstExamples\ConstExamples_unit.cpp:68:9: note: FIX-IT applied suggested code changes
    int data1 = 1;
        ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ConstExamples\ConstExamples_unit.cpp:69:5: warning: variable 'r1' of type 'int &' can be declared 'const' [misc-const-correctness]
    int& r1 = data1;     // r1 refers to (mutable) int
    ^
        const
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ConstExamples\ConstExamples_unit.cpp:69:8: note: FIX-IT applied suggested code changes
    int& r1 = data1;     // r1 refers to (mutable) int
       ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ConstExamples\ConstExamples_unit.cpp:96:16: warning: variable 'c_ptr_f' set but not used [clang-diagnostic-unused-but-set-variable]
    Foo const* c_ptr_f = &f;
               ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ConstExamples\ConstExamples_unit.cpp:210:5: warning: variable 'a' of type 'Foo' can be declared 'const' [misc-const-correctness]
    Foo a;
    ^
        const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ConstExamples\ConstExamples_unit.cpp:210:9: note: FIX-IT applied suggested code changes
    Foo a;
        ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ConstExamples\ConstExamples_unit.cpp:210:9: warning: unused variable 'a' [clang-diagnostic-unused-variable]
    Foo a;
        ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/ConstExamples/ConstExamples_unit.cpp:13:10: warning: variable 'a' set but not used [-Wunused-but-set-variable]
    long a = 0;
         ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/ConstExamples/ConstExamples_unit.cpp:40:16: warning: variable 'c' set but not used [-Wunused-but-set-variable]
    int const* c = a;
               ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/ConstExamples/ConstExamples_unit.cpp:96:16: warning: variable 'c_ptr_f' set but not used [-Wunused-but-set-variable]
    Foo const* c_ptr_f = &f;
               ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/ConstExamples/ConstExamples_unit.cpp:210:15: warning: unused variable 'a' [-Wunused-variable]
    Foo const a;
              ^
4 warnings generated.
[48/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/InPlaceConstructionExamples/InPlaceConstructionExamples_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:49:5: warning: variable 's03' of type 'S' can be declared 'const' [misc-const-correctness]
    S s03(4);           // Explicit value construct (1)
    ^
      const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:49:7: note: FIX-IT applied suggested code changes
    S s03(4);           // Explicit value construct (1)
      ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:50:5: warning: variable 's04' of type 'S' can be declared 'const' [misc-const-correctness]
    S s04(4, 5);        // Explicit value construct (2)
    ^
      const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:50:7: note: FIX-IT applied suggested code changes
    S s04(4, 5);        // Explicit value construct (2)
      ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:51:5: warning: variable 's05' of type 'S' can be declared 'const' [misc-const-correctness]
    S s05(s01);         // Copy construct
    ^
      const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:51:7: note: FIX-IT applied suggested code changes
    S s05(s01);         // Copy construct
      ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:52:5: warning: variable 's06' of type 'S' can be declared 'const' [misc-const-correctness]
    S s06(move(s01));   // Move construct
    ^
      const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:52:7: note: FIX-IT applied suggested code changes
    S s06(move(s01));   // Move construct
      ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:52:11: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    S s06(move(s01));   // Move construct
          ^
          std::
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:52:11: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:53:5: warning: variable 's07' of type 'S' can be declared 'const' [misc-const-correctness]
    S s07 = s02;        // Copy construct
    ^
      const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:53:7: note: FIX-IT applied suggested code changes
    S s07 = s02;        // Copy construct
      ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:54:5: warning: variable 's08' of type 'S' can be declared 'const' [misc-const-correctness]
    S s08 = move(s02);  // Move construct
    ^
      const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:54:7: note: FIX-IT applied suggested code changes
    S s08 = move(s02);  // Move construct
      ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:54:13: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    S s08 = move(s02);  // Move construct
            ^
            std::
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:54:13: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:75:5: warning: variable 'pb' of type 'PhoneBook' (aka 'map<basic_string<char, char_traits<char>, allocator<char>>, int>') can be declared 'const' [misc-const-correctness]
    PhoneBook pb = buildPhoneBook();
    ^
              const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:75:15: note: FIX-IT applied suggested code changes
    PhoneBook pb = buildPhoneBook();
              ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:94:5: warning: variable 's' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s(sadFunction("Can I please have RVO? "));
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:94:12: note: FIX-IT applied suggested code changes
    string s(sadFunction("Can I please have RVO? "));
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:108:12: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    return move(s);
           ^
           std::
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:108:12: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:112:5: warning: variable 's' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s(sadFunction());
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:112:12: note: FIX-IT applied suggested code changes
    string s(sadFunction());
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:142:5: warning: variable 's' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s(undecidedFunction());
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:142:12: note: FIX-IT applied suggested code changes
    string s(undecidedFunction());
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:154:8: warning: class 'MoveOnlyConstExprObject' defines a move constructor but does not define a destructor, a copy constructor, a copy assignment operator or a move assignment operator [cppcoreguidelines-special-member-functions]
struct MoveOnlyConstExprObject {
       ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:230:5: warning: variable 's' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s("I won't RVO!");
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:230:12: note: FIX-IT applied suggested code changes
    string s("I won't RVO!");
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:240:5: warning: variable 's' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s("I will RVO!");
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:240:12: note: FIX-IT applied suggested code changes
    string s("I will RVO!");
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:270:5: warning: variable 's01' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s01(willThisRvo01());                   // RVO is successful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:270:12: note: FIX-IT applied suggested code changes
    string s01(willThisRvo01());                   // RVO is successful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:271:5: warning: variable 's02' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s02(willThisRvo02(true));               // RVO is successful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:271:12: note: FIX-IT applied suggested code changes
    string s02(willThisRvo02(true));               // RVO is successful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:272:5: warning: variable 's03' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s03(willThisRvo02(false));              // RVO is successful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:272:12: note: FIX-IT applied suggested code changes
    string s03(willThisRvo02(false));              // RVO is successful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:273:5: warning: variable 's04' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s04(willThisRvo03(true, "Stop RVO"));   // RVO is unsuccessful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:273:12: note: FIX-IT applied suggested code changes
    string s04(willThisRvo03(true, "Stop RVO"));   // RVO is unsuccessful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:274:5: warning: variable 's05' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s05(willThisRvo03(false, "Stop RVO"));  // RVO is unsuccessful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:274:12: note: FIX-IT applied suggested code changes
    string s05(willThisRvo03(false, "Stop RVO"));  // RVO is unsuccessful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:275:5: warning: variable 's06' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s06(willThisRvo04(true));               // RVO is successful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:275:12: note: FIX-IT applied suggested code changes
    string s06(willThisRvo04(true));               // RVO is successful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:276:5: warning: variable 's07' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s07(willThisRvo04(false));              // RVO is successful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:276:12: note: FIX-IT applied suggested code changes
    string s07(willThisRvo04(false));              // RVO is successful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:277:5: warning: variable 's08' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s08(willThisRvo05(true));               // can RVO
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:277:12: note: FIX-IT applied suggested code changes
    string s08(willThisRvo05(true));               // can RVO
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:278:5: warning: variable 's09' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s09(willThisRvo05(false));              // can RVO
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:278:12: note: FIX-IT applied suggested code changes
    string s09(willThisRvo05(false));              // can RVO
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:279:5: warning: variable 's10' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s10(willThisRvo06(true));               // RVO is unsuccessful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:279:12: note: FIX-IT applied suggested code changes
    string s10(willThisRvo06(true));               // RVO is unsuccessful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:280:5: warning: variable 's11' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s11(willThisRvo06(false));              // RVO is unsuccessful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:280:12: note: FIX-IT applied suggested code changes
    string s11(willThisRvo06(false));              // RVO is unsuccessful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:281:5: warning: variable 's12' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s12(willThisRvo07(true));               // RVO is unsuccessful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:281:12: note: FIX-IT applied suggested code changes
    string s12(willThisRvo07(true));               // RVO is unsuccessful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:282:5: warning: variable 's13' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s13(willThisRvo07(false));              // RVO is unsuccessful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:282:12: note: FIX-IT applied suggested code changes
    string s13(willThisRvo07(false));              // RVO is unsuccessful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:283:5: warning: variable 's14' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s14(willThisRvo09());                   // RVO is successful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:283:12: note: FIX-IT applied suggested code changes
    string s14(willThisRvo09());                   // RVO is successful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:284:5: warning: variable 's15' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s15(willThisRvo10());                   // RVO is successful
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:284:12: note: FIX-IT applied suggested code changes
    string s15(willThisRvo10());                   // RVO is successful
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:285:5: warning: variable 'o01' of type 'MoveOnlyConstExprObject' can be declared 'const' [misc-const-correctness]
    MoveOnlyConstExprObject o01(willThisRvo11());  // It depends
    ^
                            const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:285:29: note: FIX-IT applied suggested code changes
    MoveOnlyConstExprObject o01(willThisRvo11());  // It depends
                            ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:295:5: warning: variable 's' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string s("Content1");
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:295:12: note: FIX-IT applied suggested code changes
    string s("Content1");
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:298:17: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    v.push_back(move(sTemp1));
                ^
                std::
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:298:17: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:300:20: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    v.emplace_back(move(sTemp2));
                   ^
                   std::
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:300:20: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:310:5: warning: variable 's2' of type 'string &' (aka 'basic_string<char, char_traits<char>, allocator<char>> &') can be declared 'const' [misc-const-correctness]
    string& s2 = v.emplace_back();  // first default construct in the vector
    ^
           const
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:310:11: note: FIX-IT applied suggested code changes
    string& s2 = v.emplace_back();  // first default construct in the vector
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:310:13: warning: unused variable 's2' [clang-diagnostic-unused-variable]
    string& s2 = v.emplace_back();  // first default construct in the vector
            ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:325:5: warning: variable 'a' of type 'array<Arg, 3>' (aka 'array<alba::ClassesWithBasicFunctionWorks::Arg, 3>') can be declared 'const' [misc-const-correctness]
    array<Arg, 3> a = {Arg{}, Arg{}, Arg{}};
    ^
                  const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:325:19: note: FIX-IT applied suggested code changes
    array<Arg, 3> a = {Arg{}, Arg{}, Arg{}};
                  ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:343:5: warning: variable 'a' of type 'array<typename _Enforce_same<int, int, int, int, int>::type, 1 + sizeof...(_Rest)>' (aka 'array<int, 1 + sizeof...(_Rest)>') can be declared 'const' [misc-const-correctness]
    array a = {1, 2, 3, 4, 5};
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:343:11: note: FIX-IT applied suggested code changes
    array a = {1, 2, 3, 4, 5};
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:364:5: warning: variable 'newToken' of type 'string_view' (aka 'basic_string_view<char>') can be declared 'const' [misc-const-correctness]
    string_view newToken;
    ^
                const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:364:17: note: FIX-IT applied suggested code changes
    string_view newToken;
                ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:377:25: warning: unnecessary temporary object created while calling emplace_back [hicpp-use-emplace,modernize-use-emplace]
    tokens.emplace_back(string(3, 'A'));  // Explicitly calling the string constructor in unnecessary
                        ^~~~~~~      ~
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:377:25: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:377:38: note: FIX-IT applied suggested code changes
    tokens.emplace_back(string(3, 'A'));  // Explicitly calling the string constructor in unnecessary
                                     ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:394:20: warning: unnecessary temporary object created while calling emplace_back [hicpp-use-emplace,modernize-use-emplace]
    v.emplace_back(make_pair(1, Value{42, "hello", 3.14}));  // This is no better
                   ^~~~~~~~~~                           ~
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:394:20: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:394:57: note: FIX-IT applied suggested code changes
    v.emplace_back(make_pair(1, Value{42, "hello", 3.14}));  // This is no better
                                                        ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:414:10: warning: variable 'i' of type 'int' can be declared 'const' [misc-const-correctness]
    for (int i : {1, 2, 3}) {
         ^
             const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:414:14: note: FIX-IT applied suggested code changes
    for (int i : {1, 2, 3}) {
             ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:421:10: warning: variable 'i' of type 'int' can be declared 'const' [misc-const-correctness]
    for (int i : f<1, 2, 3>()) {
         ^
             const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:421:14: note: FIX-IT applied suggested code changes
    for (int i : f<1, 2, 3>()) {
             ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:449:5: warning: variable 'm' of type 'M' (aka 'map<int, alba::ClassesWithBasicFunctionWorks::S>') can be declared 'const' [misc-const-correctness]
    M m{{0, Arg{}}};  // 1 value construction, 1 copy construction, 2 destruction
    ^
      const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:449:7: note: FIX-IT applied suggested code changes
    M m{{0, Arg{}}};  // 1 value construction, 1 copy construction, 2 destruction
      ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:539:5: warning: variable 'opt1' of type 'OptionalS' (aka 'optional<alba::ClassesWithBasicFunctionWorks::S>') can be declared 'const' [misc-const-correctness]
    OptionalS opt1 = Arg{};            // 1 value construction, 1 destruction, good
    ^
              const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:539:15: note: FIX-IT applied suggested code changes
    OptionalS opt1 = Arg{};            // 1 value construction, 1 destruction, good
              ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:540:5: warning: variable 'opt2' of type 'OptionalS' (aka 'optional<alba::ClassesWithBasicFunctionWorks::S>') can be declared 'const' [misc-const-correctness]
    OptionalS opt2 = S{1};             // 1 value construction, 1 move construction, 2 destructions, not good
    ^
              const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:540:15: note: FIX-IT applied suggested code changes
    OptionalS opt2 = S{1};             // 1 value construction, 1 move construction, 2 destructions, not good
              ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:541:5: warning: variable 'opt3' of type 'OptionalS' (aka 'optional<alba::ClassesWithBasicFunctionWorks::S>') can be declared 'const' [misc-const-correctness]
    OptionalS opt3(in_place, 1);       // 1 value construction, 1 destruction, good
    ^
              const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:541:15: note: FIX-IT applied suggested code changes
    OptionalS opt3(in_place, 1);       // 1 value construction, 1 destruction, good
              ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:542:5: warning: variable 'opt4' of type 'OptionalS' (aka 'optional<alba::ClassesWithBasicFunctionWorks::S>') can be declared 'const' [misc-const-correctness]
    OptionalS opt4(make_optional(1));  // 1 value construction, 1 destruction, good
    ^
              const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:542:15: note: FIX-IT applied suggested code changes
    OptionalS opt4(make_optional(1));  // 1 value construction, 1 destruction, good
              ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:573:5: warning: variable 'opt1' of type 'VariantS' (aka 'variant<int, alba::ClassesWithBasicFunctionWorks::S>') can be declared 'const' [misc-const-correctness]
    VariantS opt1 = Arg{};                // 1 value construction, 1 destruction, good
    ^
             const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:573:14: note: FIX-IT applied suggested code changes
    VariantS opt1 = Arg{};                // 1 value construction, 1 destruction, good
             ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:574:5: warning: variable 'opt2' of type 'VariantS' (aka 'variant<int, alba::ClassesWithBasicFunctionWorks::S>') can be declared 'const' [misc-const-correctness]
    VariantS opt2 = S{1};                 // 1 value construction, 1 move construction, 2 destructions, not good
    ^
             const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:574:14: note: FIX-IT applied suggested code changes
    VariantS opt2 = S{1};                 // 1 value construction, 1 move construction, 2 destructions, not good
             ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:575:5: warning: variable 'opt3' of type 'VariantS' (aka 'variant<int, alba::ClassesWithBasicFunctionWorks::S>') can be declared 'const' [misc-const-correctness]
    VariantS opt3(in_place_type<S>, 1);   // 1 value construction, 1 destruction, good
    ^
             const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:575:14: note: FIX-IT applied suggested code changes
    VariantS opt3(in_place_type<S>, 1);   // 1 value construction, 1 destruction, good
             ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:576:5: warning: variable 'opt4' of type 'VariantS' (aka 'variant<int, alba::ClassesWithBasicFunctionWorks::S>') can be declared 'const' [misc-const-correctness]
    VariantS opt4(in_place_index<1>, 1);  // 1 value construction, 1 destruction, good
    ^
             const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InPlaceConstructionExamples\InPlaceConstructionExamples_unit.cpp:576:14: note: FIX-IT applied suggested code changes
    VariantS opt4(in_place_index<1>, 1);  // 1 value construction, 1 destruction, good
             ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/InPlaceConstructionExamples/InPlaceConstructionExamples_unit.cpp:108:12: warning: moving a local object in a return statement prevents copy elision [-Wpessimizing-move]
    return std::move(s);
           ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/InPlaceConstructionExamples/InPlaceConstructionExamples_unit.cpp:108:12: note: remove std::move call here
    return std::move(s);
           ^~~~~~~~~~ ~
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/InPlaceConstructionExamples/InPlaceConstructionExamples_unit.cpp:310:19: warning: unused variable 's2' [-Wunused-variable]
    string const& s2 = v.emplace_back();  // first default construct in the vector
                  ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/InPlaceConstructionExamples/InPlaceConstructionExamples_unit.cpp:410:33: warning: returning address of local temporary object [-Wreturn-stack-address]
    return initializer_list<int>{ints...};  // returns a temporary object
                                ^~~~~~~~~
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/InPlaceConstructionExamples/InPlaceConstructionExamples_unit.cpp:421:24: note: in instantiation of function template specialization 'alba::InitializerListHasConstStorageSoWeCantLocalInitializerLists::f<1, 2, 3>' requested here
    for (int const i : f<1, 2, 3>()) {
                       ^
3 warnings generated.
[49/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/IncrementDecrementExamples/IncrementDecrementExamples_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\IncrementDecrementExamples\IncrementDecrementExamples_unit.cpp:12:15: warning: multiple unsequenced modifications to 'a' [clang-diagnostic-unsequenced]
    cout << (a++) * (++a) << endl;  // 1*3 = 3
              ^      ~~
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\IncrementDecrementExamples\IncrementDecrementExamples_unit.cpp:14:15: warning: multiple unsequenced modifications to 'b' [clang-diagnostic-unsequenced]
    cout << (b++) * (b++) << endl;  // 1*2 = 2
              ^       ~~
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\IncrementDecrementExamples\IncrementDecrementExamples_unit.cpp:16:14: warning: multiple unsequenced modifications to 'c' [clang-diagnostic-unsequenced]
    cout << c++ * c++ << endl;  // 1*2 = 2
             ^     ~~
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/IncrementDecrementExamples/IncrementDecrementExamples_unit.cpp:12:15: warning: multiple unsequenced modifications to 'a' [-Wunsequenced]
    cout << (a++) * (++a) << endl;  // 1*3 = 3
              ^      ~~
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/IncrementDecrementExamples/IncrementDecrementExamples_unit.cpp:14:15: warning: multiple unsequenced modifications to 'b' [-Wunsequenced]
    cout << (b++) * (b++) << endl;  // 1*2 = 2
              ^       ~~
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/IncrementDecrementExamples/IncrementDecrementExamples_unit.cpp:16:14: warning: multiple unsequenced modifications to 'c' [-Wunsequenced]
    cout << c++ * c++ << endl;  // 1*2 = 2
             ^     ~~
3 warnings generated.
[50/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/InlineExamples/InlineOnTranslationUnit/InlineOnTranslationUnit1_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InlineExamples\InlineOnTranslationUnit\InlineOnTranslationUnit1_unit.cpp:85:5: warning: variable 'otherTranslationUnitValues' of type 'TranslationUnitValues' can be declared 'const' [misc-const-correctness]
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit2());
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InlineExamples\InlineOnTranslationUnit\InlineOnTranslationUnit1_unit.cpp:85:27: note: FIX-IT applied suggested code changes
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit2());
                          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InlineExamples\InlineOnTranslationUnit\InlineOnTranslationUnit1_unit.cpp:109:5: warning: variable 'otherTranslationUnitValues' of type 'TranslationUnitValues' can be declared 'const' [misc-const-correctness]
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit2());
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InlineExamples\InlineOnTranslationUnit\InlineOnTranslationUnit1_unit.cpp:109:27: note: FIX-IT applied suggested code changes
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit2());
                          ^
[51/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/InlineExamples/InlineOnTranslationUnit/InlineOnTranslationUnit2_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InlineExamples\InlineOnTranslationUnit\InlineOnTranslationUnit2_unit.cpp:88:5: warning: variable 'otherTranslationUnitValues' of type 'TranslationUnitValues' can be declared 'const' [misc-const-correctness]
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit1());
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InlineExamples\InlineOnTranslationUnit\InlineOnTranslationUnit2_unit.cpp:88:27: note: FIX-IT applied suggested code changes
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit1());
                          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InlineExamples\InlineOnTranslationUnit\InlineOnTranslationUnit2_unit.cpp:112:5: warning: variable 'otherTranslationUnitValues' of type 'TranslationUnitValues' can be declared 'const' [misc-const-correctness]
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit1());
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\InlineExamples\InlineOnTranslationUnit\InlineOnTranslationUnit2_unit.cpp:112:27: note: FIX-IT applied suggested code changes
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit1());
                          ^
[52/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/LambdaExamples/LambdaExamples_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\LambdaExamples\LambdaExamples_unit.cpp:40:6: warning: unused function 'badIncrementBy' [clang-diagnostic-unused-function]
auto badIncrementBy(int const y) {
     ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\LambdaExamples\LambdaExamples_unit.cpp:158:5: warning: variable 'kitten' of type 'Kitten' can be declared 'const' [misc-const-correctness]
    Kitten kitten(1);
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\LambdaExamples\LambdaExamples_unit.cpp:158:12: note: FIX-IT applied suggested code changes
    Kitten kitten(1);
           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\LambdaExamples\LambdaExamples_unit.cpp:204:5: warning: variable 'kitten' of type 'Kitten' can be declared 'const' [misc-const-correctness]
    Kitten kitten(1);
    ^
           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\LambdaExamples\LambdaExamples_unit.cpp:204:12: note: FIX-IT applied suggested code changes
    Kitten kitten(1);
           ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/LambdaExamples/LambdaExamples_unit.cpp:42:13: warning: address of stack memory associated with parameter 'y' returned [-Wreturn-stack-address]
    return [&](int const x) { return x + y; };
            ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/LambdaExamples/LambdaExamples_unit.cpp:42:42: note: implicitly captured by reference due to use here
    return [&](int const x) { return x + y; };
            ~                            ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/LambdaExamples/LambdaExamples_unit.cpp:40:6: warning: unused function 'badIncrementBy' [-Wunused-function]
auto badIncrementBy(int const y) {
     ^
2 warnings generated.
[53/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/RuleOfZeroExamples/RuleOfZeroExamples_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\RuleOfZeroExamples\RuleOfZeroExamples_unit.cpp:68:29: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
        NaiveIntVector copy(move(rightHandSide));  // calls the move constructor
                            ^
                            std::
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\RuleOfZeroExamples\RuleOfZeroExamples_unit.cpp:68:29: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\RuleOfZeroExamples\RuleOfZeroExamples_unit.cpp:106:5: warning: variable 'object1' of type 'OperationPrinter' can be declared 'const' [misc-const-correctness]
    OperationPrinter object1;
    ^
                     const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\RuleOfZeroExamples\RuleOfZeroExamples_unit.cpp:106:22: note: FIX-IT applied suggested code changes
    OperationPrinter object1;
                     ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\RuleOfZeroExamples\RuleOfZeroExamples_unit.cpp:109:5: warning: variable 'object2' of type 'OperationPrinter' can be declared 'const' [misc-const-correctness]
    OperationPrinter object2(3);         // Calls the value constructor
    ^
                     const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\RuleOfZeroExamples\RuleOfZeroExamples_unit.cpp:109:22: note: FIX-IT applied suggested code changes
    OperationPrinter object2(3);         // Calls the value constructor
                     ^
[54/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/StaticExamples/StaticInClass/SampleClassWithStatic.cpp.obj
[55/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/StaticExamples/StaticInClass/SampleClassWithStatic_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:8:5: warning: variable 'object1' of type 'SampleClassWithStatic' can be declared 'const' [misc-const-correctness]
    SampleClassWithStatic object1;
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:8:27: note: FIX-IT applied suggested code changes
    SampleClassWithStatic object1;
                          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:9:5: warning: variable 'object2' of type 'SampleClassWithStatic' can be declared 'const' [misc-const-correctness]
    SampleClassWithStatic object2;
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:9:27: note: FIX-IT applied suggested code changes
    SampleClassWithStatic object2;
                          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:20:5: warning: variable 'object' of type 'SampleClassWithStatic' can be declared 'const' [misc-const-correctness]
    SampleClassWithStatic object;
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:20:27: note: FIX-IT applied suggested code changes
    SampleClassWithStatic object;
                          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:37:5: warning: variable 'object2' of type 'SampleClassWithStatic' can be declared 'const' [misc-const-correctness]
    SampleClassWithStatic object2;
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:37:27: note: FIX-IT applied suggested code changes
    SampleClassWithStatic object2;
                          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:55:5: warning: variable 'object2' of type 'SampleClassWithStatic' can be declared 'const' [misc-const-correctness]
    SampleClassWithStatic object2;
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:55:27: note: FIX-IT applied suggested code changes
    SampleClassWithStatic object2;
                          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:68:5: warning: variable 'object2' of type 'SampleClassWithStatic' can be declared 'const' [misc-const-correctness]
    SampleClassWithStatic object2;
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticInClass\SampleClassWithStatic_unit.cpp:68:27: note: FIX-IT applied suggested code changes
    SampleClassWithStatic object2;
                          ^
[56/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/StaticExamples/StaticInFunction/StaticInFunction_unit.cpp.obj
[57/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/StaticExamples/StaticOnTranslationUnit/StaticOnTranslationUnit1_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticOnTranslationUnit\StaticOnTranslationUnit1_unit.cpp:61:5: warning: variable 'otherTranslationUnitValues' of type 'TranslationUnitValues' can be declared 'const' [misc-const-correctness]
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit2());
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticOnTranslationUnit\StaticOnTranslationUnit1_unit.cpp:61:27: note: FIX-IT applied suggested code changes
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit2());
                          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticOnTranslationUnit\StaticOnTranslationUnit1_unit.cpp:77:5: warning: variable 'otherTranslationUnitValues' of type 'TranslationUnitValues' can be declared 'const' [misc-const-correctness]
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit2());
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticOnTranslationUnit\StaticOnTranslationUnit1_unit.cpp:77:27: note: FIX-IT applied suggested code changes
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit2());
                          ^
[58/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/StaticExamples/StaticOnTranslationUnit/StaticOnTranslationUnit2_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticOnTranslationUnit\StaticOnTranslationUnit2_unit.cpp:62:5: warning: variable 'otherTranslationUnitValues' of type 'TranslationUnitValues' can be declared 'const' [misc-const-correctness]
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit1());
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticOnTranslationUnit\StaticOnTranslationUnit2_unit.cpp:62:27: note: FIX-IT applied suggested code changes
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit1());
                          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticOnTranslationUnit\StaticOnTranslationUnit2_unit.cpp:78:5: warning: variable 'otherTranslationUnitValues' of type 'TranslationUnitValues' can be declared 'const' [misc-const-correctness]
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit1());
    ^
                          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\StaticExamples\StaticOnTranslationUnit\StaticOnTranslationUnit2_unit.cpp:78:27: note: FIX-IT applied suggested code changes
    TranslationUnitValues otherTranslationUnitValues(getValuesInTranslationUnit1());
                          ^
[59/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/TemplateExamples/TemplateExamples_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:58:5: warning: variable 'intList' of type 'mylist<int>' can be declared 'const' [misc-const-correctness]
    mylist<int> intList{5, nullptr};
    ^
                const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:58:17: note: FIX-IT applied suggested code changes
    mylist<int> intList{5, nullptr};
                ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:59:5: warning: variable 'doubleList' of type 'mylist<double>' can be declared 'const' [misc-const-correctness]
    mylist<double> doubleList{4.5, nullptr};
    ^
                   const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:59:20: note: FIX-IT applied suggested code changes
    mylist<double> doubleList{4.5, nullptr};
                   ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:369:5: warning: variable 'v1' of type 'vector<int>' can be declared 'const' [misc-const-correctness]
    vector<int> v1;
    ^
                const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:369:17: note: FIX-IT applied suggested code changes
    vector<int> v1;
                ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:441:5: warning: variable 'a' of type 'myVectorStruct<int>' can be declared 'const' [misc-const-correctness]
    myVectorStruct<int> a;     // myVectorStruct<T>::myVectorStruct() [with T = int]
    ^
                        const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:441:25: note: FIX-IT applied suggested code changes
    myVectorStruct<int> a;     // myVectorStruct<T>::myVectorStruct() [with T = int]
                        ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:442:5: warning: variable 'b' of type 'myVectorStruct<void>' can be declared 'const' [misc-const-correctness]
    myVectorStruct<void> b;    // myVectorStruct<void>::myVectorStruct()
    ^
                         const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:442:26: note: FIX-IT applied suggested code changes
    myVectorStruct<void> b;    // myVectorStruct<void>::myVectorStruct()
                         ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:443:5: warning: variable 'c' of type 'myVectorStruct<int *>' can be declared 'const' [misc-const-correctness]
    myVectorStruct<int*> c;    // myVectorStruct<Tp*>::myVectorStruct() [with Tp = int]
    ^
                         const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:443:26: note: FIX-IT applied suggested code changes
    myVectorStruct<int*> c;    // myVectorStruct<Tp*>::myVectorStruct() [with Tp = int]
                         ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:444:5: warning: variable 'd' of type 'myVectorStruct<int ***>' can be declared 'const' [misc-const-correctness]
    myVectorStruct<int***> d;  // myVectorStruct<Tp**>::myVectorStruct() [with Tp = int*]
    ^
                           const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:444:28: note: FIX-IT applied suggested code changes
    myVectorStruct<int***> d;  // myVectorStruct<Tp**>::myVectorStruct() [with Tp = int*]
                           ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:480:5: warning: variable 'result' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool result = isPointer(pv);  // isPointer(Tp*) [with Tp = void]
    ^
         const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:480:10: note: FIX-IT applied suggested code changes
    bool result = isPointer(pv);  // isPointer(Tp*) [with Tp = void]
         ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:519:5: warning: variable 'result' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool result = isPointer(pv);  // isPointerImpl<Tp*>::isPointer() [with Tp = void]
    ^
         const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:519:10: note: FIX-IT applied suggested code changes
    bool result = isPointer(pv);  // isPointerImpl<Tp*>::isPointer() [with Tp = void]
         ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:564:32: warning: unused variable 'variable2' [clang-diagnostic-unused-variable]
    NoInstantiationClass<int>* variable2 = nullptr;  // No compiler error.
                               ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:565:5: warning: variable 'variable3' of type 'InstantiationClass<int>' can be declared 'const' [misc-const-correctness]
    InstantiationClass<int> variable3;               // No compiler error.
    ^
                            const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:565:29: note: FIX-IT applied suggested code changes
    InstantiationClass<int> variable3;               // No compiler error.
                            ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:565:29: warning: unused variable 'variable3' [clang-diagnostic-unused-variable]
    InstantiationClass<int> variable3;               // No compiler error.
                            ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:685:5: warning: variable 'v1' of type 'myvec<int>' (aka 'alba::TemplateTypeDeductionWorksForClassesInCpp17::myvec<int>') can be declared 'const' [misc-const-correctness]
    myvec v1(integer);   // myvec(T) [with T = int]
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:685:11: note: FIX-IT applied suggested code changes
    myvec v1(integer);   // myvec(T) [with T = int]
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:686:5: warning: variable 'v2' of type 'myvec<int>' (aka 'alba::TemplateTypeDeductionWorksForClassesInCpp17::myvec<int>') can be declared 'const' [misc-const-correctness]
    myvec v2(&integer);  // myvec(T*) [with T = int]
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:686:11: note: FIX-IT applied suggested code changes
    myvec v2(&integer);  // myvec(T*) [with T = int]
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:702:5: warning: variable 'v1' of type 'myvec<double>' can be declared 'const' [misc-const-correctness]
    myvec v1(5);    // myvec(int) [with T = double]
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:702:11: note: FIX-IT applied suggested code changes
    myvec v1(5);    // myvec(int) [with T = double]
          ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:703:5: warning: variable 'v2' of type 'myvec<int>' can be declared 'const' [misc-const-correctness]
    myvec v2(5.1);  // myvec(double) [with T = int]
    ^
          const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateExamples_unit.cpp:703:11: note: FIX-IT applied suggested code changes
    myvec v2(5.1);  // myvec(double) [with T = int]
          ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/TemplateExamples/TemplateExamples_unit.cpp:564:32: warning: unused variable 'variable2' [-Wunused-variable]
    NoInstantiationClass<int>* variable2 = nullptr;  // No compiler error.
                               ^
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/TemplateExamples/TemplateExamples_unit.cpp:565:35: warning: unused variable 'variable3' [-Wunused-variable]
    InstantiationClass<int> const variable3;               // No compiler error.
                                  ^
2 warnings generated.
[60/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/TemplateExamples/TemplateIdiomsExamples_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateIdiomsExamples_unit.cpp:115:5: warning: variable 'treeIterator' of type 'TreeIterator<int>' can be declared 'const' [misc-const-correctness]
    TreeIterator<int> treeIterator;
    ^
                      const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateIdiomsExamples_unit.cpp:115:23: note: FIX-IT applied suggested code changes
    TreeIterator<int> treeIterator;
                      ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateIdiomsExamples_unit.cpp:116:5: warning: variable 'vectorIterator' of type 'VectorIterator<int>' can be declared 'const' [misc-const-correctness]
    VectorIterator<int> vectorIterator;
    ^
                        const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateIdiomsExamples_unit.cpp:116:25: note: FIX-IT applied suggested code changes
    VectorIterator<int> vectorIterator;
                        ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateIdiomsExamples_unit.cpp:164:5: warning: variable 'treeIterator' of type 'TreeIterator<int>' can be declared 'const' [misc-const-correctness]
    TreeIterator<int> treeIterator;
    ^
                      const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateIdiomsExamples_unit.cpp:164:23: note: FIX-IT applied suggested code changes
    TreeIterator<int> treeIterator;
                      ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateIdiomsExamples_unit.cpp:165:5: warning: variable 'vectorIterator' of type 'VectorIterator<int>' can be declared 'const' [misc-const-correctness]
    VectorIterator<int> vectorIterator;
    ^
                        const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\TemplateExamples\TemplateIdiomsExamples_unit.cpp:165:25: note: FIX-IT applied suggested code changes
    VectorIterator<int> vectorIterator;
                        ^
[61/62] Building CXX object CMakeFiles/CPlusPlusExamples.dir/tst/ValueCategoriesExamples/ValueCategoriesExamples_unit.cpp.obj
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ValueCategoriesExamples\ValueCategoriesExamples_unit.cpp:16:5: warning: variable 'n' of type 'int' can be declared 'const' [misc-const-correctness]
    int n = 5;
    ^
        const 
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ValueCategoriesExamples\ValueCategoriesExamples_unit.cpp:16:9: note: FIX-IT applied suggested code changes
    int n = 5;
        ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ValueCategoriesExamples\ValueCategoriesExamples_unit.cpp:16:9: warning: unused variable 'n' [clang-diagnostic-unused-variable]
    int n = 5;
        ^
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ValueCategoriesExamples\ValueCategoriesExamples_unit.cpp:40:9: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    foo(move(s));       // calls foo (with rvalue)
        ^
        std::
D:\a\aprg\aprg\CPlusPlusExamples\CPlusPlusExamples\tst\ValueCategoriesExamples\ValueCategoriesExamples_unit.cpp:40:9: note: FIX-IT applied suggested code changes
D:/a/aprg/aprg/CPlusPlusExamples/CPlusPlusExamples/tst/ValueCategoriesExamples/ValueCategoriesExamples_unit.cpp:16:15: warning: unused variable 'n' [-Wunused-variable]
    int const n = 5;
              ^
1 warning generated.
[62/62] Linking CXX executable CPlusPlusExamples.exe
[35m2023-09-11T17:42:26[0m | [33mBuildAndRun.sh:218[0m | The script [BuildAndRun.sh] for [buildOnOneCore] is finished.
DONE!
