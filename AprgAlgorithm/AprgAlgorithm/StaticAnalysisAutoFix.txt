StaticAnalysisJobIdentifier: [011]
2023-09-10T22:36:35
[35m2023-09-10T22:37:34[0m | [33mBuildAndRun.sh:28[0m | The current path is [/d/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm].
[35m2023-09-10T22:37:34[0m | [33mBuildAndRun.sh:29[0m | The scriptPath is [/d/a/aprg/aprg/AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh].
[35m2023-09-10T22:37:34[0m | [33mBuildAndRun.sh:30[0m | The scriptOption is [buildOnOneCore].
[35m2023-09-10T22:37:34[0m | [33mBuildAndRun.sh:31[0m | The buildDirectoryName is [StaticAnalyzersBuild].
[35m2023-09-10T22:37:34[0m | [33mBuildAndRun.sh:32[0m | The argument1 is [Debug] and argument2 is [].
[35m2023-09-10T22:37:35[0m | [33mBuildAndRun.sh:33[0m | The immediateDirectoryName is [AprgAlgorithm].
[35m2023-09-10T22:37:35[0m | [33mBuildAndRun.sh:84[0m | The buildType is [Debug].
[35m2023-09-10T22:37:35[0m | [33mBuildAndRun.sh:85[0m | The numberOfCores is [2].
[35m2023-09-10T22:37:35[0m | [33mBuildAndRun.sh:68[0m | The build path is [/d/a/aprg/aprg/AprgAlgorithm/StaticAnalyzersBuild] and the output of [ls -la --color=auto]:
total 625
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 22:37 .
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 22:36 ..
-rw-r--r-- 1 runneradmin 197121  18095 Sep 10 22:37 CMakeCache.txt
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 22:37 CMakeFiles
-rw-r--r-- 1 runneradmin 197121    552 Sep 10 22:37 CTestTestfile.cmake
-rw-r--r-- 1 runneradmin 197121 598699 Sep 10 22:37 build.ninja
-rw-r--r-- 1 runneradmin 197121   2283 Sep 10 22:37 cmake_install.cmake
[1/305] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc.obj
In file included from D:/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc:49:
D:/a/aprg/aprg/gtest/gtest/googletest\src/gtest.cc:2604:3: warning: extension used [-Wlanguage-extension-token]
  __try {
  ^
1 warning generated.
[2/305] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest_main.cc.obj
[3/305] Linking CXX static library gtest.lib
[4/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Container/AlbaContainerHelper.cpp.obj
[5/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/File/AlbaFileReader.cpp.obj
[6/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Angle/AlbaAngle.cpp.obj
[7/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComplexNumberHelpers.cpp.obj
[8/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComputationHelpers.cpp.obj
[9/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/FactorAndMulitplesHelpers.cpp.obj
[10/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PowerHelpers.cpp.obj
[11/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PrecisionHelpers.cpp.obj
[12/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/StatisticsHelpers.cpp.obj
[13/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaComplexNumber.cpp.obj
[14/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaNumber.cpp.obj
[15/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberInterval.cpp.obj
[16/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalEndpoint.cpp.obj
[17/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalHelpers.cpp.obj
[18/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Ratio/AlbaRatio.cpp.obj
[19/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Memory/AlbaMemoryBuffer.cpp.obj
[20/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaPathHandler.cpp.obj
[21/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaWebPathHandler.cpp.obj
[22/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Print/AlbaPrintFunctions.cpp.obj
[23/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/AlbaOldRandomizer.cpp.obj
[24/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaCombinedEntropySource.cpp.obj
[25/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaEntropySourceBasedOnTime.cpp.obj
[26/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitReader.cpp.obj
[27/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitWriter.cpp.obj
[28/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterReader.cpp.obj
[29/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterWriter.cpp.obj
[30/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/String/AlbaStringHelper.cpp.obj
[31/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTime.cpp.obj
[32/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTimeHelper.cpp.obj
[33/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
1 warning generated.
[34/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimer.cpp.obj
[35/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/AlbaUserInterface.cpp.obj
[36/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/DisplayTable.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:205:67: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
int DisplayTablePrinter::getVerticalBorderLength() const { return m_verticalBorder.length(); }
                                                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:208:12: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return ((m_maxLengthAtColumn.size() + 1) * getVerticalBorderLength()) + m_totalColumnLength;
           ^
[37/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Utility/AlbaScopeGuard.cpp.obj
[38/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/BaseFileReaderTest.cpp.obj
[39/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/FileUtilities.cpp.obj
[40/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/PathHandler/AlbaWindowsPathHandler.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:28:24: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const length = fullPath.length();
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:30:45: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int const indexWithSlashCharacter = fullPath.find_first_of(m_slashCharacterString, index);
                                            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:270:23: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const index = m_directory.find_first_of(m_slashCharacterString + ":");
                      ^
[41/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Time\AlbaWindowsTimeHelper.cpp:6:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return AlbaDateTime(
           ^
[42/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimer.cpp.obj
[43/305] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Windows/AlbaWindowsHelper.cpp.obj
[44/305] Linking CXX static library APRG_COMMON.lib
[45/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Bag/LinkedListBag_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Bag/BaseBag.hpp:8:7: warning: class 'BaseBag' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBag {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Bag\LinkedListBag_unit.cpp:14:5: warning: variable 'bag1' of type 'BagForTest' (aka 'LinkedListBag<int>') can be declared 'const' [misc-const-correctness]
    BagForTest bag1;
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Bag\LinkedListBag_unit.cpp:14:16: note: FIX-IT applied suggested code changes
    BagForTest bag1;
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Bag\LinkedListBag_unit.cpp:23:5: warning: variable 'bag1' of type 'BagForTest' (aka 'LinkedListBag<int>') can be declared 'const' [misc-const-correctness]
    BagForTest bag1;
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Bag\LinkedListBag_unit.cpp:23:16: note: FIX-IT applied suggested code changes
    BagForTest bag1;
               ^
[46/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Combinations/Combinations/CombinationsGeneration_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsGeneration_unit.cpp:16:5: warning: variable 'actualCombinations' of type 'Combinations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Combinations actualCombinations(GenerationForTest::generateCombinationsWithLength({1, 3, 5}, 2));
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsGeneration_unit.cpp:16:18: note: FIX-IT applied suggested code changes
    Combinations actualCombinations(GenerationForTest::generateCombinationsWithLength({1, 3, 5}, 2));
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsGeneration_unit.cpp:18:5: warning: variable 'expectedCombinations' of type 'Combinations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Combinations expectedCombinations{{1, 3}, {1, 5}, {3, 5}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsGeneration_unit.cpp:18:18: note: FIX-IT applied suggested code changes
    Combinations expectedCombinations{{1, 3}, {1, 5}, {3, 5}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsGeneration_unit.cpp:23:5: warning: variable 'actualCombinations' of type 'Combinations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Combinations actualCombinations(GenerationForTest::generateCombinationsWithLength({1, 3, 5}, 3));
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsGeneration_unit.cpp:23:18: note: FIX-IT applied suggested code changes
    Combinations actualCombinations(GenerationForTest::generateCombinationsWithLength({1, 3, 5}, 3));
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsGeneration_unit.cpp:25:5: warning: variable 'expectedCombinations' of type 'Combinations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Combinations expectedCombinations{{1, 3, 5}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsGeneration_unit.cpp:25:18: note: FIX-IT applied suggested code changes
    Combinations expectedCombinations{{1, 3, 5}};
                 ^
[47/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Combinations/Combinations/CombinationsWithSum_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Combinations/CombinationsWithSum.hpp:22:13: warning: variable 'newSize' of type 'int' can be declared 'const' [misc-const-correctness]
            int newSize = std::max(total + 1, *maxIt);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Combinations/CombinationsWithSum.hpp:22:17: note: FIX-IT applied suggested code changes
            int newSize = std::max(total + 1, *maxIt);
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Combinations/CombinationsWithSum.hpp:28:21: warning: variable 'subCombinations' of type 'Combinations' (aka 'set<multiset<int>>') can be declared 'const' [misc-const-correctness]
                    Combinations subCombinations(getCombinationsWithSumUsingRecursion(total - inputValue));
                    ^
                                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Combinations/CombinationsWithSum.hpp:28:34: note: FIX-IT applied suggested code changes
                    Combinations subCombinations(getCombinationsWithSumUsingRecursion(total - inputValue));
                                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Combinations/CombinationsWithSum.hpp:45:13: warning: variable 'initialValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value initialValue = m_combinations.size();
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Combinations/CombinationsWithSum.hpp:45:19: note: FIX-IT applied suggested code changes
            Value initialValue = m_combinations.size();
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Combinations/CombinationsWithSum.hpp:46:13: warning: variable 'newSize' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value newSize =
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Combinations/CombinationsWithSum.hpp:46:19: note: FIX-IT applied suggested code changes
            Value newSize =
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:16:5: warning: variable 'inputValues' of type 'Values' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Values inputValues{1, 2, 3, 4};
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:16:12: note: FIX-IT applied suggested code changes
    Values inputValues{1, 2, 3, 4};
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:19:5: warning: variable 'actualCombinations' of type 'Combinations' (aka 'set<multiset<int>>') can be declared 'const' [misc-const-correctness]
    Combinations actualCombinations(generation.getCombinationsWithSumUsingRecursion(4));
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:19:18: note: FIX-IT applied suggested code changes
    Combinations actualCombinations(generation.getCombinationsWithSumUsingRecursion(4));
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:21:5: warning: variable 'expectedCombinations' of type 'Combinations' (aka 'set<multiset<int>>') can be declared 'const' [misc-const-correctness]
    Combinations expectedCombinations{{1, 1, 1, 1}, {1, 1, 2}, {1, 3}, {2, 2}, {4}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:21:18: note: FIX-IT applied suggested code changes
    Combinations expectedCombinations{{1, 1, 1, 1}, {1, 1, 2}, {1, 3}, {2, 2}, {4}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:26:5: warning: variable 'inputValues' of type 'Values' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Values inputValues{1, 2, 3, 4};
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:26:12: note: FIX-IT applied suggested code changes
    Values inputValues{1, 2, 3, 4};
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:29:5: warning: variable 'actualCombinations' of type 'Combinations' (aka 'set<multiset<int>>') can be declared 'const' [misc-const-correctness]
    Combinations actualCombinations(generation.getCombinationsWithSumUsingLoops(4));
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:29:18: note: FIX-IT applied suggested code changes
    Combinations actualCombinations(generation.getCombinationsWithSumUsingLoops(4));
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:31:5: warning: variable 'expectedCombinations' of type 'Combinations' (aka 'set<multiset<int>>') can be declared 'const' [misc-const-correctness]
    Combinations expectedCombinations{{1, 1, 1, 1}, {1, 1, 2}, {1, 3}, {2, 2}, {4}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Combinations\CombinationsWithSum_unit.cpp:31:18: note: FIX-IT applied suggested code changes
    Combinations expectedCombinations{{1, 1, 1, 1}, {1, 1, 2}, {1, 3}, {2, 2}, {4}};
                 ^
[48/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Combinations/Permutations/PermutationsGeneration_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:16:5: warning: variable 'actualPermutations' of type 'Permutations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Permutations actualPermutations(GenerationForTest::generatePermutationsUsingCppFunctions({1, 3, 5}));
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:16:18: note: FIX-IT applied suggested code changes
    Permutations actualPermutations(GenerationForTest::generatePermutationsUsingCppFunctions({1, 3, 5}));
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:18:5: warning: variable 'expectedPermutations' of type 'Permutations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Permutations expectedPermutations{{1, 3, 5}, {1, 5, 3}, {3, 1, 5}, {3, 5, 1}, {5, 1, 3}, {5, 3, 1}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:18:18: note: FIX-IT applied suggested code changes
    Permutations expectedPermutations{{1, 3, 5}, {1, 5, 3}, {3, 1, 5}, {3, 5, 1}, {5, 1, 3}, {5, 3, 1}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:23:5: warning: variable 'actualPermutations' of type 'Permutations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Permutations actualPermutations(GenerationForTest::generatePermutationsByBuilding({1, 3, 5}));
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:23:18: note: FIX-IT applied suggested code changes
    Permutations actualPermutations(GenerationForTest::generatePermutationsByBuilding({1, 3, 5}));
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:25:5: warning: variable 'expectedPermutations' of type 'Permutations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Permutations expectedPermutations{{1, 3, 5}, {1, 5, 3}, {3, 1, 5}, {3, 5, 1}, {5, 1, 3}, {5, 3, 1}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:25:18: note: FIX-IT applied suggested code changes
    Permutations expectedPermutations{{1, 3, 5}, {1, 5, 3}, {3, 1, 5}, {3, 5, 1}, {5, 1, 3}, {5, 3, 1}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:30:5: warning: variable 'actualPermutations' of type 'Permutations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Permutations actualPermutations(GenerationForTest::generatePermutationsByBuildingWithLength({1, 3, 5}, 2));
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:30:18: note: FIX-IT applied suggested code changes
    Permutations actualPermutations(GenerationForTest::generatePermutationsByBuildingWithLength({1, 3, 5}, 2));
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:32:5: warning: variable 'expectedPermutations' of type 'Permutations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Permutations expectedPermutations{{1, 3}, {1, 5}, {3, 1}, {3, 5}, {5, 1}, {5, 3}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:32:18: note: FIX-IT applied suggested code changes
    Permutations expectedPermutations{{1, 3}, {1, 5}, {3, 1}, {3, 5}, {5, 1}, {5, 3}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:37:5: warning: variable 'actualPermutations' of type 'Permutations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Permutations actualPermutations(GenerationForTest::generatePermutationsBySwapping({1, 3, 5}));
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:37:18: note: FIX-IT applied suggested code changes
    Permutations actualPermutations(GenerationForTest::generatePermutationsBySwapping({1, 3, 5}));
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:39:5: warning: variable 'expectedPermutations' of type 'Permutations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Permutations expectedPermutations{{1, 3, 5}, {1, 5, 3}, {3, 1, 5}, {3, 5, 1}, {5, 3, 1}, {5, 1, 3}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:39:18: note: FIX-IT applied suggested code changes
    Permutations expectedPermutations{{1, 3, 5}, {1, 5, 3}, {3, 1, 5}, {3, 5, 1}, {5, 3, 1}, {5, 1, 3}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:44:5: warning: variable 'actualPermutations' of type 'Permutations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Permutations actualPermutations(GenerationForTest::generatePermutationsBySwappingInRange({1, 3, 5, 7}, 1, 2));
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:44:18: note: FIX-IT applied suggested code changes
    Permutations actualPermutations(GenerationForTest::generatePermutationsBySwappingInRange({1, 3, 5, 7}, 1, 2));
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:46:5: warning: variable 'expectedPermutations' of type 'Permutations' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Permutations expectedPermutations{{{1, 3, 5, 7}, {1, 5, 3, 7}}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsGeneration_unit.cpp:46:18: note: FIX-IT applied suggested code changes
    Permutations expectedPermutations{{{1, 3, 5, 7}, {1, 5, 3, 7}}};
                 ^
[49/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Combinations/Permutations/PermutationsWithSum_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Permutations/PermutationsWithSum.hpp:21:13: warning: variable 'initialValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value initialValue = m_permutations.size();
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Permutations/PermutationsWithSum.hpp:21:19: note: FIX-IT applied suggested code changes
            Value initialValue = m_permutations.size();
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Permutations/PermutationsWithSum.hpp:23:13: warning: variable 'newSize' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value newSize = std::max(total + 1, *maxIt);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Combinatorics/Permutations/PermutationsWithSum.hpp:23:19: note: FIX-IT applied suggested code changes
            Value newSize = std::max(total + 1, *maxIt);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsWithSum_unit.cpp:16:5: warning: variable 'inputValues' of type 'Values' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Values inputValues{1, 2, 3, 4};
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsWithSum_unit.cpp:16:12: note: FIX-IT applied suggested code changes
    Values inputValues{1, 2, 3, 4};
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsWithSum_unit.cpp:19:5: warning: variable 'actualPermutations' of type 'Permutations' (aka 'set<vector<int>>') can be declared 'const' [misc-const-correctness]
    Permutations actualPermutations(generation.getPermutationsWithSumUsingLoops(4));
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsWithSum_unit.cpp:19:18: note: FIX-IT applied suggested code changes
    Permutations actualPermutations(generation.getPermutationsWithSumUsingLoops(4));
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsWithSum_unit.cpp:21:5: warning: variable 'expectedPermutations' of type 'Permutations' (aka 'set<vector<int>>') can be declared 'const' [misc-const-correctness]
    Permutations expectedPermutations{{1, 1, 1, 1}, {1, 1, 2}, {1, 2, 1}, {1, 3}, {2, 1, 1}, {2, 2}, {3, 1}, {4}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Permutations\PermutationsWithSum_unit.cpp:21:18: note: FIX-IT applied suggested code changes
    Permutations expectedPermutations{{1, 1, 1, 1}, {1, 1, 2}, {1, 2, 1}, {1, 3}, {2, 1, 1}, {2, 2}, {3, 1}, {4}};
                 ^
[50/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Combinations/Possibilities/PossibilitiesGeneration_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Possibilities\PossibilitiesGeneration_unit.cpp:16:5: warning: variable 'actualPossibilities' of type 'Possibilities' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Possibilities actualPossibilities(GenerationForTest::generatePossibilitiesUsingRecursion({1, 3, 5}));
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Possibilities\PossibilitiesGeneration_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    Possibilities actualPossibilities(GenerationForTest::generatePossibilitiesUsingRecursion({1, 3, 5}));
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Possibilities\PossibilitiesGeneration_unit.cpp:18:5: warning: variable 'expectedPossibilities' of type 'Possibilities' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Possibilities expectedPossibilities{{1, 1, 1}, {1, 1, 3}, {1, 1, 5}, {1, 3, 1}, {1, 3, 3}, {1, 3, 5}, {1, 5, 1},
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Possibilities\PossibilitiesGeneration_unit.cpp:18:19: note: FIX-IT applied suggested code changes
    Possibilities expectedPossibilities{{1, 1, 1}, {1, 1, 3}, {1, 1, 5}, {1, 3, 1}, {1, 3, 3}, {1, 3, 5}, {1, 5, 1},
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Possibilities\PossibilitiesGeneration_unit.cpp:26:5: warning: variable 'actualPossibilities' of type 'Possibilities' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Possibilities actualPossibilities(GenerationForTest::generatePossibilitiesWithLength({1, 3, 5}, 2));
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Possibilities\PossibilitiesGeneration_unit.cpp:26:19: note: FIX-IT applied suggested code changes
    Possibilities actualPossibilities(GenerationForTest::generatePossibilitiesWithLength({1, 3, 5}, 2));
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Possibilities\PossibilitiesGeneration_unit.cpp:28:5: warning: variable 'expectedPossibilities' of type 'Possibilities' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Possibilities expectedPossibilities{{1, 1}, {1, 3}, {1, 5}, {3, 1}, {3, 3}, {3, 5}, {5, 1}, {5, 3}, {5, 5}};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Possibilities\PossibilitiesGeneration_unit.cpp:28:19: note: FIX-IT applied suggested code changes
    Possibilities expectedPossibilities{{1, 1}, {1, 3}, {1, 5}, {3, 1}, {3, 3}, {3, 5}, {5, 1}, {5, 3}, {5, 5}};
                  ^
[51/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Combinations/Subsets/SubsetGenerationUsingBits_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingBits_unit.cpp:16:5: warning: variable 'actualSubsets' of type 'Subsets' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Subsets actualSubsets(GenerationForTest::generateSubsetsUsingBits({1, 3, 5}));
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingBits_unit.cpp:16:13: note: FIX-IT applied suggested code changes
    Subsets actualSubsets(GenerationForTest::generateSubsetsUsingBits({1, 3, 5}));
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingBits_unit.cpp:18:5: warning: variable 'expectedSubsets' of type 'Subsets' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Subsets expectedSubsets{{}, {1}, {3}, {1, 3}, {5}, {1, 5}, {3, 5}, {1, 3, 5}};
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingBits_unit.cpp:18:13: note: FIX-IT applied suggested code changes
    Subsets expectedSubsets{{}, {1}, {3}, {1, 3}, {5}, {1, 5}, {3, 5}, {1, 3, 5}};
            ^
[52/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Combinations/Subsets/SubsetGenerationUsingRecursion_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingRecursion_unit.cpp:16:5: warning: variable 'actualSubsets' of type 'Subsets' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Subsets actualSubsets(GenerationForTest::generateOrderedSubsetsUsingDfs({1, 3, 5}));
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingRecursion_unit.cpp:16:13: note: FIX-IT applied suggested code changes
    Subsets actualSubsets(GenerationForTest::generateOrderedSubsetsUsingDfs({1, 3, 5}));
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingRecursion_unit.cpp:18:5: warning: variable 'expectedSubsets' of type 'Subsets' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Subsets expectedSubsets{{}, {1}, {1, 3}, {1, 3, 5}, {1, 5}, {3}, {3, 5}, {5}};
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingRecursion_unit.cpp:18:13: note: FIX-IT applied suggested code changes
    Subsets expectedSubsets{{}, {1}, {1, 3}, {1, 3, 5}, {1, 5}, {3}, {3, 5}, {5}};
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingRecursion_unit.cpp:23:5: warning: variable 'actualSubsets' of type 'Subsets' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Subsets actualSubsets(GenerationForTest::generateSubsetsUsingOnlyRecursion({1, 3, 5}));
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingRecursion_unit.cpp:23:13: note: FIX-IT applied suggested code changes
    Subsets actualSubsets(GenerationForTest::generateSubsetsUsingOnlyRecursion({1, 3, 5}));
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingRecursion_unit.cpp:25:5: warning: variable 'expectedSubsets' of type 'Subsets' (aka 'vector<std::vector<int, std::allocator<int>>>') can be declared 'const' [misc-const-correctness]
    Subsets expectedSubsets{{}, {5}, {3}, {3, 5}, {1}, {1, 5}, {1, 3}, {1, 3, 5}};
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Combinations\Subsets\SubsetGenerationUsingRecursion_unit.cpp:25:13: note: FIX-IT applied suggested code changes
    Subsets expectedSubsets{{}, {5}, {3}, {3, 5}, {1}, {1, 5}, {1, 3}, {1, 3, 5}};
            ^
[53/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/DataCompression/BurrowsWheelerTransform_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/BurrowsWheelerTransform.hpp:24:9: warning: variable 'suffixArray' of type 'SuffixArray<int>' can be declared 'const' [misc-const-correctness]
        SuffixArray<Index> suffixArray(wholeInputString);
        ^
                           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/BurrowsWheelerTransform.hpp:24:28: note: FIX-IT applied suggested code changes
        SuffixArray<Index> suffixArray(wholeInputString);
                           ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/BurrowsWheelerTransform.hpp:42:9: warning: variable 'wholeInputString' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        std::string wholeInputString(reader.readWholeStreamAsStringData());
        ^
                    const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/BurrowsWheelerTransform.hpp:42:21: note: FIX-IT applied suggested code changes
        std::string wholeInputString(reader.readWholeStreamAsStringData());
                    ^
[54/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/DataCompression/HuffmanCompression_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:67:9: warning: variable 'allInputCharacters' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
        Characters allInputCharacters(readAllCharacters(reader));
        ^
                   const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:67:20: note: FIX-IT applied suggested code changes
        Characters allInputCharacters(readAllCharacters(reader));
                   ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:68:9: warning: variable 'frequency' of type 'FrequencyOfEachCharacter' (aka 'array<int, RADIX>') can be declared 'const' [misc-const-correctness]
        FrequencyOfEachCharacter frequency(getFrequencyOfEachCharacter(allInputCharacters));
        ^
                                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:68:34: note: FIX-IT applied suggested code changes
        FrequencyOfEachCharacter frequency(getFrequencyOfEachCharacter(allInputCharacters));
                                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:70:9: warning: variable 'root' of type 'TrieNodeUniquePointer' (aka 'unique_ptr<TrieNode>') can be declared 'const' [misc-const-correctness]
        TrieNodeUniquePointer root(buildTrie(frequency));
        ^
                              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:70:31: note: FIX-IT applied suggested code changes
        TrieNodeUniquePointer root(buildTrie(frequency));
                              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:71:9: warning: variable 'huffmanCodeTable' of type 'HuffmanCodeTable' (aka 'array<vector<bool>, RADIX>') can be declared 'const' [misc-const-correctness]
        HuffmanCodeTable huffmanCodeTable(buildHuffmanCodeTableFromTrie(root));
        ^
                         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:71:26: note: FIX-IT applied suggested code changes
        HuffmanCodeTable huffmanCodeTable(buildHuffmanCodeTableFromTrie(root));
                         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:82:9: warning: variable 'root' of type 'TrieNodeUniquePointer' (aka 'unique_ptr<TrieNode>') can be declared 'const' [misc-const-correctness]
        TrieNodeUniquePointer root(readTrie(reader));
        ^
                              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:82:31: note: FIX-IT applied suggested code changes
        TrieNodeUniquePointer root(readTrie(reader));
                              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:110:13: warning: variable 'bit' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool bit(reader.readBoolData());
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:110:18: note: FIX-IT applied suggested code changes
            bool bit(reader.readBoolData());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:158:13: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
            char c(reader.readCharData());
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:158:18: note: FIX-IT applied suggested code changes
            char c(reader.readCharData());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:184:9: warning: variable 'bit' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool bit(reader.readBoolData());
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:184:14: note: FIX-IT applied suggested code changes
        bool bit(reader.readBoolData());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:188:17: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
                char c(reader.readCharData());
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:188:22: note: FIX-IT applied suggested code changes
                char c(reader.readCharData());
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:219:13: warning: variable 'first' of type 'CharacterFrequency' can be declared 'const' [misc-const-correctness]
            CharacterFrequency first(frequenciesInMinimumOrder.top());
            ^
                               const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:219:32: note: FIX-IT applied suggested code changes
            CharacterFrequency first(frequenciesInMinimumOrder.top());
                               ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:221:13: warning: variable 'second' of type 'CharacterFrequency' can be declared 'const' [misc-const-correctness]
            CharacterFrequency second(frequenciesInMinimumOrder.top());
            ^
                               const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:221:32: note: FIX-IT applied suggested code changes
            CharacterFrequency second(frequenciesInMinimumOrder.top());
                               ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:231:9: warning: variable 'last' of type 'CharacterFrequency' can be declared 'const' [misc-const-correctness]
        CharacterFrequency last(frequenciesInMinimumOrder.top());
        ^
                           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/HuffmanCompression.hpp:231:28: note: FIX-IT applied suggested code changes
        CharacterFrequency last(frequenciesInMinimumOrder.top());
                           ^
[55/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/DataCompression/LzwCompression_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/LzwCompression.hpp:33:13: warning: variable 'bestTrieMatch' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
            std::string bestTrieMatch(codeTrie.getLongestPrefixOf(wholeInputString));  // find longest prefix match
            ^
                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/LzwCompression.hpp:33:25: note: FIX-IT applied suggested code changes
            std::string bestTrieMatch(codeTrie.getLongestPrefixOf(wholeInputString));  // find longest prefix match
                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/LzwCompression.hpp:94:9: warning: variable 'bitsetToWrite' of type 'std::bitset<CODE_WORD_WIDTH>' can be declared 'const' [misc-const-correctness]
        std::bitset<CODE_WORD_WIDTH> bitsetToWrite(code);
        ^
                                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/LzwCompression.hpp:94:38: note: FIX-IT applied suggested code changes
        std::bitset<CODE_WORD_WIDTH> bitsetToWrite(code);
                                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/LzwCompression.hpp:99:9: warning: variable 'bitsetCodeword' of type 'std::bitset<CODE_WORD_WIDTH>' can be declared 'const' [misc-const-correctness]
        std::bitset<CODE_WORD_WIDTH> bitsetCodeword(reader.readBitsetData<CODE_WORD_WIDTH>(CODE_WORD_WIDTH - 1, 0));
        ^
                                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/DataCompression/LzwCompression.hpp:99:38: note: FIX-IT applied suggested code changes
        std::bitset<CODE_WORD_WIDTH> bitsetCodeword(reader.readBitsetData<CODE_WORD_WIDTH>(CODE_WORD_WIDTH - 1, 0));
                                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseStringSymbolTable.hpp:9:7: warning: class 'BaseStringSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStringSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseTernarySearchTrie.hpp:10:7: warning: class 'BaseTernarySearchTrie' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTernarySearchTrie : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseTernarySearchTrie.hpp:22:9: warning: variable 'longestPrefixLength' of type 'int' can be declared 'const' [misc-const-correctness]
        int longestPrefixLength(getLengthOfLongestPrefixStartingOnThisNode(m_root, keyToCheck, 0));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseTernarySearchTrie.hpp:22:13: note: FIX-IT applied suggested code changes
        int longestPrefixLength(getLengthOfLongestPrefixStartingOnThisNode(m_root, keyToCheck, 0));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseTernarySearchTrie.hpp:69:13: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
            char c(key[index]);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseTernarySearchTrie.hpp:69:18: note: FIX-IT applied suggested code changes
            char c(key[index]);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:58:9: warning: variable 'charAtKey' of type 'char' can be declared 'const' [misc-const-correctness]
        char charAtKey(key[index]);
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:58:14: note: FIX-IT applied suggested code changes
        char charAtKey(key[index]);
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:90:13: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
            char c(keyToCheck[index]);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:90:18: note: FIX-IT applied suggested code changes
            char c(keyToCheck[index]);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:117:13: warning: variable 'currentPrefix' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
            std::string currentPrefix(previousPrefix + currentNodePointer->c);
            ^
                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:117:25: note: FIX-IT applied suggested code changes
            std::string currentPrefix(previousPrefix + currentNodePointer->c);
                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:130:13: warning: variable 'previousPrefixLength' of type 'int' can be declared 'const' [misc-const-correctness]
            int previousPrefixLength = previousPrefix.length();
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:130:17: note: FIX-IT applied suggested code changes
            int previousPrefixLength = previousPrefix.length();
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:130:40: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int previousPrefixLength = previousPrefix.length();
                                       ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:131:13: warning: variable 'lastIndexToMatch' of type 'int' can be declared 'const' [misc-const-correctness]
            int lastIndexToMatch = patternToMatch.length() - 1;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:131:17: note: FIX-IT applied suggested code changes
            int lastIndexToMatch = patternToMatch.length() - 1;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:132:13: warning: variable 'currentChar' of type 'char' can be declared 'const' [misc-const-correctness]
            char currentChar = currentNodePointer->c;
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:132:18: note: FIX-IT applied suggested code changes
            char currentChar = currentNodePointer->c;
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:133:13: warning: variable 'charToMatch' of type 'char' can be declared 'const' [misc-const-correctness]
            char charToMatch = patternToMatch[previousPrefixLength];
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:133:18: note: FIX-IT applied suggested code changes
            char charToMatch = patternToMatch[previousPrefixLength];
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:134:13: warning: variable 'currentPrefix' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
            std::string currentPrefix(previousPrefix + currentNodePointer->c);
            ^
                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:134:25: note: FIX-IT applied suggested code changes
            std::string currentPrefix(previousPrefix + currentNodePointer->c);
                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:163:13: warning: variable 'lastIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int lastIndex = key.length() - 1;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:163:17: note: FIX-IT applied suggested code changes
            int lastIndex = key.length() - 1;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:166:17: warning: variable 'charAtKey' of type 'char' can be declared 'const' [misc-const-correctness]
                char charAtKey(key[index]);
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:166:22: note: FIX-IT applied suggested code changes
                char charAtKey(key[index]);
                     ^
[56/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/DataCompression/RunLengthEncodingCompression_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\DataCompression\RunLengthEncodingCompression_unit.cpp:18:5: warning: variable 'initialValue' of type 'bitset<40>' can be declared 'const' [misc-const-correctness]
    bitset<40> initialValue(0B0000000000000001111111000000011111111111);
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\DataCompression\RunLengthEncodingCompression_unit.cpp:18:16: note: FIX-IT applied suggested code changes
    bitset<40> initialValue(0B0000000000000001111111000000011111111111);
               ^
[57/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/ExpressionEvaluator/ExpressionEvaluator_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:132:13: warning: variable 'operatorTerm' of type 'Term' (aka 'ExpressionEvaluatorTerm<int, std::basic_string<char, std::char_traits<char>, std::allocator<char>>>') can be declared 'const' [misc-const-correctness]
            Term operatorTerm(operatorStack.top());
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:132:18: note: FIX-IT applied suggested code changes
            Term operatorTerm(operatorStack.top());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:249:21: warning: variable 'expressionOperand' of type 'Terms' (aka 'vector<ExpressionEvaluatorTerm<int, std::basic_string<char, std::char_traits<char>, std::allocator<char>>>>') can be declared 'const' [misc-const-correctness]
                    Terms expressionOperand = popTermsStackAndReturnTopValue(expressionsStack);
                    ^
                          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:249:27: note: FIX-IT applied suggested code changes
                    Terms expressionOperand = popTermsStackAndReturnTopValue(expressionsStack);
                          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:255:21: warning: variable 'expressionOperand1' of type 'Terms' (aka 'vector<ExpressionEvaluatorTerm<int, std::basic_string<char, std::char_traits<char>, std::allocator<char>>>>') can be declared 'const' [misc-const-correctness]
                    Terms expressionOperand1 = popTermsStackAndReturnTopValue(expressionsStack);
                    ^
                          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:255:27: note: FIX-IT applied suggested code changes
                    Terms expressionOperand1 = popTermsStackAndReturnTopValue(expressionsStack);
                          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:256:21: warning: variable 'expressionOperand2' of type 'Terms' (aka 'vector<ExpressionEvaluatorTerm<int, std::basic_string<char, std::char_traits<char>, std::allocator<char>>>>') can be declared 'const' [misc-const-correctness]
                    Terms expressionOperand2 = popTermsStackAndReturnTopValue(expressionsStack);
                    ^
                          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:256:27: note: FIX-IT applied suggested code changes
                    Terms expressionOperand2 = popTermsStackAndReturnTopValue(expressionsStack);
                          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:266:13: warning: variable 'finalExpression' of type 'Terms' (aka 'vector<ExpressionEvaluatorTerm<int, std::basic_string<char, std::char_traits<char>, std::allocator<char>>>>') can be declared 'const' [misc-const-correctness]
            Terms finalExpression = expressionsStack.top();
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:266:19: note: FIX-IT applied suggested code changes
            Terms finalExpression = expressionsStack.top();
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:312:9: warning: variable 'areGroupOperatorsNeeded' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool areGroupOperatorsNeeded = inputTerms.size() > 1;
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/ExpressionEvaluator/ExpressionEvaluator.hpp:312:14: note: FIX-IT applied suggested code changes
        bool areGroupOperatorsNeeded = inputTerms.size() > 1;
             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\ExpressionEvaluator\ExpressionEvaluator_unit.cpp:305:5: warning: variable 'infixEvaluator' of type 'InfixEvaluatorForTest' (aka 'ExpressionInfixEvaluator<int, basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    InfixEvaluatorForTest infixEvaluator(EvaluatorConverterForTest::convertPostfixToInfix(postfixEvaluator));
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\ExpressionEvaluator\ExpressionEvaluator_unit.cpp:305:27: note: FIX-IT applied suggested code changes
    InfixEvaluatorForTest infixEvaluator(EvaluatorConverterForTest::convertPostfixToInfix(postfixEvaluator));
                          ^
[58/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Bipartite/BipartiteCheckerUsingDfs_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/BipartiteCheckerUsingDfs.hpp:50:9: warning: variable 'vertices' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Vertices vertices(m_graph.getVertices());
        ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/BipartiteCheckerUsingDfs.hpp:50:18: note: FIX-IT applied suggested code changes
        Vertices vertices(m_graph.getVertices());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/BipartiteCheckerUsingDfs.hpp:67:9: warning: variable 'vertexColor' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool vertexColor(m_vertexToColorMap[vertex]);
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/BipartiteCheckerUsingDfs.hpp:67:14: note: FIX-IT applied suggested code changes
        bool vertexColor(m_vertexToColorMap[vertex]);
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:25:5: warning: variable 'bipartiteChecker' of type 'BipartiteCheckerForTest' (aka 'BipartiteCheckerUsingDfs<int>') can be declared 'const' [misc-const-correctness]
    BipartiteCheckerForTest bipartiteChecker(nonBipartiteGraph);
    ^
                            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:25:29: note: FIX-IT applied suggested code changes
    BipartiteCheckerForTest bipartiteChecker(nonBipartiteGraph);
                            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:29:5: warning: variable 'expectedWithFirstColor' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices expectedWithFirstColor{0, 4};
    ^
             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:29:14: note: FIX-IT applied suggested code changes
    Vertices expectedWithFirstColor{0, 4};
             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:30:5: warning: variable 'expectedWithSecondColor' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices expectedWithSecondColor{1, 2, 3, 5};
    ^
             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:30:14: note: FIX-IT applied suggested code changes
    Vertices expectedWithSecondColor{1, 2, 3, 5};
             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:53:5: warning: variable 'bipartiteChecker' of type 'BipartiteCheckerForTest' (aka 'BipartiteCheckerUsingDfs<int>') can be declared 'const' [misc-const-correctness]
    BipartiteCheckerForTest bipartiteChecker(bipartiteGraph);
    ^
                            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:53:29: note: FIX-IT applied suggested code changes
    BipartiteCheckerForTest bipartiteChecker(bipartiteGraph);
                            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:57:5: warning: variable 'expectedWithFirstColor' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices expectedWithFirstColor{0, 4, 6};
    ^
             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:57:14: note: FIX-IT applied suggested code changes
    Vertices expectedWithFirstColor{0, 4, 6};
             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:58:5: warning: variable 'expectedWithSecondColor' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices expectedWithSecondColor{1, 2, 3, 5};
    ^
             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\BipartiteCheckerUsingDfs_unit.cpp:58:14: note: FIX-IT applied suggested code changes
    Vertices expectedWithSecondColor{1, 2, 3, 5};
             ^
[59/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Bipartite/MaximumMatchings_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/MaximumMatchings.hpp:35:13: warning: variable 'fordFulkerson' of type 'FordFulkerson' (aka 'FordFulkersonUsingBfs<SinkSourceFlowNetwork<int, int, DirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
            FordFulkerson fordFulkerson(getFlowNetwork(m_graph, newSourceVertex, newSinkVertex));
            ^
                          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/MaximumMatchings.hpp:35:27: note: FIX-IT applied suggested code changes
            FordFulkerson fordFulkerson(getFlowNetwork(m_graph, newSourceVertex, newSinkVertex));
                          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/MaximumMatchings.hpp:56:21: warning: variable 'adjacentVertices' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
                    Vertices adjacentVertices(m_graph.getAdjacentVerticesAt(vertexInSubset));
                    ^
                             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/MaximumMatchings.hpp:56:30: note: FIX-IT applied suggested code changes
                    Vertices adjacentVertices(m_graph.getAdjacentVerticesAt(vertexInSubset));
                             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/MaximumMatchings.hpp:96:13: warning: variable 'startVertexColor' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool startVertexColor = m_bipartiteChecker.hasFirstColor(startVertexOfEdge);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/MaximumMatchings.hpp:96:18: note: FIX-IT applied suggested code changes
            bool startVertexColor = m_bipartiteChecker.hasFirstColor(startVertexOfEdge);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/MaximumMatchings.hpp:97:13: warning: variable 'endVertexColor' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool endVertexColor = m_bipartiteChecker.hasFirstColor(endVertexOfEdge);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Bipartite/MaximumMatchings.hpp:97:18: note: FIX-IT applied suggested code changes
            bool endVertexColor = m_bipartiteChecker.hasFirstColor(endVertexOfEdge);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/DirectedGraphWithListOfEdges.hpp:37:9: warning: variable 'uniqueVertices' of type 'SetOfVertices' (aka 'set<int>') can be declared 'const' [misc-const-correctness]
        SetOfVertices uniqueVertices(getUniqueVertices());
        ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/DirectedGraphWithListOfEdges.hpp:37:23: note: FIX-IT applied suggested code changes
        SetOfVertices uniqueVertices(getUniqueVertices());
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/BaseFordFulkerson.hpp:12:7: warning: class 'BaseFordFulkerson' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseFordFulkerson {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/BaseFordFulkerson.hpp:80:13: warning: variable 'firstVertex' of type 'Vertex' (aka 'int') can be declared 'const' [misc-const-correctness]
            Vertex firstVertex(m_vertexToAugmentingPathEdgeMap.cbegin()->first);
            ^
                   const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/BaseFordFulkerson.hpp:80:20: note: FIX-IT applied suggested code changes
            Vertex firstVertex(m_vertexToAugmentingPathEdgeMap.cbegin()->first);
                   ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/FordFulkersonUsingBfs.hpp:39:13: warning: variable 'vertex' of type 'Vertex' (aka 'int') can be declared 'const' [misc-const-correctness]
            Vertex vertex(queueOfVerticesToProcess.back());
            ^
                   const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/FordFulkersonUsingBfs.hpp:39:20: note: FIX-IT applied suggested code changes
            Vertex vertex(queueOfVerticesToProcess.back());
                   ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/FordFulkersonUsingBfs.hpp:42:17: warning: variable 'otherVertex' of type 'Vertex' (aka 'int') can be declared 'const' [misc-const-correctness]
                Vertex otherVertex(flowEdge.getTheOtherVertex(vertex));
                ^
                       const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/FordFulkersonUsingBfs.hpp:42:24: note: FIX-IT applied suggested code changes
                Vertex otherVertex(flowEdge.getTheOtherVertex(vertex));
                       ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\MaximumMatchings_unit.cpp:27:5: warning: variable 'maximumMatchings' of type 'MaximumMatchingsForTest' (aka 'MaximumMatchings<int>') can be declared 'const' [misc-const-correctness]
    MaximumMatchingsForTest maximumMatchings(graph);
    ^
                            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\MaximumMatchings_unit.cpp:27:29: note: FIX-IT applied suggested code changes
    MaximumMatchingsForTest maximumMatchings(graph);
                            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\MaximumMatchings_unit.cpp:29:5: warning: variable 'expectedMatchings' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges expectedMatchings{{1, 5}, {2, 7}, {3, 6}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\MaximumMatchings_unit.cpp:29:11: note: FIX-IT applied suggested code changes
    Edges expectedMatchings{{1, 5}, {2, 7}, {3, 6}};
          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\MaximumMatchings_unit.cpp:41:5: warning: variable 'maximumMatchings' of type 'MaximumMatchingsForTest' (aka 'MaximumMatchings<int>') can be declared 'const' [misc-const-correctness]
    MaximumMatchingsForTest maximumMatchings(graph);
    ^
                            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Bipartite\MaximumMatchings_unit.cpp:41:29: note: FIX-IT applied suggested code changes
    MaximumMatchingsForTest maximumMatchings(graph);
                            ^
[60/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/ConnectedComponents/ConnectedComponentsUsingDfs_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\ConnectedComponents\ConnectedComponentsUsingDfs_unit.cpp:40:5: warning: variable 'connectedComponents' of type 'ConnectedComponentsForTest' (aka 'ConnectedComponentsUsingDfs<int>') can be declared 'const' [misc-const-correctness]
    ConnectedComponentsForTest connectedComponents(graph);
    ^
                               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\ConnectedComponents\ConnectedComponentsUsingDfs_unit.cpp:40:32: note: FIX-IT applied suggested code changes
    ConnectedComponentsForTest connectedComponents(graph);
                               ^
[61/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/ConnectedComponents/ConnectedComponentsUsingUnionFind_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\ConnectedComponents\ConnectedComponentsUsingUnionFind_unit.cpp:40:5: warning: variable 'connectedComponents' of type 'ConnectedComponentsForTest' (aka 'ConnectedComponentsUsingUnionFind<int>') can be declared 'const' [misc-const-correctness]
    ConnectedComponentsForTest connectedComponents(graph);
    ^
                               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\ConnectedComponents\ConnectedComponentsUsingUnionFind_unit.cpp:40:32: note: FIX-IT applied suggested code changes
    ConnectedComponentsForTest connectedComponents(graph);
                               ^
[62/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/ConnectedComponents/StronglyConnectedComponentsUsingKosarajuSharir_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/StronglyConnectedComponentsUsingKosarajuSharir.hpp:52:9: warning: variable 'graphWithReversedDirections' of type 'DirectedGraphWithListOfEdgesWithVertex' (aka 'DirectedGraphWithListOfEdges<int>') can be declared 'const' [misc-const-correctness]
        DirectedGraphWithListOfEdgesWithVertex graphWithReversedDirections(getGraphWithReversedDirections(b_graph));
        ^
                                               const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/StronglyConnectedComponentsUsingKosarajuSharir.hpp:52:48: note: FIX-IT applied suggested code changes
        DirectedGraphWithListOfEdgesWithVertex graphWithReversedDirections(getGraphWithReversedDirections(b_graph));
                                               ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\ConnectedComponents\StronglyConnectedComponentsUsingKosarajuSharir_unit.cpp:42:5: warning: variable 'connectedComponents' of type 'ConnectedComponentsForTest' (aka 'StronglyConnectedComponentsUsingKosarajuSharir<int>') can be declared 'const' [misc-const-correctness]
    ConnectedComponentsForTest connectedComponents(graph);
    ^
                               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\ConnectedComponents\StronglyConnectedComponentsUsingKosarajuSharir_unit.cpp:42:32: note: FIX-IT applied suggested code changes
    ConnectedComponentsForTest connectedComponents(graph);
                               ^
[63/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Cover/Node/MinimumNodeCoverForTree_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Node/MinimumNodeCoverForTree.hpp:49:17: warning: variable 'childrenCount' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                Count childrenCount = getMinimumNodeCoverSizeUsingMemoizationDP(vertexToCountMap, child);
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Node/MinimumNodeCoverForTree.hpp:49:23: note: FIX-IT applied suggested code changes
                Count childrenCount = getMinimumNodeCoverSizeUsingMemoizationDP(vertexToCountMap, child);
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Node/MinimumNodeCoverForTree.hpp:57:13: warning: variable 'result' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count result = std::min(countIfVertexIsIncluded, countIfVertexIsNotIncluded);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Node/MinimumNodeCoverForTree.hpp:57:19: note: FIX-IT applied suggested code changes
            Count result = std::min(countIfVertexIsIncluded, countIfVertexIsNotIncluded);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Node/MinimumNodeCoverForTree.hpp:71:17: warning: variable 'childSet' of type 'SetOfVerticesWithVertex' (aka 'set<int>') can be declared 'const' [misc-const-correctness]
                SetOfVerticesWithVertex childSet(getMinimumNodeCoverUsingMemoizationDP(vertexToMinimumSetMap, child));
                ^
                                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Node/MinimumNodeCoverForTree.hpp:71:41: note: FIX-IT applied suggested code changes
                SetOfVerticesWithVertex childSet(getMinimumNodeCoverUsingMemoizationDP(vertexToMinimumSetMap, child));
                                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Node/MinimumNodeCoverForTree.hpp:76:21: warning: variable 'grandChildSet' of type 'SetOfVerticesWithVertex' (aka 'set<int>') can be declared 'const' [misc-const-correctness]
                    SetOfVerticesWithVertex grandChildSet(
                    ^
                                            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Node/MinimumNodeCoverForTree.hpp:76:45: note: FIX-IT applied suggested code changes
                    SetOfVerticesWithVertex grandChildSet(
                                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/CycleDetection/CycleDetectionUsingDfs.hpp:105:13: warning: variable 'adjacentVertexState' of type 'VertexState' can be declared 'const' [misc-const-correctness]
            VertexState adjacentVertexState = m_vertexStatesMap[adjacentVertex];
            ^
                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/CycleDetection/CycleDetectionUsingDfs.hpp:105:25: note: FIX-IT applied suggested code changes
            VertexState adjacentVertexState = m_vertexStatesMap[adjacentVertex];
                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/CycleDetection/CycleDetectionUsingDfs.hpp:124:13: warning: variable 'adjacentVertexState' of type 'VertexState' can be declared 'const' [misc-const-correctness]
            VertexState adjacentVertexState = m_vertexStatesMap[adjacentVertex];
            ^
                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/CycleDetection/CycleDetectionUsingDfs.hpp:124:25: note: FIX-IT applied suggested code changes
            VertexState adjacentVertexState = m_vertexStatesMap[adjacentVertex];
                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/GraphUtilities.hpp:155:5: warning: variable 'connectedComponents' of type 'ConnectedComponentsUsingDfs<int>' can be declared 'const' [misc-const-correctness]
    ConnectedComponentsUsingDfs<Vertex> connectedComponents(graph);
    ^
                                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/GraphUtilities.hpp:155:41: note: FIX-IT applied suggested code changes
    ConnectedComponentsUsingDfs<Vertex> connectedComponents(graph);
                                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Node\MinimumNodeCoverForTree_unit.cpp:24:5: warning: variable 'minimumNodeCover' of type 'MinimumNodeCoverForTreeForTest' (aka 'MinimumNodeCoverForTree<int>') can be declared 'const' [misc-const-correctness]
    MinimumNodeCoverForTreeForTest minimumNodeCover(graph, 10);
    ^
                                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Node\MinimumNodeCoverForTree_unit.cpp:24:36: note: FIX-IT applied suggested code changes
    MinimumNodeCoverForTreeForTest minimumNodeCover(graph, 10);
                                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Node\MinimumNodeCoverForTree_unit.cpp:39:5: warning: variable 'minimumNodeCover' of type 'MinimumNodeCoverForTreeForTest' (aka 'MinimumNodeCoverForTree<int>') can be declared 'const' [misc-const-correctness]
    MinimumNodeCoverForTreeForTest minimumNodeCover(graph, 1);
    ^
                                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Node\MinimumNodeCoverForTree_unit.cpp:39:36: note: FIX-IT applied suggested code changes
    MinimumNodeCoverForTreeForTest minimumNodeCover(graph, 1);
                                   ^
[64/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Cover/Node/MinimumNodeCover_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/BaseFordFulkerson.hpp:12:7: warning: class 'BaseFordFulkerson' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseFordFulkerson {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Node\MinimumNodeCover_unit.cpp:27:5: warning: variable 'minimumNodeCover' of type 'MinimumNodeCoverForTest' (aka 'MinimumNodeCover<int>') can be declared 'const' [misc-const-correctness]
    MinimumNodeCoverForTest minimumNodeCover(graph);
    ^
                            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Node\MinimumNodeCover_unit.cpp:27:29: note: FIX-IT applied suggested code changes
    MinimumNodeCoverForTest minimumNodeCover(graph);
                            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Node\MinimumNodeCover_unit.cpp:40:5: warning: variable 'minimumNodeCover' of type 'MinimumNodeCoverForTest' (aka 'MinimumNodeCover<int>') can be declared 'const' [misc-const-correctness]
    MinimumNodeCoverForTest minimumNodeCover(graph);
    ^
                            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Node\MinimumNodeCover_unit.cpp:40:29: note: FIX-IT applied suggested code changes
    MinimumNodeCoverForTest minimumNodeCover(graph);
                            ^
[65/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Cover/Path/GeneralPathCover_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:41:9: warning: variable 'vertexPairs' of type 'VertexPairs' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
        VertexPairs vertexPairs(getConnectedVerticesOfGeneralPathCover(newSourceVertex, newSinkVertex));
        ^
                    const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:41:21: note: FIX-IT applied suggested code changes
        VertexPairs vertexPairs(getConnectedVerticesOfGeneralPathCover(newSourceVertex, newSinkVertex));
                    ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:68:9: warning: variable 'sourceVertexWithLeft' of type 'VertexWithLeftRight' (aka 'pair<int, bool>') can be declared 'const' [misc-const-correctness]
        VertexWithLeftRight sourceVertexWithLeft{newSourceVertex, false};
        ^
                            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:68:29: note: FIX-IT applied suggested code changes
        VertexWithLeftRight sourceVertexWithLeft{newSourceVertex, false};
                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:69:9: warning: variable 'sinkVertexWithRight' of type 'VertexWithLeftRight' (aka 'pair<int, bool>') can be declared 'const' [misc-const-correctness]
        VertexWithLeftRight sinkVertexWithRight{newSinkVertex, true};
        ^
                            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:69:29: note: FIX-IT applied suggested code changes
        VertexWithLeftRight sinkVertexWithRight{newSinkVertex, true};
                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:71:9: warning: variable 'vertices' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Vertices vertices(graph.getVertices());
        ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:71:18: note: FIX-IT applied suggested code changes
        Vertices vertices(graph.getVertices());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:76:9: warning: variable 'transitiveClosure' of type 'TransitiveClosure' (aka 'TransitiveClosureWithMap<int>') can be declared 'const' [misc-const-correctness]
        TransitiveClosure transitiveClosure(m_graph);
        ^
                          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:76:27: note: FIX-IT applied suggested code changes
        TransitiveClosure transitiveClosure(m_graph);
                          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:89:9: warning: variable 'allEdges' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
        Edges allEdges(m_graph.getEdges());
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:89:15: note: FIX-IT applied suggested code changes
        Edges allEdges(m_graph.getEdges());
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:102:13: warning: variable 'firstEdge' of type 'Edge' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
            Edge firstEdge(detectedEdges.front());
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:102:18: note: FIX-IT applied suggested code changes
            Edge firstEdge(detectedEdges.front());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:138:9: warning: variable 'allVertices' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Vertices allVertices(m_graph.getVertices());
        ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:138:18: note: FIX-IT applied suggested code changes
        Vertices allVertices(m_graph.getVertices());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:160:9: warning: variable 'fordFulkerson' of type 'FordFulkerson' (aka 'FordFulkersonUsingBfs<SinkSourceFlowNetwork<pair<int, bool>, int, DirectedGraphWithListOfEdges<pair<int, bool>>>>') can be declared 'const' [misc-const-correctness]
        FordFulkerson fordFulkerson(getFlowNetwork(m_graph, newSourceVertex, newSinkVertex));
        ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:160:23: note: FIX-IT applied suggested code changes
        FordFulkerson fordFulkerson(getFlowNetwork(m_graph, newSourceVertex, newSinkVertex));
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:162:9: warning: variable 'source' of type 'VertexWithLeftRight' (aka 'pair<int, bool>') can be declared 'const' [misc-const-correctness]
        VertexWithLeftRight source(flowNetwork.getSourceVertex());
        ^
                            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:162:29: note: FIX-IT applied suggested code changes
        VertexWithLeftRight source(flowNetwork.getSourceVertex());
                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:163:9: warning: variable 'sink' of type 'VertexWithLeftRight' (aka 'pair<int, bool>') can be declared 'const' [misc-const-correctness]
        VertexWithLeftRight sink(flowNetwork.getSinkVertex());
        ^
                            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/GeneralPathCover.hpp:163:29: note: FIX-IT applied suggested code changes
        VertexWithLeftRight sink(flowNetwork.getSinkVertex());
                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/BaseFordFulkerson.hpp:12:7: warning: class 'BaseFordFulkerson' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseFordFulkerson {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Reachability/Reachability/BaseReachabilityInDigraph.hpp:8:7: warning: class 'BaseReachabilityInDigraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseReachabilityInDigraph {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Reachability/TransitiveClosure/BaseTransitiveClosure.hpp:6:7: warning: class 'BaseTransitiveClosure' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTransitiveClosure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\GeneralPathCover_unit.cpp:28:5: warning: variable 'generalPathCover' of type 'GeneralPathCoverForTest' (aka 'GeneralPathCover<int>') can be declared 'const' [misc-const-correctness]
    GeneralPathCoverForTest generalPathCover(graph);
    ^
                            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\GeneralPathCover_unit.cpp:28:29: note: FIX-IT applied suggested code changes
    GeneralPathCoverForTest generalPathCover(graph);
                            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\GeneralPathCover_unit.cpp:30:5: warning: variable 'expectedPaths' of type 'Paths' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    Paths expectedPaths{{1, 5, 6, 7}, {2, 6, 3, 4}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\GeneralPathCover_unit.cpp:30:11: note: FIX-IT applied suggested code changes
    Paths expectedPaths{{1, 5, 6, 7}, {2, 6, 3, 4}};
          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\GeneralPathCover_unit.cpp:31:5: warning: variable 'expectedVertexPairs' of type 'VertexPairs' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    VertexPairs expectedVertexPairs{{1, 5}, {2, 3}, {3, 4}, {5, 6}, {6, 7}};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\GeneralPathCover_unit.cpp:31:17: note: FIX-IT applied suggested code changes
    VertexPairs expectedVertexPairs{{1, 5}, {2, 3}, {3, 4}, {5, 6}, {6, 7}};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\GeneralPathCover_unit.cpp:45:5: warning: variable 'generalPathCover' of type 'GeneralPathCoverForTest' (aka 'GeneralPathCover<int>') can be declared 'const' [misc-const-correctness]
    GeneralPathCoverForTest generalPathCover(graph);
    ^
                            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\GeneralPathCover_unit.cpp:45:29: note: FIX-IT applied suggested code changes
    GeneralPathCoverForTest generalPathCover(graph);
                            ^
[66/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Cover/Path/NodeDisjointPathCover_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:47:9: warning: variable 'edges' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
        Edges edges(getEdgesOfNodeDisjointPathCover(newSourceVertex, newSinkVertex));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:47:15: note: FIX-IT applied suggested code changes
        Edges edges(getEdgesOfNodeDisjointPathCover(newSourceVertex, newSinkVertex));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:55:9: warning: variable 'fordFulkerson' of type 'FordFulkerson' (aka 'FordFulkersonUsingBfs<SinkSourceFlowNetwork<pair<int, bool>, int, DirectedGraphWithListOfEdges<pair<int, bool>>>>') can be declared 'const' [misc-const-correctness]
        FordFulkerson fordFulkerson(getFlowNetwork(m_graph, newSourceVertex, newSinkVertex));
        ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:55:23: note: FIX-IT applied suggested code changes
        FordFulkerson fordFulkerson(getFlowNetwork(m_graph, newSourceVertex, newSinkVertex));
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:57:9: warning: variable 'source' of type 'VertexWithLeftRight' (aka 'pair<int, bool>') can be declared 'const' [misc-const-correctness]
        VertexWithLeftRight source(flowNetwork.getSourceVertex());
        ^
                            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:57:29: note: FIX-IT applied suggested code changes
        VertexWithLeftRight source(flowNetwork.getSourceVertex());
                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:58:9: warning: variable 'sink' of type 'VertexWithLeftRight' (aka 'pair<int, bool>') can be declared 'const' [misc-const-correctness]
        VertexWithLeftRight sink(flowNetwork.getSinkVertex());
        ^
                            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:58:29: note: FIX-IT applied suggested code changes
        VertexWithLeftRight sink(flowNetwork.getSinkVertex());
                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:74:9: warning: variable 'sourceVertexWithLeft' of type 'VertexWithLeftRight' (aka 'pair<int, bool>') can be declared 'const' [misc-const-correctness]
        VertexWithLeftRight sourceVertexWithLeft{newSourceVertex, false};
        ^
                            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:74:29: note: FIX-IT applied suggested code changes
        VertexWithLeftRight sourceVertexWithLeft{newSourceVertex, false};
                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:75:9: warning: variable 'sinkVertexWithRight' of type 'VertexWithLeftRight' (aka 'pair<int, bool>') can be declared 'const' [misc-const-correctness]
        VertexWithLeftRight sinkVertexWithRight{newSinkVertex, true};
        ^
                            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:75:29: note: FIX-IT applied suggested code changes
        VertexWithLeftRight sinkVertexWithRight{newSinkVertex, true};
                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:93:13: warning: variable 'firstEdge' of type 'Edge' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
            Edge firstEdge(detectedEdges.front());
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:93:18: note: FIX-IT applied suggested code changes
            Edge firstEdge(detectedEdges.front());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:112:9: warning: variable 'allVertices' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Vertices allVertices(m_graph.getVertices());
        ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Cover/Path/NodeDisjointPathCover.hpp:112:18: note: FIX-IT applied suggested code changes
        Vertices allVertices(m_graph.getVertices());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/BaseFordFulkerson.hpp:12:7: warning: class 'BaseFordFulkerson' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseFordFulkerson {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:28:5: warning: variable 'nodeDisjointPathCover' of type 'NodeDisjointPathCoverForTest' (aka 'NodeDisjointPathCover<int>') can be declared 'const' [misc-const-correctness]
    NodeDisjointPathCoverForTest nodeDisjointPathCover(graph);
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:28:34: note: FIX-IT applied suggested code changes
    NodeDisjointPathCoverForTest nodeDisjointPathCover(graph);
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:30:5: warning: variable 'expectedPaths' of type 'Paths' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    Paths expectedPaths{{1, 5}, {2, 6, 3, 4}, {7}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:30:11: note: FIX-IT applied suggested code changes
    Paths expectedPaths{{1, 5}, {2, 6, 3, 4}, {7}};
          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:31:5: warning: variable 'expectedEdges' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges expectedEdges{{1, 5}, {2, 6}, {3, 4}, {6, 3}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:31:11: note: FIX-IT applied suggested code changes
    Edges expectedEdges{{1, 5}, {2, 6}, {3, 4}, {6, 3}};
          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:52:5: warning: variable 'nodeDisjointPathCover' of type 'NodeDisjointPathCoverForTest' (aka 'NodeDisjointPathCover<int>') can be declared 'const' [misc-const-correctness]
    NodeDisjointPathCoverForTest nodeDisjointPathCover(graph);
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:52:34: note: FIX-IT applied suggested code changes
    NodeDisjointPathCoverForTest nodeDisjointPathCover(graph);
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:54:5: warning: variable 'expectedPaths' of type 'Paths' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    Paths expectedPaths{{2, 1, 4, 5}, {3, 6}, {7}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:54:11: note: FIX-IT applied suggested code changes
    Paths expectedPaths{{2, 1, 4, 5}, {3, 6}, {7}};
          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:55:5: warning: variable 'expectedEdges' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges expectedEdges{{1, 4}, {2, 1}, {3, 6}, {4, 5}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Cover\Path\NodeDisjointPathCover_unit.cpp:55:11: note: FIX-IT applied suggested code changes
    Edges expectedEdges{{1, 4}, {2, 1}, {3, 6}, {4, 5}};
          ^
[67/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/CycleDetection/BrentAlgorithmforSuccessorGraphs_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/CycleDetection/BrentAlgorithmForSuccessorGraphs.hpp:20:9: warning: variable 'cycleLength' of type 'int' can be declared 'const' [misc-const-correctness]
        int cycleLength(getCycleLength(startOfGraph));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/CycleDetection/BrentAlgorithmForSuccessorGraphs.hpp:20:13: note: FIX-IT applied suggested code changes
        int cycleLength(getCycleLength(startOfGraph));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/SuccessorGraph/WalkInSuccessorGraph.hpp:29:21: warning: variable 'halfDistance' of type 'int' can be declared 'const' [misc-const-correctness]
                    int halfDistance = distance / 2;
                    ^
                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/SuccessorGraph/WalkInSuccessorGraph.hpp:29:25: note: FIX-IT applied suggested code changes
                    int halfDistance = distance / 2;
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\BrentAlgorithmforSuccessorGraphs_unit.cpp:17:5: warning: variable 'graph' of type 'GraphForTest' (aka 'DirectedGraphWithListOfEdges<int>') can be declared 'const' [misc-const-correctness]
    GraphForTest graph;
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\BrentAlgorithmforSuccessorGraphs_unit.cpp:17:18: note: FIX-IT applied suggested code changes
    GraphForTest graph;
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\BrentAlgorithmforSuccessorGraphs_unit.cpp:18:5: warning: variable 'cycleDetection' of type 'CycleDetectionForTest' (aka 'BrentAlgorithmForSuccessorGraphs<int>') can be declared 'const' [misc-const-correctness]
    CycleDetectionForTest cycleDetection(graph);
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\BrentAlgorithmforSuccessorGraphs_unit.cpp:18:27: note: FIX-IT applied suggested code changes
    CycleDetectionForTest cycleDetection(graph);
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\BrentAlgorithmforSuccessorGraphs_unit.cpp:50:5: warning: variable 'expectedCycle' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest expectedCycle{4, 5, 6, 4};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\BrentAlgorithmforSuccessorGraphs_unit.cpp:50:17: note: FIX-IT applied suggested code changes
    PathForTest expectedCycle{4, 5, 6, 4};
                ^
[68/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/CycleDetection/CycleDetectionWithDfsWithDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:17:5: warning: variable 'graph' of type 'GraphForTest' (aka 'DirectedGraphWithListOfEdges<int>') can be declared 'const' [misc-const-correctness]
    GraphForTest graph;
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:17:18: note: FIX-IT applied suggested code changes
    GraphForTest graph;
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:44:5: warning: variable 'expectedOneCycle' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest expectedOneCycle{5, 4, 3, 5};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:44:17: note: FIX-IT applied suggested code changes
    PathForTest expectedOneCycle{5, 4, 3, 5};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:45:5: warning: variable 'expectedCycles' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedCycles{{5, 4, 3, 5}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:45:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedCycles{{5, 4, 3, 5}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:76:5: warning: variable 'expectedOneCycle' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest expectedOneCycle{0, 5, 4, 2, 0};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:76:17: note: FIX-IT applied suggested code changes
    PathForTest expectedOneCycle{0, 5, 4, 2, 0};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:77:5: warning: variable 'expectedCycles' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedCycles{{0, 5, 4, 2, 0}, {2, 3, 2}, {5, 4, 2, 3, 5}, {6, 8, 6}, {9, 10, 12, 9}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:77:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedCycles{{0, 5, 4, 2, 0}, {2, 3, 2}, {5, 4, 2, 3, 5}, {6, 8, 6}, {9, 10, 12, 9}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:92:5: warning: variable 'expectedOneCycle' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest expectedOneCycle{0, 1, 2, 3, 4, 0};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:92:17: note: FIX-IT applied suggested code changes
    PathForTest expectedOneCycle{0, 1, 2, 3, 4, 0};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:93:5: warning: variable 'expectedCycles' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedCycles{{0, 1, 2, 3, 4, 0}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:93:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedCycles{{0, 1, 2, 3, 4, 0}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:117:5: warning: variable 'expectedOneCycle' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest expectedOneCycle{0, 2, 7, 3, 6, 0};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:117:17: note: FIX-IT applied suggested code changes
    PathForTest expectedOneCycle{0, 2, 7, 3, 6, 0};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:118:5: warning: variable 'expectedCycles' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedCycles{{0, 2, 7, 3, 6, 0}, {2, 7, 3, 6, 2},    {3, 6, 4, 5, 1, 3},
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithDirectedGraph_unit.cpp:118:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedCycles{{0, 2, 7, 3, 6, 0}, {2, 7, 3, 6, 2},    {3, 6, 4, 5, 1, 3},
                 ^
[69/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/CycleDetection/CycleDetectionWithDfsWithUndirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:17:5: warning: variable 'graph' of type 'GraphForTest' (aka 'UndirectedGraphWithListOfEdges<int>') can be declared 'const' [misc-const-correctness]
    GraphForTest graph;
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:17:18: note: FIX-IT applied suggested code changes
    GraphForTest graph;
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:42:5: warning: variable 'expectedOneCycle' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest expectedOneCycle{0, 1, 2, 0};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:42:17: note: FIX-IT applied suggested code changes
    PathForTest expectedOneCycle{0, 1, 2, 0};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:43:5: warning: variable 'expectedCycles' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedCycles{{0, 1, 2, 0}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:43:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedCycles{{0, 1, 2, 0}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:65:5: warning: variable 'expectedOneCycle' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest expectedOneCycle{5, 3, 4, 5};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:65:17: note: FIX-IT applied suggested code changes
    PathForTest expectedOneCycle{5, 3, 4, 5};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:66:5: warning: variable 'expectedCycles' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedCycles{{5, 3, 4, 5}, {0, 5, 3, 4, 6, 0}, {9, 11, 12, 9}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:66:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedCycles{{5, 3, 4, 5}, {0, 5, 3, 4, 6, 0}, {9, 11, 12, 9}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:80:5: warning: variable 'expectedOneCycle' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest expectedOneCycle{0, 1, 2, 3, 4, 0};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:80:17: note: FIX-IT applied suggested code changes
    PathForTest expectedOneCycle{0, 1, 2, 3, 4, 0};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:81:5: warning: variable 'expectedCycles' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedCycles{{0, 1, 2, 3, 4, 0}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\CycleDetectionWithDfsWithUndirectedGraph_unit.cpp:81:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedCycles{{0, 1, 2, 3, 4, 0}};
                 ^
[70/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/CycleDetection/FloydAlgorithmforSuccessorGraphs_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\FloydAlgorithmforSuccessorGraphs_unit.cpp:17:5: warning: variable 'graph' of type 'GraphForTest' (aka 'DirectedGraphWithListOfEdges<int>') can be declared 'const' [misc-const-correctness]
    GraphForTest graph;
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\FloydAlgorithmforSuccessorGraphs_unit.cpp:17:18: note: FIX-IT applied suggested code changes
    GraphForTest graph;
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\FloydAlgorithmforSuccessorGraphs_unit.cpp:18:5: warning: variable 'cycleDetection' of type 'CycleDetectionForTest' (aka 'FloydAlgorithmForSuccessorGraphs<int>') can be declared 'const' [misc-const-correctness]
    CycleDetectionForTest cycleDetection(graph);
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\FloydAlgorithmforSuccessorGraphs_unit.cpp:18:27: note: FIX-IT applied suggested code changes
    CycleDetectionForTest cycleDetection(graph);
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\FloydAlgorithmforSuccessorGraphs_unit.cpp:50:5: warning: variable 'expectedCycle' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest expectedCycle{4, 5, 6, 4};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\CycleDetection\FloydAlgorithmforSuccessorGraphs_unit.cpp:50:17: note: FIX-IT applied suggested code changes
    PathForTest expectedCycle{4, 5, 6, 4};
                ^
[71/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/DirectedGraph/DirectedGraphWithAdjacencyMatrix_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:16:9: warning: variable 'originalEdges' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
        Edges originalEdges(this->getEdges());
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:16:15: note: FIX-IT applied suggested code changes
        Edges originalEdges(this->getEdges());
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:88:5: warning: variable 'adjacentVerticesToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesToVerify(graph.getAdjacentVerticesAt(0));
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:88:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesToVerify(graph.getAdjacentVerticesAt(0));
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:100:5: warning: variable 'adjacentVerticesAt0ToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesAt0ToVerify(graph.getAdjacentVerticesAt(0));
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:100:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesAt0ToVerify(graph.getAdjacentVerticesAt(0));
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:101:5: warning: variable 'adjacentVerticesAt1ToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesAt1ToVerify(graph.getAdjacentVerticesAt(1));
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:101:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesAt1ToVerify(graph.getAdjacentVerticesAt(1));
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:102:5: warning: variable 'adjacentVerticesAt2ToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesAt2ToVerify(graph.getAdjacentVerticesAt(2));
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:102:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesAt2ToVerify(graph.getAdjacentVerticesAt(2));
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:104:5: warning: variable 'adjacentVerticesAt0ToExpect' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesAt0ToExpect{1};
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:104:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesAt0ToExpect{1};
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:105:5: warning: variable 'adjacentVerticesAt2ToExpect' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesAt2ToExpect{0};
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:105:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesAt2ToExpect{0};
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:116:5: warning: variable 'verticesToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices verticesToVerify(graph.getVertices());
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:116:14: note: FIX-IT applied suggested code changes
    Vertices verticesToVerify(graph.getVertices());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:128:5: warning: variable 'verticesToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices verticesToVerify(graph.getVertices());
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:128:14: note: FIX-IT applied suggested code changes
    Vertices verticesToVerify(graph.getVertices());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:130:5: warning: variable 'verticesToExpect' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices verticesToExpect{0, 1, 2};
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:130:14: note: FIX-IT applied suggested code changes
    Vertices verticesToExpect{0, 1, 2};
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:139:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:139:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:151:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:151:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:153:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 1}, {2, 0}};
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:153:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 1}, {2, 0}};
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:166:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:166:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:167:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 1}, {2, 0}};
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:167:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 1}, {2, 0}};
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:182:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:182:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:183:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{2, 0}};
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:183:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{2, 0}};
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:214:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:214:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:215:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{3, 4}, {4, 5}, {5, 6}};
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:215:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{3, 4}, {4, 5}, {5, 6}};
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:230:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:230:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:231:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 2}, {1, 0}};
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:231:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 2}, {1, 0}};
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:264:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:264:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:265:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 1}, {0, 5}, {2, 0}, {2, 3}, {3, 2}, {3, 5},  {4, 2},  {4, 3},   {5, 4},  {6, 0},   {6, 4},
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/DirectedGraph/Utilities/CommonTestsWithDirectedGraph.hpp:265:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 1}, {0, 5}, {2, 0}, {2, 3}, {3, 2}, {3, 5},  {4, 2},  {4, 3},   {5, 4},  {6, 0},   {6, 4},
          ^
[72/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/DirectedGraph/DirectedGraphWithArrayOfAdjacencyLists_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/DirectedGraphWithArrayOfAdjacencyLists.hpp:37:9: warning: variable 'uniqueVertices' of type 'SetOfVertices' (aka 'set<int>') can be declared 'const' [misc-const-correctness]
        SetOfVertices uniqueVertices(getUniqueVertices());
        ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/DirectedGraphWithArrayOfAdjacencyLists.hpp:37:23: note: FIX-IT applied suggested code changes
        SetOfVertices uniqueVertices(getUniqueVertices());
                      ^
[73/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/DirectedGraph/DirectedGraphWithListOfEdges_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
[74/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/DirectedGraph/DirectedGraphWithVertexToAdjacencyListsMap_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/DirectedGraphWithVertexToAdjacencyListsMap.hpp:43:9: warning: variable 'uniqueVertices' of type 'SetOfVertices' (aka 'set<int>') can be declared 'const' [misc-const-correctness]
        SetOfVertices uniqueVertices(getUniqueVertices());
        ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/DirectedGraphWithVertexToAdjacencyListsMap.hpp:43:23: note: FIX-IT applied suggested code changes
        SetOfVertices uniqueVertices(getUniqueVertices());
                      ^
[75/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/EdgeWeightedGraph/EdgeWeightedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:48:5: warning: variable 'expectedWeights' of type 'WeightsForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    WeightsForTest expectedWeights{3.5, 4.5};
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:48:20: note: FIX-IT applied suggested code changes
    WeightsForTest expectedWeights{3.5, 4.5};
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:57:5: warning: variable 'expectedEdgesToWeight' of type 'EdgeWeightedUndirectedGraphForTest::EdgeToWeightMap' (aka 'map<pair<int, int>, double>') can be declared 'const' [misc-const-correctness]
    EdgeWeightedUndirectedGraphForTest::EdgeToWeightMap expectedEdgesToWeight{{{0, 1}, 3.5}, {{0, 2}, 4.5}};
    ^
                                                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:57:57: note: FIX-IT applied suggested code changes
    EdgeWeightedUndirectedGraphForTest::EdgeToWeightMap expectedEdgesToWeight{{{0, 1}, 3.5}, {{0, 2}, 4.5}};
                                                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:66:5: warning: variable 'expectedEdgesWithWeight' of type 'EdgeWeightedUndirectedGraphForTest::EdgesWithWeight' (aka 'vector<EdgeOrderedByWeight>') can be declared 'const' [misc-const-correctness]
    EdgeWeightedUndirectedGraphForTest::EdgesWithWeight expectedEdgesWithWeight{{0, 1, 3.5}, {0, 2, 4.5}};
    ^
                                                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:66:57: note: FIX-IT applied suggested code changes
    EdgeWeightedUndirectedGraphForTest::EdgesWithWeight expectedEdgesWithWeight{{0, 1, 3.5}, {0, 2, 4.5}};
                                                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:77:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 1}, {0, 2}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:77:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 1}, {0, 2}};
          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:78:5: warning: variable 'expectedEdgesToWeight' of type 'EdgeWeightedUndirectedGraphForTest::EdgeToWeightMap' (aka 'map<pair<int, int>, double>') can be declared 'const' [misc-const-correctness]
    EdgeWeightedUndirectedGraphForTest::EdgeToWeightMap expectedEdgesToWeight{{{0, 1}, 3.5}, {{0, 2}, 4.5}};
    ^
                                                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:78:57: note: FIX-IT applied suggested code changes
    EdgeWeightedUndirectedGraphForTest::EdgeToWeightMap expectedEdgesToWeight{{{0, 1}, 3.5}, {{0, 2}, 4.5}};
                                                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:92:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 2}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:92:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 2}};
          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:93:5: warning: variable 'expectedEdgesToWeight' of type 'EdgeWeightedUndirectedGraphForTest::EdgeToWeightMap' (aka 'map<pair<int, int>, double>') can be declared 'const' [misc-const-correctness]
    EdgeWeightedUndirectedGraphForTest::EdgeToWeightMap expectedEdgesToWeight{{{0, 2}, 4.5}};
    ^
                                                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\EdgeWeightedGraph\EdgeWeightedGraph_unit.cpp:93:57: note: FIX-IT applied suggested code changes
    EdgeWeightedUndirectedGraphForTest::EdgeToWeightMap expectedEdgesToWeight{{{0, 2}, 4.5}};
                                                        ^
[76/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/FlowNetwork/FlowNetwork_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:45:5: warning: variable 'expectedDetails1' of type 'FlowNetworkForTest::FlowEdgeDetails' can be declared 'const' [misc-const-correctness]
    FlowNetworkForTest::FlowEdgeDetails expectedDetails1{15.25, 3.5};
    ^
                                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:45:41: note: FIX-IT applied suggested code changes
    FlowNetworkForTest::FlowEdgeDetails expectedDetails1{15.25, 3.5};
                                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:46:5: warning: variable 'expectedDetails2' of type 'FlowNetworkForTest::FlowEdgeDetails' can be declared 'const' [misc-const-correctness]
    FlowNetworkForTest::FlowEdgeDetails expectedDetails2{16.25, 4.5};
    ^
                                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:46:41: note: FIX-IT applied suggested code changes
    FlowNetworkForTest::FlowEdgeDetails expectedDetails2{16.25, 4.5};
                                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:66:5: warning: variable 'expectedCapacities' of type 'FlowNetworkForTest::FlowDataTypes' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    FlowNetworkForTest::FlowDataTypes expectedCapacities{15.25, 16.25};
    ^
                                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:66:39: note: FIX-IT applied suggested code changes
    FlowNetworkForTest::FlowDataTypes expectedCapacities{15.25, 16.25};
                                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:75:5: warning: variable 'expectedFlows' of type 'FlowNetworkForTest::FlowDataTypes' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    FlowNetworkForTest::FlowDataTypes expectedFlows{3.5, 4.5};
    ^
                                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:75:39: note: FIX-IT applied suggested code changes
    FlowNetworkForTest::FlowDataTypes expectedFlows{3.5, 4.5};
                                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:84:5: warning: variable 'expectedWeights' of type 'FlowNetworkForTest::FlowDataTypes' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    FlowNetworkForTest::FlowDataTypes expectedWeights{15.25, 16.25};
    ^
                                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:84:39: note: FIX-IT applied suggested code changes
    FlowNetworkForTest::FlowDataTypes expectedWeights{15.25, 16.25};
                                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:93:5: warning: variable 'expectedEdgesToDetails' of type 'FlowNetworkForTest::EdgeToFlowEdgeDetailsMap' (aka 'map<pair<int, int>, alba::algorithm::FlowNetwork<int, double, alba::algorithm::DirectedGraphWithListOfEdges<int>>::FlowEdgeDetails>') can be declared 'const' [misc-const-correctness]
    FlowNetworkForTest::EdgeToFlowEdgeDetailsMap expectedEdgesToDetails{{{0, 1}, {15.25, 3.5}}, {{0, 2}, {16.25, 4.5}}};
    ^
                                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:93:50: note: FIX-IT applied suggested code changes
    FlowNetworkForTest::EdgeToFlowEdgeDetailsMap expectedEdgesToDetails{{{0, 1}, {15.25, 3.5}}, {{0, 2}, {16.25, 4.5}}};
                                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:102:5: warning: variable 'expectedEdgesWithWeight' of type 'FlowNetworkForTest::FlowEdges' (aka 'vector<FlowEdge>') can be declared 'const' [misc-const-correctness]
    FlowNetworkForTest::FlowEdges expectedEdgesWithWeight{{0, 1, 15.25, 3.5}, {0, 2, 16.25, 4.5}};
    ^
                                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:102:35: note: FIX-IT applied suggested code changes
    FlowNetworkForTest::FlowEdges expectedEdgesWithWeight{{0, 1, 15.25, 3.5}, {0, 2, 16.25, 4.5}};
                                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:113:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 1}, {0, 2}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:113:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 1}, {0, 2}};
          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:114:5: warning: variable 'expectedEdgesToDetails' of type 'FlowNetworkForTest::EdgeToFlowEdgeDetailsMap' (aka 'map<pair<int, int>, alba::algorithm::FlowNetwork<int, double, alba::algorithm::DirectedGraphWithListOfEdges<int>>::FlowEdgeDetails>') can be declared 'const' [misc-const-correctness]
    FlowNetworkForTest::EdgeToFlowEdgeDetailsMap expectedEdgesToDetails{{{0, 1}, {15.25, 3.5}}, {{0, 2}, {16.25, 4.5}}};
    ^
                                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:114:50: note: FIX-IT applied suggested code changes
    FlowNetworkForTest::EdgeToFlowEdgeDetailsMap expectedEdgesToDetails{{{0, 1}, {15.25, 3.5}}, {{0, 2}, {16.25, 4.5}}};
                                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:128:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 2}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:128:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 2}};
          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:129:5: warning: variable 'expectedEdgesToDetails' of type 'FlowNetworkForTest::EdgeToFlowEdgeDetailsMap' (aka 'map<pair<int, int>, alba::algorithm::FlowNetwork<int, double, alba::algorithm::DirectedGraphWithListOfEdges<int>>::FlowEdgeDetails>') can be declared 'const' [misc-const-correctness]
    FlowNetworkForTest::EdgeToFlowEdgeDetailsMap expectedEdgesToDetails{{{0, 2}, {16.25, 4.5}}};
    ^
                                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FlowNetwork_unit.cpp:129:50: note: FIX-IT applied suggested code changes
    FlowNetworkForTest::EdgeToFlowEdgeDetailsMap expectedEdgesToDetails{{{0, 2}, {16.25, 4.5}}};
                                                 ^
[77/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/FlowNetwork/FordFulkerson/FordFulkersonUsingBfs_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/BaseFordFulkerson.hpp:12:7: warning: class 'BaseFordFulkerson' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseFordFulkerson {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:29:5: warning: variable 'maxFlow' of type 'MaxFlowForTest' (aka 'FordFulkersonUsingBfs<SinkSourceFlowNetwork<int, int, DirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    MaxFlowForTest maxFlow(flowNetwork);
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:29:20: note: FIX-IT applied suggested code changes
    MaxFlowForTest maxFlow(flowNetwork);
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:31:5: warning: variable 'expectedAugmentingPaths' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedAugmentingPaths{{0, 1, 3, 5}, {0, 2, 4, 5}, {0, 2, 3, 1, 4, 5}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:31:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedAugmentingPaths{{0, 1, 3, 5}, {0, 2, 4, 5}, {0, 2, 3, 1, 4, 5}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:32:5: warning: variable 'expectedMinCutEdges' of type 'EdgesForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    EdgesForTest expectedMinCutEdges{{0, 1}, {2, 3}, {2, 4}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:32:18: note: FIX-IT applied suggested code changes
    EdgesForTest expectedMinCutEdges{{0, 1}, {2, 3}, {2, 4}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:48:5: warning: variable 'maxFlow' of type 'MaxFlowForTest' (aka 'FordFulkersonUsingBfs<SinkSourceFlowNetwork<int, int, DirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    MaxFlowForTest maxFlow(flowNetwork);
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:48:20: note: FIX-IT applied suggested code changes
    MaxFlowForTest maxFlow(flowNetwork);
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:50:5: warning: variable 'expectedAugmentingPaths' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedAugmentingPaths{{1, 2, 3, 6}, {1, 4, 5, 6}, {1, 4, 2, 3, 6}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:50:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedAugmentingPaths{{1, 2, 3, 6}, {1, 4, 5, 6}, {1, 4, 2, 3, 6}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:51:5: warning: variable 'expectedMinCutEdges' of type 'EdgesForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    EdgesForTest expectedMinCutEdges{{2, 3}, {4, 5}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingBfs_unit.cpp:51:18: note: FIX-IT applied suggested code changes
    EdgesForTest expectedMinCutEdges{{2, 3}, {4, 5}};
                 ^
[78/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/FlowNetwork/FordFulkerson/FordFulkersonUsingDfs_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/BaseFordFulkerson.hpp:12:7: warning: class 'BaseFordFulkerson' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseFordFulkerson {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/FordFulkersonUsingDfs.hpp:33:13: warning: variable 'otherVertex' of type 'Vertex' (aka 'int') can be declared 'const' [misc-const-correctness]
            Vertex otherVertex(flowEdge.getTheOtherVertex(vertex));
            ^
                   const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/FordFulkersonUsingDfs.hpp:33:20: note: FIX-IT applied suggested code changes
            Vertex otherVertex(flowEdge.getTheOtherVertex(vertex));
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:29:5: warning: variable 'maxFlow' of type 'MaxFlowForTest' (aka 'FordFulkersonUsingDfs<SinkSourceFlowNetwork<int, int, DirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    MaxFlowForTest maxFlow(flowNetwork);
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:29:20: note: FIX-IT applied suggested code changes
    MaxFlowForTest maxFlow(flowNetwork);
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:31:5: warning: variable 'expectedAugmentingPaths' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedAugmentingPaths{{0, 1, 3, 5}, {0, 2, 3, 1, 4, 5}, {0, 2, 4, 5}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:31:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedAugmentingPaths{{0, 1, 3, 5}, {0, 2, 3, 1, 4, 5}, {0, 2, 4, 5}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:32:5: warning: variable 'expectedMinCutEdges' of type 'EdgesForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    EdgesForTest expectedMinCutEdges{{0, 1}, {2, 3}, {2, 4}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:32:18: note: FIX-IT applied suggested code changes
    EdgesForTest expectedMinCutEdges{{0, 1}, {2, 3}, {2, 4}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:48:5: warning: variable 'maxFlow' of type 'MaxFlowForTest' (aka 'FordFulkersonUsingDfs<SinkSourceFlowNetwork<int, int, DirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    MaxFlowForTest maxFlow(flowNetwork);
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:48:20: note: FIX-IT applied suggested code changes
    MaxFlowForTest maxFlow(flowNetwork);
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:50:5: warning: variable 'expectedAugmentingPaths' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedAugmentingPaths{{1, 2, 3, 5, 6}, {1, 2, 3, 6}, {1, 4, 2, 3, 6}, {1, 4, 5, 3, 6}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:50:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedAugmentingPaths{{1, 2, 3, 5, 6}, {1, 2, 3, 6}, {1, 4, 2, 3, 6}, {1, 4, 5, 3, 6}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:51:5: warning: variable 'expectedMinCutEdges' of type 'EdgesForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    EdgesForTest expectedMinCutEdges{{2, 3}, {4, 5}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\FlowNetwork\FordFulkerson\FordFulkersonUsingDfs_unit.cpp:51:18: note: FIX-IT applied suggested code changes
    EdgesForTest expectedMinCutEdges{{2, 3}, {4, 5}};
                 ^
[79/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/FlowNetwork/SinkSourceFlowNetwork_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
[80/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/NodeSearch/KCenters/KCentersWithGreedyApproximate_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/NodeSearch/KCenters/KCentersWithGreedyApproximate.hpp:36:9: warning: variable 'bfs' of type 'Bfs' (aka 'PathSearchUsingBfsWithDistanceSum<int, double, alba::algorithm::EdgeWeightedGraph<int, double, alba::algorithm::UndirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
        Bfs bfs(m_graph, {currentCenter});
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/NodeSearch/KCenters/KCentersWithGreedyApproximate.hpp:36:13: note: FIX-IT applied suggested code changes
        Bfs bfs(m_graph, {currentCenter});
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfs.hpp:11:7: warning: class 'PathSearchUsingBfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class PathSearchUsingBfs : public BasePathSearchWithBfsAndDfs<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithDistanceSum.hpp:8:7: warning: class 'BasePathSearchWithDistanceSum' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithDistanceSum {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\NodeSearch\KCenters\KCentersWithGreedyApproximate_unit.cpp:30:5: warning: variable 'nodeSearch' of type 'NodeSearchForTest' (aka 'KCentersWithGreedyApproximate<int, double, EdgeWeightedGraph<int, double, UndirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    NodeSearchForTest nodeSearch(graph, 0, 3);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\NodeSearch\KCenters\KCentersWithGreedyApproximate_unit.cpp:30:23: note: FIX-IT applied suggested code changes
    NodeSearchForTest nodeSearch(graph, 0, 3);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\NodeSearch\KCenters\KCentersWithGreedyApproximate_unit.cpp:32:5: warning: variable 'expectedCenters' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedCenters{0, 4, 3};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\NodeSearch\KCenters\KCentersWithGreedyApproximate_unit.cpp:32:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedCenters{0, 4, 3};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\NodeSearch\KCenters\KCentersWithGreedyApproximate_unit.cpp:44:5: warning: variable 'nodeSearch' of type 'NodeSearchForTest' (aka 'KCentersWithGreedyApproximate<int, double, EdgeWeightedGraph<int, double, UndirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    NodeSearchForTest nodeSearch(graph, 2, 2);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\NodeSearch\KCenters\KCentersWithGreedyApproximate_unit.cpp:44:23: note: FIX-IT applied suggested code changes
    NodeSearchForTest nodeSearch(graph, 2, 2);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\NodeSearch\KCenters\KCentersWithGreedyApproximate_unit.cpp:46:5: warning: variable 'expectedCenters' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedCenters{2, 3};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\NodeSearch\KCenters\KCentersWithGreedyApproximate_unit.cpp:46:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedCenters{2, 3};
                    ^
[81/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/BellmanFordAlgorithm/PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithRelax.hpp:11:7: warning: class 'BasePathSearchWithRelax' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithRelax {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:29:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingBellmanFord<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:29:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph, 0);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:49:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingBellmanFord<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:49:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph, 0);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:69:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchUsingBellmanFord<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph, 0);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:69:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph, 0);
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:89:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchUsingBellmanFord<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph, 0);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:89:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph, 0);
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:115:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingBellmanFord<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:115:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph, 0);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:140:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingBellmanFord<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:140:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph, 0);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:165:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchUsingBellmanFord<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph, 0);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:165:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph, 0);
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:190:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchUsingBellmanFord<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph, 0);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BellmanFordAlgorithm\PathSearchUsingBellmanFordWithEdgeWeightedDirectedGraph_unit.cpp:190:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph, 0);
                             ^
[82/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfsWithDistanceCountWithDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfs.hpp:11:7: warning: class 'PathSearchUsingBfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class PathSearchUsingBfs : public BasePathSearchWithBfsAndDfs<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithDistanceCount.hpp:8:7: warning: class 'BasePathSearchWithDistanceCount' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithDistanceCount {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithDirectedGraph_unit.cpp:31:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfsWithDistanceCount<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithDirectedGraph_unit.cpp:31:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithDirectedGraph_unit.cpp:45:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfsWithDistanceCount<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithDirectedGraph_unit.cpp:45:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithDirectedGraph_unit.cpp:47:5: warning: variable 'expectedMap' of type 'ContentMapForTest' (aka 'map<int, int>') can be declared 'const' [misc-const-correctness]
    ContentMapForTest expectedMap{{0, 0}, {1, 1}, {2, 1}, {3, 2}, {4, 2}, {5, 1}};
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithDirectedGraph_unit.cpp:47:23: note: FIX-IT applied suggested code changes
    ContentMapForTest expectedMap{{0, 0}, {1, 1}, {2, 1}, {3, 2}, {4, 2}, {5, 1}};
                      ^
[83/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfsWithDistanceCountWithUndirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfs.hpp:11:7: warning: class 'PathSearchUsingBfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class PathSearchUsingBfs : public BasePathSearchWithBfsAndDfs<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithDistanceCount.hpp:8:7: warning: class 'BasePathSearchWithDistanceCount' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithDistanceCount {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithUndirectedGraph_unit.cpp:31:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfsWithDistanceCount<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithUndirectedGraph_unit.cpp:31:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithUndirectedGraph_unit.cpp:45:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfsWithDistanceCount<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithUndirectedGraph_unit.cpp:45:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithUndirectedGraph_unit.cpp:47:5: warning: variable 'expectedMap' of type 'ContentMapForTest' (aka 'map<int, int>') can be declared 'const' [misc-const-correctness]
    ContentMapForTest expectedMap{{0, 0}, {1, 1}, {2, 1}, {3, 2}, {4, 2}, {5, 1}};
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceCountWithUndirectedGraph_unit.cpp:47:23: note: FIX-IT applied suggested code changes
    ContentMapForTest expectedMap{{0, 0}, {1, 1}, {2, 1}, {3, 2}, {4, 2}, {5, 1}};
                      ^
[84/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfsWithDistanceSumWithDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfs.hpp:11:7: warning: class 'PathSearchUsingBfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class PathSearchUsingBfs : public BasePathSearchWithBfsAndDfs<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithDistanceSum.hpp:8:7: warning: class 'BasePathSearchWithDistanceSum' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithDistanceSum {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithDirectedGraph_unit.cpp:35:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfsWithDistanceSum<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithDirectedGraph_unit.cpp:35:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithDirectedGraph_unit.cpp:49:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfsWithDistanceSum<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithDirectedGraph_unit.cpp:49:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithDirectedGraph_unit.cpp:51:5: warning: variable 'expectedMap' of type 'ContentMapForTest' (aka 'map<int, double>') can be declared 'const' [misc-const-correctness]
    ContentMapForTest expectedMap{{0, 0.0}, {1, 0.05}, {2, 0.1}, {3, 0.35}, {4, 0.4}, {5, 0.15}};
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithDirectedGraph_unit.cpp:51:23: note: FIX-IT applied suggested code changes
    ContentMapForTest expectedMap{{0, 0.0}, {1, 0.05}, {2, 0.1}, {3, 0.35}, {4, 0.4}, {5, 0.15}};
                      ^
[85/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfsWithDistanceSumWithUndirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfs.hpp:11:7: warning: class 'PathSearchUsingBfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class PathSearchUsingBfs : public BasePathSearchWithBfsAndDfs<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithDistanceSum.hpp:8:7: warning: class 'BasePathSearchWithDistanceSum' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithDistanceSum {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithUndirectedGraph_unit.cpp:35:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfsWithDistanceSum<int, double, EdgeWeightedGraph<int, double, UndirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithUndirectedGraph_unit.cpp:35:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithUndirectedGraph_unit.cpp:49:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfsWithDistanceSum<int, double, EdgeWeightedGraph<int, double, UndirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithUndirectedGraph_unit.cpp:49:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithUndirectedGraph_unit.cpp:51:5: warning: variable 'expectedMap' of type 'ContentMapForTest' (aka 'map<int, double>') can be declared 'const' [misc-const-correctness]
    ContentMapForTest expectedMap{{0, 0.0}, {1, 0.05}, {2, 0.1}, {3, 0.35}, {4, 0.4}, {5, 0.15}};
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchUsingBfsWithDistanceSumWithUndirectedGraph_unit.cpp:51:23: note: FIX-IT applied suggested code changes
    ContentMapForTest expectedMap{{0, 0.0}, {1, 0.05}, {2, 0.1}, {3, 0.35}, {4, 0.4}, {5, 0.15}};
                      ^
[86/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/BreadthFirstSearch/PathSearchWithBfsWithDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfs.hpp:11:7: warning: class 'PathSearchUsingBfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class PathSearchUsingBfs : public BasePathSearchWithBfsAndDfs<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfs.hpp:70:9: warning: variable 'emptyInitializeDataFunction' of type 'InitializeDataFunction' (aka 'function<void (const vector<int> &)>') can be declared 'const' [misc-const-correctness]
        static InitializeDataFunction emptyInitializeDataFunction = [](Vertices const&) {};
        ^
                                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfs.hpp:70:39: note: FIX-IT applied suggested code changes
        static InitializeDataFunction emptyInitializeDataFunction = [](Vertices const&) {};
                                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfs.hpp:75:9: warning: variable 'emptyUpdateDataFunction' of type 'UpdateDataFunction' (aka 'function<void (const int &, const int &)>') can be declared 'const' [misc-const-correctness]
        static UpdateDataFunction emptyUpdateDataFunction = [](Vertex const&, Vertex const&) {};
        ^
                                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfs.hpp:75:35: note: FIX-IT applied suggested code changes
        static UpdateDataFunction emptyUpdateDataFunction = [](Vertex const&, Vertex const&) {};
                                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithDirectedGraph_unit.cpp:31:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithDirectedGraph_unit.cpp:31:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithDirectedGraph_unit.cpp:45:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithDirectedGraph_unit.cpp:45:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithDirectedGraph_unit.cpp:59:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0, 2});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithDirectedGraph_unit.cpp:59:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0, 2});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithDirectedGraph_unit.cpp:73:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithDirectedGraph_unit.cpp:73:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
[87/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/BreadthFirstSearch/PathSearchWithBfsWithUndirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/BreadthFirstSearch/PathSearchUsingBfs.hpp:11:7: warning: class 'PathSearchUsingBfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class PathSearchUsingBfs : public BasePathSearchWithBfsAndDfs<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithUndirectedGraph_unit.cpp:31:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithUndirectedGraph_unit.cpp:31:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithUndirectedGraph_unit.cpp:45:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithUndirectedGraph_unit.cpp:45:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithUndirectedGraph_unit.cpp:59:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0, 3});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithUndirectedGraph_unit.cpp:59:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0, 3});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithUndirectedGraph_unit.cpp:73:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingBfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\BreadthFirstSearch\PathSearchWithBfsWithUndirectedGraph_unit.cpp:73:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
[88/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/CountPaths/CountPathsInDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/CountPaths/CountPathsInDirectedGraph.hpp:24:9: warning: variable 'verticesInOrder' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Vertices verticesInOrder(VertexOrderingUsingDfs<Vertex>(m_graph).getVerticesInTopologicalOrder());
        ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/CountPaths/CountPathsInDirectedGraph.hpp:24:18: note: FIX-IT applied suggested code changes
        Vertices verticesInOrder(VertexOrderingUsingDfs<Vertex>(m_graph).getVerticesInTopologicalOrder());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/CountPaths/CountPathsInDirectedGraph.hpp:54:13: warning: variable 'startIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int startIndex = itStart->second;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/CountPaths/CountPathsInDirectedGraph.hpp:54:17: note: FIX-IT applied suggested code changes
            int startIndex = itStart->second;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/CountPaths/CountPathsInDirectedGraph.hpp:55:13: warning: variable 'endIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int endIndex = itEnd->second;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/CountPaths/CountPathsInDirectedGraph.hpp:55:17: note: FIX-IT applied suggested code changes
            int endIndex = itEnd->second;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/CountPaths/CountPathsInDirectedGraph.hpp:56:13: warning: variable 'distanceInTopologicalOrder' of type 'int' can be declared 'const' [misc-const-correctness]
            int distanceInTopologicalOrder = endIndex - startIndex;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/CountPaths/CountPathsInDirectedGraph.hpp:56:17: note: FIX-IT applied suggested code changes
            int distanceInTopologicalOrder = endIndex - startIndex;
                ^
[89/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/CountPaths/CountPathsInUndirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/CountPaths/CountPathsInUndirectedGraph.hpp:24:17: warning: variable 'endPointPair' of type 'VertexPair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
                VertexPair endPointPair{start, adjacentToCurrent};
                ^
                           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/CountPaths/CountPathsInUndirectedGraph.hpp:24:28: note: FIX-IT applied suggested code changes
                VertexPair endPointPair{start, adjacentToCurrent};
                           ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
[90/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/CountPaths/CountPathsWithLengthUsingAdjacencyMatrix_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:20:9: warning: variable 'numberOfColumns' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfColumns(m_adjacencyMatrix.getNumberOfColumns());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:20:13: note: FIX-IT applied suggested code changes
        int numberOfColumns(m_adjacencyMatrix.getNumberOfColumns());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:21:9: warning: variable 'numberOfRows' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfRows(m_adjacencyMatrix.getNumberOfRows());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:21:13: note: FIX-IT applied suggested code changes
        int numberOfRows(m_adjacencyMatrix.getNumberOfRows());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:34:9: warning: variable 'numberOfRows' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfRows(m_adjacencyMatrix.getNumberOfRows());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:34:13: note: FIX-IT applied suggested code changes
        int numberOfRows(m_adjacencyMatrix.getNumberOfRows());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:45:9: warning: variable 'numberOfColumns' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfColumns(m_adjacencyMatrix.getNumberOfColumns());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:45:13: note: FIX-IT applied suggested code changes
        int numberOfColumns(m_adjacencyMatrix.getNumberOfColumns());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:56:9: warning: variable 'numberOfColumns' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfColumns(m_adjacencyMatrix.getNumberOfColumns());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:56:13: note: FIX-IT applied suggested code changes
        int numberOfColumns(m_adjacencyMatrix.getNumberOfColumns());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:70:9: warning: variable 'numberOfRows' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfRows(m_adjacencyMatrix.getNumberOfRows());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix.hpp:70:13: note: FIX-IT applied suggested code changes
        int numberOfRows(m_adjacencyMatrix.getNumberOfRows());
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\CountPaths\CountPathsWithLengthUsingAdjacencyMatrix_unit.cpp:26:5: warning: variable 'countPaths' of type 'CountPathsForTest' (aka 'CountPathsWithLengthUsingAdjacencyMatrix<int>') can be declared 'const' [misc-const-correctness]
    CountPathsForTest countPaths(3, graph.getAdjacencyMatrix());
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\CountPaths\CountPathsWithLengthUsingAdjacencyMatrix_unit.cpp:26:23: note: FIX-IT applied suggested code changes
    CountPathsForTest countPaths(3, graph.getAdjacencyMatrix());
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\CountPaths\CountPathsWithLengthUsingAdjacencyMatrix_unit.cpp:45:5: warning: variable 'countPaths' of type 'CountPathsForTest' (aka 'CountPathsWithLengthUsingAdjacencyMatrix<int>') can be declared 'const' [misc-const-correctness]
    CountPathsForTest countPaths(3, graph.getAdjacencyMatrix());
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\CountPaths\CountPathsWithLengthUsingAdjacencyMatrix_unit.cpp:45:23: note: FIX-IT applied suggested code changes
    CountPathsForTest countPaths(3, graph.getAdjacencyMatrix());
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\CountPaths\CountPathsWithLengthUsingAdjacencyMatrix_unit.cpp:65:5: warning: variable 'countPaths' of type 'CountPathsForTest' (aka 'CountPathsWithLengthUsingAdjacencyMatrix<int>') can be declared 'const' [misc-const-correctness]
    CountPathsForTest countPaths(4, graph.getAdjacencyMatrix());
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\CountPaths\CountPathsWithLengthUsingAdjacencyMatrix_unit.cpp:65:23: note: FIX-IT applied suggested code changes
    CountPathsForTest countPaths(4, graph.getAdjacencyMatrix());
                      ^
[91/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/DepthFirstSearch/PathSearchUsingDfsWithDistanceSumWithDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithDistanceSum.hpp:8:7: warning: class 'BasePathSearchWithDistanceSum' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithDistanceSum {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithDirectedGraph_unit.cpp:35:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfsWithDistanceSum<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithDirectedGraph_unit.cpp:35:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithDirectedGraph_unit.cpp:49:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfsWithDistanceSum<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithDirectedGraph_unit.cpp:49:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithDirectedGraph_unit.cpp:51:5: warning: variable 'expectedMap' of type 'ContentMapForTest' (aka 'map<int, double>') can be declared 'const' [misc-const-correctness]
    ContentMapForTest expectedMap{{0, 0.0}, {1, 0.05}, {2, 0.25}, {3, 0.5}, {4, 0.85}, {5, 0.9}};
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithDirectedGraph_unit.cpp:51:23: note: FIX-IT applied suggested code changes
    ContentMapForTest expectedMap{{0, 0.0}, {1, 0.05}, {2, 0.25}, {3, 0.5}, {4, 0.85}, {5, 0.9}};
                      ^
[92/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/DepthFirstSearch/PathSearchUsingDfsWithDistanceSumWithUndirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithDistanceSum.hpp:8:7: warning: class 'BasePathSearchWithDistanceSum' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithDistanceSum {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithUndirectedGraph_unit.cpp:35:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfsWithDistanceSum<int, double, EdgeWeightedGraph<int, double, UndirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithUndirectedGraph_unit.cpp:35:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithUndirectedGraph_unit.cpp:49:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfsWithDistanceSum<int, double, EdgeWeightedGraph<int, double, UndirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithUndirectedGraph_unit.cpp:49:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithUndirectedGraph_unit.cpp:51:5: warning: variable 'expectedMap' of type 'ContentMapForTest' (aka 'map<int, double>') can be declared 'const' [misc-const-correctness]
    ContentMapForTest expectedMap{{0, 0.0}, {1, 0.05}, {2, 0.25}, {3, 0.5}, {4, 0.85}, {5, 0.9}};
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchUsingDfsWithDistanceSumWithUndirectedGraph_unit.cpp:51:23: note: FIX-IT applied suggested code changes
    ContentMapForTest expectedMap{{0, 0.0}, {1, 0.05}, {2, 0.25}, {3, 0.5}, {4, 0.85}, {5, 0.9}};
                      ^
[93/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/DepthFirstSearch/PathSearchWithDfsWithDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/DepthFirstSearch/PathSearchUsingDfs.hpp:74:9: warning: variable 'emptyInitializeDataFunction' of type 'InitializeDataFunction' (aka 'function<void (const vector<int> &)>') can be declared 'const' [misc-const-correctness]
        static InitializeDataFunction emptyInitializeDataFunction = [](Vertices const&) {};
        ^
                                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/DepthFirstSearch/PathSearchUsingDfs.hpp:74:39: note: FIX-IT applied suggested code changes
        static InitializeDataFunction emptyInitializeDataFunction = [](Vertices const&) {};
                                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/DepthFirstSearch/PathSearchUsingDfs.hpp:79:9: warning: variable 'noUpdateDataFunction' of type 'UpdateDataFunction' (aka 'function<void (const int &, const int &)>') can be declared 'const' [misc-const-correctness]
        static UpdateDataFunction noUpdateDataFunction = [](Vertex const&, Vertex const&) {};
        ^
                                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/DepthFirstSearch/PathSearchUsingDfs.hpp:79:35: note: FIX-IT applied suggested code changes
        static UpdateDataFunction noUpdateDataFunction = [](Vertex const&, Vertex const&) {};
                                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDirectedGraph_unit.cpp:31:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDirectedGraph_unit.cpp:31:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDirectedGraph_unit.cpp:45:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDirectedGraph_unit.cpp:45:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDirectedGraph_unit.cpp:59:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0, 2});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDirectedGraph_unit.cpp:59:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0, 2});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDirectedGraph_unit.cpp:73:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDirectedGraph_unit.cpp:73:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
[94/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/DepthFirstSearch/PathSearchWithDfsWithDistanceCountWithDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithDistanceCount.hpp:8:7: warning: class 'BasePathSearchWithDistanceCount' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithDistanceCount {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithDirectedGraph_unit.cpp:31:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfsWithDistanceCount<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithDirectedGraph_unit.cpp:31:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithDirectedGraph_unit.cpp:45:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfsWithDistanceCount<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithDirectedGraph_unit.cpp:45:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithDirectedGraph_unit.cpp:47:5: warning: variable 'expectedMap' of type 'ContentMapForTest' (aka 'map<int, int>') can be declared 'const' [misc-const-correctness]
    ContentMapForTest expectedMap{{0, 0}, {1, 1}, {2, 1}, {3, 2}, {4, 3}, {5, 3}};
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithDirectedGraph_unit.cpp:47:23: note: FIX-IT applied suggested code changes
    ContentMapForTest expectedMap{{0, 0}, {1, 1}, {2, 1}, {3, 2}, {4, 3}, {5, 3}};
                      ^
[95/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/DepthFirstSearch/PathSearchWithDfsWithDistanceCountWithUndirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithDistanceCount.hpp:8:7: warning: class 'BasePathSearchWithDistanceCount' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithDistanceCount {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithUndirectedGraph_unit.cpp:31:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfsWithDistanceCount<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithUndirectedGraph_unit.cpp:31:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithUndirectedGraph_unit.cpp:45:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfsWithDistanceCount<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithUndirectedGraph_unit.cpp:45:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithUndirectedGraph_unit.cpp:47:5: warning: variable 'expectedMap' of type 'ContentMapForTest' (aka 'map<int, int>') can be declared 'const' [misc-const-correctness]
    ContentMapForTest expectedMap{{0, 0}, {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 4}};
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithDistanceCountWithUndirectedGraph_unit.cpp:47:23: note: FIX-IT applied suggested code changes
    ContentMapForTest expectedMap{{0, 0}, {1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 4}};
                      ^
[96/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/DepthFirstSearch/PathSearchWithDfsWithUndirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithUndirectedGraph_unit.cpp:31:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithUndirectedGraph_unit.cpp:31:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithUndirectedGraph_unit.cpp:45:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithUndirectedGraph_unit.cpp:45:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithUndirectedGraph_unit.cpp:59:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, {0, 3});
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithUndirectedGraph_unit.cpp:59:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, {0, 3});
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithUndirectedGraph_unit.cpp:73:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'PathSearchUsingDfs<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DepthFirstSearch\PathSearchWithDfsWithUndirectedGraph_unit.cpp:73:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 0);
                      ^
[97/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/DijkstraAlgorithm/OptimalGraphByDijkstra_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithRelax.hpp:11:7: warning: class 'BasePathSearchWithRelax' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithRelax {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithRelax.hpp:65:9: warning: variable 'noRelaxationSteps' of type 'AdditionalRelaxationSteps' (aka 'function<void ()>') can be declared 'const' [misc-const-correctness]
        static AdditionalRelaxationSteps noRelaxationSteps = []() {};
        ^
                                         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithRelax.hpp:65:42: note: FIX-IT applied suggested code changes
        static AdditionalRelaxationSteps noRelaxationSteps = []() {};
                                         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/DijkstraAlgorithm/PathSearchUsingDijkstra.hpp:36:9: warning: variable 'comparisonInUnsignedInt' of type 'less<int>' can be declared 'const' [misc-const-correctness]
        ComparatorTemplateType<int> comparisonInUnsignedInt;
        ^
                                    const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/DijkstraAlgorithm/PathSearchUsingDijkstra.hpp:36:37: note: FIX-IT applied suggested code changes
        ComparatorTemplateType<int> comparisonInUnsignedInt;
                                    ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/DijkstraAlgorithm/PathSearchUsingDijkstra.hpp:53:13: warning: variable 'vertexWithBestWeight' of type 'VertexOrderedByWeight' (aka 'alba::algorithm::GraphTypesWithWeights<int, double>::VertexOrderedByWeight') can be declared 'const' [misc-const-correctness]
            VertexOrderedByWeight vertexWithBestWeight(foundVerticesOrderedByWeight.top());
            ^
                                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/DijkstraAlgorithm/PathSearchUsingDijkstra.hpp:53:35: note: FIX-IT applied suggested code changes
            VertexOrderedByWeight vertexWithBestWeight(foundVerticesOrderedByWeight.top());
                                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\OptimalGraphByDijkstra_unit.cpp:35:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingDijkstra<int, double, EdgeWeightedGraph<int, double, UndirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph, 1);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\OptimalGraphByDijkstra_unit.cpp:35:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph, 1);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\OptimalGraphByDijkstra_unit.cpp:39:5: warning: variable 'expectedEdges' of type 'EdgesWithWeightForTest' (aka 'vector<EdgeOrderedByWeight>') can be declared 'const' [misc-const-correctness]
    EdgesWithWeightForTest expectedEdges{{1, 2, 3.0}, {1, 3, 5.0}, {2, 4, 7.0}, {4, 5, 8.0}};
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\OptimalGraphByDijkstra_unit.cpp:39:28: note: FIX-IT applied suggested code changes
    EdgesWithWeightForTest expectedEdges{{1, 2, 3.0}, {1, 3, 5.0}, {2, 4, 7.0}, {4, 5, 8.0}};
                           ^
[98/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/DijkstraAlgorithm/PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithRelax.hpp:11:7: warning: class 'BasePathSearchWithRelax' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithRelax {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:48:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingDijkstra<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:48:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph, 0);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:65:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchUsingDijkstra<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph, 0);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:65:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph, 0);
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:82:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingDijkstra<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:82:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph, 0);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:98:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingDijkstra<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:98:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph, 0);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:114:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchUsingDijkstra<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph, 0);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:114:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph, 0);
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:130:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchUsingDijkstra<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph, 0);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DijkstraAlgorithm\PathSearchUsingDijkstraWithEdgeWeightedDirectedGraph_unit.cpp:130:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph, 0);
                             ^
[99/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/DirectedAcyclicGraph/PathSearchForDirectedAcyclicGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithRelax.hpp:11:7: warning: class 'BasePathSearchWithRelax' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithRelax {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithRelax.hpp:70:9: warning: variable 'noRelaxationSteps' of type 'AdditionalRelaxationStepsWithNewWeight' (aka 'function<void (const int &, const int &, const double &)>') can be declared 'const' [misc-const-correctness]
        static AdditionalRelaxationStepsWithNewWeight noRelaxationSteps = [](Vertex const&, Vertex const&,
        ^
                                                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithRelax.hpp:70:55: note: FIX-IT applied suggested code changes
        static AdditionalRelaxationStepsWithNewWeight noRelaxationSteps = [](Vertex const&, Vertex const&,
                                                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/DirectedAcyclicGraph/PathSearchForDirectedAcyclicGraph.hpp:33:9: warning: variable 'verticesInTopologicalOrder' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Vertices verticesInTopologicalOrder(vertexOrdering.getVerticesInTopologicalOrder());  // Uses topological sort
        ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/DirectedAcyclicGraph/PathSearchForDirectedAcyclicGraph.hpp:33:18: note: FIX-IT applied suggested code changes
        Vertices verticesInTopologicalOrder(vertexOrdering.getVerticesInTopologicalOrder());  // Uses topological sort
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DirectedAcyclicGraph\PathSearchForDirectedAcyclicGraph_unit.cpp:48:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchForDirectedAcyclicGraph<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DirectedAcyclicGraph\PathSearchForDirectedAcyclicGraph_unit.cpp:48:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph, 0);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DirectedAcyclicGraph\PathSearchForDirectedAcyclicGraph_unit.cpp:63:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchForDirectedAcyclicGraph<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DirectedAcyclicGraph\PathSearchForDirectedAcyclicGraph_unit.cpp:63:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph, 0);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DirectedAcyclicGraph\PathSearchForDirectedAcyclicGraph_unit.cpp:79:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchForDirectedAcyclicGraph<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DirectedAcyclicGraph\PathSearchForDirectedAcyclicGraph_unit.cpp:79:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph, 0);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DirectedAcyclicGraph\PathSearchForDirectedAcyclicGraph_unit.cpp:95:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchForDirectedAcyclicGraph<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph, 0);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DirectedAcyclicGraph\PathSearchForDirectedAcyclicGraph_unit.cpp:95:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph, 0);
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DirectedAcyclicGraph\PathSearchForDirectedAcyclicGraph_unit.cpp:111:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchForDirectedAcyclicGraph<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph, 0);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DirectedAcyclicGraph\PathSearchForDirectedAcyclicGraph_unit.cpp:111:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph, 0);
                             ^
[100/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/DisjointPaths/EdgeDisjointPaths_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/BaseFordFulkerson.hpp:12:7: warning: class 'BaseFordFulkerson' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseFordFulkerson {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DisjointPaths\EdgeDisjointPaths_unit.cpp:26:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'EdgeDisjointPaths<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 1, 6);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DisjointPaths\EdgeDisjointPaths_unit.cpp:26:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 1, 6);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DisjointPaths\EdgeDisjointPaths_unit.cpp:28:5: warning: variable 'expectedEdgeDisjointPaths' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedEdgeDisjointPaths{{1, 4, 3, 6}, {1, 2, 4, 5, 6}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DisjointPaths\EdgeDisjointPaths_unit.cpp:28:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedEdgeDisjointPaths{{1, 4, 3, 6}, {1, 2, 4, 5, 6}};
                 ^
[101/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/DisjointPaths/NodeDisjointPaths_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/FlowNetwork/FordFulkerson/BaseFordFulkerson.hpp:12:7: warning: class 'BaseFordFulkerson' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseFordFulkerson {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DisjointPaths\NodeDisjointPaths_unit.cpp:26:5: warning: variable 'pathSearch' of type 'PathSearchForTest' (aka 'NodeDisjointPaths<int>') can be declared 'const' [misc-const-correctness]
    PathSearchForTest pathSearch(graph, 1, 6);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DisjointPaths\NodeDisjointPaths_unit.cpp:26:23: note: FIX-IT applied suggested code changes
    PathSearchForTest pathSearch(graph, 1, 6);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DisjointPaths\NodeDisjointPaths_unit.cpp:28:5: warning: variable 'expectedNodeDisjointPaths' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest expectedNodeDisjointPaths{{1, 4, 3, 6}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\DisjointPaths\NodeDisjointPaths_unit.cpp:28:18: note: FIX-IT applied suggested code changes
    PathsForTest expectedNodeDisjointPaths{{1, 4, 3, 6}};
                 ^
[102/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/EulerPaths/Common/Utilities_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/Common/Utilities.hpp:55:9: warning: variable 'lesserByOne' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool lesserByOne = inDegree + 1 == outDegree;
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/Common/Utilities.hpp:55:14: note: FIX-IT applied suggested code changes
        bool lesserByOne = inDegree + 1 == outDegree;
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/Common/Utilities.hpp:56:9: warning: variable 'greaterByOne' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool greaterByOne = inDegree == outDegree + 1;
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/Common/Utilities.hpp:56:14: note: FIX-IT applied suggested code changes
        bool greaterByOne = inDegree == outDegree + 1;
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
[103/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/HierholzerAlgorithmForDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/Common/BaseHierholzerAlgorithm.hpp:8:7: warning: class 'BaseHierholzerAlgorithm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseHierholzerAlgorithm : public BaseEulerPathSearchType {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/DirectedGraph/BaseEulerPathSearchForDirectedGraph.hpp:13:7: warning: class 'BaseEulerPathSearchForDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseEulerPathSearchForDirectedGraph {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/DirectedGraph/HierholzerAlgorithmForDirectedGraph.hpp:27:9: warning: variable 'allVertices' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Vertices allVertices(b_graph.getVertices());
        ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/DirectedGraph/HierholzerAlgorithmForDirectedGraph.hpp:27:18: note: FIX-IT applied suggested code changes
        Vertices allVertices(b_graph.getVertices());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:65:5: warning: variable 'pathToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToVerify(pathSearch.getEulerCycle());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:65:10: note: FIX-IT applied suggested code changes
    Path pathToVerify(pathSearch.getEulerCycle());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:79:5: warning: variable 'pathToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToVerify(pathSearch.getEulerCycle());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:79:10: note: FIX-IT applied suggested code changes
    Path pathToVerify(pathSearch.getEulerCycle());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:81:5: warning: variable 'pathToExpect' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToExpect{0, 1, 2, 0};
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:81:10: note: FIX-IT applied suggested code changes
    Path pathToExpect{0, 1, 2, 0};
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:93:5: warning: variable 'pathToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToVerify(pathSearch.getEulerCycle());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:93:10: note: FIX-IT applied suggested code changes
    Path pathToVerify(pathSearch.getEulerCycle());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:104:5: warning: variable 'pathToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToVerify(pathSearch.getEulerPath());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:104:10: note: FIX-IT applied suggested code changes
    Path pathToVerify(pathSearch.getEulerPath());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:117:5: warning: variable 'pathToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToVerify(pathSearch.getEulerPath());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:117:10: note: FIX-IT applied suggested code changes
    Path pathToVerify(pathSearch.getEulerPath());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:119:5: warning: variable 'pathToExpect' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToExpect{0, 1, 2};
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:119:10: note: FIX-IT applied suggested code changes
    Path pathToExpect{0, 1, 2};
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:131:5: warning: variable 'pathToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToVerify(pathSearch.getEulerCycle());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:131:10: note: FIX-IT applied suggested code changes
    Path pathToVerify(pathSearch.getEulerCycle());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:148:5: warning: variable 'pathToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToVerify(pathSearch.getEulerPath());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:148:10: note: FIX-IT applied suggested code changes
    Path pathToVerify(pathSearch.getEulerPath());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:149:5: warning: variable 'cycleToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path cycleToVerify(pathSearch.getEulerCycle());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:149:10: note: FIX-IT applied suggested code changes
    Path cycleToVerify(pathSearch.getEulerCycle());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:151:5: warning: variable 'pathToExpect' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToExpect{1, 2, 3, 5, 5, 4, 1};
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/DirectedGraph/Utilities/CommonTestsWithEulerPathForDirectedGraph.hpp:151:10: note: FIX-IT applied suggested code changes
    Path pathToExpect{1, 2, 3, 5, 5, 4, 1};
         ^
[104/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/EulerPathSearchForUndirectedGraphUsingDfs_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/BaseEulerPathSearchForUndirectedGraph.hpp:13:7: warning: class 'BaseEulerPathSearchForUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseEulerPathSearchForUndirectedGraph {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/EulerPathSearchForUndirectedGraphUsingDfs.hpp:85:17: warning: variable 'currentEdge' of type 'Edge' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
                Edge currentEdge(queueOfEdgesAtVertex.front());
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/EulerPathSearchForUndirectedGraphUsingDfs.hpp:85:22: note: FIX-IT applied suggested code changes
                Edge currentEdge(queueOfEdgesAtVertex.front());
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:64:5: warning: variable 'pathToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToVerify(pathSearch.getEulerCycle());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:64:10: note: FIX-IT applied suggested code changes
    Path pathToVerify(pathSearch.getEulerCycle());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:77:5: warning: variable 'pathToVerify' of type 'typename EulerPathSearchForUndirectedGraphUsingDfs<int>::Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    typename PathSearch::Path pathToVerify(pathSearch.getEulerCycle());
    ^
                              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:77:31: note: FIX-IT applied suggested code changes
    typename PathSearch::Path pathToVerify(pathSearch.getEulerCycle());
                              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:79:5: warning: variable 'pathToExpect' of type 'typename EulerPathSearchForUndirectedGraphUsingDfs<int>::Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    typename PathSearch::Path pathToExpect{0, 1, 2, 0};
    ^
                              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:79:31: note: FIX-IT applied suggested code changes
    typename PathSearch::Path pathToExpect{0, 1, 2, 0};
                              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:90:5: warning: variable 'pathToVerify' of type 'typename EulerPathSearchForUndirectedGraphUsingDfs<int>::Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    typename PathSearch::Path pathToVerify(pathSearch.getEulerCycle());
    ^
                              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:90:31: note: FIX-IT applied suggested code changes
    typename PathSearch::Path pathToVerify(pathSearch.getEulerCycle());
                              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:101:5: warning: variable 'pathToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToVerify(pathSearch.getEulerPath());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:101:10: note: FIX-IT applied suggested code changes
    Path pathToVerify(pathSearch.getEulerPath());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:113:5: warning: variable 'pathToVerify' of type 'typename EulerPathSearchForUndirectedGraphUsingDfs<int>::Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    typename PathSearch::Path pathToVerify(pathSearch.getEulerPath());
    ^
                              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:113:31: note: FIX-IT applied suggested code changes
    typename PathSearch::Path pathToVerify(pathSearch.getEulerPath());
                              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:115:5: warning: variable 'pathToExpect' of type 'typename EulerPathSearchForUndirectedGraphUsingDfs<int>::Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    typename PathSearch::Path pathToExpect{1, 0, 2};
    ^
                              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:115:31: note: FIX-IT applied suggested code changes
    typename PathSearch::Path pathToExpect{1, 0, 2};
                              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:127:5: warning: variable 'pathToVerify' of type 'typename EulerPathSearchForUndirectedGraphUsingDfs<int>::Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    typename PathSearch::Path pathToVerify(pathSearch.getEulerCycle());
    ^
                              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:127:31: note: FIX-IT applied suggested code changes
    typename PathSearch::Path pathToVerify(pathSearch.getEulerCycle());
                              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:145:5: warning: variable 'pathToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToVerify(pathSearch.getEulerPath());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:145:10: note: FIX-IT applied suggested code changes
    Path pathToVerify(pathSearch.getEulerPath());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:146:5: warning: variable 'cycleToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path cycleToVerify(pathSearch.getEulerCycle());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:146:10: note: FIX-IT applied suggested code changes
    Path cycleToVerify(pathSearch.getEulerCycle());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:148:5: warning: variable 'pathToExpect' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToExpect{2, 1, 4, 5, 2, 3, 5};
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:148:10: note: FIX-IT applied suggested code changes
    Path pathToExpect{2, 1, 4, 5, 2, 3, 5};
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:169:5: warning: variable 'pathToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToVerify(pathSearch.getEulerPath());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:169:10: note: FIX-IT applied suggested code changes
    Path pathToVerify(pathSearch.getEulerPath());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:170:5: warning: variable 'cycleToVerify' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path cycleToVerify(pathSearch.getEulerCycle());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:170:10: note: FIX-IT applied suggested code changes
    Path cycleToVerify(pathSearch.getEulerCycle());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:172:5: warning: variable 'pathToExpect' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path pathToExpect{1, 2, 3, 4, 7, 6, 2, 5, 6, 3, 1};
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:172:10: note: FIX-IT applied suggested code changes
    Path pathToExpect{1, 2, 3, 4, 7, 6, 2, 5, 6, 3, 1};
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:173:5: warning: variable 'cycleToExpect' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Path cycleToExpect{1, 2, 3, 4, 7, 6, 2, 5, 6, 3, 1};
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/Utilities/CommonTestsWithEulerPathForUndirectedGraph.hpp:173:10: note: FIX-IT applied suggested code changes
    Path cycleToExpect{1, 2, 3, 4, 7, 6, 2, 5, 6, 3, 1};
         ^
[105/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/FleuryAlgorithm_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/BaseEulerPathSearchForUndirectedGraph.hpp:13:7: warning: class 'BaseEulerPathSearchForUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseEulerPathSearchForUndirectedGraph {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/FleuryAlgorithm.hpp:44:9: warning: variable 'originalEdges' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
        Edges originalEdges(b_graph.getEdges());
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/FleuryAlgorithm.hpp:44:15: note: FIX-IT applied suggested code changes
        Edges originalEdges(b_graph.getEdges());
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/FleuryAlgorithm.hpp:66:9: warning: variable 'connectedComponents' of type 'ConnectedComponentsUsingDfs<int>' can be declared 'const' [misc-const-correctness]
        ConnectedComponentsUsingDfs<Vertex> connectedComponents(graphWithDeletedEdge);
        ^
                                            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/FleuryAlgorithm.hpp:66:45: note: FIX-IT applied suggested code changes
        ConnectedComponentsUsingDfs<Vertex> connectedComponents(graphWithDeletedEdge);
                                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/FleuryAlgorithm.hpp:80:9: warning: variable 'edgesReference' of type 'SetOfEdges &' (aka 'set<pair<int, int>> &') can be declared 'const' [misc-const-correctness]
        SetOfEdges& edgesReference(graphToManipulate.getSetOfEdgesReference());
        ^
                   const
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/FleuryAlgorithm.hpp:80:19: note: FIX-IT applied suggested code changes
        SetOfEdges& edgesReference(graphToManipulate.getSetOfEdgesReference());
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
[106/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/EulerPaths/UndirectedGraph/HierholzerAlgorithmForUndirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/Common/BaseHierholzerAlgorithm.hpp:8:7: warning: class 'BaseHierholzerAlgorithm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseHierholzerAlgorithm : public BaseEulerPathSearchType {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/BaseEulerPathSearchForUndirectedGraph.hpp:13:7: warning: class 'BaseEulerPathSearchForUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseEulerPathSearchForUndirectedGraph {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/HierholzerAlgorithmForUndirectedGraph.hpp:29:9: warning: variable 'allVertices' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Vertices allVertices(b_graph.getVertices());
        ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/EulerPaths/UndirectedGraph/HierholzerAlgorithmForUndirectedGraph.hpp:29:18: note: FIX-IT applied suggested code changes
        Vertices allVertices(b_graph.getVertices());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
[107/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/FloydWarshallAlgorithm/PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/FloydWarshallAlgorithm/PathSearchUsingFloydWarshall.hpp:98:9: warning: variable 'vertices' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Vertices vertices(m_graph.getVertices());
        ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/FloydWarshallAlgorithm/PathSearchUsingFloydWarshall.hpp:98:18: note: FIX-IT applied suggested code changes
        Vertices vertices(m_graph.getVertices());
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/FloydWarshallAlgorithm/PathSearchUsingFloydWarshall.hpp:102:21: warning: variable 'startToIntermediateDetails' of type 'PathDetails &' can be declared 'const' [misc-const-correctness]
                    PathDetails& startToIntermediateDetails(
                    ^
                                const
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/FloydWarshallAlgorithm/PathSearchUsingFloydWarshall.hpp:102:32: note: FIX-IT applied suggested code changes
                    PathDetails& startToIntermediateDetails(
                               ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/FloydWarshallAlgorithm/PathSearchUsingFloydWarshall.hpp:108:29: warning: variable 'intermediateToEndDetails' of type 'PathDetails &' can be declared 'const' [misc-const-correctness]
                            PathDetails& intermediateToEndDetails(
                            ^
                                        const
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/FloydWarshallAlgorithm/PathSearchUsingFloydWarshall.hpp:108:40: note: FIX-IT applied suggested code changes
                            PathDetails& intermediateToEndDetails(
                                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:29:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingFloydWarshall<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:29:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:49:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingFloydWarshall<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:49:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:69:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchUsingFloydWarshall<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:69:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph);
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:89:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchUsingFloydWarshall<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:89:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph);
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:115:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingFloydWarshall<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:115:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:140:5: warning: variable 'pathSearch' of type 'ShortestPathSearchForTest' (aka 'PathSearchUsingFloydWarshall<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::less>') can be declared 'const' [misc-const-correctness]
    ShortestPathSearchForTest pathSearch(graph);
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:140:31: note: FIX-IT applied suggested code changes
    ShortestPathSearchForTest pathSearch(graph);
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:165:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchUsingFloydWarshall<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:165:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph);
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:190:5: warning: variable 'pathSearch' of type 'LongestPathSearchForTest' (aka 'PathSearchUsingFloydWarshall<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithListOfEdges<int>>, std::greater>') can be declared 'const' [misc-const-correctness]
    LongestPathSearchForTest pathSearch(graph);
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\FloydWarshallAlgorithm\PathSearchUsingFloydWarshallWithEdgeWeightedDirectedGraph_unit.cpp:190:30: note: FIX-IT applied suggested code changes
    LongestPathSearchForTest pathSearch(graph);
                             ^
[108/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/HamiltonianPaths/Common/Utilities_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/HamiltonianPaths/Common/Utilities.hpp:43:5: warning: variable 'numberOfVertices' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfVertices(graph.getNumberOfVertices());
    ^
        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/HamiltonianPaths/Common/Utilities.hpp:43:9: note: FIX-IT applied suggested code changes
    int numberOfVertices(graph.getNumberOfVertices());
        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/HamiltonianPaths/Common/Utilities.hpp:47:17: warning: variable 'isOreSatisfied' of type 'bool' can be declared 'const' [misc-const-correctness]
                bool isOreSatisfied = vertexToDegreeMap[vertex1] + vertexToDegreeMap[vertex2] >= numberOfVertices;
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/HamiltonianPaths/Common/Utilities.hpp:47:22: note: FIX-IT applied suggested code changes
                bool isOreSatisfied = vertexToDegreeMap[vertex1] + vertexToDegreeMap[vertex2] >= numberOfVertices;
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\Common\Utilities_unit.cpp:39:5: warning: variable 'graphWithPathAndSatisfied' of type 'UndirectedGraphForTest' (aka 'UndirectedGraphWithListOfEdges<int>') can be declared 'const' [misc-const-correctness]
    UndirectedGraphForTest graphWithPathAndSatisfied;
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\Common\Utilities_unit.cpp:39:28: note: FIX-IT applied suggested code changes
    UndirectedGraphForTest graphWithPathAndSatisfied;
                           ^
[109/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/HamiltonianPaths/HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:24:5: warning: variable 'pathsToVerify' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest pathsToVerify(pathSearch.getAllHamiltonianPaths());
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:24:18: note: FIX-IT applied suggested code changes
    PathsForTest pathsToVerify(pathSearch.getAllHamiltonianPaths());
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:26:5: warning: variable 'pathsToExpect' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest pathsToExpect{{0, 1, 2, 3}, {1, 2, 3, 0}, {2, 3, 0, 1}, {3, 0, 1, 2}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:26:18: note: FIX-IT applied suggested code changes
    PathsForTest pathsToExpect{{0, 1, 2, 3}, {1, 2, 3, 0}, {2, 3, 0, 1}, {3, 0, 1, 2}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:38:5: warning: variable 'pathsToVerify' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest pathsToVerify(pathSearch.getOneHamiltonianPath());
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:38:17: note: FIX-IT applied suggested code changes
    PathForTest pathsToVerify(pathSearch.getOneHamiltonianPath());
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:40:5: warning: variable 'pathsToExpect' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest pathsToExpect{0, 1, 2, 3};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:40:17: note: FIX-IT applied suggested code changes
    PathForTest pathsToExpect{0, 1, 2, 3};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:52:5: warning: variable 'pathsToVerify' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest pathsToVerify(pathSearch.getAllHamiltonianCycles());
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:52:18: note: FIX-IT applied suggested code changes
    PathsForTest pathsToVerify(pathSearch.getAllHamiltonianCycles());
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:54:5: warning: variable 'pathsToExpect' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest pathsToExpect{{0, 1, 2, 3, 0}, {1, 2, 3, 0, 1}, {2, 3, 0, 1, 2}, {3, 0, 1, 2, 3}};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:54:18: note: FIX-IT applied suggested code changes
    PathsForTest pathsToExpect{{0, 1, 2, 3, 0}, {1, 2, 3, 0, 1}, {2, 3, 0, 1, 2}, {3, 0, 1, 2, 3}};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:66:5: warning: variable 'pathsToVerify' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest pathsToVerify(pathSearch.getOneHamiltonianCycle());
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:66:17: note: FIX-IT applied suggested code changes
    PathForTest pathsToVerify(pathSearch.getOneHamiltonianCycle());
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:68:5: warning: variable 'pathsToExpect' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest pathsToExpect{0, 1, 2, 3, 0};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForDirectedGraph_unit.cpp:68:17: note: FIX-IT applied suggested code changes
    PathForTest pathsToExpect{0, 1, 2, 3, 0};
                ^
[110/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/HamiltonianPaths/HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:25:5: warning: variable 'pathsToVerify' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest pathsToVerify(pathSearch.getAllHamiltonianPaths());
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:25:18: note: FIX-IT applied suggested code changes
    PathsForTest pathsToVerify(pathSearch.getAllHamiltonianPaths());
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:27:5: warning: variable 'pathsToExpect' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest pathsToExpect{{0, 1, 2, 3}, {0, 1, 3, 2}, {0, 2, 1, 3}, {0, 2, 3, 1}, {1, 0, 2, 3}, {1, 3, 2, 0},
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:27:18: note: FIX-IT applied suggested code changes
    PathsForTest pathsToExpect{{0, 1, 2, 3}, {0, 1, 3, 2}, {0, 2, 1, 3}, {0, 2, 3, 1}, {1, 0, 2, 3}, {1, 3, 2, 0},
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:41:5: warning: variable 'pathsToVerify' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest pathsToVerify(pathSearch.getOneHamiltonianPath());
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:41:17: note: FIX-IT applied suggested code changes
    PathForTest pathsToVerify(pathSearch.getOneHamiltonianPath());
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:43:5: warning: variable 'pathsToExpect' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest pathsToExpect{0, 1, 2, 3};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:43:17: note: FIX-IT applied suggested code changes
    PathForTest pathsToExpect{0, 1, 2, 3};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:56:5: warning: variable 'pathsToVerify' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest pathsToVerify(pathSearch.getAllHamiltonianCycles());
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:56:18: note: FIX-IT applied suggested code changes
    PathsForTest pathsToVerify(pathSearch.getAllHamiltonianCycles());
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:58:5: warning: variable 'pathsToExpect' of type 'PathsForTest' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    PathsForTest pathsToExpect{{0, 1, 3, 2, 0}, {0, 2, 3, 1, 0}, {1, 0, 2, 3, 1}, {1, 3, 2, 0, 1},
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:58:18: note: FIX-IT applied suggested code changes
    PathsForTest pathsToExpect{{0, 1, 3, 2, 0}, {0, 2, 3, 1, 0}, {1, 0, 2, 3, 1}, {1, 3, 2, 0, 1},
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:72:5: warning: variable 'pathsToVerify' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest pathsToVerify(pathSearch.getOneHamiltonianCycle());
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:72:17: note: FIX-IT applied suggested code changes
    PathForTest pathsToVerify(pathSearch.getOneHamiltonianCycle());
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:74:5: warning: variable 'pathsToExpect' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest pathsToExpect{0, 1, 3, 2, 0};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\HamiltonianPaths\HamiltonianPathSearchWithDfs_ForUndirectedGraph_unit.cpp:74:17: note: FIX-IT applied suggested code changes
    PathForTest pathsToExpect{0, 1, 3, 2, 0};
                ^
[111/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/PathSearch/ShortestPaths/ShortestDistanceByTraverseCountUsingAdjacencyMatrix_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/ShortestPaths/ShortestDistanceByTraverseCountUsingAdjacencyMatrix.hpp:31:9: warning: variable 'minSize' of type 'int' can be declared 'const' [misc-const-correctness]
        int minSize = std::min(first.size(), second.size());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/ShortestPaths/ShortestDistanceByTraverseCountUsingAdjacencyMatrix.hpp:31:13: note: FIX-IT applied suggested code changes
        int minSize = std::min(first.size(), second.size());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/ShortestPaths/ShortestDistanceByTraverseCountUsingAdjacencyMatrix.hpp:31:23: warning: narrowing conversion from 'unsigned long long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int minSize = std::min(first.size(), second.size());
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/ShortestPaths/ShortestDistanceByTraverseCountUsingAdjacencyMatrix.hpp:33:13: warning: variable 'currentValue' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
            AlbaNumber currentValue = first[i] + second[i];
            ^
                       const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/ShortestPaths/ShortestDistanceByTraverseCountUsingAdjacencyMatrix.hpp:33:24: note: FIX-IT applied suggested code changes
            AlbaNumber currentValue = first[i] + second[i];
                       ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/ShortestPaths/ShortestDistanceByTraverseCountUsingAdjacencyMatrix.hpp:47:13: warning: variable 'entryValue' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
            AlbaNumber entryValue = adjacencyMatrix.getEntry(x, y) ? AlbaNumber(graph.getWeight(x, y))
            ^
                       const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/ShortestPaths/ShortestDistanceByTraverseCountUsingAdjacencyMatrix.hpp:47:24: note: FIX-IT applied suggested code changes
            AlbaNumber entryValue = adjacencyMatrix.getEntry(x, y) ? AlbaNumber(graph.getWeight(x, y))
                       ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\ShortestPaths\ShortestDistanceByTraverseCountUsingAdjacencyMatrix_unit.cpp:33:5: warning: variable 'shortestPaths' of type 'ShortestPathsForUndirectedGraphForTest' (aka 'ShortestDistanceByTraverseCountUsingAdjacencyMatrix<int, double, EdgeWeightedGraph<int, double, UndirectedGraphWithAdjacencyMatrix<int, MAX_VERTEX_VALUE>>>') can be declared 'const' [misc-const-correctness]
    ShortestPathsForUndirectedGraphForTest shortestPaths(graph, 3);
    ^
                                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\ShortestPaths\ShortestDistanceByTraverseCountUsingAdjacencyMatrix_unit.cpp:33:44: note: FIX-IT applied suggested code changes
    ShortestPathsForUndirectedGraphForTest shortestPaths(graph, 3);
                                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\ShortestPaths\ShortestDistanceByTraverseCountUsingAdjacencyMatrix_unit.cpp:52:5: warning: variable 'shortestPaths' of type 'ShortestPathsForDirectedGraphForTest' (aka 'ShortestDistanceByTraverseCountUsingAdjacencyMatrix<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithAdjacencyMatrix<int, MAX_VERTEX_VALUE>>>') can be declared 'const' [misc-const-correctness]
    ShortestPathsForDirectedGraphForTest shortestPaths(graph, 3);
    ^
                                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\ShortestPaths\ShortestDistanceByTraverseCountUsingAdjacencyMatrix_unit.cpp:52:42: note: FIX-IT applied suggested code changes
    ShortestPathsForDirectedGraphForTest shortestPaths(graph, 3);
                                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\ShortestPaths\ShortestDistanceByTraverseCountUsingAdjacencyMatrix_unit.cpp:72:5: warning: variable 'shortestPaths' of type 'ShortestPathsForDirectedGraphForTest' (aka 'ShortestDistanceByTraverseCountUsingAdjacencyMatrix<int, double, EdgeWeightedGraph<int, double, DirectedGraphWithAdjacencyMatrix<int, MAX_VERTEX_VALUE>>>') can be declared 'const' [misc-const-correctness]
    ShortestPathsForDirectedGraphForTest shortestPaths(graph, 4);
    ^
                                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\PathSearch\ShortestPaths\ShortestDistanceByTraverseCountUsingAdjacencyMatrix_unit.cpp:72:42: note: FIX-IT applied suggested code changes
    ShortestPathsForDirectedGraphForTest shortestPaths(graph, 4);
                                         ^
[112/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Reachability/Reachability/ReachabilityInDigraphWithArrayUsingDfs_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Reachability/Reachability/BaseReachabilityInDigraph.hpp:8:7: warning: class 'BaseReachabilityInDigraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseReachabilityInDigraph {
      ^
[113/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Reachability/Reachability/ReachabilityInDigraphWithSetUsingDfs_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Reachability/Reachability/BaseReachabilityInDigraph.hpp:8:7: warning: class 'BaseReachabilityInDigraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseReachabilityInDigraph {
      ^
[114/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Reachability/TransitiveClosure/TransitiveClosureWithArray_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Reachability/Reachability/BaseReachabilityInDigraph.hpp:8:7: warning: class 'BaseReachabilityInDigraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseReachabilityInDigraph {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Reachability/TransitiveClosure/BaseTransitiveClosure.hpp:6:7: warning: class 'BaseTransitiveClosure' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTransitiveClosure {
      ^
[115/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Reachability/TransitiveClosure/TransitiveClosureWithMap_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Reachability/Reachability/BaseReachabilityInDigraph.hpp:8:7: warning: class 'BaseReachabilityInDigraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseReachabilityInDigraph {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Reachability/TransitiveClosure/BaseTransitiveClosure.hpp:6:7: warning: class 'BaseTransitiveClosure' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTransitiveClosure {
      ^
[116/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/SuccessorGraph/WalkInSuccessorGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
[117/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/SymbolGraph/InvertedMapForSymbolGraph_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\InvertedMapForSymbolGraph_unit.cpp:22:5: warning: variable 'expectedMap' of type 'InvertedMapForTest::ObjectToVertexMap' (aka 'map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, int>') can be declared 'const' [misc-const-correctness]
    InvertedMapForTest::ObjectToVertexMap expectedMap{{"zero", 0}, {"one", 1}, {"two", 2}};
    ^
                                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\InvertedMapForSymbolGraph_unit.cpp:22:43: note: FIX-IT applied suggested code changes
    InvertedMapForTest::ObjectToVertexMap expectedMap{{"zero", 0}, {"one", 1}, {"two", 2}};
                                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\InvertedMapForSymbolGraph_unit.cpp:37:5: warning: variable 'expectedMap' of type 'InvertedMapForTest::ObjectToVertexMap' (aka 'map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, int>') can be declared 'const' [misc-const-correctness]
    InvertedMapForTest::ObjectToVertexMap expectedMap{{"replacement for one", 1}, {"two", 2}};
    ^
                                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\InvertedMapForSymbolGraph_unit.cpp:37:43: note: FIX-IT applied suggested code changes
    InvertedMapForTest::ObjectToVertexMap expectedMap{{"replacement for one", 1}, {"two", 2}};
                                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\InvertedMapForSymbolGraph_unit.cpp:38:5: warning: variable 'expectedUnusedVertices' of type 'InvertedMapForTest::Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    InvertedMapForTest::Vertices expectedUnusedVertices{0};
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\InvertedMapForSymbolGraph_unit.cpp:38:34: note: FIX-IT applied suggested code changes
    InvertedMapForTest::Vertices expectedUnusedVertices{0};
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\InvertedMapForSymbolGraph_unit.cpp:52:5: warning: variable 'expectedMap' of type 'InvertedMapForTest::ObjectToVertexMap' (aka 'map<std::basic_string<char, std::char_traits<char>, std::allocator<char>>, int>') can be declared 'const' [misc-const-correctness]
    InvertedMapForTest::ObjectToVertexMap expectedMap{{"two", 2}};
    ^
                                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\InvertedMapForSymbolGraph_unit.cpp:52:43: note: FIX-IT applied suggested code changes
    InvertedMapForTest::ObjectToVertexMap expectedMap{{"two", 2}};
                                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\InvertedMapForSymbolGraph_unit.cpp:53:5: warning: variable 'expectedUnusedVertices' of type 'InvertedMapForTest::Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    InvertedMapForTest::Vertices expectedUnusedVertices{0, 1};
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\InvertedMapForSymbolGraph_unit.cpp:53:34: note: FIX-IT applied suggested code changes
    InvertedMapForTest::Vertices expectedUnusedVertices{0, 1};
                                 ^
[118/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/SymbolGraph/SymbolGraphWithDouble_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:31:5: warning: variable 'symbolGraph' of type 'SymbolGraphForTest' (aka 'SymbolGraph<unsigned long long, double, UndirectedGraphWithListOfEdges<unsigned long long>>') can be declared 'const' [misc-const-correctness]
    SymbolGraphForTest symbolGraph;
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:31:24: note: FIX-IT applied suggested code changes
    SymbolGraphForTest symbolGraph;
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:53:5: warning: variable 'symbolGraph' of type 'SymbolGraphForTest' (aka 'SymbolGraph<unsigned long long, double, UndirectedGraphWithListOfEdges<unsigned long long>>') can be declared 'const' [misc-const-correctness]
    SymbolGraphForTest symbolGraph;
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:53:24: note: FIX-IT applied suggested code changes
    SymbolGraphForTest symbolGraph;
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:79:5: warning: variable 'expectedEdges' of type 'GraphForTest::Edges' (aka 'vector<pair<unsigned long long, unsigned long long>>') can be declared 'const' [misc-const-correctness]
    GraphForTest::Edges expectedEdges{
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:79:25: note: FIX-IT applied suggested code changes
    GraphForTest::Edges expectedEdges{
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:90:5: warning: variable 'expectedSymbolTable' of type 'SymbolGraphForTest::SymbolTable' (aka 'map<unsigned long long, double>') can be declared 'const' [misc-const-correctness]
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{vertexFor12, 1.2}, {vertexFor13, 1.3}, {vertexFor23, 2.3}};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:90:37: note: FIX-IT applied suggested code changes
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{vertexFor12, 1.2}, {vertexFor13, 1.3}, {vertexFor23, 2.3}};
                                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:100:5: warning: variable 'expectedEdges' of type 'GraphForTest::Edges' (aka 'vector<pair<unsigned long long, unsigned long long>>') can be declared 'const' [misc-const-correctness]
    GraphForTest::Edges expectedEdges{
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:100:25: note: FIX-IT applied suggested code changes
    GraphForTest::Edges expectedEdges{
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:102:5: warning: variable 'expectedSymbolTable' of type 'SymbolGraphForTest::SymbolTable' (aka 'map<unsigned long long, double>') can be declared 'const' [misc-const-correctness]
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{vertexFor12, 1.2}, {vertexFor13, 1.3}, {vertexFor23, 2.3}};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:102:37: note: FIX-IT applied suggested code changes
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{vertexFor12, 1.2}, {vertexFor13, 1.3}, {vertexFor23, 2.3}};
                                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:116:5: warning: variable 'expectedEdges' of type 'GraphForTest::Edges' (aka 'vector<pair<unsigned long long, unsigned long long>>') can be declared 'const' [misc-const-correctness]
    GraphForTest::Edges expectedEdges{{vertexFor13, vertexFor23}};
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:116:25: note: FIX-IT applied suggested code changes
    GraphForTest::Edges expectedEdges{{vertexFor13, vertexFor23}};
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:117:5: warning: variable 'expectedSymbolTable' of type 'SymbolGraphForTest::SymbolTable' (aka 'map<unsigned long long, double>') can be declared 'const' [misc-const-correctness]
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{vertexFor13, 1.3}, {vertexFor23, 2.3}};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithDouble_unit.cpp:117:37: note: FIX-IT applied suggested code changes
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{vertexFor13, 1.3}, {vertexFor23, 2.3}};
                                    ^
[119/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/SymbolGraph/SymbolGraphWithString_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:34:5: warning: variable 'symbolGraph' of type 'SymbolGraphForTest' (aka 'SymbolGraph<int, basic_string<char, char_traits<char>, allocator<char>>, UndirectedGraphWithListOfEdges<int>>') can be declared 'const' [misc-const-correctness]
    SymbolGraphForTest symbolGraph;
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:34:24: note: FIX-IT applied suggested code changes
    SymbolGraphForTest symbolGraph;
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:58:5: warning: variable 'symbolGraph' of type 'SymbolGraphForTest' (aka 'SymbolGraph<int, basic_string<char, char_traits<char>, allocator<char>>, UndirectedGraphWithListOfEdges<int>>') can be declared 'const' [misc-const-correctness]
    SymbolGraphForTest symbolGraph;
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:58:24: note: FIX-IT applied suggested code changes
    SymbolGraphForTest symbolGraph;
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:86:5: warning: variable 'expectedEdges' of type 'GraphForTest::Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    GraphForTest::Edges expectedEdges{{0, 1}, {0, 2}, {1, 2}};
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:86:25: note: FIX-IT applied suggested code changes
    GraphForTest::Edges expectedEdges{{0, 1}, {0, 2}, {1, 2}};
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:97:5: warning: variable 'expectedSymbolTable' of type 'SymbolGraphForTest::SymbolTable' (aka 'map<int, std::basic_string<char, std::char_traits<char>, std::allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{0, "zero"}, {1, "one"}, {2, "two"}};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:97:37: note: FIX-IT applied suggested code changes
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{0, "zero"}, {1, "one"}, {2, "two"}};
                                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:108:5: warning: variable 'expectedEdges' of type 'GraphForTest::Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    GraphForTest::Edges expectedEdges{{0, 1}, {0, 2}, {1, 2}};
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:108:25: note: FIX-IT applied suggested code changes
    GraphForTest::Edges expectedEdges{{0, 1}, {0, 2}, {1, 2}};
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:109:5: warning: variable 'expectedSymbolTable' of type 'SymbolGraphForTest::SymbolTable' (aka 'map<int, std::basic_string<char, std::char_traits<char>, std::allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{0, "zero"}, {1, "one"}, {2, "two"}};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:109:37: note: FIX-IT applied suggested code changes
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{0, "zero"}, {1, "one"}, {2, "two"}};
                                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:124:5: warning: variable 'expectedEdges' of type 'GraphForTest::Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    GraphForTest::Edges expectedEdges{{1, 2}};
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:124:25: note: FIX-IT applied suggested code changes
    GraphForTest::Edges expectedEdges{{1, 2}};
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:125:5: warning: variable 'expectedSymbolTable' of type 'SymbolGraphForTest::SymbolTable' (aka 'map<int, std::basic_string<char, std::char_traits<char>, std::allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{1, "one"}, {2, "two"}};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\SymbolGraph\SymbolGraphWithString_unit.cpp:125:37: note: FIX-IT applied suggested code changes
    SymbolGraphForTest::SymbolTable expectedSymbolTable{{1, "one"}, {2, "two"}};
                                    ^
[120/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Tree/AncestorsInTree_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/AncestorsInTree.hpp:41:17: warning: variable 'powerOfTwoDistance' of type 'int' can be declared 'const' [misc-const-correctness]
                int powerOfTwoDistance =
                ^
                    const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/AncestorsInTree.hpp:41:21: note: FIX-IT applied suggested code changes
                int powerOfTwoDistance =
                    ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\AncestorsInTree_unit.cpp:23:5: warning: variable 'query' of type 'QueryForTest' (aka 'AncestorsInTree<int>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(graph, 1);
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\AncestorsInTree_unit.cpp:23:18: note: FIX-IT applied suggested code changes
    QueryForTest query(graph, 1);
                 ^
[121/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Tree/ChildrenInTree_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\ChildrenInTree_unit.cpp:24:5: warning: variable 'query' of type 'QueryForTest' (aka 'ChildrenInTree<int>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(graph, 1);
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\ChildrenInTree_unit.cpp:24:18: note: FIX-IT applied suggested code changes
    QueryForTest query(graph, 1);
                 ^
[122/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Tree/LongestPathsInTree_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithDistanceCount.hpp:8:7: warning: class 'BasePathSearchWithDistanceCount' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithDistanceCount {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LongestPathsInTree.hpp:71:9: warning: variable 'currentDistance' of type 'int' can be declared 'const' [misc-const-correctness]
        int currentDistance(dfs.getDistanceTo(currentVertex));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LongestPathsInTree.hpp:71:13: note: FIX-IT applied suggested code changes
        int currentDistance(dfs.getDistanceTo(currentVertex));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:33:5: warning: variable 'endPointPairsToVerify' of type 'EndPointPairsForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    EndPointPairsForTest endPointPairsToVerify(longestPath.getEndPointPairsOfLongestPaths());
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:33:26: note: FIX-IT applied suggested code changes
    EndPointPairsForTest endPointPairsToVerify(longestPath.getEndPointPairsOfLongestPaths());
                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:35:5: warning: variable 'endPointPairsToExpect' of type 'EndPointPairsForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    EndPointPairsForTest endPointPairsToExpect{{5, 7}, {6, 7}, {7, 5}, {7, 6}};
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:35:26: note: FIX-IT applied suggested code changes
    EndPointPairsForTest endPointPairsToExpect{{5, 7}, {6, 7}, {7, 5}, {7, 6}};
                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:56:5: warning: variable 'endPointPairsToVerify' of type 'EndPointPairsForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    EndPointPairsForTest endPointPairsToVerify(longestPath.getEndPointPairsOfLongestPaths());
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:56:26: note: FIX-IT applied suggested code changes
    EndPointPairsForTest endPointPairsToVerify(longestPath.getEndPointPairsOfLongestPaths());
                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:58:5: warning: variable 'endPointPairsToExpect' of type 'EndPointPairsForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    EndPointPairsForTest endPointPairsToExpect{{5, 7}};
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:58:26: note: FIX-IT applied suggested code changes
    EndPointPairsForTest endPointPairsToExpect{{5, 7}};
                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:69:5: warning: variable 'endPointPairsToVerify' of type 'EndPointPairsForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    EndPointPairsForTest endPointPairsToVerify(longestPath.getEndPointPairsOfLongestPaths());
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:69:26: note: FIX-IT applied suggested code changes
    EndPointPairsForTest endPointPairsToVerify(longestPath.getEndPointPairsOfLongestPaths());
                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:70:5: warning: variable 'endPointPairsToExpect' of type 'EndPointPairsForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    EndPointPairsForTest endPointPairsToExpect{{5, 7}, {6, 7}, {7, 5}, {7, 6}};
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LongestPathsInTree_unit.cpp:70:26: note: FIX-IT applied suggested code changes
    EndPointPairsForTest endPointPairsToExpect{{5, 7}, {6, 7}, {7, 5}, {7, 6}};
                         ^
[123/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Tree/LowestCommonAncestors_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:29:13: warning: variable 'vertexIndex1' of type 'int' can be declared 'const' [misc-const-correctness]
            int vertexIndex1 = it1->second;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:29:17: note: FIX-IT applied suggested code changes
            int vertexIndex1 = it1->second;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:30:13: warning: variable 'vertexIndex2' of type 'int' can be declared 'const' [misc-const-correctness]
            int vertexIndex2 = it2->second;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:30:17: note: FIX-IT applied suggested code changes
            int vertexIndex2 = it2->second;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:31:13: warning: variable 'lowestCommonAncestorIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int lowestCommonAncestorIndex(getLowestCommonAncestorIndex(vertexIndex1, vertexIndex2));
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:31:17: note: FIX-IT applied suggested code changes
            int lowestCommonAncestorIndex(getLowestCommonAncestorIndex(vertexIndex1, vertexIndex2));
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:44:13: warning: variable 'vertexIndex1' of type 'int' can be declared 'const' [misc-const-correctness]
            int vertexIndex1 = it1->second;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:44:17: note: FIX-IT applied suggested code changes
            int vertexIndex1 = it1->second;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:45:13: warning: variable 'vertexIndex2' of type 'int' can be declared 'const' [misc-const-correctness]
            int vertexIndex2 = it2->second;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:45:17: note: FIX-IT applied suggested code changes
            int vertexIndex2 = it2->second;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:46:13: warning: variable 'lowestCommonAncestorIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int lowestCommonAncestorIndex(getLowestCommonAncestorIndex(vertexIndex1, vertexIndex2));
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:46:17: note: FIX-IT applied suggested code changes
            int lowestCommonAncestorIndex(getLowestCommonAncestorIndex(vertexIndex1, vertexIndex2));
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:57:13: warning: variable 'currentDepth' of type 'int' can be declared 'const' [misc-const-correctness]
            int currentDepth(m_depths[i]);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/LowestCommonAncestors.hpp:57:17: note: FIX-IT applied suggested code changes
            int currentDepth(m_depths[i]);
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:26:5: warning: variable 'lowestCommonAncestors' of type 'LowestCommonAncestorsForTest' (aka 'LowestCommonAncestors<int>') can be declared 'const' [misc-const-correctness]
    LowestCommonAncestorsForTest lowestCommonAncestors(graph, 1);
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:26:34: note: FIX-IT applied suggested code changes
    LowestCommonAncestorsForTest lowestCommonAncestors(graph, 1);
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:28:5: warning: variable 'expectedVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedVertices{1, 2, 6, 2, 1, 3, 1, 4, 7, 4, 8, 4, 9, 4, 1, 5, 1};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:28:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedVertices{1, 2, 6, 2, 1, 3, 1, 4, 7, 4, 8, 4, 9, 4, 1, 5, 1};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:29:5: warning: variable 'expectedDepth' of type 'DepthsForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    DepthsForTest expectedDepth{1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 3, 2, 3, 2, 1, 2, 1};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:29:19: note: FIX-IT applied suggested code changes
    DepthsForTest expectedDepth{1, 2, 3, 2, 1, 2, 1, 2, 3, 2, 3, 2, 3, 2, 1, 2, 1};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:47:5: warning: variable 'lowestCommonAncestors' of type 'LowestCommonAncestorsForTest' (aka 'LowestCommonAncestors<int>') can be declared 'const' [misc-const-correctness]
    LowestCommonAncestorsForTest lowestCommonAncestors(graph, 1);
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:47:34: note: FIX-IT applied suggested code changes
    LowestCommonAncestorsForTest lowestCommonAncestors(graph, 1);
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:49:5: warning: variable 'expectedVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedVertices{1, 2, 5, 2, 6, 8, 6, 2, 1, 3, 1, 4, 7, 4, 1};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:49:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedVertices{1, 2, 5, 2, 6, 8, 6, 2, 1, 3, 1, 4, 7, 4, 1};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:50:5: warning: variable 'expectedDepth' of type 'DepthsForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    DepthsForTest expectedDepth{1, 2, 3, 2, 3, 4, 3, 2, 1, 2, 1, 2, 3, 2, 1};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\LowestCommonAncestors_unit.cpp:50:19: note: FIX-IT applied suggested code changes
    DepthsForTest expectedDepth{1, 2, 3, 2, 3, 4, 3, 2, 1, 2, 1, 2, 3, 2, 1};
                  ^
[124/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Tree/SpanningTree/CountSpanningTreesUsingKirchhoffTheorem_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/CountSpanningTreesUsingKirchhoffTheorem.hpp:29:9: warning: variable 'laplaceanMatrix' of type 'LaplaceanMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
        LaplaceanMatrix laplaceanMatrix(createLaplaceanMatrix<Vertex, MAX_VERTEX_VALUE>(graph));
        ^
                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/CountSpanningTreesUsingKirchhoffTheorem.hpp:29:25: note: FIX-IT applied suggested code changes
        LaplaceanMatrix laplaceanMatrix(createLaplaceanMatrix<Vertex, MAX_VERTEX_VALUE>(graph));
                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/CountSpanningTreesUsingKirchhoffTheorem.hpp:30:9: warning: variable 'rowAndColumnPair' of type 'RowAndColumnPair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
        RowAndColumnPair rowAndColumnPair(getBestRowAndColumnPairToRemove(laplaceanMatrix));
        ^
                         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/CountSpanningTreesUsingKirchhoffTheorem.hpp:30:26: note: FIX-IT applied suggested code changes
        RowAndColumnPair rowAndColumnPair(getBestRowAndColumnPairToRemove(laplaceanMatrix));
                         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/CountSpanningTreesUsingKirchhoffTheorem.hpp:31:9: warning: variable 'reducedMatrix' of type 'LaplaceanMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
        LaplaceanMatrix reducedMatrix(matrix::getMatrixWithOneColumnAndOneRowRemoved(
        ^
                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/CountSpanningTreesUsingKirchhoffTheorem.hpp:31:25: note: FIX-IT applied suggested code changes
        LaplaceanMatrix reducedMatrix(matrix::getMatrixWithOneColumnAndOneRowRemoved(
                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/LaplaceanMatrix.hpp:30:5: warning: variable 'isUndirectedGraph' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isUndirectedGraph = GraphDirectionType::Undirected == graph.getGraphDirectionType();
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/LaplaceanMatrix.hpp:30:10: note: FIX-IT applied suggested code changes
    bool isUndirectedGraph = GraphDirectionType::Undirected == graph.getGraphDirectionType();
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/LaplaceanMatrix.hpp:32:9: warning: variable 'index1' of type 'int' can be declared 'const' [misc-const-correctness]
        int index1 = vertexToIndexArray[edge.first];
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/LaplaceanMatrix.hpp:32:13: note: FIX-IT applied suggested code changes
        int index1 = vertexToIndexArray[edge.first];
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/LaplaceanMatrix.hpp:33:9: warning: variable 'index2' of type 'int' can be declared 'const' [misc-const-correctness]
        int index2 = vertexToIndexArray[edge.second];
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/LaplaceanMatrix.hpp:33:13: note: FIX-IT applied suggested code changes
        int index2 = vertexToIndexArray[edge.second];
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
[125/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Tree/SpanningTree/MinimumSpanningTree/KruskalAlgorithm_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/KruskalAlgorithm.hpp:31:9: warning: variable 'maxNumberOfEdgesInSpanningTree' of type 'int' can be declared 'const' [misc-const-correctness]
        int maxNumberOfEdgesInSpanningTree(m_graph.getNumberOfVertices() - 1);
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/KruskalAlgorithm.hpp:31:13: note: FIX-IT applied suggested code changes
        int maxNumberOfEdgesInSpanningTree(m_graph.getNumberOfVertices() - 1);
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/KruskalAlgorithm.hpp:37:13: warning: variable 'shortestEdge' of type 'EdgeOrderedByWeight' (aka 'alba::algorithm::GraphTypesWithWeights<int, double>::EdgeOrderedByWeight') can be declared 'const' [misc-const-correctness]
            EdgeOrderedByWeight shortestEdge(m_edgesInOrder.top());
            ^
                                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/KruskalAlgorithm.hpp:37:33: note: FIX-IT applied suggested code changes
            EdgeOrderedByWeight shortestEdge(m_edgesInOrder.top());
                                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\KruskalAlgorithm_unit.cpp:38:5: warning: variable 'spanningTreeSearch' of type 'MinimumSpanningTreeSearchForTest' (aka 'KruskalAlgorithm<int, double, EdgeWeightedGraph<int, double, UndirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    MinimumSpanningTreeSearchForTest spanningTreeSearch(graph, 0);
    ^
                                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\KruskalAlgorithm_unit.cpp:38:38: note: FIX-IT applied suggested code changes
    MinimumSpanningTreeSearchForTest spanningTreeSearch(graph, 0);
                                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\KruskalAlgorithm_unit.cpp:40:5: warning: variable 'expectedMinimumSpanningTree' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges expectedMinimumSpanningTree{{0, 7}, {2, 3}, {1, 7}, {0, 2}, {5, 7}, {4, 5}, {2, 6}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\KruskalAlgorithm_unit.cpp:40:11: note: FIX-IT applied suggested code changes
    Edges expectedMinimumSpanningTree{{0, 7}, {2, 3}, {1, 7}, {0, 2}, {5, 7}, {4, 5}, {2, 6}};
          ^
[126/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Tree/SpanningTree/MinimumSpanningTree/PrimAlgorithmEagerVersion_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/PrimAlgorithmEagerVersion.hpp:53:13: warning: variable 'nearestVertex' of type 'VertexOrderedByWeight' (aka 'alba::algorithm::GraphTypesWithWeights<int, double>::VertexOrderedByWeight') can be declared 'const' [misc-const-correctness]
            VertexOrderedByWeight nearestVertex(m_nearestVerticesToTree.top());
            ^
                                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/PrimAlgorithmEagerVersion.hpp:53:35: note: FIX-IT applied suggested code changes
            VertexOrderedByWeight nearestVertex(m_nearestVerticesToTree.top());
                                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\PrimAlgorithmEagerVersion_unit.cpp:38:5: warning: variable 'spanningTreeSearch' of type 'MinimumSpanningTreeSearchForTest' (aka 'PrimAlgorithmEagerVersion<int, double, EdgeWeightedGraph<int, double, UndirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    MinimumSpanningTreeSearchForTest spanningTreeSearch(graph, 0);
    ^
                                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\PrimAlgorithmEagerVersion_unit.cpp:38:38: note: FIX-IT applied suggested code changes
    MinimumSpanningTreeSearchForTest spanningTreeSearch(graph, 0);
                                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\PrimAlgorithmEagerVersion_unit.cpp:40:5: warning: variable 'expectedMinimumSpanningTree' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges expectedMinimumSpanningTree{{1, 7}, {0, 2}, {2, 3}, {4, 5}, {5, 7}, {2, 6}, {0, 7}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\PrimAlgorithmEagerVersion_unit.cpp:40:11: note: FIX-IT applied suggested code changes
    Edges expectedMinimumSpanningTree{{1, 7}, {0, 2}, {2, 3}, {4, 5}, {5, 7}, {2, 6}, {0, 7}};
          ^
[127/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Tree/SpanningTree/MinimumSpanningTree/PrimAlgorithmLazyVersion_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/PrimAlgorithmLazyVersion.hpp:35:13: warning: variable 'adjacentEdgeWithLowestWeight' of type 'EdgeOrderedByWeight' (aka 'alba::algorithm::GraphTypesWithWeights<int, double>::EdgeOrderedByWeight') can be declared 'const' [misc-const-correctness]
            EdgeOrderedByWeight adjacentEdgeWithLowestWeight(m_adjacentEdgesInOrder.top());
            ^
                                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/PrimAlgorithmLazyVersion.hpp:35:33: note: FIX-IT applied suggested code changes
            EdgeOrderedByWeight adjacentEdgeWithLowestWeight(m_adjacentEdgesInOrder.top());
                                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/PrimAlgorithmLazyVersion.hpp:45:9: warning: variable 'isVertex1NotProcessed' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool isVertex1NotProcessed(m_processedVertices.isNotFound(startVertexOfEdge));
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/PrimAlgorithmLazyVersion.hpp:45:14: note: FIX-IT applied suggested code changes
        bool isVertex1NotProcessed(m_processedVertices.isNotFound(startVertexOfEdge));
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/PrimAlgorithmLazyVersion.hpp:46:9: warning: variable 'isVertex2NotProcessed' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool isVertex2NotProcessed(m_processedVertices.isNotFound(endVertexOfEdge));
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SpanningTree/MinimumSpanningTree/PrimAlgorithmLazyVersion.hpp:46:14: note: FIX-IT applied suggested code changes
        bool isVertex2NotProcessed(m_processedVertices.isNotFound(endVertexOfEdge));
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\PrimAlgorithmLazyVersion_unit.cpp:38:5: warning: variable 'spanningTreeSearch' of type 'MinimumSpanningTreeSearchForTest' (aka 'PrimAlgorithmLazyVersion<int, double, EdgeWeightedGraph<int, double, UndirectedGraphWithListOfEdges<int>>>') can be declared 'const' [misc-const-correctness]
    MinimumSpanningTreeSearchForTest spanningTreeSearch(graph, 0);
    ^
                                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\PrimAlgorithmLazyVersion_unit.cpp:38:38: note: FIX-IT applied suggested code changes
    MinimumSpanningTreeSearchForTest spanningTreeSearch(graph, 0);
                                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\PrimAlgorithmLazyVersion_unit.cpp:40:5: warning: variable 'expectedMinimumSpanningTree' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges expectedMinimumSpanningTree{{0, 7}, {1, 7}, {0, 2}, {2, 3}, {5, 7}, {4, 5}, {2, 6}};
    ^
          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SpanningTree\MinimumSpanningTree\PrimAlgorithmLazyVersion_unit.cpp:40:11: note: FIX-IT applied suggested code changes
    Edges expectedMinimumSpanningTree{{0, 7}, {1, 7}, {0, 2}, {2, 3}, {5, 7}, {4, 5}, {2, 6}};
          ^
[128/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Tree/SubTreeQuery/SubTreeQueryWithAccumulator_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SubTreeQuery/SubTreeQuery.hpp:65:9: warning: variable 'beforeTreeSize' of type 'int' can be declared 'const' [misc-const-correctness]
        int beforeTreeSize = treeSize++;
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SubTreeQuery/SubTreeQuery.hpp:65:13: note: FIX-IT applied suggested code changes
        int beforeTreeSize = treeSize++;
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SubTreeQuery/SubTreeQueryWithAccumulator.hpp:33:13: warning: variable 'indexOfSubRoot' of type 'int' can be declared 'const' [misc-const-correctness]
            int indexOfSubRoot = it->second;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SubTreeQuery/SubTreeQueryWithAccumulator.hpp:33:17: note: FIX-IT applied suggested code changes
            int indexOfSubRoot = it->second;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
[129/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Tree/SubTreeQuery/SubTreeQueryWithPathAccumulator_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SubTreeQuery/SubTreeQueryWithPathAccumulator.hpp:63:9: warning: variable 'index' of type 'int' can be declared 'const' [misc-const-correctness]
        int index = treeSize++;
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SubTreeQuery/SubTreeQueryWithPathAccumulator.hpp:63:13: note: FIX-IT applied suggested code changes
        int index = treeSize++;
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SubTreeQuery\SubTreeQueryWithPathAccumulator_unit.cpp:31:5: warning: variable 'expectedVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedVertices{1, 2, 6, 3, 4, 7, 8, 9, 5};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SubTreeQuery\SubTreeQueryWithPathAccumulator_unit.cpp:31:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedVertices{1, 2, 6, 3, 4, 7, 8, 9, 5};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SubTreeQuery\SubTreeQueryWithPathAccumulator_unit.cpp:32:5: warning: variable 'expectedPathResults' of type 'CountsForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    CountsForTest expectedPathResults{1, 3, 9, 4, 5, 12, 13, 14, 6};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SubTreeQuery\SubTreeQueryWithPathAccumulator_unit.cpp:32:19: note: FIX-IT applied suggested code changes
    CountsForTest expectedPathResults{1, 3, 9, 4, 5, 12, 13, 14, 6};
                  ^
[130/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Tree/SubTreeQuery/SubTreeQuery_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SubTreeQuery/SubTreeQuery.hpp:29:13: warning: variable 'indexOfSubRoot' of type 'int' can be declared 'const' [misc-const-correctness]
            int indexOfSubRoot = it->second;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SubTreeQuery/SubTreeQuery.hpp:29:17: note: FIX-IT applied suggested code changes
            int indexOfSubRoot = it->second;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SubTreeQuery/SubTreeQuery.hpp:30:13: warning: variable 'subTreeSizeAtSubRoot' of type 'int' can be declared 'const' [misc-const-correctness]
            int subTreeSizeAtSubRoot = m_subTreeSize[indexOfSubRoot];
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Tree/SubTreeQuery/SubTreeQuery.hpp:30:17: note: FIX-IT applied suggested code changes
            int subTreeSizeAtSubRoot = m_subTreeSize[indexOfSubRoot];
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SubTreeQuery\SubTreeQuery_unit.cpp:28:5: warning: variable 'expectedVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedVertices{1, 2, 6, 3, 4, 7, 8, 9, 5};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SubTreeQuery\SubTreeQuery_unit.cpp:28:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedVertices{1, 2, 6, 3, 4, 7, 8, 9, 5};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SubTreeQuery\SubTreeQuery_unit.cpp:29:5: warning: variable 'expectedSizes' of type 'CountsForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    CountsForTest expectedSizes{9, 2, 1, 1, 4, 1, 1, 1, 1};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SubTreeQuery\SubTreeQuery_unit.cpp:29:19: note: FIX-IT applied suggested code changes
    CountsForTest expectedSizes{9, 2, 1, 1, 4, 1, 1, 1, 1};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SubTreeQuery\SubTreeQuery_unit.cpp:30:5: warning: variable 'expectedVerticesOfSubTreeAt4' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedVerticesOfSubTreeAt4{4, 7, 8, 9};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Tree\SubTreeQuery\SubTreeQuery_unit.cpp:30:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedVerticesOfSubTreeAt4{4, 7, 8, 9};
                    ^
[131/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/UndirectedGraph/UndirectedGraphWithAdjacencyMatrix_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:108:5: warning: variable 'adjacentVerticesToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesToVerify(graph.getAdjacentVerticesAt(0));
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:108:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesToVerify(graph.getAdjacentVerticesAt(0));
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:120:5: warning: variable 'adjacentVerticesAt0ToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesAt0ToVerify(graph.getAdjacentVerticesAt(0));
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:120:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesAt0ToVerify(graph.getAdjacentVerticesAt(0));
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:121:5: warning: variable 'adjacentVerticesAt1ToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesAt1ToVerify(graph.getAdjacentVerticesAt(1));
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:121:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesAt1ToVerify(graph.getAdjacentVerticesAt(1));
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:122:5: warning: variable 'adjacentVerticesAt2ToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesAt2ToVerify(graph.getAdjacentVerticesAt(2));
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:122:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesAt2ToVerify(graph.getAdjacentVerticesAt(2));
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:124:5: warning: variable 'adjacentVerticesAt0ToExpect' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesAt0ToExpect{1, 2};
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:124:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesAt0ToExpect{1, 2};
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:125:5: warning: variable 'adjacentVerticesAt1ToExpect' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesAt1ToExpect{0};
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:125:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesAt1ToExpect{0};
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:126:5: warning: variable 'adjacentVerticesAt2ToExpect' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices adjacentVerticesAt2ToExpect{0};
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:126:14: note: FIX-IT applied suggested code changes
    Vertices adjacentVerticesAt2ToExpect{0};
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:137:5: warning: variable 'verticesToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices verticesToVerify(graph.getVertices());
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:137:14: note: FIX-IT applied suggested code changes
    Vertices verticesToVerify(graph.getVertices());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:149:5: warning: variable 'verticesToVerify' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices verticesToVerify(graph.getVertices());
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:149:14: note: FIX-IT applied suggested code changes
    Vertices verticesToVerify(graph.getVertices());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:151:5: warning: variable 'verticesToExpect' of type 'Vertices' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Vertices verticesToExpect{0, 1, 2};
    ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:151:14: note: FIX-IT applied suggested code changes
    Vertices verticesToExpect{0, 1, 2};
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:160:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:160:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:172:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:172:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:174:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 1}, {0, 2}};
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:174:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 1}, {0, 2}};
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:187:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:187:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:188:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 1}, {0, 2}};
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:188:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 1}, {0, 2}};
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:203:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:203:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:204:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 2}};
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:204:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 2}};
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:235:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:235:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:236:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{3, 4}, {4, 5}, {5, 6}};
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:236:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{3, 4}, {4, 5}, {5, 6}};
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:260:5: warning: variable 'edgesToVerify' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToVerify(graph.getEdges());
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:260:11: note: FIX-IT applied suggested code changes
    Edges edgesToVerify(graph.getEdges());
          ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:261:5: warning: variable 'edgesToExpect' of type 'Edges' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Edges edgesToExpect{{0, 1}, {0, 2}, {0, 5},  {0, 6},  {3, 4},  {3, 5},  {4, 5},
    ^
          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Graph/UndirectedGraph/Utilities/CommonTestsWithUndirectedGraph.hpp:261:11: note: FIX-IT applied suggested code changes
    Edges edgesToExpect{{0, 1}, {0, 2}, {0, 5},  {0, 6},  {3, 4},  {3, 5},  {4, 5},
          ^
[132/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/UndirectedGraph/UndirectedGraphWithArrayOfAdjacencyLists_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
[133/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/UndirectedGraph/UndirectedGraphWithListOfEdges_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
[134/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/UndirectedGraph/UndirectedGraphWithVertexToAdjacencyListsMap_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
[135/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Utilities/CheckableVertices_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\CheckableVertices_unit.cpp:13:5: warning: variable 'emptyCheckableVertices' of type 'CheckableVerticesForTest' (aka 'CheckableVertices<int>') can be declared 'const' [misc-const-correctness]
    CheckableVerticesForTest emptyCheckableVertices;
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\CheckableVertices_unit.cpp:13:30: note: FIX-IT applied suggested code changes
    CheckableVerticesForTest emptyCheckableVertices;
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\CheckableVertices_unit.cpp:28:5: warning: variable 'emptyCheckableVertices' of type 'CheckableVerticesForTest' (aka 'CheckableVertices<int>') can be declared 'const' [misc-const-correctness]
    CheckableVerticesForTest emptyCheckableVertices;
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\CheckableVertices_unit.cpp:28:30: note: FIX-IT applied suggested code changes
    CheckableVerticesForTest emptyCheckableVertices;
                             ^
[136/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Utilities/GraphUtilities_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/GraphUtilities.hpp:58:9: warning: variable 'pathWithOutEnd' of type 'Path' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Path pathWithOutEnd(path.cbegin(), path.cbegin() + path.size() - 1);
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/GraphUtilities.hpp:58:14: note: FIX-IT applied suggested code changes
        Path pathWithOutEnd(path.cbegin(), path.cbegin() + path.size() - 1);
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/GraphUtilities.hpp:88:9: warning: variable 'degreeThatShouldMatch' of type 'int' can be declared 'const' [misc-const-correctness]
        int degreeThatShouldMatch = getDegreeAt(graph, vertices.front());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/GraphUtilities.hpp:88:13: note: FIX-IT applied suggested code changes
        int degreeThatShouldMatch = getDegreeAt(graph, vertices.front());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/GraphUtilities.hpp:171:5: warning: variable 'connectedComponents' of type 'StronglyConnectedComponentsUsingKosarajuSharir<int>' can be declared 'const' [misc-const-correctness]
    StronglyConnectedComponentsUsingKosarajuSharir<Vertex> connectedComponents(graph);
    ^
                                                           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/Utilities/GraphUtilities.hpp:171:60: note: FIX-IT applied suggested code changes
    StronglyConnectedComponentsUsingKosarajuSharir<Vertex> connectedComponents(graph);
                                                           ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:30:5: warning: variable 'simplePath' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest simplePath{1, 2, 3};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:30:17: note: FIX-IT applied suggested code changes
    PathForTest simplePath{1, 2, 3};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:31:5: warning: variable 'nonSimplePath' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest nonSimplePath{1, 2, 3, 2, 4};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:31:17: note: FIX-IT applied suggested code changes
    PathForTest nonSimplePath{1, 2, 3, 2, 4};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:38:5: warning: variable 'cyclePath' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest cyclePath{1, 2, 3, 1};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:38:17: note: FIX-IT applied suggested code changes
    PathForTest cyclePath{1, 2, 3, 1};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:39:5: warning: variable 'nonCyclePath' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest nonCyclePath{1, 2, 3, 1, 4};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:39:17: note: FIX-IT applied suggested code changes
    PathForTest nonCyclePath{1, 2, 3, 1, 4};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:46:5: warning: variable 'cycleSimplePath' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest cycleSimplePath{1, 2, 3, 1};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:46:17: note: FIX-IT applied suggested code changes
    PathForTest cycleSimplePath{1, 2, 3, 1};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:47:5: warning: variable 'nonCycleSimplePath' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest nonCycleSimplePath{1, 2, 3, 2, 1};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:47:17: note: FIX-IT applied suggested code changes
    PathForTest nonCycleSimplePath{1, 2, 3, 2, 1};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:252:5: warning: variable 'nonStronglyConnectedGraph' of type 'DirectedGraphForTest' (aka 'DirectedGraphWithListOfEdges<int>') can be declared 'const' [misc-const-correctness]
    DirectedGraphForTest nonStronglyConnectedGraph;
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:252:26: note: FIX-IT applied suggested code changes
    DirectedGraphForTest nonStronglyConnectedGraph;
                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:267:5: warning: variable 'nonStronglyConnectedGraph' of type 'DirectedGraphForTest' (aka 'DirectedGraphWithListOfEdges<int>') can be declared 'const' [misc-const-correctness]
    DirectedGraphForTest nonStronglyConnectedGraph;
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:267:26: note: FIX-IT applied suggested code changes
    DirectedGraphForTest nonStronglyConnectedGraph;
                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:334:5: warning: variable 'emptyPath' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest emptyPath;
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:334:17: note: FIX-IT applied suggested code changes
    PathForTest emptyPath;
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:335:5: warning: variable 'nonEmptyPath' of type 'PathForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    PathForTest nonEmptyPath{1, 2, 3};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:335:17: note: FIX-IT applied suggested code changes
    PathForTest nonEmptyPath{1, 2, 3};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:442:5: warning: variable 'listOfEdgesToVerify' of type 'ListOfEdgesForTest' (aka 'vector<vector<pair<int, int>>>') can be declared 'const' [misc-const-correctness]
    ListOfEdgesForTest listOfEdgesToVerify(getEdgesOfMaximalConnectedSubgraphs(graph));
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\GraphUtilities_unit.cpp:442:24: note: FIX-IT applied suggested code changes
    ListOfEdgesForTest listOfEdgesToVerify(getEdgesOfMaximalConnectedSubgraphs(graph));
                       ^
[137/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Utilities/LaplaceanMatrix_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponents.hpp:6:7: warning: class 'BaseConnectedComponents' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponents {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/ConnectedComponents/Common/BaseConnectedComponentsWithVertexToComponentIdMap.hpp:9:7: warning: class 'BaseConnectedComponentsWithVertexToComponentIdMap' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseConnectedComponentsWithVertexToComponentIdMap : public BaseConnectedComponents<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\LaplaceanMatrix_unit.cpp:22:5: warning: variable 'matrixToVerify' of type 'LaplaceanMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    LaplaceanMatrix matrixToVerify(createLaplaceanMatrix<VertexForTest, 5>(graph));
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\LaplaceanMatrix_unit.cpp:22:21: note: FIX-IT applied suggested code changes
    LaplaceanMatrix matrixToVerify(createLaplaceanMatrix<VertexForTest, 5>(graph));
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\LaplaceanMatrix_unit.cpp:24:5: warning: variable 'expectedMatrix' of type 'LaplaceanMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    LaplaceanMatrix expectedMatrix(4, 4, {3, -1, -1, -1, -1, 1, 0, 0, -1, 0, 2, -1, -1, 0, -1, 2});
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\LaplaceanMatrix_unit.cpp:24:21: note: FIX-IT applied suggested code changes
    LaplaceanMatrix expectedMatrix(4, 4, {3, -1, -1, -1, -1, 1, 0, 0, -1, 0, 2, -1, -1, 0, -1, 2});
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\LaplaceanMatrix_unit.cpp:35:5: warning: variable 'matrixToVerify' of type 'LaplaceanMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    LaplaceanMatrix matrixToVerify(createLaplaceanMatrix<VertexForTest, 5>(graph));
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\LaplaceanMatrix_unit.cpp:35:21: note: FIX-IT applied suggested code changes
    LaplaceanMatrix matrixToVerify(createLaplaceanMatrix<VertexForTest, 5>(graph));
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\LaplaceanMatrix_unit.cpp:37:5: warning: variable 'expectedMatrix' of type 'LaplaceanMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    LaplaceanMatrix expectedMatrix(4, 4, {3, 0, 0, 0, -1, 0, 0, 0, -1, 0, 1, 0, -1, 0, -1, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\LaplaceanMatrix_unit.cpp:37:21: note: FIX-IT applied suggested code changes
    LaplaceanMatrix expectedMatrix(4, 4, {3, 0, 0, 0, -1, 0, 0, 0, -1, 0, 1, 0, -1, 0, -1, 0});
                    ^
[138/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/Utilities/SortedEdge_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:16:5: warning: variable 'sortedEdge1ToVerify' of type 'EdgeForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    EdgeForTest sortedEdge1ToVerify(createSortedEdge<VertexForTest, EdgeForTest>(4, 5));
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:16:17: note: FIX-IT applied suggested code changes
    EdgeForTest sortedEdge1ToVerify(createSortedEdge<VertexForTest, EdgeForTest>(4, 5));
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:17:5: warning: variable 'sortedEdge2ToVerify' of type 'EdgeForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    EdgeForTest sortedEdge2ToVerify(createSortedEdge<VertexForTest, EdgeForTest>(5, 4));
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:17:17: note: FIX-IT applied suggested code changes
    EdgeForTest sortedEdge2ToVerify(createSortedEdge<VertexForTest, EdgeForTest>(5, 4));
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:19:5: warning: variable 'expectedSortedEdge' of type 'EdgeForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    EdgeForTest expectedSortedEdge(4, 5);
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:19:17: note: FIX-IT applied suggested code changes
    EdgeForTest expectedSortedEdge(4, 5);
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:27:5: warning: variable 'sortedEdge1ToVerify' of type 'EdgeForTest' (aka 'alba::algorithm::GraphTypesWithWeights<int, double>::EdgeOrderedByWeight') can be declared 'const' [misc-const-correctness]
    EdgeForTest sortedEdge1ToVerify(
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:27:17: note: FIX-IT applied suggested code changes
    EdgeForTest sortedEdge1ToVerify(
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:29:5: warning: variable 'sortedEdge2ToVerify' of type 'EdgeForTest' (aka 'alba::algorithm::GraphTypesWithWeights<int, double>::EdgeOrderedByWeight') can be declared 'const' [misc-const-correctness]
    EdgeForTest sortedEdge2ToVerify(
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:29:17: note: FIX-IT applied suggested code changes
    EdgeForTest sortedEdge2ToVerify(
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:32:5: warning: variable 'expectedSortedEdge' of type 'EdgeForTest' (aka 'alba::algorithm::GraphTypesWithWeights<int, double>::EdgeOrderedByWeight') can be declared 'const' [misc-const-correctness]
    EdgeForTest expectedSortedEdge(4, 5, 9.9);
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\Utilities\SortedEdge_unit.cpp:32:17: note: FIX-IT applied suggested code changes
    EdgeForTest expectedSortedEdge(4, 5, 9.9);
                ^
[139/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/VertexOrdering/VertexOrderingUsingDfsWithDirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:16:5: warning: variable 'graph' of type 'GraphForTest' (aka 'DirectedGraphWithListOfEdges<int>') can be declared 'const' [misc-const-correctness]
    GraphForTest graph;
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:16:18: note: FIX-IT applied suggested code changes
    GraphForTest graph;
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:19:5: warning: variable 'preOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest preOrderFromAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:19:21: note: FIX-IT applied suggested code changes
    VerticesForTest preOrderFromAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:21:5: warning: variable 'postOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest postOrderFromAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:21:21: note: FIX-IT applied suggested code changes
    VerticesForTest postOrderFromAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:23:5: warning: variable 'reversePostOrderAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest reversePostOrderAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:23:21: note: FIX-IT applied suggested code changes
    VerticesForTest reversePostOrderAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:25:5: warning: variable 'preOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest preOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:25:21: note: FIX-IT applied suggested code changes
    VerticesForTest preOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:27:5: warning: variable 'postOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest postOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:27:21: note: FIX-IT applied suggested code changes
    VerticesForTest postOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:29:5: warning: variable 'reversePostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest reversePostOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:29:21: note: FIX-IT applied suggested code changes
    VerticesForTest reversePostOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:56:5: warning: variable 'preOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest preOrderFromAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:56:21: note: FIX-IT applied suggested code changes
    VerticesForTest preOrderFromAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:58:5: warning: variable 'postOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest postOrderFromAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:58:21: note: FIX-IT applied suggested code changes
    VerticesForTest postOrderFromAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:60:5: warning: variable 'reversePostOrderAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest reversePostOrderAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:60:21: note: FIX-IT applied suggested code changes
    VerticesForTest reversePostOrderAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:62:5: warning: variable 'preOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest preOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:62:21: note: FIX-IT applied suggested code changes
    VerticesForTest preOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:64:5: warning: variable 'postOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest postOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:64:21: note: FIX-IT applied suggested code changes
    VerticesForTest postOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:66:5: warning: variable 'reversePostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest reversePostOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:66:21: note: FIX-IT applied suggested code changes
    VerticesForTest reversePostOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:69:5: warning: variable 'expectedPreOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPreOrderFromAVertex{30, 20, 10};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:69:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPreOrderFromAVertex{30, 20, 10};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:70:5: warning: variable 'expectedPostOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPostOrderFromAVertex{10, 20, 30};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:70:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPostOrderFromAVertex{10, 20, 30};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:71:5: warning: variable 'expectedReversePostOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedReversePostOrderFromAVertex{30, 20, 10};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:71:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedReversePostOrderFromAVertex{30, 20, 10};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:72:5: warning: variable 'expectedPreOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPreOrderFromAllVertices{10, 11, 12, 13, 20, 21, 22, 23, 30, 31, 32, 33, 40};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:72:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPreOrderFromAllVertices{10, 11, 12, 13, 20, 21, 22, 23, 30, 31, 32, 33, 40};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:73:5: warning: variable 'expectedPostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPostOrderFromAllVertices{10, 11, 12, 13, 20, 21, 22, 23, 30, 31, 32, 33, 40};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:73:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPostOrderFromAllVertices{10, 11, 12, 13, 20, 21, 22, 23, 30, 31, 32, 33, 40};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:74:5: warning: variable 'expectedReversePostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedReversePostOrderFromAllVertices{40, 33, 32, 31, 30, 23, 22, 21, 20, 13, 12, 11, 10};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:74:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedReversePostOrderFromAllVertices{40, 33, 32, 31, 30, 23, 22, 21, 20, 13, 12, 11, 10};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:102:5: warning: variable 'preOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest preOrderFromAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:102:21: note: FIX-IT applied suggested code changes
    VerticesForTest preOrderFromAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:104:5: warning: variable 'postOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest postOrderFromAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:104:21: note: FIX-IT applied suggested code changes
    VerticesForTest postOrderFromAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:106:5: warning: variable 'reversePostOrderAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest reversePostOrderAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:106:21: note: FIX-IT applied suggested code changes
    VerticesForTest reversePostOrderAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:108:5: warning: variable 'preOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest preOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:108:21: note: FIX-IT applied suggested code changes
    VerticesForTest preOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:110:5: warning: variable 'postOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest postOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:110:21: note: FIX-IT applied suggested code changes
    VerticesForTest postOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:112:5: warning: variable 'reversePostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest reversePostOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:112:21: note: FIX-IT applied suggested code changes
    VerticesForTest reversePostOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:115:5: warning: variable 'expectedPreOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPreOrderFromAVertex{7, 6, 4, 9, 10, 11, 12};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:115:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPreOrderFromAVertex{7, 6, 4, 9, 10, 11, 12};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:116:5: warning: variable 'expectedPostOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPostOrderFromAVertex{4, 10, 12, 11, 9, 6, 7};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:116:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPostOrderFromAVertex{4, 10, 12, 11, 9, 6, 7};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:117:5: warning: variable 'expectedReversePostOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedReversePostOrderFromAVertex{7, 6, 9, 11, 12, 10, 4};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:117:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedReversePostOrderFromAVertex{7, 6, 9, 11, 12, 10, 4};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:118:5: warning: variable 'expectedPreOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPreOrderFromAllVertices{0, 1, 5, 4, 6, 9, 10, 11, 12, 2, 3, 7, 8};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:118:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPreOrderFromAllVertices{0, 1, 5, 4, 6, 9, 10, 11, 12, 2, 3, 7, 8};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:119:5: warning: variable 'expectedPostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPostOrderFromAllVertices{1, 4, 5, 10, 12, 11, 9, 6, 0, 3, 2, 7, 8};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:119:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPostOrderFromAllVertices{1, 4, 5, 10, 12, 11, 9, 6, 0, 3, 2, 7, 8};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:120:5: warning: variable 'expectedReversePostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedReversePostOrderFromAllVertices{8, 7, 2, 3, 0, 6, 9, 11, 12, 10, 5, 4, 1};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:120:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedReversePostOrderFromAllVertices{8, 7, 2, 3, 0, 6, 9, 11, 12, 10, 5, 4, 1};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:148:5: warning: variable 'pathFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest pathFromAVertex(vertexOrderingWithDfs.getVerticesInTopologicalOrder(7));
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:148:21: note: FIX-IT applied suggested code changes
    VerticesForTest pathFromAVertex(vertexOrderingWithDfs.getVerticesInTopologicalOrder(7));
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:149:5: warning: variable 'pathFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest pathFromAllVertices(vertexOrderingWithDfs.getVerticesInTopologicalOrder());
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:149:21: note: FIX-IT applied suggested code changes
    VerticesForTest pathFromAllVertices(vertexOrderingWithDfs.getVerticesInTopologicalOrder());
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:151:5: warning: variable 'expectedPathFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPathFromAVertex{7, 6, 9, 11, 12, 10, 4};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:151:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPathFromAVertex{7, 6, 9, 11, 12, 10, 4};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:152:5: warning: variable 'expectedPathFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPathFromAllVertices{8, 7, 2, 3, 0, 6, 9, 11, 12, 10, 5, 4, 1};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:152:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPathFromAllVertices{8, 7, 2, 3, 0, 6, 9, 11, 12, 10, 5, 4, 1};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:176:5: warning: variable 'pathFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest pathFromAllVertices(vertexOrderingWithDfs.getVerticesInTopologicalOrderWithDagChecking());
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:176:21: note: FIX-IT applied suggested code changes
    VerticesForTest pathFromAllVertices(vertexOrderingWithDfs.getVerticesInTopologicalOrderWithDagChecking());
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:178:5: warning: variable 'expectedPathFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPathFromAllVertices{8, 7, 2, 3, 0, 6, 9, 11, 12, 10, 5, 4, 1};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithDirectedGraph_unit.cpp:178:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPathFromAllVertices{8, 7, 2, 3, 0, 6, 9, 11, 12, 10, 5, 4, 1};
                    ^
[140/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Graph/VertexOrdering/VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:16:5: warning: variable 'graph' of type 'GraphForTest' (aka 'UndirectedGraphWithListOfEdges<int>') can be declared 'const' [misc-const-correctness]
    GraphForTest graph;
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:16:18: note: FIX-IT applied suggested code changes
    GraphForTest graph;
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:19:5: warning: variable 'preOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest preOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:19:21: note: FIX-IT applied suggested code changes
    VerticesForTest preOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:21:5: warning: variable 'postOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest postOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:21:21: note: FIX-IT applied suggested code changes
    VerticesForTest postOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:23:5: warning: variable 'reversePostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest reversePostOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:23:21: note: FIX-IT applied suggested code changes
    VerticesForTest reversePostOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:47:5: warning: variable 'preOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest preOrderFromAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:47:21: note: FIX-IT applied suggested code changes
    VerticesForTest preOrderFromAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:49:5: warning: variable 'postOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest postOrderFromAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:49:21: note: FIX-IT applied suggested code changes
    VerticesForTest postOrderFromAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:51:5: warning: variable 'reversePostOrderAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest reversePostOrderAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:51:21: note: FIX-IT applied suggested code changes
    VerticesForTest reversePostOrderAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:53:5: warning: variable 'preOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest preOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:53:21: note: FIX-IT applied suggested code changes
    VerticesForTest preOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:55:5: warning: variable 'postOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest postOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:55:21: note: FIX-IT applied suggested code changes
    VerticesForTest postOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:57:5: warning: variable 'reversePostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest reversePostOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:57:21: note: FIX-IT applied suggested code changes
    VerticesForTest reversePostOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:60:5: warning: variable 'expectedPreOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPreOrderFromAVertex{30, 20, 10, 40, 31, 21, 11, 32, 22, 12, 33, 23, 13};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:60:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPreOrderFromAVertex{30, 20, 10, 40, 31, 21, 11, 32, 22, 12, 33, 23, 13};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:61:5: warning: variable 'expectedPostOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPostOrderFromAVertex{10, 20, 11, 21, 31, 12, 22, 32, 13, 23, 33, 40, 30};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:61:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPostOrderFromAVertex{10, 20, 11, 21, 31, 12, 22, 32, 13, 23, 33, 40, 30};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:62:5: warning: variable 'expectedReversePostOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedReversePostOrderFromAVertex{30, 40, 33, 23, 13, 32, 22, 12, 31, 21, 11, 20, 10};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:62:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedReversePostOrderFromAVertex{30, 40, 33, 23, 13, 32, 22, 12, 31, 21, 11, 20, 10};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:63:5: warning: variable 'expectedPreOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPreOrderFromAllVertices{10, 20, 30, 40, 31, 21, 11, 32, 22, 12, 33, 23, 13};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:63:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPreOrderFromAllVertices{10, 20, 30, 40, 31, 21, 11, 32, 22, 12, 33, 23, 13};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:64:5: warning: variable 'expectedPostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPostOrderFromAllVertices{11, 21, 31, 12, 22, 32, 13, 23, 33, 40, 30, 20, 10};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:64:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPostOrderFromAllVertices{11, 21, 31, 12, 22, 32, 13, 23, 33, 40, 30, 20, 10};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:65:5: warning: variable 'expectedReversePostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedReversePostOrderFromAllVertices{10, 20, 30, 40, 33, 23, 13, 32, 22, 12, 31, 21, 11};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:65:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedReversePostOrderFromAllVertices{10, 20, 30, 40, 33, 23, 13, 32, 22, 12, 31, 21, 11};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:91:5: warning: variable 'preOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest preOrderFromAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:91:21: note: FIX-IT applied suggested code changes
    VerticesForTest preOrderFromAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:93:5: warning: variable 'postOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest postOrderFromAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:93:21: note: FIX-IT applied suggested code changes
    VerticesForTest postOrderFromAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:95:5: warning: variable 'reversePostOrderAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest reversePostOrderAVertex(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:95:21: note: FIX-IT applied suggested code changes
    VerticesForTest reversePostOrderAVertex(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:97:5: warning: variable 'preOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest preOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:97:21: note: FIX-IT applied suggested code changes
    VerticesForTest preOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:99:5: warning: variable 'postOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest postOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:99:21: note: FIX-IT applied suggested code changes
    VerticesForTest postOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:101:5: warning: variable 'reversePostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest reversePostOrderFromAllVertices(
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:101:21: note: FIX-IT applied suggested code changes
    VerticesForTest reversePostOrderFromAllVertices(
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:104:5: warning: variable 'expectedPreOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPreOrderFromAVertex{4, 3, 5, 0, 1, 2, 6};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:104:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPreOrderFromAVertex{4, 3, 5, 0, 1, 2, 6};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:105:5: warning: variable 'expectedPostOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPostOrderFromAVertex{1, 2, 6, 0, 5, 3, 4};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:105:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPostOrderFromAVertex{1, 2, 6, 0, 5, 3, 4};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:106:5: warning: variable 'expectedReversePostOrderFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedReversePostOrderFromAVertex{4, 3, 5, 0, 6, 2, 1};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:106:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedReversePostOrderFromAVertex{4, 3, 5, 0, 6, 2, 1};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:107:5: warning: variable 'expectedPreOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPreOrderFromAllVertices{0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 12};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:107:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPreOrderFromAllVertices{0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 12};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:108:5: warning: variable 'expectedPostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPostOrderFromAllVertices{1, 2, 6, 4, 3, 5, 0, 8, 7, 10, 12, 11, 9};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:108:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPostOrderFromAllVertices{1, 2, 6, 4, 3, 5, 0, 8, 7, 10, 12, 11, 9};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:109:5: warning: variable 'expectedReversePostOrderFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedReversePostOrderFromAllVertices{9, 11, 12, 10, 7, 8, 0, 5, 3, 4, 6, 2, 1};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:109:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedReversePostOrderFromAllVertices{9, 11, 12, 10, 7, 8, 0, 5, 3, 4, 6, 2, 1};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:135:5: warning: variable 'pathFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest pathFromAVertex(vertexOrderingWithDfs.getVerticesInTopologicalOrder(4));
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:135:21: note: FIX-IT applied suggested code changes
    VerticesForTest pathFromAVertex(vertexOrderingWithDfs.getVerticesInTopologicalOrder(4));
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:136:5: warning: variable 'pathFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest pathFromAllVertices(vertexOrderingWithDfs.getVerticesInTopologicalOrder());
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:136:21: note: FIX-IT applied suggested code changes
    VerticesForTest pathFromAllVertices(vertexOrderingWithDfs.getVerticesInTopologicalOrder());
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:138:5: warning: variable 'expectedPathFromAVertex' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPathFromAVertex{4, 3, 5, 0, 6, 2, 1};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:138:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPathFromAVertex{4, 3, 5, 0, 6, 2, 1};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:139:5: warning: variable 'expectedPathFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPathFromAllVertices{9, 11, 12, 10, 7, 8, 0, 5, 3, 4, 6, 2, 1};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:139:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPathFromAllVertices{9, 11, 12, 10, 7, 8, 0, 5, 3, 4, 6, 2, 1};
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:161:5: warning: variable 'pathFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest pathFromAllVertices(vertexOrderingWithDfs.getVerticesInTopologicalOrderWithDagChecking());
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:161:21: note: FIX-IT applied suggested code changes
    VerticesForTest pathFromAllVertices(vertexOrderingWithDfs.getVerticesInTopologicalOrderWithDagChecking());
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:163:5: warning: variable 'expectedPathFromAllVertices' of type 'VerticesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    VerticesForTest expectedPathFromAllVertices{9, 11, 12, 10, 7, 8, 0, 5, 3, 4, 6, 2, 1};
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Graph\VertexOrdering\VertexOrderingUsingDfsWithUndirectedGraph_unit.cpp:163:21: note: FIX-IT applied suggested code changes
    VerticesForTest expectedPathFromAllVertices{9, 11, 12, 10, 7, 8, 0, 5, 3, 4, 6, 2, 1};
                    ^
[141/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/HashFunctions/PrimitiveTypes/HashKeyUtilities_unit.cpp.obj
[142/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/HashFunctions/PrimitiveTypes/HashValueUtilities_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\PrimitiveTypes\HashValueUtilities_unit.cpp:16:5: warning: variable 'knuthSuggestion' of type 'double' can be declared 'const' [misc-const-correctness]
    double knuthSuggestion = (sqrt(5) - 1) / 2;
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\PrimitiveTypes\HashValueUtilities_unit.cpp:16:12: note: FIX-IT applied suggested code changes
    double knuthSuggestion = (sqrt(5) - 1) / 2;
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\PrimitiveTypes\HashValueUtilities_unit.cpp:22:5: warning: variable 'knuthNumerator' of type 'uint64_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    uint64_t knuthNumerator = 475245693;
    ^
             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\PrimitiveTypes\HashValueUtilities_unit.cpp:22:14: note: FIX-IT applied suggested code changes
    uint64_t knuthNumerator = 475245693;
             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\PrimitiveTypes\HashValueUtilities_unit.cpp:23:5: warning: variable 'knuthDenominator' of type 'uint64_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    uint64_t knuthDenominator = 2294689195;
    ^
             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\PrimitiveTypes\HashValueUtilities_unit.cpp:23:14: note: FIX-IT applied suggested code changes
    uint64_t knuthDenominator = 2294689195;
             ^
[143/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/HashFunctions/PrimitiveTypes/IntegerHashFunction_unit.cpp.obj
[144/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/HashFunctions/PrimitiveTypes/OpenAddressingProbing_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\PrimitiveTypes\OpenAddressingProbing_unit.cpp:13:5: warning: variable 'originalHashFunction' of type 'HashingFunction<uint64_t>' (aka 'function<unsigned long long (unsigned long long)>') can be declared 'const' [misc-const-correctness]
    HashingFunction<uint64_t> originalHashFunction = [=](uint64_t const hashKey) {
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\PrimitiveTypes\OpenAddressingProbing_unit.cpp:13:31: note: FIX-IT applied suggested code changes
    HashingFunction<uint64_t> originalHashFunction = [=](uint64_t const hashKey) {
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\PrimitiveTypes\OpenAddressingProbing_unit.cpp:28:5: warning: variable 'originalHashFunction' of type 'HashingFunction<uint64_t>' (aka 'function<unsigned long long (unsigned long long)>') can be declared 'const' [misc-const-correctness]
    HashingFunction<uint64_t> originalHashFunction = [=](uint64_t const hashKey) {
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\PrimitiveTypes\OpenAddressingProbing_unit.cpp:28:31: note: FIX-IT applied suggested code changes
    HashingFunction<uint64_t> originalHashFunction = [=](uint64_t const hashKey) {
                              ^
[145/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/HashFunctions/String/HornerHashFunctionForSubstrings_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForSubstrings_unit.cpp:17:5: warning: variable 'hashFunction' of type 'HashFunctionForTest' (aka 'HornerHashFunctionForSubstrings<unsigned long long>') can be declared 'const' [misc-const-correctness]
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME, "ALLEY");
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForSubstrings_unit.cpp:17:25: note: FIX-IT applied suggested code changes
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME, "ALLEY");
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForSubstrings_unit.cpp:37:5: warning: variable 'hashFunction' of type 'HashFunctionForTest' (aka 'HornerHashFunctionForSubstrings<unsigned long long>') can be declared 'const' [misc-const-correctness]
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME, "AACAA");
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForSubstrings_unit.cpp:37:25: note: FIX-IT applied suggested code changes
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME, "AACAA");
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForSubstrings_unit.cpp:50:5: warning: variable 'hashFunction' of type 'HashFunctionForTest' (aka 'HornerHashFunctionForSubstrings<unsigned long long>') can be declared 'const' [misc-const-correctness]
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME, "AABRAACADABRAACAADABRA");
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForSubstrings_unit.cpp:50:25: note: FIX-IT applied suggested code changes
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME, "AABRAACADABRAACAADABRA");
                        ^
[146/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/HashFunctions/String/HornerHashFunctionForWholeString_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForWholeString_unit.cpp:17:5: warning: variable 'hashFunction' of type 'HashFunctionForTest' (aka 'HornerHashFunctionForWholeString<unsigned long long>') can be declared 'const' [misc-const-correctness]
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME);
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForWholeString_unit.cpp:17:25: note: FIX-IT applied suggested code changes
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME);
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForWholeString_unit.cpp:23:5: warning: variable 'hashFunction' of type 'HashFunctionForTest' (aka 'HornerHashFunctionForWholeString<unsigned long long>') can be declared 'const' [misc-const-correctness]
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME);
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForWholeString_unit.cpp:23:25: note: FIX-IT applied suggested code changes
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME);
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForWholeString_unit.cpp:29:5: warning: variable 'hashFunction' of type 'HashFunctionForTest' (aka 'HornerHashFunctionForWholeString<unsigned long long>') can be declared 'const' [misc-const-correctness]
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME);
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\HashFunctions\String\HornerHashFunctionForWholeString_unit.cpp:29:25: note: FIX-IT applied suggested code changes
    HashFunctionForTest hashFunction(RADIX, A_LARGE_PRIME);
                        ^
[147/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/LinearProgramming/SimplexAlgorithm_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/LinearProgramming/SimplexAlgorithm.hpp:22:9: warning: variable 'numberOfRows' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfRows = m_simplexTable.getNumberOfRows() - 1;
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/LinearProgramming/SimplexAlgorithm.hpp:22:13: note: FIX-IT applied suggested code changes
        int numberOfRows = m_simplexTable.getNumberOfRows() - 1;
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/LinearProgramming/SimplexAlgorithm.hpp:23:9: warning: variable 'numberOfColumns' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfColumns = m_simplexTable.getNumberOfColumns() - numberOfRows;
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/LinearProgramming/SimplexAlgorithm.hpp:23:13: note: FIX-IT applied suggested code changes
        int numberOfColumns = m_simplexTable.getNumberOfColumns() - numberOfRows;
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\LinearProgramming\SimplexAlgorithm_unit.cpp:14:5: warning: variable 'constraintsCoefficients' of type 'SimplexForTest::Matrix' (aka 'AlbaMatrix<double>') can be declared 'const' [misc-const-correctness]
    SimplexForTest::Matrix constraintsCoefficients(
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\LinearProgramming\SimplexAlgorithm_unit.cpp:14:28: note: FIX-IT applied suggested code changes
    SimplexForTest::Matrix constraintsCoefficients(
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\LinearProgramming\SimplexAlgorithm_unit.cpp:24:5: warning: variable 'constraintsValues' of type 'SimplexForTest::MatrixData' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    SimplexForTest::MatrixData constraintsValues{480, 160, 1190};
    ^
                               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\LinearProgramming\SimplexAlgorithm_unit.cpp:24:32: note: FIX-IT applied suggested code changes
    SimplexForTest::MatrixData constraintsValues{480, 160, 1190};
                               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\LinearProgramming\SimplexAlgorithm_unit.cpp:25:5: warning: variable 'objectiveFunctionCoefficients' of type 'SimplexForTest::MatrixData' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    SimplexForTest::MatrixData objectiveFunctionCoefficients{13, 23};
    ^
                               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\LinearProgramming\SimplexAlgorithm_unit.cpp:25:32: note: FIX-IT applied suggested code changes
    SimplexForTest::MatrixData objectiveFunctionCoefficients{13, 23};
                               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\LinearProgramming\SimplexAlgorithm_unit.cpp:26:5: warning: variable 'simplex' of type 'SimplexForTest' (aka 'SimplexAlgorithm<double>') can be declared 'const' [misc-const-correctness]
    SimplexForTest simplex(constraintsCoefficients, constraintsValues, objectiveFunctionCoefficients);
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\LinearProgramming\SimplexAlgorithm_unit.cpp:26:20: note: FIX-IT applied suggested code changes
    SimplexForTest simplex(constraintsCoefficients, constraintsValues, objectiveFunctionCoefficients);
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\LinearProgramming\SimplexAlgorithm_unit.cpp:28:5: warning: variable 'expectedSolution' of type 'SimplexForTest::Matrix' (aka 'AlbaMatrix<double>') can be declared 'const' [misc-const-correctness]
    SimplexForTest::Matrix expectedSolution(3, 3, {0.0, 0.0, 210.0, 0.0, 1.0, 28.0, 1.0, 0.0, 12.0});
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\LinearProgramming\SimplexAlgorithm_unit.cpp:28:28: note: FIX-IT applied suggested code changes
    SimplexForTest::Matrix expectedSolution(3, 3, {0.0, 0.0, 210.0, 0.0, 1.0, 28.0, 1.0, 0.0, 12.0});
                           ^
[148/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/PriorityQueue/BinaryHeap/BinaryHeapAdapter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/BinaryHeapAdapter.hpp:41:13: warning: variable 'parentTreeIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int parentTreeIndex(getParentIndex(treeIndex));
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/BinaryHeapAdapter.hpp:41:17: note: FIX-IT applied suggested code changes
            int parentTreeIndex(getParentIndex(treeIndex));
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/BinaryHeapAdapter.hpp:54:13: warning: variable 'significantChildIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int significantChildIndex(getChildIndexThatWouldMostBreakTheHeapOrder(treeIndex, treeSize));
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/BinaryHeapAdapter.hpp:54:17: note: FIX-IT applied suggested code changes
            int significantChildIndex(getChildIndexThatWouldMostBreakTheHeapOrder(treeIndex, treeSize));
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/BinaryHeapAdapter.hpp:69:9: warning: variable 'firstChildIndex' of type 'int' can be declared 'const' [misc-const-correctness]
        int firstChildIndex(getFirstChildIndex(treeIndex));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/BinaryHeapAdapter.hpp:69:13: note: FIX-IT applied suggested code changes
        int firstChildIndex(getFirstChildIndex(treeIndex));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/BinaryHeapAdapter.hpp:70:9: warning: variable 'lastPossibleChildIndex' of type 'int' can be declared 'const' [misc-const-correctness]
        int lastPossibleChildIndex(std::min(getLastChildIndex(treeIndex), treeSize));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/BinaryHeapAdapter.hpp:70:13: note: FIX-IT applied suggested code changes
        int lastPossibleChildIndex(std::min(getLastChildIndex(treeIndex), treeSize));
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapAdapter_unit.cpp:16:5: warning: variable 'adapter' of type 'AdapterForTest' (aka 'BinaryHeapAdapter<vector<char>, 2, std::less>') can be declared 'const' [misc-const-correctness]
    AdapterForTest adapter(objects);
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapAdapter_unit.cpp:16:20: note: FIX-IT applied suggested code changes
    AdapterForTest adapter(objects);
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapAdapter_unit.cpp:33:5: warning: variable 'objectsToExpect' of type 'ContainerForTest' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    ContainerForTest objectsToExpect{'Z', 'E', 'A', 'P', 'O', 'B', 'J', 'E', 'C', 'T', 'S'};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapAdapter_unit.cpp:33:22: note: FIX-IT applied suggested code changes
    ContainerForTest objectsToExpect{'Z', 'E', 'A', 'P', 'O', 'B', 'J', 'E', 'C', 'T', 'S'};
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapAdapter_unit.cpp:41:18: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    adapter.swim(objects.size());
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapAdapter_unit.cpp:43:5: warning: variable 'objectsToExpect' of type 'ContainerForTest' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    ContainerForTest objectsToExpect{'S', 'H', 'A', 'P', 'E', 'B', 'J', 'E', 'C', 'T', 'O'};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapAdapter_unit.cpp:43:22: note: FIX-IT applied suggested code changes
    ContainerForTest objectsToExpect{'S', 'H', 'A', 'P', 'E', 'B', 'J', 'E', 'C', 'T', 'O'};
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapAdapter_unit.cpp:53:5: warning: variable 'objectsToExpect' of type 'ContainerForTest' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    ContainerForTest objectsToExpect{'D', 'T', 'A', 'P', 'R', 'E', 'R', 'F', 'O', 'A', 'H', 'E', 'A', 'P'};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapAdapter_unit.cpp:53:22: note: FIX-IT applied suggested code changes
    ContainerForTest objectsToExpect{'D', 'T', 'A', 'P', 'R', 'E', 'R', 'F', 'O', 'A', 'H', 'E', 'A', 'P'};
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapAdapter_unit.cpp:63:5: warning: variable 'objectsToExpect' of type 'ContainerForTest' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    ContainerForTest objectsToExpect{'B', 'A'};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapAdapter_unit.cpp:63:22: note: FIX-IT applied suggested code changes
    ContainerForTest objectsToExpect{'B', 'A'};
                     ^
[149/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/PriorityQueue/BinaryHeap/BinaryHeapPriorityQueue_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapPriorityQueue_unit.cpp:15:5: warning: variable 'queue1' of type 'MaxPriorityQueueForTest' (aka 'BinaryHeapPriorityQueue<char, std::less>') can be declared 'const' [misc-const-correctness]
    MaxPriorityQueueForTest queue1;
    ^
                            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapPriorityQueue_unit.cpp:15:29: note: FIX-IT applied suggested code changes
    MaxPriorityQueueForTest queue1;
                            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapPriorityQueue_unit.cpp:24:5: warning: variable 'queue1' of type 'MaxPriorityQueueForTest' (aka 'BinaryHeapPriorityQueue<char, std::less>') can be declared 'const' [misc-const-correctness]
    MaxPriorityQueueForTest queue1;
    ^
                            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapPriorityQueue_unit.cpp:24:29: note: FIX-IT applied suggested code changes
    MaxPriorityQueueForTest queue1;
                            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapPriorityQueue_unit.cpp:93:5: warning: variable 'objectToVerify' of type 'char' can be declared 'const' [misc-const-correctness]
    char objectToVerify(queue.deleteAndGetTopObject());
    ^
         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapPriorityQueue_unit.cpp:93:10: note: FIX-IT applied suggested code changes
    char objectToVerify(queue.deleteAndGetTopObject());
         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapPriorityQueue_unit.cpp:115:5: warning: variable 'objectToVerify' of type 'char' can be declared 'const' [misc-const-correctness]
    char objectToVerify(queue.deleteAndGetTopObject());
    ^
         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\BinaryHeapPriorityQueue_unit.cpp:115:10: note: FIX-IT applied suggested code changes
    char objectToVerify(queue.deleteAndGetTopObject());
         ^
[150/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/PriorityQueue/BinaryHeap/Examples/MaxItemsSaver_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\Examples\MaxItemsSaver_unit.cpp:56:5: warning: variable 'expectedObjects' of type 'MaxItemsSaverForTest::Objects' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    MaxItemsSaverForTest::Objects expectedObjects{100, 721, 976};
    ^
                                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\Examples\MaxItemsSaver_unit.cpp:56:35: note: FIX-IT applied suggested code changes
    MaxItemsSaverForTest::Objects expectedObjects{100, 721, 976};
                                  ^
[151/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/PriorityQueue/BinaryHeap/IndexedBinaryHeapPriorityQueue_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/IndexedBinaryHeapPriorityQueue.hpp:57:13: warning: variable 'treeIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int treeIndex(m_objectIndexToTreeIndex[objectIndex]);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/IndexedBinaryHeapPriorityQueue.hpp:57:17: note: FIX-IT applied suggested code changes
            int treeIndex(m_objectIndexToTreeIndex[objectIndex]);
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/IndexedBinaryHeapPriorityQueue.hpp:92:13: warning: variable 'objectIndexOfTopObject' of type 'int' can be declared 'const' [misc-const-correctness]
            int objectIndexOfTopObject = getIndexOfTopObject();
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/PriorityQueue/BinaryHeap/IndexedBinaryHeapPriorityQueue.hpp:92:17: note: FIX-IT applied suggested code changes
            int objectIndexOfTopObject = getIndexOfTopObject();
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\IndexedBinaryHeapPriorityQueue_unit.cpp:17:5: warning: variable 'indexedPQ1' of type 'IndexedPqForTest' (aka 'IndexedBinaryHeapPriorityQueue<char, std::less, 2>') can be declared 'const' [misc-const-correctness]
    IndexedPqForTest indexedPQ1;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\IndexedBinaryHeapPriorityQueue_unit.cpp:17:22: note: FIX-IT applied suggested code changes
    IndexedPqForTest indexedPQ1;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\IndexedBinaryHeapPriorityQueue_unit.cpp:35:5: warning: variable 'indexedPQ1' of type 'IndexedPqForTest' (aka 'IndexedBinaryHeapPriorityQueue<char, std::less, 2>') can be declared 'const' [misc-const-correctness]
    IndexedPqForTest indexedPQ1;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\PriorityQueue\BinaryHeap\IndexedBinaryHeapPriorityQueue_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    IndexedPqForTest indexedPQ1;
                     ^
[152/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Queue/DoublingSizeCircularQueue_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Queue/BaseQueue.hpp:6:7: warning: class 'BaseQueue' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseQueue {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Queue/DoublingSizeCircularQueue.hpp:12:7: warning: class 'DoublingSizeCircularQueue' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class DoublingSizeCircularQueue : public BaseQueue<Object> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Queue/Utilities/CommonTestsWithQueue.hpp:69:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(queue.dequeue(), "Assertion failed!");
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Queue\DoublingSizeCircularQueue_unit.cpp:23:5: warning: variable 'queue1' of type 'QueueForTest' (aka 'DoublingSizeCircularQueue<int>') can be declared 'const' [misc-const-correctness]
    QueueForTest queue1;
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Queue\DoublingSizeCircularQueue_unit.cpp:23:18: note: FIX-IT applied suggested code changes
    QueueForTest queue1;
                 ^
[153/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Queue/FixedSizeCircularQueue_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Queue/BaseQueue.hpp:6:7: warning: class 'BaseQueue' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseQueue {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Queue/Utilities/CommonTestsWithQueue.hpp:69:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(queue.dequeue(), "Assertion failed!");
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Queue\FixedSizeCircularQueue_unit.cpp:35:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(queue.enqueue(100), "Assertion failed!");
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
[154/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Queue/LinkedListQueue_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Queue/BaseQueue.hpp:6:7: warning: class 'BaseQueue' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseQueue {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Queue/Utilities/CommonTestsWithQueue.hpp:69:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(queue.dequeue(), "Assertion failed!");
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
[155/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Queue/QueueUsingTwoStacks_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Queue/BaseQueue.hpp:6:7: warning: class 'BaseQueue' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseQueue {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/BaseStack.hpp:6:7: warning: class 'BaseStack' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStack {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/DoublingSizeStack.hpp:11:7: warning: class 'DoublingSizeStack' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class DoublingSizeStack : public BaseStack<Object> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Queue/Utilities/CommonTestsWithQueue.hpp:69:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(queue.dequeue(), "Assertion failed!");
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
[156/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Random/ApproximateMedian_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Random/ApproximateMedian.hpp:32:9: warning: variable 'numbersOfElementsInSet' of type 'int' can be declared 'const' [misc-const-correctness]
        int numbersOfElementsInSet = std::min(values.size(), c * mathHelper::getLogarithmWithBase2Of(values.size()));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Random/ApproximateMedian.hpp:32:13: note: FIX-IT applied suggested code changes
        int numbersOfElementsInSet = std::min(values.size(), c * mathHelper::getLogarithmWithBase2Of(values.size()));
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\ApproximateMedian_unit.cpp:14:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\ApproximateMedian_unit.cpp:14:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\ApproximateMedian_unit.cpp:15:5: warning: variable 'approximateMedian' of type 'ApproximateMedianForTest' (aka 'ApproximateMedian<vector<int>>') can be declared 'const' [misc-const-correctness]
    ApproximateMedianForTest approximateMedian;
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\ApproximateMedian_unit.cpp:15:30: note: FIX-IT applied suggested code changes
    ApproximateMedianForTest approximateMedian;
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\ApproximateMedian_unit.cpp:21:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 2, 4, 5, 6, 8, 7};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\ApproximateMedian_unit.cpp:21:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 2, 4, 5, 6, 8, 7};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\ApproximateMedian_unit.cpp:22:5: warning: variable 'approximateMedian' of type 'ApproximateMedianForTest' (aka 'ApproximateMedian<vector<int>>') can be declared 'const' [misc-const-correctness]
    ApproximateMedianForTest approximateMedian;
    ^
                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\ApproximateMedian_unit.cpp:22:30: note: FIX-IT applied suggested code changes
    ApproximateMedianForTest approximateMedian;
                             ^
[157/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Random/KnuthShuffle_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:18:5: warning: variable 'shuffler' of type 'CharactersShuffler' (aka 'KnuthShuffle<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersShuffler shuffler;
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:18:24: note: FIX-IT applied suggested code changes
    CharactersShuffler shuffler;
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:27:5: warning: variable 'shuffler' of type 'CharactersShuffler' (aka 'KnuthShuffle<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersShuffler shuffler;
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:27:24: note: FIX-IT applied suggested code changes
    CharactersShuffler shuffler;
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:32:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'E'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:32:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'E'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:37:5: warning: variable 'shuffler' of type 'CharactersShuffler' (aka 'KnuthShuffle<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersShuffler shuffler;
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:37:24: note: FIX-IT applied suggested code changes
    CharactersShuffler shuffler;
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:38:5: warning: variable 'givenValues' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters givenValues{'S', 'O', 'R', 'T', 'E', 'X', 'A', 'M', 'P', 'L', 'E'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:38:16: note: FIX-IT applied suggested code changes
    Characters givenValues{'S', 'O', 'R', 'T', 'E', 'X', 'A', 'M', 'P', 'L', 'E'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:43:5: warning: variable 'valuesSetToExpect' of type 'CharactersSet' (aka 'set<char>') can be declared 'const' [misc-const-correctness]
    CharactersSet valuesSetToExpect{'A', 'E', 'E', 'L', 'M', 'O', 'P', 'R', 'S', 'T', 'X'};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:43:19: note: FIX-IT applied suggested code changes
    CharactersSet valuesSetToExpect{'A', 'E', 'E', 'L', 'M', 'O', 'P', 'R', 'S', 'T', 'X'};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:49:5: warning: variable 'shuffler' of type 'CharactersShuffler' (aka 'KnuthShuffle<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersShuffler shuffler;
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:49:24: note: FIX-IT applied suggested code changes
    CharactersShuffler shuffler;
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:58:5: warning: variable 'shuffler' of type 'CharactersShuffler' (aka 'KnuthShuffle<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersShuffler shuffler;
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:58:24: note: FIX-IT applied suggested code changes
    CharactersShuffler shuffler;
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:63:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'E'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:63:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'E'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:68:5: warning: variable 'shuffler' of type 'CharactersShuffler' (aka 'KnuthShuffle<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersShuffler shuffler;
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:68:24: note: FIX-IT applied suggested code changes
    CharactersShuffler shuffler;
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:69:5: warning: variable 'givenValues' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters givenValues{'S', 'O', 'R', 'T', 'E', 'X', 'A', 'M', 'P', 'L', 'E'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:69:16: note: FIX-IT applied suggested code changes
    Characters givenValues{'S', 'O', 'R', 'T', 'E', 'X', 'A', 'M', 'P', 'L', 'E'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:74:5: warning: variable 'valuesSetToExpect' of type 'CharactersSet' (aka 'set<char>') can be declared 'const' [misc-const-correctness]
    CharactersSet valuesSetToExpect{'A', 'E', 'E', 'L', 'M', 'O', 'P', 'R', 'S', 'T', 'X'};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\KnuthShuffle_unit.cpp:74:19: note: FIX-IT applied suggested code changes
    CharactersSet valuesSetToExpect{'A', 'E', 'E', 'L', 'M', 'O', 'P', 'R', 'S', 'T', 'X'};
                  ^
[158/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Random/LasVegasExamples_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/UndirectedGraph/BaseUndirectedGraph.hpp:8:7: warning: class 'BaseUndirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUndirectedGraph : public BaseGraph<Vertex> {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\LasVegasExamples_unit.cpp:31:5: warning: variable 'graphColoringAlgorithm' of type 'LasVegasAlgorithm' (aka 'function<void ()>') can be declared 'const' [misc-const-correctness]
    LasVegasAlgorithm graphColoringAlgorithm = [&]() {
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\LasVegasExamples_unit.cpp:31:23: note: FIX-IT applied suggested code changes
    LasVegasAlgorithm graphColoringAlgorithm = [&]() {
                      ^
[159/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Random/MonteCarloExamples_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:21:5: warning: variable 'x' of type 'MatrixForTest' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    MatrixForTest x;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:21:19: note: FIX-IT applied suggested code changes
    MatrixForTest x;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:23:5: warning: variable 'isEqual' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isEqual(false);
    ^
         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:23:10: note: FIX-IT applied suggested code changes
    bool isEqual(false);
         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:25:5: warning: variable 'verifyingMatrixAlgorithm' of type 'MonteCarloAlgorithm' (aka 'function<bool ()>') can be declared 'const' [misc-const-correctness]
    MonteCarloAlgorithm verifyingMatrixAlgorithm = [&]() {
    ^
                        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:25:25: note: FIX-IT applied suggested code changes
    MonteCarloAlgorithm verifyingMatrixAlgorithm = [&]() {
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:36:9: warning: variable 'bx' of type 'MatrixForTest' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
        MatrixForTest bx = b * x;
        ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:36:23: note: FIX-IT applied suggested code changes
        MatrixForTest bx = b * x;
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:37:9: warning: variable 'abx' of type 'MatrixForTest' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
        MatrixForTest abx = a * bx;
        ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:37:23: note: FIX-IT applied suggested code changes
        MatrixForTest abx = a * bx;
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:38:9: warning: variable 'cx' of type 'MatrixForTest' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
        MatrixForTest cx = c * x;
        ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\MonteCarloExamples_unit.cpp:38:23: note: FIX-IT applied suggested code changes
        MatrixForTest cx = c * x;
                      ^
[160/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Random/RandomElementAtForwardTraversal_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Random/RandomElementAtForwardTraversal.hpp:24:13: warning: variable 'randomIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int randomIndex = randomizer.getRandomValue();
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Random/RandomElementAtForwardTraversal.hpp:24:17: note: FIX-IT applied suggested code changes
            int randomIndex = randomizer.getRandomValue();
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\RandomElementAtForwardTraversal_unit.cpp:13:5: warning: variable 'values' of type 'vector<int>' can be declared 'const' [misc-const-correctness]
    vector<int> values{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\RandomElementAtForwardTraversal_unit.cpp:13:17: note: FIX-IT applied suggested code changes
    vector<int> values{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\RandomElementAtForwardTraversal_unit.cpp:20:5: warning: variable 'values' of type 'forward_list<int>' can be declared 'const' [misc-const-correctness]
    forward_list<int> values{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Random\RandomElementAtForwardTraversal_unit.cpp:20:23: note: FIX-IT applied suggested code changes
    forward_list<int> values{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
                      ^
[161/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Random/ReservoirSampling_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Random/ReservoirSampling.hpp:28:13: warning: variable 'randomIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int randomIndex = randomizer.getRandomValue();
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Random/ReservoirSampling.hpp:28:17: note: FIX-IT applied suggested code changes
            int randomIndex = randomizer.getRandomValue();
                ^
[162/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/Common/SegmentTreesUtilities_unit.cpp.obj
[163/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/Geometry/NearestPointPairSearchUsingSweepLine_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Geometry/NearestPointPairSearchUsingSweepLine.hpp:41:21: warning: variable 'possibleNearPoint' of type 'Point' (aka 'pair<double, double>') can be declared 'const' [misc-const-correctness]
                    Point possibleNearPoint(x, *itY);
                    ^
                          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Geometry/NearestPointPairSearchUsingSweepLine.hpp:41:27: note: FIX-IT applied suggested code changes
                    Point possibleNearPoint(x, *itY);
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointPairSearchUsingSweepLine_unit.cpp:35:5: warning: variable 'pointPairToExpect' of type 'PointPairForTest' (aka 'pair<pair<double, double>, pair<double, double>>') can be declared 'const' [misc-const-correctness]
    PointPairForTest pointPairToExpect{{-1, 3}, {-2, 2}};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointPairSearchUsingSweepLine_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    PointPairForTest pointPairToExpect{{-1, 3}, {-2, 2}};
                     ^
[164/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/Geometry/NearestPointSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Geometry/NearestPointSearch.hpp:165:17: warning: variable 'searchAction' of type 'SearchAction' can be declared 'const' [misc-const-correctness]
                SearchAction searchAction(getSearchAction(nodePointer, searchDetails.pointToCheck, depth));
                ^
                             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Geometry/NearestPointSearch.hpp:165:30: note: FIX-IT applied suggested code changes
                SearchAction searchAction(getSearchAction(nodePointer, searchDetails.pointToCheck, depth));
                             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:10:7: warning: class 'BaseBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTree : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:271:13: warning: variable 'sizeOfThisSubTree' of type 'int' can be declared 'const' [misc-const-correctness]
            int sizeOfThisSubTree = getSizeOfThisSubTree(nodePointer->left);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:271:17: note: FIX-IT applied suggested code changes
            int sizeOfThisSubTree = getSizeOfThisSubTree(nodePointer->left);
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BaseSet.hpp:8:7: warning: class 'BaseSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSet {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseBinarySearchTreeSet.hpp:11:7: warning: class 'BaseBinarySearchTreeSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTreeSet
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseSetWithBaseTree.hpp:6:7: warning: class 'BaseSetWithBaseTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSetWithBaseTree : public BaseTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointSearch_unit.cpp:23:5: warning: variable 'pointToExpect' of type 'PointForTest' (aka 'pair<double, double>') can be declared 'const' [misc-const-correctness]
    PointForTest pointToExpect{-5, 0};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointSearch_unit.cpp:23:18: note: FIX-IT applied suggested code changes
    PointForTest pointToExpect{-5, 0};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointSearch_unit.cpp:35:5: warning: variable 'pointToExpect' of type 'PointForTest' (aka 'pair<double, double>') can be declared 'const' [misc-const-correctness]
    PointForTest pointToExpect{5, 0};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointSearch_unit.cpp:35:18: note: FIX-IT applied suggested code changes
    PointForTest pointToExpect{5, 0};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointSearch_unit.cpp:47:5: warning: variable 'pointToExpect' of type 'PointForTest' (aka 'pair<double, double>') can be declared 'const' [misc-const-correctness]
    PointForTest pointToExpect{-1, -10};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointSearch_unit.cpp:47:18: note: FIX-IT applied suggested code changes
    PointForTest pointToExpect{-1, -10};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointSearch_unit.cpp:66:5: warning: variable 'pointToExpect' of type 'PointForTest' (aka 'pair<double, double>') can be declared 'const' [misc-const-correctness]
    PointForTest pointToExpect{-4, 0};
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointSearch_unit.cpp:66:18: note: FIX-IT applied suggested code changes
    PointForTest pointToExpect{-4, 0};
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointSearch_unit.cpp:91:5: warning: variable 'pointPairToExpect' of type 'PointPairForTest' (aka 'pair<pair<double, double>, pair<double, double>>') can be declared 'const' [misc-const-correctness]
    PointPairForTest pointPairToExpect{{-1, 3}, {-2, 2}};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\NearestPointSearch_unit.cpp:91:22: note: FIX-IT applied suggested code changes
    PointPairForTest pointPairToExpect{{-1, 3}, {-2, 2}};
                     ^
[165/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/Geometry/OrthogonalLineSegmentIntersectionSearch_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\OrthogonalLineSegmentIntersectionSearch_unit.cpp:20:5: warning: variable 'pointsToExpect' of type 'SearchForTest::Points' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest::Points pointsToExpect{{3, 3}};
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\OrthogonalLineSegmentIntersectionSearch_unit.cpp:20:27: note: FIX-IT applied suggested code changes
    SearchForTest::Points pointsToExpect{{3, 3}};
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\OrthogonalLineSegmentIntersectionSearch_unit.cpp:32:5: warning: variable 'pointsToExpect' of type 'SearchForTest::Points' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest::Points pointsToExpect{{0, 3}, {5, 3}};
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\OrthogonalLineSegmentIntersectionSearch_unit.cpp:32:27: note: FIX-IT applied suggested code changes
    SearchForTest::Points pointsToExpect{{0, 3}, {5, 3}};
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\OrthogonalLineSegmentIntersectionSearch_unit.cpp:53:5: warning: variable 'pointsToExpect' of type 'SearchForTest::Points' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest::Points pointsToExpect{{6, 5}, {9, 2}, {11, 7}, {11, 10}, {14, 5}};
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\OrthogonalLineSegmentIntersectionSearch_unit.cpp:53:27: note: FIX-IT applied suggested code changes
    SearchForTest::Points pointsToExpect{{6, 5}, {9, 2}, {11, 7}, {11, 10}, {14, 5}};
                          ^
[166/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/Geometry/OrthogonalRectangleIntersectionSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Geometry/OrthogonalRectangleIntersectionSearch.hpp:71:9: warning: variable 'yInterval' of type 'IntervalWithUnit' (aka 'Interval<double>') can be declared 'const' [misc-const-correctness]
        IntervalWithUnit yInterval{rectangle.first.second, rectangle.second.second};
        ^
                         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Geometry/OrthogonalRectangleIntersectionSearch.hpp:71:26: note: FIX-IT applied suggested code changes
        IntervalWithUnit yInterval{rectangle.first.second, rectangle.second.second};
                         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:10:7: warning: class 'BaseBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTree : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseRedBlackBinarySearchTree.hpp:11:7: warning: class 'BaseRedBlackBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRedBlackBinarySearchTree : public BaseBinarySearchTree<KeyTemplateType, NodeTemplateType, BaseDataStructure> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseRedBlackBinarySearchTree.hpp:76:17: warning: variable 'previousNodePointer' of type 'NodeUniquePointer &' (aka 'unique_ptr<alba::algorithm::IntervalSearchTreeNode<alba::algorithm::Interval<double>, double>> &') can be declared 'const' [misc-const-correctness]
                NodeUniquePointer& previousNodePointer(nodePointer->left);
                ^
                                  const
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseRedBlackBinarySearchTree.hpp:76:34: note: FIX-IT applied suggested code changes
                NodeUniquePointer& previousNodePointer(nodePointer->left);
                                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseRedBlackBinarySearchTree.hpp:98:17: warning: variable 'previousNodePointer' of type 'NodeUniquePointer &' (aka 'unique_ptr<alba::algorithm::IntervalSearchTreeNode<alba::algorithm::Interval<double>, double>> &') can be declared 'const' [misc-const-correctness]
                NodeUniquePointer& previousNodePointer(nodePointer->right);
                ^
                                  const
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseRedBlackBinarySearchTree.hpp:98:34: note: FIX-IT applied suggested code changes
                NodeUniquePointer& previousNodePointer(nodePointer->right);
                                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BaseSet.hpp:8:7: warning: class 'BaseSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSet {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseRedBlackBinarySearchTreeSet.hpp:12:7: warning: class 'BaseRedBlackBinarySearchTreeSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRedBlackBinarySearchTreeSet
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseSetWithBaseTree.hpp:6:7: warning: class 'BaseSetWithBaseTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSetWithBaseTree : public BaseTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\OrthogonalRectangleIntersectionSearch_unit.cpp:20:5: warning: variable 'rectanglesToExpect' of type 'SearchForTest::Rectangles' (aka 'vector<pair<pair<double, double>, pair<double, double>>>') can be declared 'const' [misc-const-correctness]
    SearchForTest::Rectangles rectanglesToExpect{{{-2, -1}, {2, 1}}, {{-1, -2}, {1, 2}}};
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\OrthogonalRectangleIntersectionSearch_unit.cpp:20:31: note: FIX-IT applied suggested code changes
    SearchForTest::Rectangles rectanglesToExpect{{{-2, -1}, {2, 1}}, {{-1, -2}, {1, 2}}};
                              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\OrthogonalRectangleIntersectionSearch_unit.cpp:33:5: warning: variable 'rectanglesToExpect' of type 'SearchForTest::Rectangles' (aka 'vector<pair<pair<double, double>, pair<double, double>>>') can be declared 'const' [misc-const-correctness]
    SearchForTest::Rectangles rectanglesToExpect{{{0, -1}, {7, 1}}, {{2, 2}, {6, 4}}, {{3, 0}, {4, 5}}};
    ^
                              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\OrthogonalRectangleIntersectionSearch_unit.cpp:33:31: note: FIX-IT applied suggested code changes
    SearchForTest::Rectangles rectanglesToExpect{{{0, -1}, {7, 1}}, {{2, 2}, {6, 4}}, {{3, 0}, {4, 5}}};
                              ^
[167/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/Geometry/PointsInsideRectangleSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:10:7: warning: class 'BaseBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTree : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BaseSet.hpp:8:7: warning: class 'BaseSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSet {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseBinarySearchTreeSet.hpp:11:7: warning: class 'BaseBinarySearchTreeSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTreeSet
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseSetWithBaseTree.hpp:6:7: warning: class 'BaseSetWithBaseTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSetWithBaseTree : public BaseTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\PointsInsideRectangleSearch_unit.cpp:21:5: warning: variable 'pointsToExpect' of type 'SearchForTest::Points' (aka 'vector<pair<double, double>>') can be declared 'const' [misc-const-correctness]
    SearchForTest::Points pointsToExpect{{-5, 0}};
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\PointsInsideRectangleSearch_unit.cpp:21:27: note: FIX-IT applied suggested code changes
    SearchForTest::Points pointsToExpect{{-5, 0}};
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\PointsInsideRectangleSearch_unit.cpp:33:5: warning: variable 'pointsToExpect' of type 'SearchForTest::Points' (aka 'vector<pair<double, double>>') can be declared 'const' [misc-const-correctness]
    SearchForTest::Points pointsToExpect{{5, 0}};
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\PointsInsideRectangleSearch_unit.cpp:33:27: note: FIX-IT applied suggested code changes
    SearchForTest::Points pointsToExpect{{5, 0}};
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\PointsInsideRectangleSearch_unit.cpp:45:5: warning: variable 'pointsToExpect' of type 'SearchForTest::Points' (aka 'vector<pair<double, double>>') can be declared 'const' [misc-const-correctness]
    SearchForTest::Points pointsToExpect{{0, 0}, {-5, 0}, {5, 0}};
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\PointsInsideRectangleSearch_unit.cpp:45:27: note: FIX-IT applied suggested code changes
    SearchForTest::Points pointsToExpect{{0, 0}, {-5, 0}, {5, 0}};
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\PointsInsideRectangleSearch_unit.cpp:64:5: warning: variable 'pointsToExpect' of type 'SearchForTest::Points' (aka 'vector<pair<double, double>>') can be declared 'const' [misc-const-correctness]
    SearchForTest::Points pointsToExpect{{-2, 2}, {-4, 0}};
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Geometry\PointsInsideRectangleSearch_unit.cpp:64:27: note: FIX-IT applied suggested code changes
    SearchForTest::Points pointsToExpect{{-2, 2}, {-4, 0}};
                          ^
[168/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/GetFreeIndex/GetAccumulatedNextFreeIndexWithSegmentTree_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/GetFreeIndex/GetAccumulatedNextFreeIndexWithSegmentTree.hpp:47:13: warning: variable 'leftChild' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index leftChild = Utilities::getLeftChild(currentChild);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/GetFreeIndex/GetAccumulatedNextFreeIndexWithSegmentTree.hpp:47:19: note: FIX-IT applied suggested code changes
            Index leftChild = Utilities::getLeftChild(currentChild);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/GetFreeIndex/GetAccumulatedNextFreeIndexWithSegmentTree.hpp:49:17: warning: variable 'leftChildSum' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index leftChildSum = m_treeSums[leftChild];
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/GetFreeIndex/GetAccumulatedNextFreeIndexWithSegmentTree.hpp:49:23: note: FIX-IT applied suggested code changes
                Index leftChildSum = m_treeSums[leftChild];
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/GetFreeIndex/GetAccumulatedNextFreeIndexWithSegmentTree.hpp:50:17: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/GetFreeIndex/GetAccumulatedNextFreeIndexWithSegmentTree.hpp:50:23: note: FIX-IT applied suggested code changes
                Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:184:13: warning: variable 'totalSize' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index totalSize = m_startOfChildren + valuesToCheck.size();
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:184:19: note: FIX-IT applied suggested code changes
            Index totalSize = m_startOfChildren + valuesToCheck.size();
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:221:21: warning: variable 'parentIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Index parentIndex(Utilities::getParent(treeIndex));
                    ^
                          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:221:27: note: FIX-IT applied suggested code changes
                    Index parentIndex(Utilities::getParent(treeIndex));
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\GetFreeIndex\GetAccumulatedNextFreeIndexWithSegmentTree_unit.cpp:16:5: warning: variable 'query' of type 'QueryForTest' (aka 'GetAccumulatedNextFreeIndexWithSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(0);
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\GetFreeIndex\GetAccumulatedNextFreeIndexWithSegmentTree_unit.cpp:16:18: note: FIX-IT applied suggested code changes
    QueryForTest query(0);
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\GetFreeIndex\GetAccumulatedNextFreeIndexWithSegmentTree_unit.cpp:24:5: warning: variable 'query' of type 'QueryForTest' (aka 'GetAccumulatedNextFreeIndexWithSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(28);
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\GetFreeIndex\GetAccumulatedNextFreeIndexWithSegmentTree_unit.cpp:24:18: note: FIX-IT applied suggested code changes
    QueryForTest query(28);
                 ^
[169/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/GetFreeIndex/GetNextFreeIndexWithUnionFind_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
[170/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/GetFreeIndex/GetPreviousFreeIndexWithUnionFind_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
[171/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/Interval/IntervalSearchTree_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:10:7: warning: class 'BaseBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTree : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseRedBlackBinarySearchTree.hpp:11:7: warning: class 'BaseRedBlackBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRedBlackBinarySearchTree : public BaseBinarySearchTree<KeyTemplateType, NodeTemplateType, BaseDataStructure> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BaseSet.hpp:8:7: warning: class 'BaseSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSet {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseRedBlackBinarySearchTreeSet.hpp:12:7: warning: class 'BaseRedBlackBinarySearchTreeSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRedBlackBinarySearchTreeSet
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseSetWithBaseTree.hpp:6:7: warning: class 'BaseSetWithBaseTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSetWithBaseTree : public BaseTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Interval\IntervalSearchTree_unit.cpp:84:5: warning: variable 'mergeCondition' of type 'SearchTreeForTest::BooleanBinaryFunction' (aka 'function<bool (const Interval<int> &, const Interval<int> &)>') can be declared 'const' [misc-const-correctness]
    SearchTreeForTest::BooleanBinaryFunction mergeCondition = [](SearchTreeForTest::Key const& interval1,
    ^
                                             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Interval\IntervalSearchTree_unit.cpp:84:46: note: FIX-IT applied suggested code changes
    SearchTreeForTest::BooleanBinaryFunction mergeCondition = [](SearchTreeForTest::Key const& interval1,
                                             ^
[172/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/Median/MedianOfSmallerSizes_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfSmallerSizes_unit.cpp:16:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfSmallerSizes_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfSmallerSizes_unit.cpp:25:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfSmallerSizes_unit.cpp:25:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfSmallerSizes_unit.cpp:34:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfSmallerSizes_unit.cpp:34:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfSmallerSizes_unit.cpp:43:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{0, 1, 15, 25, 6, 7, 30, 40};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfSmallerSizes_unit.cpp:43:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{0, 1, 15, 25, 6, 7, 30, 40};
                  ^
[173/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/Median/MedianOfTwoSortedContainers_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Median/MedianOfTwoSortedContainers.hpp:30:9: warning: variable 'medianSize' of type 'int' can be declared 'const' [misc-const-correctness]
        int medianSize = (m_container1.size() + m_container2.size() + 1) / 2;
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Median/MedianOfTwoSortedContainers.hpp:30:13: note: FIX-IT applied suggested code changes
        int medianSize = (m_container1.size() + m_container2.size() + 1) / 2;
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Median/MedianOfTwoSortedContainers.hpp:34:13: warning: variable 'midIndexOn1' of type 'int' can be declared 'const' [misc-const-correctness]
            int midIndexOn1 = getMidpointOfIndexes(lowIndexOn1, highIndexOn1);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Median/MedianOfTwoSortedContainers.hpp:34:17: note: FIX-IT applied suggested code changes
            int midIndexOn1 = getMidpointOfIndexes(lowIndexOn1, highIndexOn1);
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Median/MedianOfTwoSortedContainers.hpp:35:13: warning: variable 'totalAtMid' of type 'int' can be declared 'const' [misc-const-correctness]
            int totalAtMid = getTotalOnBothContainers(midIndexOn1);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/Median/MedianOfTwoSortedContainers.hpp:35:17: note: FIX-IT applied suggested code changes
            int totalAtMid = getTotalOnBothContainers(midIndexOn1);
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:16:5: warning: variable 'empty' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest empty;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    ValuesForTest empty;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:17:5: warning: variable 'query' of type 'QueryForTest' (aka 'MedianOfTwoSortedContainers<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(empty, empty);
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:17:18: note: FIX-IT applied suggested code changes
    QueryForTest query(empty, empty);
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:23:5: warning: variable 'empty' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest empty;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:23:19: note: FIX-IT applied suggested code changes
    ValuesForTest empty;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:24:5: warning: variable 'notEmpty' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest notEmpty{1, 2, 3};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:24:19: note: FIX-IT applied suggested code changes
    ValuesForTest notEmpty{1, 2, 3};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:25:5: warning: variable 'query1' of type 'QueryForTest' (aka 'MedianOfTwoSortedContainers<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query1(empty, notEmpty);
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:25:18: note: FIX-IT applied suggested code changes
    QueryForTest query1(empty, notEmpty);
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:26:5: warning: variable 'query2' of type 'QueryForTest' (aka 'MedianOfTwoSortedContainers<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query2(notEmpty, empty);
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:26:18: note: FIX-IT applied suggested code changes
    QueryForTest query2(notEmpty, empty);
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:33:5: warning: variable 'valuesForTest1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest1{1, 12, 15, 26, 38};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:33:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest1{1, 12, 15, 26, 38};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:34:5: warning: variable 'valuesForTest2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest2{2, 13, 17, 30, 45};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:34:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest2{2, 13, 17, 30, 45};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:35:5: warning: variable 'query' of type 'QueryForTest' (aka 'MedianOfTwoSortedContainers<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(valuesForTest1, valuesForTest2);
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:35:18: note: FIX-IT applied suggested code changes
    QueryForTest query(valuesForTest1, valuesForTest2);
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:41:5: warning: variable 'valuesForTest1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest1{1, 12, 17, 26, 38};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:41:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest1{1, 12, 17, 26, 38};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:42:5: warning: variable 'valuesForTest2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest2{2, 13, 15, 30, 45};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:42:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest2{2, 13, 15, 30, 45};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:43:5: warning: variable 'query' of type 'QueryForTest' (aka 'MedianOfTwoSortedContainers<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(valuesForTest1, valuesForTest2);
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:43:18: note: FIX-IT applied suggested code changes
    QueryForTest query(valuesForTest1, valuesForTest2);
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:49:5: warning: variable 'valuesForTest1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest1{1, 13, 13, 26, 38};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:49:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest1{1, 13, 13, 26, 38};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:50:5: warning: variable 'valuesForTest2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest2{2, 12, 17, 30, 45};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:50:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest2{2, 12, 17, 30, 45};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:51:5: warning: variable 'query' of type 'QueryForTest' (aka 'MedianOfTwoSortedContainers<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(valuesForTest1, valuesForTest2);
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:51:18: note: FIX-IT applied suggested code changes
    QueryForTest query(valuesForTest1, valuesForTest2);
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:57:5: warning: variable 'valuesForTest1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest1{1, 12, 13, 26, 38};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest1{1, 12, 13, 26, 38};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:58:5: warning: variable 'valuesForTest2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest2{2, 13, 17, 30, 45};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:58:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest2{2, 13, 17, 30, 45};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:59:5: warning: variable 'query' of type 'QueryForTest' (aka 'MedianOfTwoSortedContainers<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(valuesForTest1, valuesForTest2);
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\Median\MedianOfTwoSortedContainers_unit.cpp:59:18: note: FIX-IT applied suggested code changes
    QueryForTest query(valuesForTest1, valuesForTest2);
                 ^
[174/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:58:9: warning: variable 'lowerBoundValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value lowerBoundValue(*lowerIt);
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:58:15: note: FIX-IT applied suggested code changes
        Value lowerBoundValue(*lowerIt);
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:59:9: warning: variable 'higherBoundValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value higherBoundValue(*upperIt);
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:59:15: note: FIX-IT applied suggested code changes
        Value higherBoundValue(*upperIt);
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:60:9: warning: variable 'deviationFromLower' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromLower(mathHelper::getPositiveDelta(target, lowerBoundValue));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:60:15: note: FIX-IT applied suggested code changes
        Value deviationFromLower(mathHelper::getPositiveDelta(target, lowerBoundValue));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:61:9: warning: variable 'deviationFromHigher' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, higherBoundValue));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:61:15: note: FIX-IT applied suggested code changes
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, higherBoundValue));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:70:9: warning: variable 'deviationFromLower' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromLower(mathHelper::getPositiveDelta(target, lowerBoundValue));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:70:15: note: FIX-IT applied suggested code changes
        Value deviationFromLower(mathHelper::getPositiveDelta(target, lowerBoundValue));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:71:9: warning: variable 'deviationFromHigher' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, higherBoundValue));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithCppFunctions.hpp:71:15: note: FIX-IT applied suggested code changes
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, higherBoundValue));
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithCppFunctions_unit.cpp:49:5: warning: variable 'duplicateValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithCppFunctions_unit.cpp:49:19: note: FIX-IT applied suggested code changes
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithCppFunctions_unit.cpp:50:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithCppFunctions<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(duplicateValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithCppFunctions_unit.cpp:50:19: note: FIX-IT applied suggested code changes
    SearchForTest search(duplicateValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithCppFunctions_unit.cpp:68:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithCppFunctions_unit.cpp:68:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithCppFunctions_unit.cpp:69:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithCppFunctions<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithCppFunctions_unit.cpp:69:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
[175/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithRecursion_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithRecursion.hpp:46:13: warning: variable 'middleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index middleIndex = getMidpointOfIndexes(lowIndex, highIndex);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithRecursion.hpp:46:19: note: FIX-IT applied suggested code changes
            Index middleIndex = getMidpointOfIndexes(lowIndex, highIndex);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithRecursion.hpp:57:9: warning: variable 'deviationFromLower' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromLower(mathHelper::getPositiveDelta(target, m_sortedValues[lowIndex]));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithRecursion.hpp:57:15: note: FIX-IT applied suggested code changes
        Value deviationFromLower(mathHelper::getPositiveDelta(target, m_sortedValues[lowIndex]));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithRecursion.hpp:58:9: warning: variable 'deviationFromHigher' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, m_sortedValues[highIndex]));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithRecursion.hpp:58:15: note: FIX-IT applied suggested code changes
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, m_sortedValues[highIndex]));
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:49:5: warning: variable 'duplicateValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:49:19: note: FIX-IT applied suggested code changes
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:50:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithRecursion<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(duplicateValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:50:19: note: FIX-IT applied suggested code changes
    SearchForTest search(duplicateValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:70:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:70:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:71:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithRecursion<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:71:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:79:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:79:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:80:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithRecursion<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:80:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:88:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:88:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:89:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithRecursion<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithRecursion_unit.cpp:89:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
[176/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:34:9: warning: variable 'lowIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index lowIndex(getNearestLowerBoundIndex(target));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:34:15: note: FIX-IT applied suggested code changes
        Index lowIndex(getNearestLowerBoundIndex(target));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:40:9: warning: variable 'size' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index size(m_sortedValues.size());
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:40:15: note: FIX-IT applied suggested code changes
        Index size(m_sortedValues.size());
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:53:9: warning: variable 'lowerBoundValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value lowerBoundValue(m_sortedValues[lowIndex]);
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:53:15: note: FIX-IT applied suggested code changes
        Value lowerBoundValue(m_sortedValues[lowIndex]);
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:54:9: warning: variable 'highIndex' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value highIndex(getHigherIndex(lowIndex));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:54:15: note: FIX-IT applied suggested code changes
        Value highIndex(getHigherIndex(lowIndex));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:55:9: warning: variable 'deviationFromLower' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromLower(mathHelper::getPositiveDelta(target, lowerBoundValue));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:55:15: note: FIX-IT applied suggested code changes
        Value deviationFromLower(mathHelper::getPositiveDelta(target, lowerBoundValue));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:56:9: warning: variable 'deviationFromHigher' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, m_sortedValues[highIndex]));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithSkip.hpp:56:15: note: FIX-IT applied suggested code changes
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, m_sortedValues[highIndex]));
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithSkip_unit.cpp:49:5: warning: variable 'duplicateValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithSkip_unit.cpp:49:19: note: FIX-IT applied suggested code changes
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithSkip_unit.cpp:50:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithSkip<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(duplicateValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithSkip_unit.cpp:50:19: note: FIX-IT applied suggested code changes
    SearchForTest search(duplicateValues);
                  ^
[177/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithTwoIndices_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithTwoIndices.hpp:64:9: warning: variable 'deviationFromLower' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromLower(mathHelper::getPositiveDelta(target, m_sortedValues[m_lowIndex]));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithTwoIndices.hpp:64:15: note: FIX-IT applied suggested code changes
        Value deviationFromLower(mathHelper::getPositiveDelta(target, m_sortedValues[m_lowIndex]));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithTwoIndices.hpp:65:9: warning: variable 'deviationFromHigher' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, m_sortedValues[m_highIndex]));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithTwoIndices.hpp:65:15: note: FIX-IT applied suggested code changes
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, m_sortedValues[m_highIndex]));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithTwoIndices.hpp:78:13: warning: variable 'maxIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index maxIndex = m_sortedValues.size() - 1;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithTwoIndices.hpp:78:19: note: FIX-IT applied suggested code changes
            Index maxIndex = m_sortedValues.size() - 1;
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithTwoIndices.hpp:90:17: warning: variable 'middleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index middleIndex(getMidpointOfIndexes(m_lowIndex, m_highIndex));
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/BinarySearch/BinaryNearestValueSearchWithTwoIndices.hpp:90:23: note: FIX-IT applied suggested code changes
                Index middleIndex(getMidpointOfIndexes(m_lowIndex, m_highIndex));
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:49:5: warning: variable 'duplicateValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:49:19: note: FIX-IT applied suggested code changes
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:68:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:68:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:69:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithTwoIndices<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:69:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:76:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:76:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:77:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithTwoIndices<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:77:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:84:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:84:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:85:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithTwoIndices<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:85:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:92:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:92:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:93:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithTwoIndices<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:93:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:100:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:100:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:109:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:109:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:110:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinaryNearestValueSearchWithTwoIndices<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:110:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:117:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:117:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:126:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:126:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:137:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:137:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:148:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:148:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:161:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\BinarySearch\BinaryNearestValueSearchWithTwoIndices_unit.cpp:161:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
[178/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:54:13: warning: variable 'lowerValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value lowerValue = getLowerValueWithoutCheck();
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:54:19: note: FIX-IT applied suggested code changes
            Value lowerValue = getLowerValueWithoutCheck();
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:55:13: warning: variable 'higherValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value higherValue = getHigherValueWithoutCheck();
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:55:19: note: FIX-IT applied suggested code changes
            Value higherValue = getHigherValueWithoutCheck();
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:69:9: warning: variable 'lowerValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value lowerValue(getLowerValueWithoutCheck());
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:69:15: note: FIX-IT applied suggested code changes
        Value lowerValue(getLowerValueWithoutCheck());
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:70:9: warning: variable 'higherValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value higherValue(getHigherValueWithoutCheck());
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:70:15: note: FIX-IT applied suggested code changes
        Value higherValue(getHigherValueWithoutCheck());
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:71:9: warning: variable 'deviationFromLower' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromLower(mathHelper::getPositiveDelta(target, lowerValue));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:71:15: note: FIX-IT applied suggested code changes
        Value deviationFromLower(mathHelper::getPositiveDelta(target, lowerValue));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:72:9: warning: variable 'deviationFromHigher' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, higherValue));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:72:15: note: FIX-IT applied suggested code changes
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, higherValue));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:77:9: warning: variable 'lowerValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value lowerValue(getLowerValueWithoutCheck());
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:77:15: note: FIX-IT applied suggested code changes
        Value lowerValue(getLowerValueWithoutCheck());
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:78:9: warning: variable 'higherValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value higherValue(getHigherValueWithoutCheck());
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:78:15: note: FIX-IT applied suggested code changes
        Value higherValue(getHigherValueWithoutCheck());
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:79:9: warning: variable 'deviationFromLower' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromLower(mathHelper::getPositiveDelta(target, lowerValue));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:79:15: note: FIX-IT applied suggested code changes
        Value deviationFromLower(mathHelper::getPositiveDelta(target, lowerValue));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:80:9: warning: variable 'deviationFromHigher' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, higherValue));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:80:15: note: FIX-IT applied suggested code changes
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, higherValue));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:93:13: warning: variable 'maxIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index maxIndex = m_sortedValues.size() - 1;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:93:19: note: FIX-IT applied suggested code changes
            Index maxIndex = m_sortedValues.size() - 1;
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:105:17: warning: variable 'interpolatedIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index interpolatedIndex(getInterpolatedIndexInBetween(target));
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:105:23: note: FIX-IT applied suggested code changes
                Index interpolatedIndex(getInterpolatedIndexInBetween(target));
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:106:17: warning: variable 'valueAtInterpolatedIndex' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value valueAtInterpolatedIndex(m_sortedValues[interpolatedIndex]);
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/InterpolationSearch/InterpolationNearestValueSearch.hpp:106:23: note: FIX-IT applied suggested code changes
                Value valueAtInterpolatedIndex(m_sortedValues[interpolatedIndex]);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\InterpolationSearch\InterpolationNearestValueSearch_unit.cpp:49:5: warning: variable 'duplicateValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\InterpolationSearch\InterpolationNearestValueSearch_unit.cpp:49:19: note: FIX-IT applied suggested code changes
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\InterpolationSearch\InterpolationNearestValueSearch_unit.cpp:68:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\InterpolationSearch\InterpolationNearestValueSearch_unit.cpp:68:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\InterpolationSearch\InterpolationNearestValueSearch_unit.cpp:75:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\InterpolationSearch\InterpolationNearestValueSearch_unit.cpp:75:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\InterpolationSearch\InterpolationNearestValueSearch_unit.cpp:82:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\InterpolationSearch\InterpolationNearestValueSearch_unit.cpp:82:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
[179/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/NearestValue/JumpSearch/JumpNearestValueSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/JumpSearch/JumpNearestValueSearch.hpp:35:9: warning: variable 'selectedIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index selectedIndex(getIndexOfNearestValue(target));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/JumpSearch/JumpNearestValueSearch.hpp:35:15: note: FIX-IT applied suggested code changes
        Index selectedIndex(getIndexOfNearestValue(target));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithOneIndex.hpp:33:17: warning: variable 'value' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value value(*it);
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithOneIndex.hpp:33:23: note: FIX-IT applied suggested code changes
                Value value(*it);
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithOneIndex.hpp:38:17: warning: variable 'currentDeviation' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value currentDeviation(mathHelper::getPositiveDelta(value, target));
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithOneIndex.hpp:38:23: note: FIX-IT applied suggested code changes
                Value currentDeviation(mathHelper::getPositiveDelta(value, target));
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\JumpSearch\JumpNearestValueSearch_unit.cpp:49:5: warning: variable 'duplicateValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\JumpSearch\JumpNearestValueSearch_unit.cpp:49:19: note: FIX-IT applied suggested code changes
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
                  ^
[180/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithOneIndex_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithOneIndex.hpp:50:9: warning: variable 'selectedIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index selectedIndex(getIndexOfNearestValue(target));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithOneIndex.hpp:50:15: note: FIX-IT applied suggested code changes
        Index selectedIndex(getIndexOfNearestValue(target));
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithOneIndex_unit.cpp:49:5: warning: variable 'duplicateValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithOneIndex_unit.cpp:49:19: note: FIX-IT applied suggested code changes
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithOneIndex_unit.cpp:70:5: warning: variable 'unsortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest unsortedValues{43, 96, 53, 25, 95, 72, 6, 84, 14, 64, 33, 97, 51, 93, 13};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithOneIndex_unit.cpp:70:19: note: FIX-IT applied suggested code changes
    ValuesForTest unsortedValues{43, 96, 53, 25, 95, 72, 6, 84, 14, 64, 33, 97, 51, 93, 13};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithOneIndex_unit.cpp:79:5: warning: variable 'unsortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest unsortedValues{43, 96, 53, 25, 95, 72, 6, 84, 14, 64, 33, 97, 51, 93, 13};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithOneIndex_unit.cpp:79:19: note: FIX-IT applied suggested code changes
    ValuesForTest unsortedValues{43, 96, 53, 25, 95, 72, 6, 84, 14, 64, 33, 97, 51, 93, 13};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithOneIndex_unit.cpp:86:5: warning: variable 'unsortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest unsortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithOneIndex_unit.cpp:86:19: note: FIX-IT applied suggested code changes
    ValuesForTest unsortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
[181/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithTwoIndices_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithTwoIndices.hpp:32:17: warning: variable 'valueAtLower' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value valueAtLower = *itLower;
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithTwoIndices.hpp:32:23: note: FIX-IT applied suggested code changes
                Value valueAtLower = *itLower;
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithTwoIndices.hpp:33:17: warning: variable 'valueAtHigher' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value valueAtHigher = *itHigher;
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithTwoIndices.hpp:33:23: note: FIX-IT applied suggested code changes
                Value valueAtHigher = *itHigher;
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithTwoIndices.hpp:42:17: warning: variable 'deviationAtLower' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value deviationAtLower(mathHelper::getPositiveDelta(valueAtLower, target));
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithTwoIndices.hpp:42:23: note: FIX-IT applied suggested code changes
                Value deviationAtLower(mathHelper::getPositiveDelta(valueAtLower, target));
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithTwoIndices.hpp:43:17: warning: variable 'deviationAtHigher' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value deviationAtHigher(mathHelper::getPositiveDelta(valueAtHigher, target));
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithTwoIndices.hpp:43:23: note: FIX-IT applied suggested code changes
                Value deviationAtHigher(mathHelper::getPositiveDelta(valueAtHigher, target));
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithTwoIndices.hpp:61:9: warning: variable 'selectedIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index selectedIndex(getIndexOfNearestValue(target));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/LinearSearch/LinearNearestValueSearchWithTwoIndices.hpp:61:15: note: FIX-IT applied suggested code changes
        Index selectedIndex(getIndexOfNearestValue(target));
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithTwoIndices_unit.cpp:49:5: warning: variable 'duplicateValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithTwoIndices_unit.cpp:49:19: note: FIX-IT applied suggested code changes
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithTwoIndices_unit.cpp:70:5: warning: variable 'unsortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest unsortedValues{43, 96, 53, 25, 95, 72, 6, 84, 14, 64, 33, 97, 51, 93, 13};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithTwoIndices_unit.cpp:70:19: note: FIX-IT applied suggested code changes
    ValuesForTest unsortedValues{43, 96, 53, 25, 95, 72, 6, 84, 14, 64, 33, 97, 51, 93, 13};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithTwoIndices_unit.cpp:79:5: warning: variable 'unsortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest unsortedValues{43, 96, 53, 25, 95, 72, 6, 84, 14, 64, 33, 97, 51, 93, 13};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithTwoIndices_unit.cpp:79:19: note: FIX-IT applied suggested code changes
    ValuesForTest unsortedValues{43, 96, 53, 25, 95, 72, 6, 84, 14, 64, 33, 97, 51, 93, 13};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithTwoIndices_unit.cpp:86:5: warning: variable 'unsortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest unsortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\LinearSearch\LinearNearestValueSearchWithTwoIndices_unit.cpp:86:19: note: FIX-IT applied suggested code changes
    ValuesForTest unsortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
[182/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/NearestValue/TernarySearch/TernaryNearestValueSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:36:13: warning: variable 'selectedIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index selectedIndex(getIndexOfNearestValueWithoutCheck(0, m_sortedValues.size() - 1, target));
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:36:19: note: FIX-IT applied suggested code changes
            Index selectedIndex(getIndexOfNearestValueWithoutCheck(0, m_sortedValues.size() - 1, target));
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:51:13: warning: variable 'lastIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index lastIndex = static_cast<Index>(m_sortedValues.size()) - 1;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:51:19: note: FIX-IT applied suggested code changes
            Index lastIndex = static_cast<Index>(m_sortedValues.size()) - 1;
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:56:13: warning: variable 'firstMiddleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index firstMiddleIndex = getFirstOneThirdIndex(lowIndex, highIndex);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:56:19: note: FIX-IT applied suggested code changes
            Index firstMiddleIndex = getFirstOneThirdIndex(lowIndex, highIndex);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:57:13: warning: variable 'secondMiddleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index secondMiddleIndex = getSecondOneThirdIndex(lowIndex, highIndex);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:57:19: note: FIX-IT applied suggested code changes
            Index secondMiddleIndex = getSecondOneThirdIndex(lowIndex, highIndex);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:71:9: warning: variable 'deviationFromLower' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromLower(mathHelper::getPositiveDelta(target, m_sortedValues[lowIndex]));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:71:15: note: FIX-IT applied suggested code changes
        Value deviationFromLower(mathHelper::getPositiveDelta(target, m_sortedValues[lowIndex]));
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:72:9: warning: variable 'deviationFromHigher' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, m_sortedValues[highIndex]));
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/NearestValue/TernarySearch/TernaryNearestValueSearch.hpp:72:15: note: FIX-IT applied suggested code changes
        Value deviationFromHigher(mathHelper::getPositiveDelta(target, m_sortedValues[highIndex]));
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:49:5: warning: variable 'duplicateValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:49:19: note: FIX-IT applied suggested code changes
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:50:5: warning: variable 'search' of type 'SearchForTest' (aka 'TernaryNearestValueSearch<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(duplicateValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:50:19: note: FIX-IT applied suggested code changes
    SearchForTest search(duplicateValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:68:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:68:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:69:5: warning: variable 'search' of type 'SearchForTest' (aka 'TernaryNearestValueSearch<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:69:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:75:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:75:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:76:5: warning: variable 'search' of type 'SearchForTest' (aka 'TernaryNearestValueSearch<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:76:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:82:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:82:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 33, 43, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:83:5: warning: variable 'search' of type 'SearchForTest' (aka 'TernaryNearestValueSearch<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\NearestValue\TernarySearch\TernaryNearestValueSearch_unit.cpp:83:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
[183/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/Blocks/RangeQueryWithBlocksWithMultipleRequests_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:50:13: warning: variable 'startOfBlocks' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index startOfBlocks = mathHelper::getMultipleThatIsGreaterOrEqual(m_blockSize, start);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:50:19: note: FIX-IT applied suggested code changes
            Index startOfBlocks = mathHelper::getMultipleThatIsGreaterOrEqual(m_blockSize, start);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:51:13: warning: variable 'endOfBlocks' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index endOfBlocks = mathHelper::getMultipleThatIsLesserOrEqual(m_blockSize, end);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:51:19: note: FIX-IT applied suggested code changes
            Index endOfBlocks = mathHelper::getMultipleThatIsLesserOrEqual(m_blockSize, end);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:53:17: warning: variable 'blockStart' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index blockStart = startOfBlocks / m_blockSize;
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:53:23: note: FIX-IT applied suggested code changes
                Index blockStart = startOfBlocks / m_blockSize;
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:54:17: warning: variable 'blockEnd' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index blockEnd = endOfBlocks / m_blockSize;
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:54:23: note: FIX-IT applied suggested code changes
                Index blockEnd = endOfBlocks / m_blockSize;
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:95:13: warning: variable 'numberOfBlocks' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index numberOfBlocks =
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:95:19: note: FIX-IT applied suggested code changes
            Index numberOfBlocks =
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:99:17: warning: variable 'end' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index end = std::min(start + m_blockSize, static_cast<Index>(m_values.size()));
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:99:23: note: FIX-IT applied suggested code changes
                Index end = std::min(start + m_blockSize, static_cast<Index>(m_values.size()));
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocksWithMultipleRequests.hpp:103:9: warning: variable 'blockSize' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index blockSize = this->getBlockSize();
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocksWithMultipleRequests.hpp:103:15: note: FIX-IT applied suggested code changes
        Index blockSize = this->getBlockSize();
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocksWithMultipleRequests.hpp:105:13: warning: variable 'blockIndex1' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index blockIndex1 = range1.first / blockSize;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocksWithMultipleRequests.hpp:105:19: note: FIX-IT applied suggested code changes
            Index blockIndex1 = range1.first / blockSize;
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocksWithMultipleRequests.hpp:106:13: warning: variable 'blockIndex2' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index blockIndex2 = range2.first / blockSize;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocksWithMultipleRequests.hpp:106:19: note: FIX-IT applied suggested code changes
            Index blockIndex2 = range2.first / blockSize;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocksWithMultipleRequests_unit.cpp:36:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocksWithMultipleRequests_unit.cpp:36:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocksWithMultipleRequests_unit.cpp:37:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBlocksWithMultipleRequests<vector<int>, vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocksWithMultipleRequests_unit.cpp:37:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocksWithMultipleRequests_unit.cpp:40:5: warning: variable 'inputRanges' of type 'RangesForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    RangesForTest inputRanges{{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6},
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocksWithMultipleRequests_unit.cpp:40:19: note: FIX-IT applied suggested code changes
    RangesForTest inputRanges{{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6},
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocksWithMultipleRequests_unit.cpp:43:5: warning: variable 'expectedPairs' of type 'InputAndOutputPairsForTest' (aka 'vector<pair<pair<int, int>, int>>') can be declared 'const' [misc-const-correctness]
    InputAndOutputPairsForTest expectedPairs{{{0, 0}, 1},  {{0, 1}, 4},  {{0, 2}, 8},  {{0, 3}, 16}, {{0, 4}, 22},
    ^
                               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocksWithMultipleRequests_unit.cpp:43:32: note: FIX-IT applied suggested code changes
    InputAndOutputPairsForTest expectedPairs{{{0, 0}, 1},  {{0, 1}, 4},  {{0, 2}, 8},  {{0, 3}, 16}, {{0, 4}, 22},
                               ^
[184/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/Blocks/RangeQueryWithBlocks_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:85:13: warning: variable 'start' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index start = mathHelper::getMultipleThatIsLesserOrEqual(m_blockSize, index);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:85:19: note: FIX-IT applied suggested code changes
            Index start = mathHelper::getMultipleThatIsLesserOrEqual(m_blockSize, index);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:86:13: warning: variable 'end' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index end = std::min(start + m_blockSize, static_cast<Index>(m_values.size()));
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/Blocks/RangeQueryWithBlocks.hpp:86:19: note: FIX-IT applied suggested code changes
            Index end = std::min(start + m_blockSize, static_cast<Index>(m_values.size()));
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:36:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:36:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:37:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBlocks<vector<int>, vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, 2, plusForARangeOfValues, plusForARangeOfBlockValues);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:37:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, 2, plusForARangeOfValues, plusForARangeOfBlockValues);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:43:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:43:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:44:5: warning: variable 'countRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBlocks<vector<int>, vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest countRangeQuery(values, 2, countFoursForARangeOfValues, plusForARangeOfBlockValues);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:44:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest countRangeQuery(values, 2, countFoursForARangeOfValues, plusForARangeOfBlockValues);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:50:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:50:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:51:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBlocks<vector<int>, vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, 2, plusForARangeOfValues, plusForARangeOfBlockValues);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:51:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, 2, plusForARangeOfValues, plusForARangeOfBlockValues);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:53:5: warning: variable 'blocks' of type 'BlockValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    BlockValuesForTest blocks{16, 13, 9};
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:53:24: note: FIX-IT applied suggested code changes
    BlockValuesForTest blocks{16, 13, 9};
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:58:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:58:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:59:5: warning: variable 'countRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBlocks<vector<int>, vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest countRangeQuery(values, 2, countFoursForARangeOfValues, plusForARangeOfBlockValues);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:59:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest countRangeQuery(values, 2, countFoursForARangeOfValues, plusForARangeOfBlockValues);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:61:5: warning: variable 'blocks' of type 'BlockValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    BlockValuesForTest blocks{2, 1, 1};
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:61:24: note: FIX-IT applied suggested code changes
    BlockValuesForTest blocks{2, 1, 1};
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:66:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:66:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:67:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBlocks<vector<int>, vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, 2, plusForARangeOfValues, plusForARangeOfBlockValues);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:67:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, 2, plusForARangeOfValues, plusForARangeOfBlockValues);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:73:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:73:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:74:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBlocks<vector<int>, vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, 2, plusForARangeOfValues, plusForARangeOfBlockValues);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:74:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, 2, plusForARangeOfValues, plusForARangeOfBlockValues);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:93:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:93:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:94:5: warning: variable 'countRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBlocks<vector<int>, vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest countRangeQuery(values, 2, countFoursForARangeOfValues, plusForARangeOfBlockValues);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:94:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest countRangeQuery(values, 2, countFoursForARangeOfValues, plusForARangeOfBlockValues);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:113:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:113:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:122:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:122:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:144:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:144:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:167:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:167:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:195:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 8, 6, 3, 2, 5, 2, 6, 7, 1, 7, 5, 6, 2, 6, 2};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\Blocks\RangeQueryWithBlocks_unit.cpp:195:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 8, 6, 3, 2, 5, 2, 6, 7, 1, 7, 5, 6, 2, 6, 2};
                  ^
[185/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/RangeQueryForNumberOfDistinctValues_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryForNumberOfDistinctValues.hpp:31:9: warning: variable 'targetRange' of type 'Range' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
        Range targetRange{start, end};
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryForNumberOfDistinctValues.hpp:31:15: note: FIX-IT applied suggested code changes
        Range targetRange{start, end};
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryForNumberOfDistinctValues.hpp:47:13: warning: variable 'start' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index start = validRequestsRanges.front().first;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryForNumberOfDistinctValues.hpp:47:19: note: FIX-IT applied suggested code changes
            Index start = validRequestsRanges.front().first;
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryForNumberOfDistinctValues.hpp:79:9: warning: variable 'blockSize' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index blockSize = getSquareRootSize(m_values.size());
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryForNumberOfDistinctValues.hpp:79:15: note: FIX-IT applied suggested code changes
        Index blockSize = getSquareRootSize(m_values.size());
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryForNumberOfDistinctValues.hpp:81:13: warning: variable 'blockIndex1' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index blockIndex1 = range1.first / blockSize;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryForNumberOfDistinctValues.hpp:81:19: note: FIX-IT applied suggested code changes
            Index blockIndex1 = range1.first / blockSize;
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryForNumberOfDistinctValues.hpp:82:13: warning: variable 'blockIndex2' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index blockIndex2 = range2.first / blockSize;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryForNumberOfDistinctValues.hpp:82:19: note: FIX-IT applied suggested code changes
            Index blockIndex2 = range2.first / blockSize;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:18:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:18:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:19:5: warning: variable 'countRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryForNumberOfDistinctValues<vector<int>, MAX_VALUE>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest countRangeQuery(values);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:19:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest countRangeQuery(values);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:38:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:38:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{4, 2, 5, 4, 2, 4, 3, 3, 4};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:39:5: warning: variable 'countRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryForNumberOfDistinctValues<vector<int>, MAX_VALUE>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest countRangeQuery(values);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:39:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest countRangeQuery(values);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:40:5: warning: variable 'inputRanges' of type 'RangesForTest' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    RangesForTest inputRanges{{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6},
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:40:19: note: FIX-IT applied suggested code changes
    RangesForTest inputRanges{{0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6},
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:43:5: warning: variable 'expectedPairs' of type 'InputAndOutputPairsForTest' (aka 'vector<pair<pair<int, int>, int>>') can be declared 'const' [misc-const-correctness]
    InputAndOutputPairsForTest expectedPairs{{{0, 0}, 1}, {{0, 1}, 2}, {{0, 2}, 3}, {{0, 3}, 3}, {{0, 4}, 3},
    ^
                               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryForNumberOfDistinctValues_unit.cpp:43:32: note: FIX-IT applied suggested code changes
    InputAndOutputPairsForTest expectedPairs{{{0, 0}, 1}, {{0, 1}, 2}, {{0, 2}, 3}, {{0, 3}, 3}, {{0, 4}, 3},
                               ^
[186/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/RangeQueryWithAccumulator_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:20:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:20:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:21:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithAccumulator<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:21:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:27:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:27:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:28:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithAccumulator<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:28:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:48:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 3, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:48:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 3, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:49:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithAccumulator<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:49:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:68:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:68:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:69:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithAccumulator<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:69:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:88:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 3, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:88:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 3, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:89:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithAccumulator<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithAccumulator_unit.cpp:89:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
                      ^
[187/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithBinaryIndexedTree.hpp:70:13: warning: variable 'delta' of type 'Value' (aka 'double') can be declared 'const' [misc-const-correctness]
            Value delta = m_inverseAccumulator(newValue, m_values[index]);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithBinaryIndexedTree.hpp:70:19: note: FIX-IT applied suggested code changes
            Value delta = m_inverseAccumulator(newValue, m_values[index]);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithBinaryIndexedTree.hpp:104:13: warning: variable 'powerOf2Factor' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index powerOf2Factor(getGreatestPowerOf2Factor(indexPlusOne));
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithBinaryIndexedTree.hpp:104:19: note: FIX-IT applied suggested code changes
            Index powerOf2Factor(getGreatestPowerOf2Factor(indexPlusOne));
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:18:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:18:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:19:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBinaryIndexedTree<vector<double>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:19:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:25:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:25:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:26:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBinaryIndexedTree<vector<double>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:26:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:45:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:45:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:46:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBinaryIndexedTree<vector<double>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:46:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:52:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:53:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBinaryIndexedTree<vector<double>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:53:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator, dividesAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:68:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:68:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:77:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithDouble_unit.cpp:77:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
[188/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:18:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:18:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:19:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBinaryIndexedTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:19:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:25:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:25:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:26:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBinaryIndexedTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:26:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:45:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:45:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:46:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBinaryIndexedTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:46:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:52:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:53:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithBinaryIndexedTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:53:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusAccumulator, minusAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:68:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:68:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:77:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:77:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:99:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithBinaryIndexedTreeWithInteger_unit.cpp:99:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
[189/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/RangeQueryWithQuadraticAuxiliarySize_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithQuadraticAuxiliarySize.hpp:42:21: warning: variable 'right' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Index right = left + length - 1;
                    ^
                          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithQuadraticAuxiliarySize.hpp:42:27: note: FIX-IT applied suggested code changes
                    Index right = left + length - 1;
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:29:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:29:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:30:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithQuadraticAuxiliarySize<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:30:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:36:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:36:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:37:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithQuadraticAuxiliarySize<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:37:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:54:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:54:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:55:5: warning: variable 'maximumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithQuadraticAuxiliarySize<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest maximumRangeQuery(values, maximumSelector);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:55:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest maximumRangeQuery(values, maximumSelector);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:72:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:72:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:73:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithQuadraticAuxiliarySize<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:73:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:93:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 3, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:93:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 3, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:94:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithQuadraticAuxiliarySize<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:94:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:113:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:113:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:114:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithQuadraticAuxiliarySize<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:114:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:133:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 3, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:133:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 3, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:134:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithQuadraticAuxiliarySize<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithQuadraticAuxiliarySize_unit.cpp:134:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesAccumulator);
                      ^
[190/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/RangeQueryWithSelector_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:35:17: warning: variable 'exponentOfDelta' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index exponentOfDelta = getCeilOfLogarithmWithBase2Of(end + 1 - start) - 1;
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:35:23: note: FIX-IT applied suggested code changes
                Index exponentOfDelta = getCeilOfLogarithmWithBase2Of(end + 1 - start) - 1;
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:36:17: warning: variable 'delta' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index delta = get2ToThePowerOf(exponentOfDelta);  // Half of the distance that would fit
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:36:23: note: FIX-IT applied suggested code changes
                Index delta = get2ToThePowerOf(exponentOfDelta);  // Half of the distance that would fit
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:58:13: warning: variable 'maxExponentOf2' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index maxExponentOf2(getCeilOfLogarithmWithBase2Of(valuesToCheck.size()));
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:58:19: note: FIX-IT applied suggested code changes
            Index maxExponentOf2(getCeilOfLogarithmWithBase2Of(valuesToCheck.size()));
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:59:13: warning: variable 'lastExponentOf2' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index lastExponentOf2 = maxExponentOf2 > 0
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:59:19: note: FIX-IT applied suggested code changes
            Index lastExponentOf2 = maxExponentOf2 > 0
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:70:17: warning: variable 'offset' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index offset = get2ToThePowerOf(subExponentOf2);
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:70:23: note: FIX-IT applied suggested code changes
                Index offset = get2ToThePowerOf(subExponentOf2);
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:71:17: warning: variable 'limit' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index limit = valuesToCheck.size() - offset;
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:71:23: note: FIX-IT applied suggested code changes
                Index limit = valuesToCheck.size() - offset;
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:73:21: warning: variable 'selectedValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Value selectedValue(m_selector(
                    ^
                          const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/RangeQueryWithSelector.hpp:73:27: note: FIX-IT applied suggested code changes
                    Value selectedValue(m_selector(
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:26:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:26:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:27:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithSelector<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:27:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:33:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:33:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:34:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithSelector<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:34:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:40:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:40:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:41:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithSelector<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:41:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:49:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:49:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:50:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithSelector<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:50:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumSelector);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:67:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:67:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:68:5: warning: variable 'maximumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithSelector<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest maximumRangeQuery(values, maximumSelector);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\RangeQueryWithSelector_unit.cpp:68:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest maximumRangeQuery(values, maximumSelector);
                      ^
[191/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryForCount_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:12:7: warning: destructor of 'RangeQueryWithDynamicSegmentTree<std::vector<std::map<int, int>>>' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
class RangeQueryWithDynamicSegmentTree {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:12:7: note: make it public and virtual
class RangeQueryWithDynamicSegmentTree {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:54:13: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:54:19: note: FIX-IT applied suggested code changes
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:55:13: warning: variable 'isLeftPartIncluded' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool isLeftPartIncluded =
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:55:18: note: FIX-IT applied suggested code changes
            bool isLeftPartIncluded =
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:57:13: warning: variable 'isRightPartIncluded' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool isRightPartIncluded =
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:57:18: note: FIX-IT applied suggested code changes
            bool isRightPartIncluded =
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:104:13: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:104:19: note: FIX-IT applied suggested code changes
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:121:17: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:121:23: note: FIX-IT applied suggested code changes
                Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryForCount_unit.cpp:15:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{4, 2, 4, 4, 2, 4, 3, 3, 4};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryForCount_unit.cpp:15:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{4, 2, 4, 4, 2, 4, 3, 3, 4};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryForCount_unit.cpp:16:5: warning: variable 'countRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryForCount<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest countRangeQuery(values);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryForCount_unit.cpp:16:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest countRangeQuery(values);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryForCount_unit.cpp:84:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{4, 2, 4, 4, 2, 4, 3, 3, 4};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryForCount_unit.cpp:84:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{4, 2, 4, 4, 2, 4, 3, 3, 4};
                  ^
[192/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:56:9: warning: variable 'numberOfChildren' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index numberOfChildren = b_treeValues.size() - b_startOfChildren;
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:56:15: note: FIX-IT applied suggested code changes
        Index numberOfChildren = b_treeValues.size() - b_startOfChildren;
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:57:9: warning: variable 'startInterval' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index startInterval = std::min(left, numberOfChildren - 1) - startIndex;
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:57:15: note: FIX-IT applied suggested code changes
        Index startInterval = std::min(left, numberOfChildren - 1) - startIndex;
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:58:9: warning: variable 'endInterval' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index endInterval = std::min(right, numberOfChildren - 1) - startIndex;
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:58:15: note: FIX-IT applied suggested code changes
        Index endInterval = std::min(right, numberOfChildren - 1) - startIndex;
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:86:13: warning: variable 'intersectionLeft' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index intersectionLeft = std::max(startInterval, baseLeft);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:86:19: note: FIX-IT applied suggested code changes
            Index intersectionLeft = std::max(startInterval, baseLeft);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:87:13: warning: variable 'intersectionRight' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index intersectionRight = std::min(endInterval, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:87:19: note: FIX-IT applied suggested code changes
            Index intersectionRight = std::min(endInterval, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:90:13: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:90:19: note: FIX-IT applied suggested code changes
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:91:13: warning: variable 'doesLeftPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesLeftPartIntersect = !(endInterval < baseLeft || startInterval > baseMidPoint);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:91:18: note: FIX-IT applied suggested code changes
            bool doesLeftPartIntersect = !(endInterval < baseLeft || startInterval > baseMidPoint);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:92:13: warning: variable 'doesRightPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || startInterval > baseRight);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:92:18: note: FIX-IT applied suggested code changes
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || startInterval > baseRight);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:113:17: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:113:23: note: FIX-IT applied suggested code changes
                Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:132:13: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:132:19: note: FIX-IT applied suggested code changes
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:133:13: warning: variable 'doesLeftPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesLeftPartIntersect = !(endInterval < baseLeft || baseMidPoint < startInterval);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:133:18: note: FIX-IT applied suggested code changes
            bool doesLeftPartIntersect = !(endInterval < baseLeft || baseMidPoint < startInterval);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:134:13: warning: variable 'doesRightPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || baseRight < startInterval);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate.hpp:134:18: note: FIX-IT applied suggested code changes
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || baseRight < startInterval);
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate_unit.cpp:32:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate_unit.cpp:32:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate_unit.cpp:40:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate_unit.cpp:40:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate_unit.cpp:62:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate_unit.cpp:62:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate_unit.cpp:71:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorLazySegmentTreeWithDifferentValuesInUpdate_unit.cpp:71:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
[193/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:58:9: warning: variable 'childIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index childIndex = b_startOfChildren + index;
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:58:15: note: FIX-IT applied suggested code changes
        Index childIndex = b_startOfChildren + index;
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:126:13: warning: variable 'intersectionLeft' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index intersectionLeft = std::max(startInterval, baseLeft);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:126:19: note: FIX-IT applied suggested code changes
            Index intersectionLeft = std::max(startInterval, baseLeft);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:127:13: warning: variable 'intersectionRight' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index intersectionRight = std::min(endInterval, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:127:19: note: FIX-IT applied suggested code changes
            Index intersectionRight = std::min(endInterval, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:128:13: warning: variable 'intersectionLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index intersectionLength = intersectionRight + 1 - intersectionLeft;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:128:19: note: FIX-IT applied suggested code changes
            Index intersectionLength = intersectionRight + 1 - intersectionLeft;
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:131:13: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:131:19: note: FIX-IT applied suggested code changes
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:132:13: warning: variable 'doesLeftPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesLeftPartIntersect = !(endInterval < baseLeft || startInterval > baseMidPoint);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:132:18: note: FIX-IT applied suggested code changes
            bool doesLeftPartIntersect = !(endInterval < baseLeft || startInterval > baseMidPoint);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:133:13: warning: variable 'doesRightPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || startInterval > baseRight);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:133:18: note: FIX-IT applied suggested code changes
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || startInterval > baseRight);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:181:13: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:181:19: note: FIX-IT applied suggested code changes
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:182:13: warning: variable 'doesLeftPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesLeftPartIntersect = !(endInterval < baseLeft || baseMidPoint < startInterval);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:182:18: note: FIX-IT applied suggested code changes
            bool doesLeftPartIntersect = !(endInterval < baseLeft || baseMidPoint < startInterval);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:183:13: warning: variable 'doesRightPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || baseRight < startInterval);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorLazySegmentTree.hpp:183:18: note: FIX-IT applied suggested code changes
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || baseRight < startInterval);
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:18:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:18:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:25:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:25:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:45:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:45:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:54:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:54:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:77:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:77:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:86:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithDouble_unit.cpp:86:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
[194/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:18:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:18:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:25:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:25:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:45:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:45:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:54:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:54:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:76:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:76:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:85:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:85:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:94:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithAccumulatorSegmentTreeWithInteger_unit.cpp:94:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
[195/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:12:7: warning: destructor of 'RangeQueryWithDynamicSegmentTree<std::vector<double>>' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
class RangeQueryWithDynamicSegmentTree {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:12:7: note: make it public and virtual
class RangeQueryWithDynamicSegmentTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:17:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:17:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:18:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithDynamicSegmentTree<vector<double>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:18:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:24:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:24:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:25:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithDynamicSegmentTree<vector<double>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:25:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:44:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:44:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:53:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithDouble_unit.cpp:53:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
[196/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:12:7: warning: destructor of 'RangeQueryWithDynamicSegmentTree<std::vector<int>>' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
class RangeQueryWithDynamicSegmentTree {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithDynamicSegmentTree.hpp:12:7: note: make it public and virtual
class RangeQueryWithDynamicSegmentTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:28:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:28:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:29:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithDynamicSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:29:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:35:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:35:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:36:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithDynamicSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:36:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:53:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:53:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:54:5: warning: variable 'maximumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithDynamicSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest maximumRangeQuery(values, maximumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:54:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest maximumRangeQuery(values, maximumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:71:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:71:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:72:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithDynamicSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:72:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:91:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:91:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:100:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:100:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:109:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithDynamicSegmentTreeWithInteger_unit.cpp:109:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
[197/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:13:7: warning: destructor of 'RangeQueryWithPersistentDynamicSegmentTree<std::vector<double>>' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
class RangeQueryWithPersistentDynamicSegmentTree {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:13:7: note: make it public and virtual
class RangeQueryWithPersistentDynamicSegmentTree {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:44:13: warning: variable 'previousTreeRoot' of type 'NodeRoot &' (aka 'shared_ptr<PersistentDynamicSegmentTreeNode<double>> &') can be declared 'const' [misc-const-correctness]
            NodeRoot& previousTreeRoot(m_roots.back());
            ^
                     const
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:44:21: note: FIX-IT applied suggested code changes
            NodeRoot& previousTreeRoot(m_roots.back());
                    ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:81:13: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:81:19: note: FIX-IT applied suggested code changes
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:82:13: warning: variable 'isLeftPartIncluded' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool isLeftPartIncluded =
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:82:18: note: FIX-IT applied suggested code changes
            bool isLeftPartIncluded =
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:84:13: warning: variable 'isRightPartIncluded' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool isRightPartIncluded =
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:84:18: note: FIX-IT applied suggested code changes
            bool isRightPartIncluded =
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:132:13: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:132:19: note: FIX-IT applied suggested code changes
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:149:17: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:149:23: note: FIX-IT applied suggested code changes
                Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:17:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:17:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:18:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithPersistentDynamicSegmentTree<vector<double>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:18:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:24:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:24:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:25:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithPersistentDynamicSegmentTree<vector<double>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:25:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:44:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:44:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:53:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:53:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:77:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithDouble_unit.cpp:77:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
[198/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:13:7: warning: destructor of 'RangeQueryWithPersistentDynamicSegmentTree<std::vector<int>>' is public and non-virtual [cppcoreguidelines-virtual-class-destructor]
class RangeQueryWithPersistentDynamicSegmentTree {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithPersistentDynamicSegmentTree.hpp:13:7: note: make it public and virtual
class RangeQueryWithPersistentDynamicSegmentTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:28:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:28:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:29:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithPersistentDynamicSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:29:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:35:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:35:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:36:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithPersistentDynamicSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:36:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:53:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:53:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:54:5: warning: variable 'maximumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithPersistentDynamicSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest maximumRangeQuery(values, maximumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:54:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest maximumRangeQuery(values, maximumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:71:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:71:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:72:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithPersistentDynamicSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:72:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:91:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:91:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:100:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:100:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:109:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:109:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:133:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithPersistentDynamicSegmentTreeWithInteger_unit.cpp:133:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
[199/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryWithSparseSegmentTreeWithDouble_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithSparseSegmentTree.hpp:79:13: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithSparseSegmentTree.hpp:79:19: note: FIX-IT applied suggested code changes
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithSparseSegmentTree.hpp:102:13: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithSparseSegmentTree.hpp:102:19: note: FIX-IT applied suggested code changes
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithSparseSegmentTree.hpp:103:13: warning: variable 'doesLeftPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesLeftPartIntersect = !(endInterval < baseLeft || baseMidPoint < startInterval);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithSparseSegmentTree.hpp:103:18: note: FIX-IT applied suggested code changes
            bool doesLeftPartIntersect = !(endInterval < baseLeft || baseMidPoint < startInterval);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithSparseSegmentTree.hpp:104:13: warning: variable 'doesRightPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || baseRight < startInterval);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithSparseSegmentTree.hpp:104:18: note: FIX-IT applied suggested code changes
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || baseRight < startInterval);
                 ^
[200/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryWithSparseSegmentTreeWithInteger_unit.cpp.obj
[201/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:17:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:17:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:18:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<double>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:18:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:24:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:24:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:25:5: warning: variable 'geometricSumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<double>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:25:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest geometricSumRangeQuery(values, multipliesFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:44:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:44:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:53:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithDouble_unit.cpp:53:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
[202/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:42:9: warning: variable 'startTreeIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index startTreeIndex = m_startOfChildren + start;
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:42:15: note: FIX-IT applied suggested code changes
        Index startTreeIndex = m_startOfChildren + start;
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:80:9: warning: variable 'result' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index result(-1);
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:80:15: note: FIX-IT applied suggested code changes
        Index result(-1);
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:81:9: warning: variable 'parent' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index parent = Utilities::getParent(treeIndex);
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:81:15: note: FIX-IT applied suggested code changes
        Index parent = Utilities::getParent(treeIndex);
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:82:9: warning: variable 'leftChild' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index leftChild = Utilities::getLeftChild(treeIndex);
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:82:15: note: FIX-IT applied suggested code changes
        Index leftChild = Utilities::getLeftChild(treeIndex);
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:83:9: warning: variable 'rightChild' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index rightChild = Utilities::getRightChild(treeIndex);
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:83:15: note: FIX-IT applied suggested code changes
        Index rightChild = Utilities::getRightChild(treeIndex);
              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:160:13: warning: variable 'baseMidPoint' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:160:19: note: FIX-IT applied suggested code changes
            Index baseMidPoint = getMidpointOfIndexes(baseLeft, baseRight);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:161:13: warning: variable 'doesLeftPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesLeftPartIntersect = !(endInterval < baseLeft || baseMidPoint < startInterval);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:161:18: note: FIX-IT applied suggested code changes
            bool doesLeftPartIntersect = !(endInterval < baseLeft || baseMidPoint < startInterval);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:162:13: warning: variable 'doesRightPartIntersect' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || baseRight < startInterval);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/SegmentTree/RangeQueryWithStaticSegmentTree.hpp:162:18: note: FIX-IT applied suggested code changes
            bool doesRightPartIntersect = !(endInterval < baseMidPoint + 1 || baseRight < startInterval);
                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:29:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:29:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:30:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:30:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:36:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:36:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:37:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:37:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:39:5: warning: variable 'expectedTreeValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest expectedTreeValues{0, 1, 0, 4, 1, 0, 0, 5, 4, 1, 2, 0, 0, 0, 0, 5, 9, 4, 8, 6, 1, 4, 2, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:39:19: note: FIX-IT applied suggested code changes
    ValuesForTest expectedTreeValues{0, 1, 0, 4, 1, 0, 0, 5, 4, 1, 2, 0, 0, 0, 0, 5, 9, 4, 8, 6, 1, 4, 2, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:44:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:44:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:45:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:45:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:51:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:51:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:52:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:52:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:69:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:69:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:70:5: warning: variable 'maximumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest maximumRangeQuery(values, maximumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:70:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest maximumRangeQuery(values, maximumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:87:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:87:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:88:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:88:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:107:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:107:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:108:5: warning: variable 'minimumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:108:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest minimumRangeQuery(values, minimumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:125:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:125:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5, 9, 4, 8, 6, 1, 4, 2, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:126:5: warning: variable 'maximumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest maximumRangeQuery(values, maximumFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:126:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest maximumRangeQuery(values, maximumFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:143:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:143:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:144:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:144:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:163:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:163:19: note: FIX-IT applied suggested code changes
    ValuesForTest values;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:172:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{5};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:172:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{5};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:181:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:181:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:203:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 0, 0, 1, 1, 0, 1};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:203:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 0, 0, 1, 1, 0, 1};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:220:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:220:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 3, 4, 8, 6, 1, 4, 2, 9};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:221:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:221:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:232:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 0, 1, 0, 1, 1, 0, 0, 1};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:232:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 0, 1, 0, 1, 1, 0, 0, 1};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:233:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:233:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:239:5: warning: variable 'values' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values{1, 0, 0, 1, 1, 0, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:239:19: note: FIX-IT applied suggested code changes
    ValuesForTest values{1, 0, 0, 1, 1, 0, 0};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:240:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryWithStaticSegmentTree<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(values, plusFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\SegmentTree\RangeQueryWithStaticSegmentTreeWithInteger_unit.cpp:240:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(values, plusFunction);
                      ^
[203/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/TwoDimensions/RangeQueryForTwoDSegmentTree_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/TwoDimensions/RangeQueryForTwoDSegmentTree.hpp:68:13: warning: variable 'estimatedSize' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index estimatedSize = std::min(
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/RangeQuery/TwoDimensions/RangeQueryForTwoDSegmentTree.hpp:68:19: note: FIX-IT applied suggested code changes
            Index estimatedSize = std::min(
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\TwoDimensions\RangeQueryForTwoDSegmentTree_unit.cpp:18:5: warning: variable 'valueMatrix' of type 'ValueMatrixForTest' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    ValueMatrixForTest valueMatrix(4, 4, {7, 6, 1, 6, 8, 7, 5, 2, 3, 9, 7, 1, 8, 5, 3, 8});
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\TwoDimensions\RangeQueryForTwoDSegmentTree_unit.cpp:18:24: note: FIX-IT applied suggested code changes
    ValueMatrixForTest valueMatrix(4, 4, {7, 6, 1, 6, 8, 7, 5, 2, 3, 9, 7, 1, 8, 5, 3, 8});
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\TwoDimensions\RangeQueryForTwoDSegmentTree_unit.cpp:19:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryForTwoDSegmentTree<int>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(valueMatrix, plusFunction);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\TwoDimensions\RangeQueryForTwoDSegmentTree_unit.cpp:19:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(valueMatrix, plusFunction);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\TwoDimensions\RangeQueryForTwoDSegmentTree_unit.cpp:47:5: warning: variable 'valueMatrix' of type 'ValueMatrixForTest' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    ValueMatrixForTest valueMatrix(4, 4, {7, 6, 1, 6, 8, 7, 5, 2, 3, 9, 7, 1, 8, 5, 3, 8});
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\TwoDimensions\RangeQueryForTwoDSegmentTree_unit.cpp:47:24: note: FIX-IT applied suggested code changes
    ValueMatrixForTest valueMatrix(4, 4, {7, 6, 1, 6, 8, 7, 5, 2, 3, 9, 7, 1, 8, 5, 3, 8});
                       ^
[204/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/RangeQuery/TwoDimensions/RangeQueryForTwoDimensionsWithAccumulator_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\TwoDimensions\RangeQueryForTwoDimensionsWithAccumulator_unit.cpp:18:5: warning: variable 'valueMatrix' of type 'ValueMatrixForTest' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    ValueMatrixForTest valueMatrix(4, 4, {7, 6, 1, 6, 8, 7, 5, 2, 3, 9, 7, 1, 8, 5, 3, 8});
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\TwoDimensions\RangeQueryForTwoDimensionsWithAccumulator_unit.cpp:18:24: note: FIX-IT applied suggested code changes
    ValueMatrixForTest valueMatrix(4, 4, {7, 6, 1, 6, 8, 7, 5, 2, 3, 9, 7, 1, 8, 5, 3, 8});
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\TwoDimensions\RangeQueryForTwoDimensionsWithAccumulator_unit.cpp:19:5: warning: variable 'sumRangeQuery' of type 'RangeQueryForTest' (aka 'RangeQueryForTwoDimensionsWithAccumulator<int>') can be declared 'const' [misc-const-correctness]
    RangeQueryForTest sumRangeQuery(valueMatrix, plusAccumulator, minusAccumulator);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\RangeQuery\TwoDimensions\RangeQueryForTwoDimensionsWithAccumulator_unit.cpp:19:23: note: FIX-IT applied suggested code changes
    RangeQueryForTest sumRangeQuery(valueMatrix, plusAccumulator, minusAccumulator);
                      ^
[205/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/BinarySearch/BinarySearchWithCppFunctions_unit.cpp.obj
[206/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/BinarySearch/BinarySearchWithOneComparisonPerIteration_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithOneComparisonPerIteration.hpp:49:13: warning: variable 'middleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index middleIndex = getMidpointOfIndexes(lowIndex, highIndex);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithOneComparisonPerIteration.hpp:49:19: note: FIX-IT applied suggested code changes
            Index middleIndex = getMidpointOfIndexes(lowIndex, highIndex);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\BinarySearch\BinarySearchWithOneComparisonPerIteration_unit.cpp:36:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{13, 13, 14, 33, 33, 33, 53, 53, 53, 72, 72, 72, 72, 96, 96};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\BinarySearch\BinarySearchWithOneComparisonPerIteration_unit.cpp:36:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{13, 13, 14, 33, 33, 33, 53, 53, 53, 72, 72, 72, 72, 96, 96};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\BinarySearch\BinarySearchWithOneComparisonPerIteration_unit.cpp:37:5: warning: variable 'search' of type 'SearchForTest' (aka 'BinarySearchWithOneComparisonPerIteration<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\BinarySearch\BinarySearchWithOneComparisonPerIteration_unit.cpp:37:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
[207/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/BinarySearch/BinarySearchWithRecursion_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithRecursion.hpp:36:13: warning: variable 'middleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index middleIndex = getMidpointOfIndexes(lowIndex, highIndex);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithRecursion.hpp:36:19: note: FIX-IT applied suggested code changes
            Index middleIndex = getMidpointOfIndexes(lowIndex, highIndex);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithRecursion.hpp:37:13: warning: variable 'middleValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value middleValue(m_sortedValues[middleIndex]);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithRecursion.hpp:37:19: note: FIX-IT applied suggested code changes
            Value middleValue(m_sortedValues[middleIndex]);
                  ^
[208/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/BinarySearch/BinarySearchWithSkip_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithSkip.hpp:18:13: warning: variable 'possibleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index possibleIndex(getIndexUsingForwardSkip(target));
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithSkip.hpp:18:19: note: FIX-IT applied suggested code changes
            Index possibleIndex(getIndexUsingForwardSkip(target));
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithSkip.hpp:29:9: warning: variable 'size' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index size(m_sortedValues.size());
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithSkip.hpp:29:15: note: FIX-IT applied suggested code changes
        Index size(m_sortedValues.size());
              ^
[209/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/BinarySearch/BinarySearchWithTwoIndices_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithTwoIndices.hpp:38:13: warning: variable 'middleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index middleIndex = getMidpointOfIndexes(lowIndex, highIndex);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithTwoIndices.hpp:38:19: note: FIX-IT applied suggested code changes
            Index middleIndex = getMidpointOfIndexes(lowIndex, highIndex);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithTwoIndices.hpp:39:13: warning: variable 'middleValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value middleValue(m_sortedValues[middleIndex]);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/BinarySearch/BinarySearchWithTwoIndices.hpp:39:19: note: FIX-IT applied suggested code changes
            Value middleValue(m_sortedValues[middleIndex]);
                  ^
[210/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/ExponentialSearch/ExponentialSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/ExponentialSearch/ExponentialSearch.hpp:27:9: warning: variable 'binarySearch' of type 'BinarySearchWithTwoIndices<vector<int, allocator<int>>>' can be declared 'const' [misc-const-correctness]
        BinarySearchWithTwoIndices<Values> binarySearch(m_sortedValues);  // perform binary search on that block
        ^
                                           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/ExponentialSearch/ExponentialSearch.hpp:27:44: note: FIX-IT applied suggested code changes
        BinarySearchWithTwoIndices<Values> binarySearch(m_sortedValues);  // perform binary search on that block
                                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\ExponentialSearch\ExponentialSearch_unit.cpp:33:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{13, 13, 14, 33, 33, 33, 53, 53, 53, 72, 72, 72, 72, 96, 96};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\ExponentialSearch\ExponentialSearch_unit.cpp:33:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{13, 13, 14, 33, 33, 33, 53, 53, 53, 72, 72, 72, 72, 96, 96};
                  ^
[211/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/FibonacciSearch/FibonacciSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/FibonacciSearch/FibonacciSearch.hpp:25:13: warning: variable 'nextFibonacci' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index nextFibonacci = currentFibonacci + previousFibonacci;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/FibonacciSearch/FibonacciSearch.hpp:25:19: note: FIX-IT applied suggested code changes
            Index nextFibonacci = currentFibonacci + previousFibonacci;
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/FibonacciSearch/FibonacciSearch.hpp:30:9: warning: variable 'binarySearch' of type 'BinarySearchWithTwoIndices<vector<int, allocator<int>>>' can be declared 'const' [misc-const-correctness]
        BinarySearchWithTwoIndices<Values> binarySearch(m_sortedValues);  // perform binary search on that block
        ^
                                           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/FibonacciSearch/FibonacciSearch.hpp:30:44: note: FIX-IT applied suggested code changes
        BinarySearchWithTwoIndices<Values> binarySearch(m_sortedValues);  // perform binary search on that block
                                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\FibonacciSearch\FibonacciSearch_unit.cpp:33:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{13, 13, 14, 33, 33, 33, 53, 53, 53, 72, 72, 72, 72, 96, 96};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\FibonacciSearch\FibonacciSearch_unit.cpp:33:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{13, 13, 14, 33, 33, 33, 53, 53, 53, 72, 72, 72, 72, 96, 96};
                  ^
[212/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/InterpolationSearch/InterpolationSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/InterpolationSearch/InterpolationSearch.hpp:40:13: warning: variable 'lowerValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value lowerValue(m_sortedValues[lowIndex]);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/InterpolationSearch/InterpolationSearch.hpp:40:19: note: FIX-IT applied suggested code changes
            Value lowerValue(m_sortedValues[lowIndex]);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/InterpolationSearch/InterpolationSearch.hpp:41:13: warning: variable 'higherValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value higherValue(m_sortedValues[highIndex]);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/InterpolationSearch/InterpolationSearch.hpp:41:19: note: FIX-IT applied suggested code changes
            Value higherValue(m_sortedValues[highIndex]);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/InterpolationSearch/InterpolationSearch.hpp:49:13: warning: variable 'interpolatedIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index interpolatedIndex = lowIndex + mathHelper::getIntegerAfterRoundingADoubleValue<Index>(
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/InterpolationSearch/InterpolationSearch.hpp:49:19: note: FIX-IT applied suggested code changes
            Index interpolatedIndex = lowIndex + mathHelper::getIntegerAfterRoundingADoubleValue<Index>(
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/InterpolationSearch/InterpolationSearch.hpp:52:13: warning: variable 'valueAtInterpolatedIndex' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value valueAtInterpolatedIndex(m_sortedValues[interpolatedIndex]);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/InterpolationSearch/InterpolationSearch.hpp:52:19: note: FIX-IT applied suggested code changes
            Value valueAtInterpolatedIndex(m_sortedValues[interpolatedIndex]);
                  ^
[213/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/JumpSearch/JumpSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/JumpSearch/JumpSearch.hpp:27:9: warning: variable 'linearSearch' of type 'LinearSearchWithOneIndex<vector<int, allocator<int>>>' can be declared 'const' [misc-const-correctness]
        LinearSearchWithOneIndex<Values> linearSearch(m_sortedValues);  // perform linear search on that block
        ^
                                         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/JumpSearch/JumpSearch.hpp:27:42: note: FIX-IT applied suggested code changes
        LinearSearchWithOneIndex<Values> linearSearch(m_sortedValues);  // perform linear search on that block
                                         ^
[214/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/LinearSearch/LinearSearchWithOneIndex_unit.cpp.obj
[215/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/LinearSearch/LinearSearchWithTwoIndices_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/LinearSearch/LinearSearchWithTwoIndices.hpp:41:13: warning: variable 'valueAtLower' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value valueAtLower = *itLower;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/LinearSearch/LinearSearchWithTwoIndices.hpp:41:19: note: FIX-IT applied suggested code changes
            Value valueAtLower = *itLower;
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/LinearSearch/LinearSearchWithTwoIndices.hpp:42:13: warning: variable 'valueAtHigher' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value valueAtHigher = *itHigher;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/LinearSearch/LinearSearchWithTwoIndices.hpp:42:19: note: FIX-IT applied suggested code changes
            Value valueAtHigher = *itHigher;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\LinearSearch\LinearSearchWithTwoIndices_unit.cpp:33:5: warning: variable 'unsortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest unsortedValues{96, 96, 53, 53, 53, 72, 72, 72, 72, 14, 33, 33, 33, 13, 13};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\LinearSearch\LinearSearchWithTwoIndices_unit.cpp:33:19: note: FIX-IT applied suggested code changes
    ValuesForTest unsortedValues{96, 96, 53, 53, 53, 72, 72, 72, 72, 14, 33, 33, 33, 13, 13};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\LinearSearch\LinearSearchWithTwoIndices_unit.cpp:34:5: warning: variable 'search' of type 'SearchForTest' (aka 'LinearSearchWithTwoIndices<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(unsortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\LinearSearch\LinearSearchWithTwoIndices_unit.cpp:34:19: note: FIX-IT applied suggested code changes
    SearchForTest search(unsortedValues);
                  ^
[216/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SingleValue/TernarySearch/TernarySearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/TernarySearch/TernarySearch.hpp:38:13: warning: variable 'firstMiddleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index firstMiddleIndex = getFirstOneThirdIndex(lowIndex, highIndex);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/TernarySearch/TernarySearch.hpp:38:19: note: FIX-IT applied suggested code changes
            Index firstMiddleIndex = getFirstOneThirdIndex(lowIndex, highIndex);
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/TernarySearch/TernarySearch.hpp:39:13: warning: variable 'secondMiddleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index secondMiddleIndex = getSecondOneThirdIndex(lowIndex, highIndex);
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SingleValue/TernarySearch/TernarySearch.hpp:39:19: note: FIX-IT applied suggested code changes
            Index secondMiddleIndex = getSecondOneThirdIndex(lowIndex, highIndex);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\TernarySearch\TernarySearch_unit.cpp:33:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{13, 13, 14, 33, 33, 33, 53, 53, 53, 72, 72, 72, 72, 96, 96};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\TernarySearch\TernarySearch_unit.cpp:33:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{13, 13, 14, 33, 33, 33, 53, 53, 53, 72, 72, 72, 72, 96, 96};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\TernarySearch\TernarySearch_unit.cpp:34:5: warning: variable 'search' of type 'SearchForTest' (aka 'TernarySearch<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SingleValue\TernarySearch\TernarySearch_unit.cpp:34:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
[217/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SumSearch/FourSum_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/FourSum.hpp:47:17: warning: variable 'currentSum' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value currentSum(std::get<0>(sumOfPairOfValues[lowIndex]) + std::get<0>(sumOfPairOfValues[highIndex]));
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/FourSum.hpp:47:23: note: FIX-IT applied suggested code changes
                Value currentSum(std::get<0>(sumOfPairOfValues[lowIndex]) + std::get<0>(sumOfPairOfValues[highIndex]));
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/FourSum.hpp:64:9: warning: variable 'size' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index size = m_sortedValues.size();
        ^
              const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/FourSum.hpp:64:15: note: FIX-IT applied suggested code changes
        Index size = m_sortedValues.size();
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\FourSum_unit.cpp:17:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\FourSum_unit.cpp:17:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\FourSum_unit.cpp:18:5: warning: variable 'search' of type 'SumSearch' (aka 'FourSum<vector<int>>') can be declared 'const' [misc-const-correctness]
    SumSearch search(sortedValues);
    ^
              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\FourSum_unit.cpp:18:15: note: FIX-IT applied suggested code changes
    SumSearch search(sortedValues);
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\FourSum_unit.cpp:20:5: warning: variable 'fourValuesToVerify' of type 'FourValuesForTest' (aka 'tuple<int, int, int, int>') can be declared 'const' [misc-const-correctness]
    FourValuesForTest fourValuesToVerify(search.getPossibleDuplicatedFourValuesWithSum(18));
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\FourSum_unit.cpp:20:23: note: FIX-IT applied suggested code changes
    FourValuesForTest fourValuesToVerify(search.getPossibleDuplicatedFourValuesWithSum(18));
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\FourSum_unit.cpp:22:5: warning: variable 'fourValuesToExpect' of type 'FourValuesForTest' (aka 'tuple<int, int, int, int>') can be declared 'const' [misc-const-correctness]
    FourValuesForTest fourValuesToExpect{1, 1, 7, 9};
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\FourSum_unit.cpp:22:23: note: FIX-IT applied suggested code changes
    FourValuesForTest fourValuesToExpect{1, 1, 7, 9};
                      ^
[218/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SumSearch/MaximumSubArraySum_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\MaximumSubArraySum_unit.cpp:17:5: warning: variable 'valuesToSearch' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesToSearch{-1, 2, 4, -3, 5, 2, -5, 2};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\MaximumSubArraySum_unit.cpp:17:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesToSearch{-1, 2, 4, -3, 5, 2, -5, 2};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\MaximumSubArraySum_unit.cpp:24:5: warning: variable 'valuesToSearch' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesToSearch{-1, 2, 4, -3, 5, 2, -5, 2};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\MaximumSubArraySum_unit.cpp:24:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesToSearch{-1, 2, 4, -3, 5, 2, -5, 2};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\MaximumSubArraySum_unit.cpp:27:5: warning: variable 'subArrayDetailsToVerify' of type 'SubArrayDetailsForTest' (aka 'alba::algorithm::MaximumSubArraySum<std::vector<int>>::SubArrayDetails') can be declared 'const' [misc-const-correctness]
    SubArrayDetailsForTest subArrayDetailsToVerify(search.getMaximumSubArraySumWithDetails());
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\MaximumSubArraySum_unit.cpp:27:28: note: FIX-IT applied suggested code changes
    SubArrayDetailsForTest subArrayDetailsToVerify(search.getMaximumSubArraySumWithDetails());
                           ^
[219/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SumSearch/SubArraySum_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/SubArraySum.hpp:19:13: warning: variable 'size' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index size = m_valuesToCheck.size();
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/SubArraySum.hpp:19:19: note: FIX-IT applied suggested code changes
            Index size = m_valuesToCheck.size();
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\SubArraySum_unit.cpp:16:5: warning: variable 'valuesToSearch' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesToSearch{1, 3, 2, 5, 1, 1, 2, 3};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\SubArraySum_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesToSearch{1, 3, 2, 5, 1, 1, 2, 3};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\SubArraySum_unit.cpp:17:5: warning: variable 'search' of type 'SumSearch' (aka 'SubArraySum<vector<int>>') can be declared 'const' [misc-const-correctness]
    SumSearch search(valuesToSearch);
    ^
              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\SubArraySum_unit.cpp:17:15: note: FIX-IT applied suggested code changes
    SumSearch search(valuesToSearch);
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\SubArraySum_unit.cpp:19:5: warning: variable 'valuesToVerify' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesToVerify(search.getSubArrayWithSum(8));
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\SubArraySum_unit.cpp:19:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesToVerify(search.getSubArrayWithSum(8));
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\SubArraySum_unit.cpp:21:5: warning: variable 'valuesToExpect' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesToExpect{2, 5, 1};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\SubArraySum_unit.cpp:21:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesToExpect{2, 5, 1};
                  ^
[220/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SumSearch/ThreeSum_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/ThreeSum.hpp:36:13: warning: variable 'twoSum' of type 'TwoSum<vector<int, allocator<int>>>' can be declared 'const' [misc-const-correctness]
            TwoSum<Values> twoSum(m_sortedValues);
            ^
                           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/ThreeSum.hpp:36:28: note: FIX-IT applied suggested code changes
            TwoSum<Values> twoSum(m_sortedValues);
                           ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/ThreeSum.hpp:53:13: warning: variable 'twoSum' of type 'TwoSum<vector<int, allocator<int>>>' can be declared 'const' [misc-const-correctness]
            TwoSum<Values> twoSum(m_sortedValues);
            ^
                           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/ThreeSum.hpp:53:28: note: FIX-IT applied suggested code changes
            TwoSum<Values> twoSum(m_sortedValues);
                           ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/TwoSum.hpp:50:17: warning: variable 'currentSum' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value currentSum(m_sortedValues[iLow] + m_sortedValues[iHigh]);
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Search/SumSearch/TwoSum.hpp:50:23: note: FIX-IT applied suggested code changes
                Value currentSum(m_sortedValues[iLow] + m_sortedValues[iHigh]);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:17:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:17:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:18:5: warning: variable 'search' of type 'SumSearch' (aka 'ThreeSum<vector<int>>') can be declared 'const' [misc-const-correctness]
    SumSearch search(sortedValues);
    ^
              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:18:15: note: FIX-IT applied suggested code changes
    SumSearch search(sortedValues);
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:20:5: warning: variable 'threeValuesToVerify' of type 'ThreeValuesForTest' (aka 'tuple<int, int, int>') can be declared 'const' [misc-const-correctness]
    ThreeValuesForTest threeValuesToVerify(search.getNonDuplicateThreeValuesWithSum(18));
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:20:24: note: FIX-IT applied suggested code changes
    ThreeValuesForTest threeValuesToVerify(search.getNonDuplicateThreeValuesWithSum(18));
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:22:5: warning: variable 'threeValuesToExpect' of type 'ThreeValuesForTest' (aka 'tuple<int, int, int>') can be declared 'const' [misc-const-correctness]
    ThreeValuesForTest threeValuesToExpect{1, 7, 10};
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:22:24: note: FIX-IT applied suggested code changes
    ThreeValuesForTest threeValuesToExpect{1, 7, 10};
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:27:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:27:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:28:5: warning: variable 'search' of type 'SumSearch' (aka 'ThreeSum<vector<int>>') can be declared 'const' [misc-const-correctness]
    SumSearch search(sortedValues);
    ^
              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:28:15: note: FIX-IT applied suggested code changes
    SumSearch search(sortedValues);
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:30:5: warning: variable 'threeValuesToVerify' of type 'ThreeValuesForTest' (aka 'tuple<int, int, int>') can be declared 'const' [misc-const-correctness]
    ThreeValuesForTest threeValuesToVerify(search.getPossibleDuplicatedThreeValuesWithSum(30));
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:30:24: note: FIX-IT applied suggested code changes
    ThreeValuesForTest threeValuesToVerify(search.getPossibleDuplicatedThreeValuesWithSum(30));
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:32:5: warning: variable 'threeValuesToExpect' of type 'ThreeValuesForTest' (aka 'tuple<int, int, int>') can be declared 'const' [misc-const-correctness]
    ThreeValuesForTest threeValuesToExpect{10, 10, 10};
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\ThreeSum_unit.cpp:32:24: note: FIX-IT applied suggested code changes
    ThreeValuesForTest threeValuesToExpect{10, 10, 10};
                       ^
[221/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Search/SumSearch/TwoSum_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:17:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:17:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 9, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:18:5: warning: variable 'search' of type 'SumSearch' (aka 'TwoSum<vector<int>>') can be declared 'const' [misc-const-correctness]
    SumSearch search(sortedValues);
    ^
              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:18:15: note: FIX-IT applied suggested code changes
    SumSearch search(sortedValues);
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:20:5: warning: variable 'pairToVerify' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToVerify(search.getNonDuplicateTwoValuesWithSum(12));
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:20:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToVerify(search.getNonDuplicateTwoValuesWithSum(12));
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:22:5: warning: variable 'pairToExpect' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToExpect{5, 7};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:22:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToExpect{5, 7};
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:27:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:27:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 9, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:28:5: warning: variable 'search' of type 'SumSearch' (aka 'TwoSum<vector<int>>') can be declared 'const' [misc-const-correctness]
    SumSearch search(sortedValues);
    ^
              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:28:15: note: FIX-IT applied suggested code changes
    SumSearch search(sortedValues);
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:30:5: warning: variable 'pairToVerify' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToVerify(search.getNonDuplicateTwoValuesWithSum(12, 2, 4));
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToVerify(search.getNonDuplicateTwoValuesWithSum(12, 2, 4));
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:32:5: warning: variable 'pairToExpect' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToExpect{5, 7};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:32:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToExpect{5, 7};
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:37:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:37:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 9, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:38:5: warning: variable 'search' of type 'SumSearch' (aka 'TwoSum<vector<int>>') can be declared 'const' [misc-const-correctness]
    SumSearch search(sortedValues);
    ^
              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:38:15: note: FIX-IT applied suggested code changes
    SumSearch search(sortedValues);
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:40:5: warning: variable 'pairToVerify' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToVerify(search.getNonDuplicateTwoValuesWithSum(12, 3, 4));  // index must be within 2 and 4
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToVerify(search.getNonDuplicateTwoValuesWithSum(12, 3, 4));  // index must be within 2 and 4
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:41:5: warning: variable 'pairToExpect' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToExpect{0, 0};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToExpect{0, 0};
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:46:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:46:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:47:5: warning: variable 'search' of type 'SumSearch' (aka 'TwoSum<vector<int>>') can be declared 'const' [misc-const-correctness]
    SumSearch search(sortedValues);
    ^
              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:47:15: note: FIX-IT applied suggested code changes
    SumSearch search(sortedValues);
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:49:5: warning: variable 'pairToVerify' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToVerify(search.getPossibleDuplicatedTwoValuesWithSum(18));
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:49:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToVerify(search.getPossibleDuplicatedTwoValuesWithSum(18));
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:51:5: warning: variable 'pairToExpect' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToExpect{9, 9};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:51:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToExpect{9, 9};
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:56:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:56:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:57:5: warning: variable 'search' of type 'SumSearch' (aka 'TwoSum<vector<int>>') can be declared 'const' [misc-const-correctness]
    SumSearch search(sortedValues);
    ^
              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:57:15: note: FIX-IT applied suggested code changes
    SumSearch search(sortedValues);
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:59:5: warning: variable 'pairToVerify' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToVerify(search.getPossibleDuplicatedTwoValuesWithSum(18, 4, 6));
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:59:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToVerify(search.getPossibleDuplicatedTwoValuesWithSum(18, 4, 6));
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:61:5: warning: variable 'pairToExpect' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToExpect{9, 9};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:61:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToExpect{9, 9};
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:66:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:66:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:67:5: warning: variable 'search' of type 'SumSearch' (aka 'TwoSum<vector<int>>') can be declared 'const' [misc-const-correctness]
    SumSearch search(sortedValues);
    ^
              const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:67:15: note: FIX-IT applied suggested code changes
    SumSearch search(sortedValues);
              ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:69:5: warning: variable 'pairToVerify' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToVerify(
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:69:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToVerify(
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:71:5: warning: variable 'pairToExpect' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToExpect{0, 0};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Search\SumSearch\TwoSum_unit.cpp:71:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToExpect{0, 0};
                     ^
[222/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/Set/Array/OrderedArraySet_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:11:7: warning: class 'BaseOrderedArray' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseOrderedArray : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:26:9: warning: variable 'rank' of type 'int' can be declared 'const' [misc-const-correctness]
        int rank(getRank(key, keys));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:26:13: note: FIX-IT applied suggested code changes
        int rank(getRank(key, keys));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:37:9: warning: variable 'rank' of type 'int' can be declared 'const' [misc-const-correctness]
        int rank(getRank(key, keys));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:37:13: note: FIX-IT applied suggested code changes
        int rank(getRank(key, keys));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:50:13: warning: variable 'middleIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int middleIndex = getMidpointOfIndexes(lowIndex, highIndex);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:50:17: note: FIX-IT applied suggested code changes
            int middleIndex = getMidpointOfIndexes(lowIndex, highIndex);
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:106:13: warning: variable 'rank' of type 'int' can be declared 'const' [misc-const-correctness]
            int rank(getRank(key));
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:106:17: note: FIX-IT applied suggested code changes
            int rank(getRank(key));
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/Array/OrderedArraySet.hpp:16:9: warning: variable 'rank' of type 'int' can be declared 'const' [misc-const-correctness]
        int rank(this->getRank(key));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/Array/OrderedArraySet.hpp:16:13: note: FIX-IT applied suggested code changes
        int rank(this->getRank(key));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/Array/OrderedArraySet.hpp:17:9: warning: variable 'isKeyFound' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool isKeyFound = rank < b_size && b_keys[rank] == key;
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/Array/OrderedArraySet.hpp:17:14: note: FIX-IT applied suggested code changes
        bool isKeyFound = rank < b_size && b_keys[rank] == key;
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/Array/OrderedArraySet.hpp:29:9: warning: variable 'rank' of type 'int' can be declared 'const' [misc-const-correctness]
        int rank(this->getRank(key));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/Array/OrderedArraySet.hpp:29:13: note: FIX-IT applied suggested code changes
        int rank(this->getRank(key));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BaseSet.hpp:8:7: warning: class 'BaseSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSet {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BaseSymbolTable.hpp:8:7: warning: class 'BaseSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/Set/Utilities/CommonTestsWithSet.hpp:212:5: warning: variable 'keysToVerify' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Keys keysToVerify(setObject.getKeys());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/Set/Utilities/CommonTestsWithSet.hpp:212:10: note: FIX-IT applied suggested code changes
    Keys keysToVerify(setObject.getKeys());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/Set/Utilities/CommonTestsWithSet.hpp:214:5: warning: variable 'expectedKeys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Keys expectedKeys{3, 4, 5, 7, 8, 9};
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/Set/Utilities/CommonTestsWithSet.hpp:214:10: note: FIX-IT applied suggested code changes
    Keys expectedKeys{3, 4, 5, 7, 8, 9};
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/Set/Utilities/CommonTestsWithSet.hpp:229:5: warning: variable 'keysToVerify' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Keys keysToVerify(setObject.getKeysInRangeInclusive(5, 8));
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/Set/Utilities/CommonTestsWithSet.hpp:229:10: note: FIX-IT applied suggested code changes
    Keys keysToVerify(setObject.getKeysInRangeInclusive(5, 8));
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/Set/Utilities/CommonTestsWithSet.hpp:231:5: warning: variable 'expectedKeys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Keys expectedKeys{5, 7, 8};
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/Set/Utilities/CommonTestsWithSet.hpp:231:10: note: FIX-IT applied suggested code changes
    Keys expectedKeys{5, 7, 8};
         ^
[223/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/Set/BinarySearchTree/AvlBinarySearchTreeSet_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseAvlBinarySearchTree.hpp:11:7: warning: class 'BaseAvlBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseAvlBinarySearchTree : public BaseBinarySearchTree<KeyTemplateType, NodeTemplateType, BaseDataStructure> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseAvlBinarySearchTree.hpp:69:17: warning: variable 'previousNodePointer' of type 'NodeUniquePointer &' (aka 'unique_ptr<alba::algorithm::AvlTreeNode<int>> &') can be declared 'const' [misc-const-correctness]
                NodeUniquePointer& previousNodePointer(nodePointer->left);
                ^
                                  const
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseAvlBinarySearchTree.hpp:69:34: note: FIX-IT applied suggested code changes
                NodeUniquePointer& previousNodePointer(nodePointer->left);
                                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseAvlBinarySearchTree.hpp:88:17: warning: variable 'previousNodePointer' of type 'NodeUniquePointer &' (aka 'unique_ptr<alba::algorithm::AvlTreeNode<int>> &') can be declared 'const' [misc-const-correctness]
                NodeUniquePointer& previousNodePointer(nodePointer->right);
                ^
                                  const
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseAvlBinarySearchTree.hpp:88:34: note: FIX-IT applied suggested code changes
                NodeUniquePointer& previousNodePointer(nodePointer->right);
                                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseAvlBinarySearchTree.hpp:98:13: warning: variable 'balanceFactor' of type 'int' can be declared 'const' [misc-const-correctness]
            int balanceFactor = this->calculateBalanceFactor(node);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseAvlBinarySearchTree.hpp:98:17: note: FIX-IT applied suggested code changes
            int balanceFactor = this->calculateBalanceFactor(node);
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseAvlBinarySearchTree.hpp:121:13: warning: variable 'balanceFactor' of type 'int' can be declared 'const' [misc-const-correctness]
            int balanceFactor = this->calculateBalanceFactor(node);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseAvlBinarySearchTree.hpp:121:17: note: FIX-IT applied suggested code changes
            int balanceFactor = this->calculateBalanceFactor(node);
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:10:7: warning: class 'BaseBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTree : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BaseSet.hpp:8:7: warning: class 'BaseSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSet {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseAvlBinarySearchTreeSet.hpp:11:7: warning: class 'BaseAvlBinarySearchTreeSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseAvlBinarySearchTreeSet
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseSetWithBaseTree.hpp:6:7: warning: class 'BaseSetWithBaseTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSetWithBaseTree : public BaseTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:59:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{5, 4, 3, 8, 7, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:59:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{5, 4, 3, 8, 7, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:75:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:75:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:91:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 4, 7, 9, 8, 5};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:91:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 4, 7, 9, 8, 5};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:114:5: warning: variable 'expectedBeforeDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:114:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:115:5: warning: variable 'expectedAfterDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedAfterDelete{4, 3, 9};            // still balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:115:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedAfterDelete{4, 3, 9};            // still balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:139:5: warning: variable 'expectedBeforeDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:139:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:140:5: warning: variable 'expectedAfterDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedAfterDelete{8, 7, 9};            // still balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:140:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedAfterDelete{8, 7, 9};            // still balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:164:5: warning: variable 'expectedBeforeDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:164:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:165:5: warning: variable 'expectedAfterDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedAfterDelete{4, 3, 5};            // still balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\AvlBinarySearchTreeSet_unit.cpp:165:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedAfterDelete{4, 3, 5};            // still balanced
                ^
[224/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/Set/BinarySearchTree/BinarySearchTreeSet_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:10:7: warning: class 'BaseBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTree : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BaseSet.hpp:8:7: warning: class 'BaseSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSet {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseBinarySearchTreeSet.hpp:11:7: warning: class 'BaseBinarySearchTreeSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTreeSet
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseSetWithBaseTree.hpp:6:7: warning: class 'BaseSetWithBaseTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSetWithBaseTree : public BaseTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:42:5: warning: variable 'node' of type 'NodeForTest' (aka 'alba::algorithm::BasicTreeNode<int>') can be declared 'const' [misc-const-correctness]
    NodeForTest node{8, nullptr, nullptr, 1};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:42:17: note: FIX-IT applied suggested code changes
    NodeForTest node{8, nullptr, nullptr, 1};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:62:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 4, 5, 9, 8, 7};  // not balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:62:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 4, 5, 9, 8, 7};  // not balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:78:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:78:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:94:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{7, 8, 9, 5, 4, 3};  // not balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:94:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{7, 8, 9, 5, 4, 3};  // not balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:117:5: warning: variable 'expectedBeforeDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedBeforeDelete{8, 4, 3, 7, 5, 9};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:117:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedBeforeDelete{8, 4, 3, 7, 5, 9};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:118:5: warning: variable 'expectedAfterDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedAfterDelete{8, 5, 9};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\BinarySearchTreeSet_unit.cpp:118:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedAfterDelete{8, 5, 9};
                ^
[225/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/Set/BinarySearchTree/RedBlackBinarySearchTreeSet_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:10:7: warning: class 'BaseBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTree : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseRedBlackBinarySearchTree.hpp:11:7: warning: class 'BaseRedBlackBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRedBlackBinarySearchTree : public BaseBinarySearchTree<KeyTemplateType, NodeTemplateType, BaseDataStructure> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BaseSet.hpp:8:7: warning: class 'BaseSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSet {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseRedBlackBinarySearchTreeSet.hpp:12:7: warning: class 'BaseRedBlackBinarySearchTreeSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRedBlackBinarySearchTreeSet
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BinarySearchTree/Common/BaseSetWithBaseTree.hpp:6:7: warning: class 'BaseSetWithBaseTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSetWithBaseTree : public BaseTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\RedBlackBinarySearchTreeSet_unit.cpp:68:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{8, 4, 3, 7, 5, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\RedBlackBinarySearchTreeSet_unit.cpp:68:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{8, 4, 3, 7, 5, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\RedBlackBinarySearchTreeSet_unit.cpp:84:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\RedBlackBinarySearchTreeSet_unit.cpp:84:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\RedBlackBinarySearchTreeSet_unit.cpp:100:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 5, 7, 4, 9, 8};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\RedBlackBinarySearchTreeSet_unit.cpp:100:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 5, 7, 4, 9, 8};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\RedBlackBinarySearchTreeSet_unit.cpp:123:5: warning: variable 'expectedBeforeDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedBeforeDelete{8, 4, 3, 7, 5, 9};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\RedBlackBinarySearchTreeSet_unit.cpp:123:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedBeforeDelete{8, 4, 3, 7, 5, 9};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\RedBlackBinarySearchTreeSet_unit.cpp:124:5: warning: variable 'expectedAfterDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedAfterDelete{8, 5, 9};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\Set\BinarySearchTree\RedBlackBinarySearchTreeSet_unit.cpp:124:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedAfterDelete{8, 5, 9};
                ^
[226/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/Set/HashTable/LinearProbingHashSet_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:11:7: warning: class 'BaseOrderedArray' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseOrderedArray : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:15:7: warning: class 'BaseLinearProbingHash' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseLinearProbingHash : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:61:9: warning: variable 'keys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Keys keys(getKeys());
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:61:14: note: FIX-IT applied suggested code changes
        Keys keys(getKeys());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:66:9: warning: variable 'keys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Keys keys(getKeys());
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:66:14: note: FIX-IT applied suggested code changes
        Keys keys(getKeys());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:71:9: warning: variable 'keys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Keys keys(getKeys());
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:71:14: note: FIX-IT applied suggested code changes
        Keys keys(getKeys());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:105:9: warning: variable 'keys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Keys keys(getKeys());
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:105:14: note: FIX-IT applied suggested code changes
        Keys keys(getKeys());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:133:17: warning: variable 'entryToReInput' of type 'Entry' (aka 'alba::algorithm::HashTableEntry<int>') can be declared 'const' [misc-const-correctness]
                Entry entryToReInput(*(m_entryPointers[i]));
                ^
                      const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:133:23: note: FIX-IT applied suggested code changes
                Entry entryToReInput(*(m_entryPointers[i]));
                      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:169:9: warning: variable 'oldHashTableSize' of type 'int' can be declared 'const' [misc-const-correctness]
        int oldHashTableSize = m_hashTableSize;
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:169:13: note: FIX-IT applied suggested code changes
        int oldHashTableSize = m_hashTableSize;
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BaseSet.hpp:8:7: warning: class 'BaseSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSet {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/HashTable/Common/BaseLinearProbingHashSet.hpp:12:7: warning: class 'BaseLinearProbingHashSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseLinearProbingHashSet
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/HashTable/Common/BaseSetWithBaseLinearProbingHash.hpp:6:7: warning: class 'BaseSetWithBaseLinearProbingHash' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSetWithBaseLinearProbingHash : public BaseLinearProbingHash {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/HashTable/Common/BaseSetWithBaseLinearProbingHash.hpp:23:13: warning: variable 'entryPointer' of type 'EntryUniquePointer &' (aka 'unique_ptr<alba::algorithm::HashTableEntry<int>> &') can be declared 'const' [misc-const-correctness]
            EntryUniquePointer& entryPointer(b_entryPointers[i]);
            ^
                               const
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/HashTable/Common/BaseSetWithBaseLinearProbingHash.hpp:23:31: note: FIX-IT applied suggested code changes
            EntryUniquePointer& entryPointer(b_entryPointers[i]);
                              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BaseSymbolTable.hpp:8:7: warning: class 'BaseSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTable {
      ^
[227/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/Set/HashTable/SeparateChainingHashSet_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:11:7: warning: class 'BaseOrderedArray' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseOrderedArray : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseSeparateChainingHash.hpp:16:7: warning: class 'BaseSeparateChainingHash' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSeparateChainingHash : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseSeparateChainingHash.hpp:57:9: warning: variable 'keys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Keys keys(getKeys());
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseSeparateChainingHash.hpp:57:14: note: FIX-IT applied suggested code changes
        Keys keys(getKeys());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseSeparateChainingHash.hpp:62:9: warning: variable 'keys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Keys keys(getKeys());
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseSeparateChainingHash.hpp:62:14: note: FIX-IT applied suggested code changes
        Keys keys(getKeys());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseSeparateChainingHash.hpp:67:9: warning: variable 'keys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Keys keys(getKeys());
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseSeparateChainingHash.hpp:67:14: note: FIX-IT applied suggested code changes
        Keys keys(getKeys());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseSeparateChainingHash.hpp:94:9: warning: variable 'keys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
        Keys keys(getKeys());
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseSeparateChainingHash.hpp:94:14: note: FIX-IT applied suggested code changes
        Keys keys(getKeys());
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/LinkedList/BaseUnorderedLinkedList.hpp:11:7: warning: class 'BaseUnorderedLinkedList' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnorderedLinkedList : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BaseSet.hpp:8:7: warning: class 'BaseSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSet {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/HashTable/Common/BaseSeparateChainingHashSet.hpp:13:7: warning: class 'BaseSeparateChainingHashSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSeparateChainingHashSet : public BaseSetWithBaseSeparateChainingHash<BaseSeparateChainingHash<
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/HashTable/Common/BaseSetWithBaseSeparateChainingHash.hpp:6:7: warning: class 'BaseSetWithBaseSeparateChainingHash' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSetWithBaseSeparateChainingHash : public BaseSeparateChainingHash {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BaseSymbolTable.hpp:8:7: warning: class 'BaseSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTable {
      ^
[228/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/Set/LinkedList/UnorderedLinkedListSet_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/LinkedList/BaseUnorderedLinkedList.hpp:11:7: warning: class 'BaseUnorderedLinkedList' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnorderedLinkedList : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Set/BaseSet.hpp:8:7: warning: class 'BaseSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSet {
      ^
[229/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/SymbolTable/Array/OrderedArraySymbolTable_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:11:7: warning: class 'BaseOrderedArray' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseOrderedArray : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/Array/OrderedArraySymbolTable.hpp:19:13: warning: variable 'rank' of type 'int' can be declared 'const' [misc-const-correctness]
            int rank(this->getRank(key));
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/Array/OrderedArraySymbolTable.hpp:19:17: note: FIX-IT applied suggested code changes
            int rank(this->getRank(key));
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/Array/OrderedArraySymbolTable.hpp:29:9: warning: variable 'rank' of type 'int' can be declared 'const' [misc-const-correctness]
        int rank(this->getRank(key));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/Array/OrderedArraySymbolTable.hpp:29:13: note: FIX-IT applied suggested code changes
        int rank(this->getRank(key));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/Array/OrderedArraySymbolTable.hpp:48:9: warning: variable 'rank' of type 'int' can be declared 'const' [misc-const-correctness]
        int rank(this->getRank(key));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/Array/OrderedArraySymbolTable.hpp:48:13: note: FIX-IT applied suggested code changes
        int rank(this->getRank(key));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BaseSymbolTable.hpp:8:7: warning: class 'BaseSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/SymbolTable/Utilities/CommonTestsWithSymbolTable.hpp:220:5: warning: variable 'keysToVerify' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Keys keysToVerify(symbolTable.getKeys());
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/SymbolTable/Utilities/CommonTestsWithSymbolTable.hpp:220:10: note: FIX-IT applied suggested code changes
    Keys keysToVerify(symbolTable.getKeys());
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/SymbolTable/Utilities/CommonTestsWithSymbolTable.hpp:222:5: warning: variable 'expectedKeys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Keys expectedKeys{3, 4, 5, 7, 8, 9};
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/SymbolTable/Utilities/CommonTestsWithSymbolTable.hpp:222:10: note: FIX-IT applied suggested code changes
    Keys expectedKeys{3, 4, 5, 7, 8, 9};
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/SymbolTable/Utilities/CommonTestsWithSymbolTable.hpp:237:5: warning: variable 'keysToVerify' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Keys keysToVerify(symbolTable.getKeysInRangeInclusive(5, 8));
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/SymbolTable/Utilities/CommonTestsWithSymbolTable.hpp:237:10: note: FIX-IT applied suggested code changes
    Keys keysToVerify(symbolTable.getKeysInRangeInclusive(5, 8));
         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/SymbolTable/Utilities/CommonTestsWithSymbolTable.hpp:239:5: warning: variable 'expectedKeys' of type 'Keys' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Keys expectedKeys{5, 7, 8};
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/SetAndSymbolTable/SymbolTable/Utilities/CommonTestsWithSymbolTable.hpp:239:10: note: FIX-IT applied suggested code changes
    Keys expectedKeys{5, 7, 8};
         ^
[230/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/SymbolTable/BinarySearchTree/AvlBinarySearchTreeSymbolTable_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseAvlBinarySearchTree.hpp:11:7: warning: class 'BaseAvlBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseAvlBinarySearchTree : public BaseBinarySearchTree<KeyTemplateType, NodeTemplateType, BaseDataStructure> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:10:7: warning: class 'BaseBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTree : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BaseSymbolTable.hpp:8:7: warning: class 'BaseSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BinarySearchTree/Common/BaseAvlBinarySearchTreeSymbolTable.hpp:11:7: warning: class 'BaseAvlBinarySearchTreeSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseAvlBinarySearchTreeSymbolTable
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BinarySearchTree/Common/BaseSymbolTableWithBaseTree.hpp:6:7: warning: class 'BaseSymbolTableWithBaseTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTableWithBaseTree : public BaseTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:87:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{5, 4, 3, 8, 7, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:87:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{5, 4, 3, 8, 7, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:103:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:103:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:119:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 4, 7, 9, 8, 5};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:119:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 4, 7, 9, 8, 5};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:142:5: warning: variable 'expectedBeforeDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:142:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:143:5: warning: variable 'expectedAfterDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedAfterDelete{4, 3, 9};            // still balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:143:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedAfterDelete{4, 3, 9};            // still balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:167:5: warning: variable 'expectedBeforeDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:167:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:168:5: warning: variable 'expectedAfterDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedAfterDelete{8, 7, 9};            // still balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:168:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedAfterDelete{8, 7, 9};            // still balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:192:5: warning: variable 'expectedBeforeDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:192:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedBeforeDelete{5, 4, 3, 8, 7, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:193:5: warning: variable 'expectedAfterDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedAfterDelete{4, 3, 5};            // still balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\AvlBinarySearchTreeSymbolTable_unit.cpp:193:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedAfterDelete{4, 3, 5};            // still balanced
                ^
[231/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/SymbolTable/BinarySearchTree/BinarySearchTreeSymbolTable_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:10:7: warning: class 'BaseBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTree : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BaseSymbolTable.hpp:8:7: warning: class 'BaseSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BinarySearchTree/Common/BaseBinarySearchTreeSymbolTable.hpp:11:7: warning: class 'BaseBinarySearchTreeSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTreeSymbolTable
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BinarySearchTree/Common/BaseSymbolTableWithBaseTree.hpp:6:7: warning: class 'BaseSymbolTableWithBaseTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTableWithBaseTree : public BaseTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:68:5: warning: variable 'node' of type 'NodeForTest' (aka 'alba::algorithm::BasicTreeNodeWithValue<int, char>') can be declared 'const' [misc-const-correctness]
    NodeForTest node{8, 'H', nullptr, nullptr, 1};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:68:17: note: FIX-IT applied suggested code changes
    NodeForTest node{8, 'H', nullptr, nullptr, 1};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:89:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 4, 5, 9, 8, 7};  // not balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:89:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 4, 5, 9, 8, 7};  // not balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:105:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};  // not balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:105:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};  // not balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:121:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{7, 8, 9, 5, 4, 3};  // not balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:121:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{7, 8, 9, 5, 4, 3};  // not balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:144:5: warning: variable 'expectedBeforeDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedBeforeDelete{8, 4, 3, 7, 5, 9};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:144:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedBeforeDelete{8, 4, 3, 7, 5, 9};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:145:5: warning: variable 'expectedAfterDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedAfterDelete{8, 5, 9};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\BinarySearchTreeSymbolTable_unit.cpp:145:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedAfterDelete{8, 5, 9};
                ^
[232/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/SymbolTable/BinarySearchTree/RedBlackBinarySearchTreeSymbolTable_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseBinarySearchTree.hpp:10:7: warning: class 'BaseBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseBinarySearchTree : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/BinarySearchTree/BaseRedBlackBinarySearchTree.hpp:11:7: warning: class 'BaseRedBlackBinarySearchTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRedBlackBinarySearchTree : public BaseBinarySearchTree<KeyTemplateType, NodeTemplateType, BaseDataStructure> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BaseSymbolTable.hpp:8:7: warning: class 'BaseSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BinarySearchTree/Common/BaseRedBlackBinarySearchTreeSymbolTable.hpp:12:7: warning: class 'BaseRedBlackBinarySearchTreeSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRedBlackBinarySearchTreeSymbolTable
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BinarySearchTree/Common/BaseSymbolTableWithBaseTree.hpp:6:7: warning: class 'BaseSymbolTableWithBaseTree' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTableWithBaseTree : public BaseTree {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\RedBlackBinarySearchTreeSymbolTable_unit.cpp:92:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{8, 4, 3, 7, 5, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\RedBlackBinarySearchTreeSymbolTable_unit.cpp:92:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{8, 4, 3, 7, 5, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\RedBlackBinarySearchTreeSymbolTable_unit.cpp:108:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\RedBlackBinarySearchTreeSymbolTable_unit.cpp:108:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 4, 5, 7, 8, 9};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\RedBlackBinarySearchTreeSymbolTable_unit.cpp:124:5: warning: variable 'expectedKeys' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedKeys{3, 5, 7, 4, 9, 8};  // balanced
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\RedBlackBinarySearchTreeSymbolTable_unit.cpp:124:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedKeys{3, 5, 7, 4, 9, 8};  // balanced
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\RedBlackBinarySearchTreeSymbolTable_unit.cpp:147:5: warning: variable 'expectedBeforeDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedBeforeDelete{8, 4, 3, 7, 5, 9};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\RedBlackBinarySearchTreeSymbolTable_unit.cpp:147:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedBeforeDelete{8, 4, 3, 7, 5, 9};
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\RedBlackBinarySearchTreeSymbolTable_unit.cpp:148:5: warning: variable 'expectedAfterDelete' of type 'KeysForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    KeysForTest expectedAfterDelete{8, 5, 9};
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\SetAndSymbolTable\SymbolTable\BinarySearchTree\RedBlackBinarySearchTreeSymbolTable_unit.cpp:148:17: note: FIX-IT applied suggested code changes
    KeysForTest expectedAfterDelete{8, 5, 9};
                ^
[233/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/SymbolTable/HashTable/LinearProbingHashSymbolTable_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:11:7: warning: class 'BaseOrderedArray' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseOrderedArray : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseLinearProbingHash.hpp:15:7: warning: class 'BaseLinearProbingHash' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseLinearProbingHash : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BaseSymbolTable.hpp:8:7: warning: class 'BaseSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/HashTable/Common/BaseLinearProbingHashSymbolTable.hpp:12:7: warning: class 'BaseLinearProbingHashSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseLinearProbingHashSymbolTable
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/HashTable/Common/BaseSymbolTableWithBaseLinearProbingHash.hpp:6:7: warning: class 'BaseSymbolTableWithBaseLinearProbingHash' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTableWithBaseLinearProbingHash : public BaseLinearProbingHash {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/HashTable/Common/BaseSymbolTableWithBaseLinearProbingHash.hpp:35:13: warning: variable 'entryPointer' of type 'EntryUniquePointer &' (aka 'unique_ptr<alba::algorithm::HashTableEntryWithValue<int, char>> &') can be declared 'const' [misc-const-correctness]
            EntryUniquePointer& entryPointer(b_entryPointers[i]);
            ^
                               const
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/HashTable/Common/BaseSymbolTableWithBaseLinearProbingHash.hpp:35:31: note: FIX-IT applied suggested code changes
            EntryUniquePointer& entryPointer(b_entryPointers[i]);
                              ^
[234/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/SymbolTable/HashTable/SeparateChainingHashSymbolTable_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/Array/BaseOrderedArray.hpp:11:7: warning: class 'BaseOrderedArray' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseOrderedArray : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/HashTable/BaseSeparateChainingHash.hpp:16:7: warning: class 'BaseSeparateChainingHash' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSeparateChainingHash : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/LinkedList/BaseUnorderedLinkedList.hpp:11:7: warning: class 'BaseUnorderedLinkedList' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnorderedLinkedList : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BaseSymbolTable.hpp:8:7: warning: class 'BaseSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/HashTable/Common/BaseSeparateChainingHashSymbolTable.hpp:13:7: warning: class 'BaseSeparateChainingHashSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSeparateChainingHashSymbolTable
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/HashTable/Common/BaseSymbolTableWithBaseSeparateChainingHash.hpp:6:7: warning: class 'BaseSymbolTableWithBaseSeparateChainingHash' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTableWithBaseSeparateChainingHash : public BaseSeparateChainingHash {
      ^
[235/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/SetAndSymbolTable/SymbolTable/LinkedList/UnorderedLinkedListSymbolTable_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/Common/LinkedList/BaseUnorderedLinkedList.hpp:11:7: warning: class 'BaseUnorderedLinkedList' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnorderedLinkedList : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/SetAndSymbolTable/SymbolTable/BaseSymbolTable.hpp:8:7: warning: class 'BaseSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSymbolTable {
      ^
[236/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/BubbleSorter/BubbleSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Sort/Utilities/CommonTestsWithSorter.hpp:91:5: warning: variable 'isStableSorted' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isStableSorted = std::equal(
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Sort/Utilities/CommonTestsWithSorter.hpp:91:10: note: FIX-IT applied suggested code changes
    bool isStableSorted = std::equal(
         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BubbleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BubbleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BubbleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:45:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BubbleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:45:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:50:5: warning: variable 'sorter' of type 'ListOfCharactersSorter' (aka 'BubbleSorter<list<char>>') can be declared 'const' [misc-const-correctness]
    ListOfCharactersSorter sorter;
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:50:28: note: FIX-IT applied suggested code changes
    ListOfCharactersSorter sorter;
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:55:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'BubbleSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:55:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:60:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'BubbleSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:60:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:65:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'BubbleSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:65:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:70:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'BubbleSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\BubbleSorter_unit.cpp:70:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[237/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/BubbleSorter/CocktailShakerSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CocktailShakerSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CocktailShakerSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CocktailShakerSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:45:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CocktailShakerSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:45:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:52:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'CocktailShakerSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:52:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:57:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'CocktailShakerSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:62:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'CocktailShakerSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:62:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:67:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'CocktailShakerSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BubbleSorter\CocktailShakerSorter_unit.cpp:67:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[238/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/BucketSorter/BucketSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BucketSorter/BucketSorter.hpp:26:13: warning: variable 'bucketIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int bucketIndex = static_cast<int>(value - m_minValue) * NUMBER_OF_BUCKETS / deltaValue;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BucketSorter/BucketSorter.hpp:26:17: note: FIX-IT applied suggested code changes
            int bucketIndex = static_cast<int>(value - m_minValue) * NUMBER_OF_BUCKETS / deltaValue;
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BucketSorter<vector<char>, 10>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter('A', 'Z');
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter('A', 'Z');
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BucketSorter<vector<char>, 10>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter('A', 'Z');
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter('A', 'Z');
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BucketSorter<vector<char>, 10>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter('A', 'Z');
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter('A', 'Z');
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:45:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BucketSorter<vector<char>, 10>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter('A', 'Z');
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:45:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter('A', 'Z');
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:50:5: warning: variable 'sorter' of type 'ListOfCharactersSorter' (aka 'BucketSorter<list<char>, 10>') can be declared 'const' [misc-const-correctness]
    ListOfCharactersSorter sorter('A', 'Z');
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:50:28: note: FIX-IT applied suggested code changes
    ListOfCharactersSorter sorter('A', 'Z');
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:56:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'BucketSorter<vector<int>, 10>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter(-10, 10);
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:56:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter(-10, 10);
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:62:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'BucketSorter<vector<double>, 10>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter(0, 1);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:62:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter(0, 1);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:70:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'BucketSorter<vector<StabilityCheckObject>, 10>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter(StabilityCheckObject('A', 0), StabilityCheckObject('Z', 0));
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\BucketSorter\BucketSorter_unit.cpp:70:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter(StabilityCheckObject('A', 0), StabilityCheckObject('Z', 0));
                                ^
[239/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/CombSorter/CombSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/CombSorter/CombSorter.hpp:19:13: warning: variable 'size' of type 'int' can be declared 'const' [misc-const-correctness]
            int size = valuesToSort.size();
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/CombSorter/CombSorter.hpp:19:17: note: FIX-IT applied suggested code changes
            int size = valuesToSort.size();
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/CombSorter/CombSorter.hpp:39:9: warning: variable 'result' of type 'int' can be declared 'const' [misc-const-correctness]
        int result = (gap * 10) / 13;  // apply shrink factor=1.3
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/CombSorter/CombSorter.hpp:39:13: note: FIX-IT applied suggested code changes
        int result = (gap * 10) / 13;  // apply shrink factor=1.3
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Sort/Utilities/CommonTestsWithSorter.hpp:106:5: warning: variable 'isSortedButNotStable' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isSortedButNotStable = std::equal(
    ^
         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Sort/Utilities/CommonTestsWithSorter.hpp:106:10: note: FIX-IT applied suggested code changes
    bool isSortedButNotStable = std::equal(
         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CombSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CombSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CombSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CombSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:47:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'CombSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:47:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:52:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'CombSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:57:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'CombSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'CombSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CombSorter\CombSorter_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[240/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/CountingSorter/CountingSorterUsingCountPerValue_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:57:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CountingSorterUsingCountPerValue<vector<char>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(characterToIndexableValueFunction, indexableValueToCharacterFunction);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:57:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(characterToIndexableValueFunction, indexableValueToCharacterFunction);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:62:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CountingSorterUsingCountPerValue<vector<char>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(characterToIndexableValueFunction, indexableValueToCharacterFunction);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:62:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(characterToIndexableValueFunction, indexableValueToCharacterFunction);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:67:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CountingSorterUsingCountPerValue<vector<char>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(characterToIndexableValueFunction, indexableValueToCharacterFunction);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:67:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(characterToIndexableValueFunction, indexableValueToCharacterFunction);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:72:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CountingSorterUsingCountPerValue<vector<char>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(characterToIndexableValueFunction, indexableValueToCharacterFunction);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:72:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(characterToIndexableValueFunction, indexableValueToCharacterFunction);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:77:5: warning: variable 'sorter' of type 'ListOfCharactersSorter' (aka 'CountingSorterUsingCountPerValue<list<char>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    ListOfCharactersSorter sorter(characterToIndexableValueFunction, indexableValueToCharacterFunction);
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:77:28: note: FIX-IT applied suggested code changes
    ListOfCharactersSorter sorter(characterToIndexableValueFunction, indexableValueToCharacterFunction);
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:82:5: warning: variable 'sorter' of type 'SmallIntegerSorter' (aka 'CountingSorterUsingCountPerValue<vector<int>, MAX_NUMBER_OF_SMALL_INTS>') can be declared 'const' [misc-const-correctness]
    SmallIntegerSorter sorter(smallIntToIndexableValueFunction, indexableValueToSmallIntFunction);
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:82:24: note: FIX-IT applied suggested code changes
    SmallIntegerSorter sorter(smallIntToIndexableValueFunction, indexableValueToSmallIntFunction);
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:89:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'CountingSorterUsingCountPerValue<vector<StabilityCheckObject>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter(
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingCountPerValue_unit.cpp:89:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter(
                                ^
[241/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/CountingSorter/CountingSorterUsingNewPositions_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:39:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CountingSorterUsingNewPositions<vector<char>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(characterToIndexableValueFunction);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:39:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(characterToIndexableValueFunction);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:44:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CountingSorterUsingNewPositions<vector<char>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(characterToIndexableValueFunction);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:44:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(characterToIndexableValueFunction);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:49:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CountingSorterUsingNewPositions<vector<char>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(characterToIndexableValueFunction);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:49:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(characterToIndexableValueFunction);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:54:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CountingSorterUsingNewPositions<vector<char>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(characterToIndexableValueFunction);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:54:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(characterToIndexableValueFunction);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:60:5: warning: variable 'sorter' of type 'SmallIntegerSorter' (aka 'CountingSorterUsingNewPositions<vector<int>, MAX_NUMBER_OF_SMALL_INTS>') can be declared 'const' [misc-const-correctness]
    SmallIntegerSorter sorter(smallIntToIndexableValueFunction);
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:60:24: note: FIX-IT applied suggested code changes
    SmallIntegerSorter sorter(smallIntToIndexableValueFunction);
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:67:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'CountingSorterUsingNewPositions<vector<StabilityCheckObject>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter(stabilityCheckObjectToIndexableValueFunction);
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CountingSorter\CountingSorterUsingNewPositions_unit.cpp:67:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter(stabilityCheckObjectToIndexableValueFunction);
                                ^
[242/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/CycleSorter/CycleSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/CycleSorter/CycleSorter.hpp:38:9: warning: variable 'numberOfLessValues' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfLessValues = std::count_if(
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/CycleSorter/CycleSorter.hpp:38:13: note: FIX-IT applied suggested code changes
        int numberOfLessValues = std::count_if(
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CycleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CycleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CycleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'CycleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:47:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'CycleSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:47:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:52:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'CycleSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:57:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'CycleSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'CycleSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\CycleSorter\CycleSorter_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[243/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/HeapSorter/HeapSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/HeapSorter/HeapSorter.hpp:32:9: warning: variable 'size' of type 'int' can be declared 'const' [misc-const-correctness]
        int size(maxBinaryHeapAdapter.getSize());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/HeapSorter/HeapSorter.hpp:32:13: note: FIX-IT applied suggested code changes
        int size(maxBinaryHeapAdapter.getSize());
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:28:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'HeapSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:28:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:33:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'HeapSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:33:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:38:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'HeapSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:38:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:43:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'HeapSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:43:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:49:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'HeapSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:49:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:54:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'HeapSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:54:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:59:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'HeapSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:59:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:64:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'HeapSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\HeapSorter\HeapSorter_unit.cpp:64:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[244/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/InsertionSorter/InsertionSorterForForwardList_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:47:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'InsertionSorterForForwardList<int>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:47:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:52:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'InsertionSorterForForwardList<double>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:57:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'InsertionSorterForForwardList<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'InsertionSorterForForwardList<StabilityCheckObject>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterForForwardList_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[245/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/InsertionSorter/InsertionSorterWithBinarySearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/InsertionSorter/InsertionSorterWithBinarySearch.hpp:30:13: warning: variable 'middleIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int middleIndex = getMidpointOfIndexes(iLow, iHigh);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/InsertionSorter/InsertionSorterWithBinarySearch.hpp:30:17: note: FIX-IT applied suggested code changes
            int middleIndex = getMidpointOfIndexes(iLow, iHigh);
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/InsertionSorter/InsertionSorterWithBinarySearch.hpp:43:9: warning: variable 'indexWithGreaterValue' of type 'int' can be declared 'const' [misc-const-correctness]
        int indexWithGreaterValue =
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/InsertionSorter/InsertionSorterWithBinarySearch.hpp:43:13: note: FIX-IT applied suggested code changes
        int indexWithGreaterValue =
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorterWithBinarySearch<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorterWithBinarySearch<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorterWithBinarySearch<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:45:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorterWithBinarySearch<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:45:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:51:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'InsertionSorterWithBinarySearch<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:51:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:56:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'InsertionSorterWithBinarySearch<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:56:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:61:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'InsertionSorterWithBinarySearch<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:61:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:66:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'InsertionSorterWithBinarySearch<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorterWithBinarySearch_unit.cpp:66:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[246/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/InsertionSorter/InsertionSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:45:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'InsertionSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:45:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:50:5: warning: variable 'sorter' of type 'ListOfCharactersSorter' (aka 'InsertionSorter<list<char>>') can be declared 'const' [misc-const-correctness]
    ListOfCharactersSorter sorter;
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:50:28: note: FIX-IT applied suggested code changes
    ListOfCharactersSorter sorter;
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:55:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'InsertionSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:55:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:60:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'InsertionSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:60:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:65:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'InsertionSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:65:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:70:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'InsertionSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\InsertionSorter\InsertionSorter_unit.cpp:70:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[247/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/LargeSorter/AlbaLargeSorterProfiling_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/AlbaLargeSorter.hpp:15:7: warning: class 'AlbaLargeSorter' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class AlbaLargeSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/AlbaLargeSorter.hpp:114:9: warning: variable 'totalMemoryConsumption' of type 'int' can be declared 'const' [misc-const-correctness]
        int totalMemoryConsumption = calculateTotalMemoryConsumption();
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/AlbaLargeSorter.hpp:114:13: note: FIX-IT applied suggested code changes
        int totalMemoryConsumption = calculateTotalMemoryConsumption();
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/AlbaLargeSorter.hpp:142:9: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
        AlbaLocalPathHandler(m_configuration.m_directoryForBlocks).createDirectoriesForNonExisitingDirectories();
        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/AlbaLargeSorter.hpp:160:9: warning: variable 'totalMemoryConsumption' of type 'int' can be declared 'const' [misc-const-correctness]
        int totalMemoryConsumption = accumulate(
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/AlbaLargeSorter.hpp:160:13: note: FIX-IT applied suggested code changes
        int totalMemoryConsumption = accumulate(
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/DataBlock.hpp:57:5: warning: function 'getLowestObject' should be marked [[nodiscard]] [modernize-use-nodiscard]
    ObjectToSort getLowestObject() const { return m_lowestValue; }
    ^
    [[nodiscard]] 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/DataBlock.hpp:57:5: note: FIX-IT applied suggested code changes
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/DataBlockFileHandler.hpp:13:7: warning: class 'DataBlockFileHandler' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class DataBlockFileHandler {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/DataBlockFileHandler.hpp:17:9: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
        AlbaLocalPathHandler(m_path).deleteFile();
        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/DataBlockFileHandler.hpp:22:13: warning: variable 'filePathHandler' of type 'AlbaLocalPathHandler' can be declared 'const' [misc-const-correctness]
            AlbaLocalPathHandler filePathHandler(path);
            ^
                                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/DataBlockFileHandler.hpp:22:34: note: FIX-IT applied suggested code changes
            AlbaLocalPathHandler filePathHandler(path);
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorterProfiling_unit.cpp:31:5: warning: variable 'sampleSize' of type 'int' can be declared 'const' [misc-const-correctness]
    int sampleSize = 1280000;  //(stringHelper::convertStringToNumber<int>(ui.getUserInput()));
    ^
        const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorterProfiling_unit.cpp:31:9: note: FIX-IT applied suggested code changes
    int sampleSize = 1280000;  //(stringHelper::convertStringToNumber<int>(ui.getUserInput()));
        ^
[248/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/LargeSorter/AlbaLargeSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/AlbaLargeSorter.hpp:15:7: warning: class 'AlbaLargeSorter' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class AlbaLargeSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/AlbaLargeSorter.hpp:142:9: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
        AlbaLocalPathHandler(m_configuration.m_directoryForBlocks).createDirectoriesForNonExisitingDirectories();
        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/DataBlockFileHandler.hpp:13:7: warning: class 'DataBlockFileHandler' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class DataBlockFileHandler {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/LargeSorter/DataBlockFileHandler.hpp:17:9: warning: C-style casts are discouraged; use static_cast/const_cast/reinterpret_cast [google-readability-casting]
        AlbaLocalPathHandler(m_path).deleteFile();
        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:67:5: warning: variable 'localPathHandler' of type 'AlbaLocalPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaLocalPathHandler localPathHandler(ALBA_LARGE_SORTER_TEST_FILE);
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:67:26: note: FIX-IT applied suggested code changes
    AlbaLocalPathHandler localPathHandler(ALBA_LARGE_SORTER_TEST_FILE);
                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:105:5: warning: variable 'configuration' of type 'AlbaLargeSorterConfiguration' can be declared 'const' [misc-const-correctness]
    AlbaLargeSorterConfiguration configuration(ALBA_LARGE_SORTER_BLOCK_DIR, 100, 1000, 1, 100);
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:105:34: note: FIX-IT applied suggested code changes
    AlbaLargeSorterConfiguration configuration(ALBA_LARGE_SORTER_BLOCK_DIR, 100, 1000, 1, 100);
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:110:5: warning: variable 'configuration' of type 'AlbaLargeSorterConfiguration' can be declared 'const' [misc-const-correctness]
    AlbaLargeSorterConfiguration configuration("io23i4uoiyw4oiy5", 100, 1000, 1, 100);
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:110:34: note: FIX-IT applied suggested code changes
    AlbaLargeSorterConfiguration configuration("io23i4uoiyw4oiy5", 100, 1000, 1, 100);
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:115:5: warning: variable 'configuration' of type 'AlbaLargeSorterConfiguration' can be declared 'const' [misc-const-correctness]
    AlbaLargeSorterConfiguration configuration(ALBA_LARGE_SORTER_TEST_FILE, 100, 1000, 1, 100);
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:115:34: note: FIX-IT applied suggested code changes
    AlbaLargeSorterConfiguration configuration(ALBA_LARGE_SORTER_TEST_FILE, 100, 1000, 1, 100);
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:120:5: warning: variable 'configuration' of type 'AlbaLargeSorterConfiguration' can be declared 'const' [misc-const-correctness]
    AlbaLargeSorterConfiguration configuration(ALBA_LARGE_SORTER_TEST_FILE, 0, 1000, 1, 100);
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:120:34: note: FIX-IT applied suggested code changes
    AlbaLargeSorterConfiguration configuration(ALBA_LARGE_SORTER_TEST_FILE, 0, 1000, 1, 100);
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:125:5: warning: variable 'configuration' of type 'AlbaLargeSorterConfiguration' can be declared 'const' [misc-const-correctness]
    AlbaLargeSorterConfiguration configuration(ALBA_LARGE_SORTER_TEST_FILE, 100, 99, 1, 100);
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:125:34: note: FIX-IT applied suggested code changes
    AlbaLargeSorterConfiguration configuration(ALBA_LARGE_SORTER_TEST_FILE, 100, 99, 1, 100);
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:240:5: warning: variable 'inputPathHandler' of type 'AlbaLocalPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaLocalPathHandler inputPathHandler(ALBA_LARGE_SORTER_TEST_FILE);
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:240:26: note: FIX-IT applied suggested code changes
    AlbaLocalPathHandler inputPathHandler(ALBA_LARGE_SORTER_TEST_FILE);
                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:256:5: warning: variable 'largeSorter' of type 'AlbaLargeSorter<int>' can be declared 'const' [misc-const-correctness]
    AlbaLargeSorter<int> largeSorter(AlbaLargeSorterConfiguration(ALBA_LARGE_SORTER_BLOCK_DIR, 100, 1000, 1000, 100));
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:256:26: note: FIX-IT applied suggested code changes
    AlbaLargeSorter<int> largeSorter(AlbaLargeSorterConfiguration(ALBA_LARGE_SORTER_BLOCK_DIR, 100, 1000, 1000, 100));
                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:343:5: warning: variable 'directoryPathHandler' of type 'AlbaLocalPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaLocalPathHandler directoryPathHandler(ALBA_LARGE_SORTER_BLOCK_DIR);
    ^
                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:343:26: note: FIX-IT applied suggested code changes
    AlbaLocalPathHandler directoryPathHandler(ALBA_LARGE_SORTER_BLOCK_DIR);
                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:763:10: warning: variable 'value' of type 'int' can be declared 'const' [misc-const-correctness]
    for (int value : integersToShuffle) {
         ^
             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\LargeSorter\AlbaLargeSorter_unit.cpp:763:14: note: FIX-IT applied suggested code changes
    for (int value : integersToShuffle) {
             ^
[249/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/MergeSorter/BottomUpMergeSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/MergeSorter/BottomUpMergeSorter.hpp:18:17: warning: variable 'middle' of type 'int' can be declared 'const' [misc-const-correctness]
                int middle = lowest + subHalfSize - 1;
                ^
                    const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/MergeSorter/BottomUpMergeSorter.hpp:18:21: note: FIX-IT applied suggested code changes
                int middle = lowest + subHalfSize - 1;
                    ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/MergeSorter/BottomUpMergeSorter.hpp:19:17: warning: variable 'highest' of type 'int' can be declared 'const' [misc-const-correctness]
                int highest = std::min(lowest + (subHalfSize * 2) - 1, size - 1);
                ^
                    const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/MergeSorter/BottomUpMergeSorter.hpp:19:21: note: FIX-IT applied suggested code changes
                int highest = std::min(lowest + (subHalfSize * 2) - 1, size - 1);
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BottomUpMergeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BottomUpMergeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BottomUpMergeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BottomUpMergeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:47:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'BottomUpMergeSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:47:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:52:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'BottomUpMergeSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:57:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'BottomUpMergeSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'BottomUpMergeSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\BottomUpMergeSorter_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[250/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/MergeSorter/MergeSorterForForwardList_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MergeSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MergeSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MergeSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MergeSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:47:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'MergeSorterForForwardList<int>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:47:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:52:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'MergeSorterForForwardList<double>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:57:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'MergeSorterForForwardList<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'MergeSorterForForwardList<StabilityCheckObject>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForForwardList_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[251/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/MergeSorter/MergeSorterForList_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/MergeSorter/MergeSorterForList.hpp:20:9: warning: variable 'halfSize' of type 'int' can be declared 'const' [misc-const-correctness]
        int halfSize = (values.size() + 1) / 2;
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/MergeSorter/MergeSorterForList.hpp:20:13: note: FIX-IT applied suggested code changes
        int halfSize = (values.size() + 1) / 2;
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MergeSorterForList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MergeSorterForList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MergeSorterForList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MergeSorterForList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:46:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'MergeSorterForList<int>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:46:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:51:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'MergeSorterForList<double>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:51:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:56:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'MergeSorterForList<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:56:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:61:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'MergeSorterForList<StabilityCheckObject>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\MergeSorterForList_unit.cpp:61:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[252/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/MergeSorter/TopDownMergeSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'TopDownMergeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'TopDownMergeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'TopDownMergeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'TopDownMergeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:47:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'TopDownMergeSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:47:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:52:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'TopDownMergeSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:57:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'TopDownMergeSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'TopDownMergeSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\MergeSorter\TopDownMergeSorter_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[253/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/OddEvenSorter/OddEvenSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/OddEvenSorter/OddEvenSorter.hpp:20:13: warning: variable 'lastIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int lastIndex(valuesToSort.size() - 1);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/OddEvenSorter/OddEvenSorter.hpp:20:17: note: FIX-IT applied suggested code changes
            int lastIndex(valuesToSort.size() - 1);
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'OddEvenSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'OddEvenSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'OddEvenSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:45:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'OddEvenSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:45:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:52:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'OddEvenSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:52:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:57:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'OddEvenSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:62:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'OddEvenSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:62:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:67:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'OddEvenSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\OddEvenSorter\OddEvenSorter_unit.cpp:67:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[254/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/PatienceSorter/PatienceSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/PatienceSorter/PatienceSorter.hpp:65:9: warning: variable 'numberOfPiles' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfPiles = std::distance(itLow, itHigh) + 1;
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/PatienceSorter/PatienceSorter.hpp:65:13: note: FIX-IT applied suggested code changes
        int numberOfPiles = std::distance(itLow, itHigh) + 1;
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PatienceSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PatienceSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PatienceSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:45:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PatienceSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:45:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:50:5: warning: variable 'sorter' of type 'ListOfCharactersSorter' (aka 'PatienceSorter<list<char>>') can be declared 'const' [misc-const-correctness]
    ListOfCharactersSorter sorter;
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:50:28: note: FIX-IT applied suggested code changes
    ListOfCharactersSorter sorter;
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:55:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'PatienceSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:55:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:60:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'PatienceSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:60:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:65:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'PatienceSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:65:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:71:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'PatienceSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PatienceSorter\PatienceSorter_unit.cpp:71:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[255/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/PigeonHoleSorter/PigeonHoleSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/PigeonHoleSorter/PigeonHoleSorter.hpp:22:13: warning: variable 'minimumValue' of type 'Value' (aka 'char') can be declared 'const' [misc-const-correctness]
            Value minimumValue = *minIt;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/PigeonHoleSorter/PigeonHoleSorter.hpp:22:19: note: FIX-IT applied suggested code changes
            Value minimumValue = *minIt;
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/PigeonHoleSorter/PigeonHoleSorter.hpp:23:13: warning: variable 'maximumValue' of type 'Value' (aka 'char') can be declared 'const' [misc-const-correctness]
            Value maximumValue = *maxIt;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/PigeonHoleSorter/PigeonHoleSorter.hpp:23:19: note: FIX-IT applied suggested code changes
            Value maximumValue = *maxIt;
                  ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/PigeonHoleSorter/PigeonHoleSorter.hpp:24:13: warning: variable 'range' of type 'Value' (aka 'char') can be declared 'const' [misc-const-correctness]
            Value range = maximumValue - minimumValue + 1;
            ^
                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/PigeonHoleSorter/PigeonHoleSorter.hpp:24:19: note: FIX-IT applied suggested code changes
            Value range = maximumValue - minimumValue + 1;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PigeonHoleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PigeonHoleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PigeonHoleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:45:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PigeonHoleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:45:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:50:5: warning: variable 'sorter' of type 'ListOfCharactersSorter' (aka 'PigeonHoleSorter<list<char>>') can be declared 'const' [misc-const-correctness]
    ListOfCharactersSorter sorter;
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:50:28: note: FIX-IT applied suggested code changes
    ListOfCharactersSorter sorter;
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:55:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'PigeonHoleSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:55:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'PigeonHoleSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:67:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PigeonHoleSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:67:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:72:5: warning: variable 'expectedOneCharacter' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters expectedOneCharacter{'J'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\PigeonHoleSorter\PigeonHoleSorter_unit.cpp:72:16: note: FIX-IT applied suggested code changes
    Characters expectedOneCharacter{'J'};
               ^
[256/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/QuickSorter/QuickSelector_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/MediansHelper.hpp:45:5: warning: variable 'deltaSize' of type 'int' can be declared 'const' [misc-const-correctness]
    int deltaSize = highIndex - lowIndex;
    ^
        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/MediansHelper.hpp:45:9: note: FIX-IT applied suggested code changes
    int deltaSize = highIndex - lowIndex;
        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/MediansHelper.hpp:77:33: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int medianIndexesSize = medianIndexes.size();
                                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/MediansHelper.hpp:81:17: warning: variable 'highOfFive' of type 'int' can be declared 'const' [misc-const-correctness]
                int highOfFive = std::min(lowOfFive + 4, medianIndexesSize - 1);
                ^
                    const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/MediansHelper.hpp:81:21: note: FIX-IT applied suggested code changes
                int highOfFive = std::min(lowOfFive + 4, medianIndexesSize - 1);
                    ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/MediansHelper.hpp:82:17: warning: variable 'medianIndexOfFive' of type 'int' can be declared 'const' [misc-const-correctness]
                int medianIndexOfFive = getMedianIndexOfLessThanFive(values, medianIndexes, lowOfFive, highOfFive);
                ^
                    const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/MediansHelper.hpp:82:21: note: FIX-IT applied suggested code changes
                int medianIndexOfFive = getMedianIndexOfLessThanFive(values, medianIndexes, lowOfFive, highOfFive);
                    ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSelector.hpp:18:13: warning: variable 'partitionIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int partitionIndex = partitionAndGetPartitionIndex(valuesToSelect, lowest, highest, m_pivotType);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSelector.hpp:18:17: note: FIX-IT applied suggested code changes
            int partitionIndex = partitionAndGetPartitionIndex(valuesToSelect, lowest, highest, m_pivotType);
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:19:5: warning: variable 'selector' of type 'CharacterSelector' (aka 'QuickSelector<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharacterSelector selector(PivotType::LowestIndex);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:19:23: note: FIX-IT applied suggested code changes
    CharacterSelector selector(PivotType::LowestIndex);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:24:5: warning: variable 'selector' of type 'IntegerSelector' (aka 'QuickSelector<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegerSelector selector(PivotType::LowestIndex);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:24:21: note: FIX-IT applied suggested code changes
    IntegerSelector selector(PivotType::LowestIndex);
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:29:5: warning: variable 'selector' of type 'CharacterSelector' (aka 'QuickSelector<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharacterSelector selector(PivotType::LowestIndex);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:29:23: note: FIX-IT applied suggested code changes
    CharacterSelector selector(PivotType::LowestIndex);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:34:5: warning: variable 'selector' of type 'IntegerSelector' (aka 'QuickSelector<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegerSelector selector(PivotType::LowestIndex);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:34:21: note: FIX-IT applied suggested code changes
    IntegerSelector selector(PivotType::LowestIndex);
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:39:5: warning: variable 'selector' of type 'CharacterSelector' (aka 'QuickSelector<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharacterSelector selector(PivotType::LowestIndex);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:39:23: note: FIX-IT applied suggested code changes
    CharacterSelector selector(PivotType::LowestIndex);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:44:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'A', 'E', 'E', 'L', 'M', 'O', 'R', 'P', 'S', 'T', 'X'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:44:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'A', 'E', 'E', 'L', 'M', 'O', 'R', 'P', 'S', 'T', 'X'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:49:5: warning: variable 'selector' of type 'CharacterSelector' (aka 'QuickSelector<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharacterSelector selector(PivotType::HighestIndex);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:49:23: note: FIX-IT applied suggested code changes
    CharacterSelector selector(PivotType::HighestIndex);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:54:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'A', 'E', 'E', 'L', 'M', 'O', 'R', 'P', 'S', 'X', 'T'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:54:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'A', 'E', 'E', 'L', 'M', 'O', 'R', 'P', 'S', 'X', 'T'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:59:5: warning: variable 'selector' of type 'CharacterSelector' (aka 'QuickSelector<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharacterSelector selector(PivotType::RandomIndex);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:59:23: note: FIX-IT applied suggested code changes
    CharacterSelector selector(PivotType::RandomIndex);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:68:5: warning: variable 'selector' of type 'CharacterSelector' (aka 'QuickSelector<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharacterSelector selector(PivotType::MedianOfMedians);
    ^
                      const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:68:23: note: FIX-IT applied suggested code changes
    CharacterSelector selector(PivotType::MedianOfMedians);
                      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:73:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'E', 'L', 'A', 'E', 'M', 'O', 'P', 'R', 'X', 'S', 'T'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSelector_unit.cpp:73:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'E', 'L', 'A', 'E', 'M', 'O', 'P', 'R', 'X', 'S', 'T'};
               ^
[257/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/QuickSorter/QuickSorterForForwardList_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterUtilities.hpp:134:10: warning: local copy 'stopIt' of the variable 'itHighPlusOne' is never modified; consider avoiding the copy [performance-unnecessary-copy-initialization]
    auto stopIt = itHighPlusOne;
         ^
    const  &
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterUtilities.hpp:134:5: note: FIX-IT applied suggested code changes
    auto stopIt = itHighPlusOne;
    ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterUtilities.hpp:134:9: note: FIX-IT applied suggested code changes
    auto stopIt = itHighPlusOne;
        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterForForwardList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:47:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'QuickSorterForForwardList<int>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:47:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:52:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'QuickSorterForForwardList<double>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:57:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'QuickSorterForForwardList<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'QuickSorterForForwardList<StabilityCheckObject>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForForwardList_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[258/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/QuickSorter/QuickSorterForList_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterForList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterForList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterForList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterForList<char>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:46:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'QuickSorterForList<int>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:46:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:51:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'QuickSorterForList<double>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:51:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:56:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'QuickSorterForList<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:56:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:61:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'QuickSorterForList<StabilityCheckObject>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterForList_unit.cpp:61:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[259/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/QuickSorter/QuickSorterUtilities_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/MediansHelper.hpp:77:33: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int medianIndexesSize = medianIndexes.size();
                                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterUtilities.hpp:85:5: warning: variable 'indexWithPivotValue' of type 'int' can be declared 'const' [misc-const-correctness]
    int indexWithPivotValue = getPivotIndex(values, lowIndex, highIndex, pivotType);
    ^
        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterUtilities.hpp:85:9: note: FIX-IT applied suggested code changes
    int indexWithPivotValue = getPivotIndex(values, lowIndex, highIndex, pivotType);
        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:28:56: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        partitionAndGetPartitionIndex(valuesToSort, 0, valuesToSort.size() - 1, PivotType::LowestIndex);
                                                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:30:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'E', 'O', 'R', 'L', 'E', 'P', 'A', 'M', 'S', 'T', 'X'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:30:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'E', 'O', 'R', 'L', 'E', 'P', 'A', 'M', 'S', 'T', 'X'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:39:56: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        partitionAndGetPartitionIndex(valuesToSort, 0, valuesToSort.size() - 1, PivotType::HighestIndex);
                                                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:41:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'A', 'E', 'E', 'T', 'O', 'X', 'R', 'M', 'P', 'L', 'S'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:41:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'A', 'E', 'E', 'T', 'O', 'X', 'R', 'M', 'P', 'L', 'S'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:50:56: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        partitionAndGetPartitionIndex(valuesToSort, 0, valuesToSort.size() - 1, PivotType::MedianOfLowMidHighIndexes);
                                                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:52:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'E', 'O', 'R', 'L', 'E', 'P', 'A', 'M', 'S', 'T', 'X'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:52:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'E', 'O', 'R', 'L', 'E', 'P', 'A', 'M', 'S', 'T', 'X'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:61:56: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        partitionAndGetPartitionIndex(valuesToSort, 0, valuesToSort.size() - 1, PivotType::MedianNinther);
                                                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:63:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'E', 'O', 'L', 'P', 'E', 'M', 'A', 'R', 'T', 'S', 'X'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:63:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'E', 'O', 'L', 'P', 'E', 'M', 'A', 'R', 'T', 'S', 'X'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:72:56: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        partitionAndGetPartitionIndex(valuesToSort, 0, valuesToSort.size() - 1, PivotType::MedianOfMedians);
                                                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:74:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'E', 'L', 'A', 'E', 'M', 'X', 'R', 'S', 'P', 'O', 'T'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:74:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'E', 'L', 'A', 'E', 'M', 'X', 'R', 'S', 'P', 'O', 'T'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:83:67: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        partitionAndGetPartitionIndexUsingLomuto(valuesToSort, 0, valuesToSort.size() - 1, PivotType::MedianOfMedians);
                                                                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:85:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'E', 'A', 'E', 'L', 'M', 'X', 'O', 'R', 'P', 'T', 'S'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:85:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'E', 'A', 'E', 'L', 'M', 'X', 'O', 'R', 'P', 'T', 'S'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:96:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'P', 'O', 'R', 'E', 'E', 'L', 'A', 'M', 'S', 'X', 'T'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:96:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'P', 'O', 'R', 'E', 'E', 'L', 'A', 'M', 'S', 'X', 'T'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:107:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'E', 'O', 'R', 'E', 'A', 'M', 'P', 'L', 'S', 'X', 'T'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterUtilities_unit.cpp:107:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'E', 'O', 'R', 'E', 'A', 'M', 'P', 'L', 'S', 'X', 'T'};
               ^
[260/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/QuickSorter/QuickSorterWith3WayPartitioning_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/MediansHelper.hpp:77:33: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int medianIndexesSize = medianIndexes.size();
                                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterWith3WayPartitioning.hpp:26:13: warning: variable 'indexWithPivotValue' of type 'int' can be declared 'const' [misc-const-correctness]
            int indexWithPivotValue = getPivotIndex(valuesToSort, lowIndex, highIndex, m_pivotType);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterWith3WayPartitioning.hpp:26:17: note: FIX-IT applied suggested code changes
            int indexWithPivotValue = getPivotIndex(valuesToSort, lowIndex, highIndex, m_pivotType);
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWith3WayPartitioning<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWith3WayPartitioning<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWith3WayPartitioning<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWith3WayPartitioning<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:47:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'QuickSorterWith3WayPartitioning<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter(PivotType::LowestIndex);
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:47:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter(PivotType::LowestIndex);
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:52:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'QuickSorterWith3WayPartitioning<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter(PivotType::LowestIndex);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter(PivotType::LowestIndex);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:57:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'QuickSorterWith3WayPartitioning<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(PivotType::LowestIndex);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(PivotType::LowestIndex);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'QuickSorterWith3WayPartitioning<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter(PivotType::LowestIndex);
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter(PivotType::LowestIndex);
                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:68:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWith3WayPartitioning<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:68:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:73:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWith3WayPartitioning<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::HighestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:73:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::HighestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:78:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWith3WayPartitioning<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::RandomIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:78:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::RandomIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:83:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWith3WayPartitioning<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::MedianOfMedians);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWith3WayPartitioning_unit.cpp:83:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::MedianOfMedians);
                     ^
[261/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/QuickSorter/QuickSorterWithIterativeApproach_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/MediansHelper.hpp:77:33: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int medianIndexesSize = medianIndexes.size();
                                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterWithIterativeApproach.hpp:31:13: warning: variable 'highIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int highIndex = inputIndicesStack.top();
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterWithIterativeApproach.hpp:31:17: note: FIX-IT applied suggested code changes
            int highIndex = inputIndicesStack.top();
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterWithIterativeApproach.hpp:33:13: warning: variable 'lowIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int lowIndex = inputIndicesStack.top();
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterWithIterativeApproach.hpp:33:17: note: FIX-IT applied suggested code changes
            int lowIndex = inputIndicesStack.top();
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterWithIterativeApproach.hpp:36:13: warning: variable 'partitionIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int partitionIndex = partitionAndGetPartitionIndex(valuesToSort, lowIndex, highIndex, m_pivotType);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorterWithIterativeApproach.hpp:36:17: note: FIX-IT applied suggested code changes
            int partitionIndex = partitionAndGetPartitionIndex(valuesToSort, lowIndex, highIndex, m_pivotType);
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWithIterativeApproach<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWithIterativeApproach<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWithIterativeApproach<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWithIterativeApproach<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:47:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'QuickSorterWithIterativeApproach<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter(PivotType::LowestIndex);
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:47:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter(PivotType::LowestIndex);
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:52:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'QuickSorterWithIterativeApproach<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter(PivotType::LowestIndex);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter(PivotType::LowestIndex);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:57:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'QuickSorterWithIterativeApproach<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(PivotType::LowestIndex);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(PivotType::LowestIndex);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'QuickSorterWithIterativeApproach<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter(PivotType::LowestIndex);
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter(PivotType::LowestIndex);
                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:68:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWithIterativeApproach<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:68:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:73:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWithIterativeApproach<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::HighestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:73:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::HighestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:78:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWithIterativeApproach<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::RandomIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:78:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::RandomIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:83:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorterWithIterativeApproach<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::MedianOfMedians);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorterWithIterativeApproach_unit.cpp:83:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::MedianOfMedians);
                     ^
[262/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/QuickSorter/QuickSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/MediansHelper.hpp:77:33: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int medianIndexesSize = medianIndexes.size();
                                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorter.hpp:25:13: warning: variable 'partitionIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int partitionIndex = partitionAndGetPartitionIndex(valuesToSort, lowIndex, highIndex, m_pivotType);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorter.hpp:25:17: note: FIX-IT applied suggested code changes
            int partitionIndex = partitionAndGetPartitionIndex(valuesToSort, lowIndex, highIndex, m_pivotType);
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorter.hpp:33:9: warning: variable 'iHigh' of type 'int' can be declared 'const' [misc-const-correctness]
        int iHigh(highIndex);
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorter.hpp:33:13: note: FIX-IT applied suggested code changes
        int iHigh(highIndex);
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorter.hpp:35:13: warning: variable 'partitionIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int partitionIndex = partitionAndGetPartitionIndex(valuesToSort, iLow, iHigh, m_pivotType);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/QuickSorter/QuickSorter.hpp:35:17: note: FIX-IT applied suggested code changes
            int partitionIndex = partitionAndGetPartitionIndex(valuesToSort, iLow, iHigh, m_pivotType);
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:47:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'QuickSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter(PivotType::LowestIndex);
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:47:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter(PivotType::LowestIndex);
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:52:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'QuickSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter(PivotType::LowestIndex);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter(PivotType::LowestIndex);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:57:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'QuickSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(PivotType::LowestIndex);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(PivotType::LowestIndex);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'QuickSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter(PivotType::LowestIndex);
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter(PivotType::LowestIndex);
                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:68:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::LowestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:68:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::LowestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:73:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::HighestIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:73:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::HighestIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:78:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::RandomIndex);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:78:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::RandomIndex);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:83:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'QuickSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(PivotType::MedianOfMedians);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\QuickSorter\QuickSorter_unit.cpp:83:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(PivotType::MedianOfMedians);
                     ^
[263/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/RadixSorter/LeastSignificantDigitSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/LeastSignificantDigitSorter.hpp:54:9: warning: variable 'newIndexesSize' of type 'int' can be declared 'const' [misc-const-correctness]
        int newIndexesSize = newIndexes.size();
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/LeastSignificantDigitSorter.hpp:54:13: note: FIX-IT applied suggested code changes
        int newIndexesSize = newIndexes.size();
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:66:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'LeastSignificantDigitSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:66:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:71:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'LeastSignificantDigitSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:71:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:76:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'LeastSignificantDigitSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:76:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:81:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'LeastSignificantDigitSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:81:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:87:5: warning: variable 'sorter' of type 'SmallIntegerSorter' (aka 'LeastSignificantDigitSorter<vector<int>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    SmallIntegerSorter sorter(getNumberOfNibblesForInteger, getNibbleAtForSmallInteger);
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:87:24: note: FIX-IT applied suggested code changes
    SmallIntegerSorter sorter(getNumberOfNibblesForInteger, getNibbleAtForSmallInteger);
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:93:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'LeastSignificantDigitSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getNumberOfCharactersForStrings, getCharacterAtForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:93:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getNumberOfCharactersForStrings, getCharacterAtForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:98:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'LeastSignificantDigitSorter<vector<StabilityCheckObject>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter(getNumberOfNibblesForStabilityCheckObject, getNibbleAtForStabilityCheckObject);
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:98:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter(getNumberOfNibblesForStabilityCheckObject, getNibbleAtForStabilityCheckObject);
                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:103:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'LeastSignificantDigitSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getNumberOfCharactersForStrings, getCharacterAtForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:103:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getNumberOfCharactersForStrings, getCharacterAtForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:109:5: warning: variable 'expectedStrings' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedStrings{"patrick",   "sandy",     "larry",     "pearl",   "plankton",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:109:13: note: FIX-IT applied suggested code changes
    Strings expectedStrings{"patrick",   "sandy",     "larry",     "pearl",   "plankton",
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:115:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'LeastSignificantDigitSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getNumberOfCharactersForStrings, getCharacterAtForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:115:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getNumberOfCharactersForStrings, getCharacterAtForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:121:5: warning: variable 'expectedStrings' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedStrings{"sandy",     "pearl",    "larry",   "mr. crabs", "squidward",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:121:13: note: FIX-IT applied suggested code changes
    Strings expectedStrings{"sandy",     "pearl",    "larry",   "mr. crabs", "squidward",
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:127:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'LeastSignificantDigitSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getNumberOfCharactersForStrings, getCharacterAtForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:127:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getNumberOfCharactersForStrings, getCharacterAtForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:133:5: warning: variable 'expectedStrings' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedStrings{"spongebob", "patrick", "mr. crabs", "squidward", "sandy",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\LeastSignificantDigitSorter_unit.cpp:133:13: note: FIX-IT applied suggested code changes
    Strings expectedStrings{"spongebob", "patrick", "mr. crabs", "squidward", "sandy",
            ^
[264/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/RadixSorter/MostSignificantDigitSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/MostSignificantDigitSorter.hpp:79:9: warning: variable 'limit' of type 'int' can be declared 'const' [misc-const-correctness]
        int limit(std::min(highContainerIndex + 1, static_cast<int>(valuesToSort.size())));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/MostSignificantDigitSorter.hpp:79:13: note: FIX-IT applied suggested code changes
        int limit(std::min(highContainerIndex + 1, static_cast<int>(valuesToSort.size())));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/MostSignificantDigitSorter.hpp:97:9: warning: variable 'limit' of type 'int' can be declared 'const' [misc-const-correctness]
        int limit(std::min(highContainerIndex + 1, static_cast<int>(valuesToSort.size())));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/MostSignificantDigitSorter.hpp:97:13: note: FIX-IT applied suggested code changes
        int limit(std::min(highContainerIndex + 1, static_cast<int>(valuesToSort.size())));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/MostSignificantDigitSorter.hpp:105:13: warning: variable 'replaceIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int replaceIndex = lowContainerIndex + newIndexes[m_getDigitAtFunction(copiedValue, digitIndex) + 1]++;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/MostSignificantDigitSorter.hpp:105:17: note: FIX-IT applied suggested code changes
            int replaceIndex = lowContainerIndex + newIndexes[m_getDigitAtFunction(copiedValue, digitIndex) + 1]++;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/MostSignificantDigitSorter.hpp:114:13: warning: variable 'newLowContainerIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int newLowContainerIndex(lowContainerIndex + newIndexes[i]);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/MostSignificantDigitSorter.hpp:114:17: note: FIX-IT applied suggested code changes
            int newLowContainerIndex(lowContainerIndex + newIndexes[i]);
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/MostSignificantDigitSorter.hpp:115:13: warning: variable 'newHighContainerIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int newHighContainerIndex(lowContainerIndex + newIndexes[i + 1] - 1);
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/MostSignificantDigitSorter.hpp:115:17: note: FIX-IT applied suggested code changes
            int newHighContainerIndex(lowContainerIndex + newIndexes[i + 1] - 1);
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:67:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MostSignificantDigitSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitInvalidForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:67:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitInvalidForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:72:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MostSignificantDigitSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitInvalidForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:72:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitInvalidForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:77:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MostSignificantDigitSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitInvalidForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:77:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitInvalidForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:82:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'MostSignificantDigitSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitInvalidForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:82:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitInvalidForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:88:5: warning: variable 'sorter' of type 'SmallIntegerSorter' (aka 'MostSignificantDigitSorter<vector<int>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    SmallIntegerSorter sorter(getNibbleAtForSmallInteger, isNibbleDigitInvalidForSmallInteger);
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:88:24: note: FIX-IT applied suggested code changes
    SmallIntegerSorter sorter(getNibbleAtForSmallInteger, isNibbleDigitInvalidForSmallInteger);
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:94:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'MostSignificantDigitSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getCharacterAtForString, isDigitInvalidForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:94:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getCharacterAtForString, isDigitInvalidForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:99:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'MostSignificantDigitSorter<vector<StabilityCheckObject>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter(getNibbleAtForStabilityCheckObject, isNibbleDigitInvalidForStabilityCheckObject);
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:99:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter(getNibbleAtForStabilityCheckObject, isNibbleDigitInvalidForStabilityCheckObject);
                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:104:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'MostSignificantDigitSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getCharacterAtForString, isDigitInvalidForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:104:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getCharacterAtForString, isDigitInvalidForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:110:5: warning: variable 'expectedStrings' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedStrings{"spongebob", "patrick", "sandy", "squidward", "mr. crabs",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:110:13: note: FIX-IT applied suggested code changes
    Strings expectedStrings{"spongebob", "patrick", "sandy", "squidward", "mr. crabs",
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:116:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'MostSignificantDigitSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getCharacterAtForString, isDigitInvalidForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:116:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getCharacterAtForString, isDigitInvalidForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:122:5: warning: variable 'expectedStrings' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedStrings{"spongebob", "patrick", "sandy", "mr. crabs", "squidward",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:122:13: note: FIX-IT applied suggested code changes
    Strings expectedStrings{"spongebob", "patrick", "sandy", "mr. crabs", "squidward",
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:128:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'MostSignificantDigitSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getCharacterAtForString, isDigitInvalidForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:128:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getCharacterAtForString, isDigitInvalidForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:134:5: warning: variable 'expectedStrings' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedStrings{"spongebob", "patrick", "mr. crabs", "squidward", "sandy",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\MostSignificantDigitSorter_unit.cpp:134:13: note: FIX-IT applied suggested code changes
    Strings expectedStrings{"spongebob", "patrick", "mr. crabs", "squidward", "sandy",
            ^
[265/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/RadixSorter/RadixSorterUsingCountingSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/RadixSorterUsingCountingSorter.hpp:24:9: warning: variable 'numberOfDigits' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfDigits(m_getNumberOfDigitsFunction(valuesToSort));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/RadixSorterUsingCountingSorter.hpp:24:13: note: FIX-IT applied suggested code changes
        int numberOfDigits(m_getNumberOfDigitsFunction(valuesToSort));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/RadixSorterUsingCountingSorter.hpp:28:13: warning: variable 'countingSorter' of type 'CountingSorterUsingNewPositions<vector<char, allocator<char>>, 16>' can be declared 'const' [misc-const-correctness]
            CountingSorterUsingNewPositions<Values, MAX_NUMBER_OF_DIGIT_VALUES> countingSorter(getDigitFunction);
            ^
                                                                                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/RadixSorterUsingCountingSorter.hpp:28:81: note: FIX-IT applied suggested code changes
            CountingSorterUsingNewPositions<Values, MAX_NUMBER_OF_DIGIT_VALUES> countingSorter(getDigitFunction);
                                                                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:38:9: warning: variable 'mostSignificantDigitIndex' of type 'int' can be declared 'const' [misc-const-correctness]
        int mostSignificantDigitIndex = s_maxNumberOfCharacters - leastSignificantDigitIndex - 1;
        ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:38:13: note: FIX-IT applied suggested code changes
        int mostSignificantDigitIndex = s_maxNumberOfCharacters - leastSignificantDigitIndex - 1;
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:68:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'RadixSorterUsingCountingSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:68:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:73:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'RadixSorterUsingCountingSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:73:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:78:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'RadixSorterUsingCountingSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:78:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:83:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'RadixSorterUsingCountingSorter<vector<char>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:83:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNumberOfNibblesForCharacter, getNibbleAtForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:89:5: warning: variable 'sorter' of type 'SmallIntegerSorter' (aka 'RadixSorterUsingCountingSorter<vector<int>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    SmallIntegerSorter sorter(getNumberOfNibblesForInteger, getNibbleAtForSmallInteger);
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:89:24: note: FIX-IT applied suggested code changes
    SmallIntegerSorter sorter(getNumberOfNibblesForInteger, getNibbleAtForSmallInteger);
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:95:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'RadixSorterUsingCountingSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>, MAX_NUMBER_OF_CHARACTERS>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getNumberOfCharactersForStrings, getCharacterAtForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:95:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getNumberOfCharactersForStrings, getCharacterAtForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:100:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'RadixSorterUsingCountingSorter<vector<StabilityCheckObject>, MAX_NUMBER_OF_NIBBLES>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter(getNumberOfNibblesForStabilityCheckObject, getNibbleAtForStabilityCheckObject);
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingCountingSorter_unit.cpp:100:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter(getNumberOfNibblesForStabilityCheckObject, getNibbleAtForStabilityCheckObject);
                                ^
[266/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/RadixSorter/RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/RadixSorterUsingQuickSortWith3WayPartitioning.hpp:45:9: warning: variable 'shouldEqualPartProceed' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool shouldEqualPartProceed(m_isDigitValidFunction(partitionValue, digitIndex));
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/RadixSorter/RadixSorterUsingQuickSortWith3WayPartitioning.hpp:45:14: note: FIX-IT applied suggested code changes
        bool shouldEqualPartProceed(m_isDigitValidFunction(partitionValue, digitIndex));
             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:65:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'RadixSorterUsingQuickSortWith3WayPartitioning<vector<char>, int>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitValidForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:65:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitValidForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:70:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'RadixSorterUsingQuickSortWith3WayPartitioning<vector<char>, int>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitValidForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:70:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitValidForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:75:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'RadixSorterUsingQuickSortWith3WayPartitioning<vector<char>, int>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitValidForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:75:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitValidForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:80:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'RadixSorterUsingQuickSortWith3WayPartitioning<vector<char>, int>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitValidForCharacter);
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:80:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter(getNibbleAtForCharacter, isNibbleDigitValidForCharacter);
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:86:5: warning: variable 'sorter' of type 'SmallIntegerSorter' (aka 'RadixSorterUsingQuickSortWith3WayPartitioning<vector<int>, int>') can be declared 'const' [misc-const-correctness]
    SmallIntegerSorter sorter(getNibbleAtForSmallInteger, isNibbleDigitValidForSmallInteger);
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:86:24: note: FIX-IT applied suggested code changes
    SmallIntegerSorter sorter(getNibbleAtForSmallInteger, isNibbleDigitValidForSmallInteger);
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:92:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'RadixSorterUsingQuickSortWith3WayPartitioning<vector<basic_string<char, char_traits<char>, allocator<char>>>, char>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getCharacterAtForString, isDigitValidForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:92:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getCharacterAtForString, isDigitValidForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:97:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'RadixSorterUsingQuickSortWith3WayPartitioning<vector<StabilityCheckObject>, int>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter(getNibbleAtForStabilityCheckObject, isNibbleDigitValidForStabilityCheckObject);
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:97:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter(getNibbleAtForStabilityCheckObject, isNibbleDigitValidForStabilityCheckObject);
                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:105:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'RadixSorterUsingQuickSortWith3WayPartitioning<vector<basic_string<char, char_traits<char>, allocator<char>>>, char>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getCharacterAtForString, isDigitValidForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:105:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getCharacterAtForString, isDigitValidForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:111:5: warning: variable 'expectedStrings' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedStrings{"spongebob", "patrick", "sandy", "squidward", "mr. crabs",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:111:13: note: FIX-IT applied suggested code changes
    Strings expectedStrings{"spongebob", "patrick", "sandy", "squidward", "mr. crabs",
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:119:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'RadixSorterUsingQuickSortWith3WayPartitioning<vector<basic_string<char, char_traits<char>, allocator<char>>>, char>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getCharacterAtForString, isDigitValidForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:119:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getCharacterAtForString, isDigitValidForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:125:5: warning: variable 'expectedStrings' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedStrings{"spongebob", "patrick", "sandy", "mr. crabs", "squidward",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:125:13: note: FIX-IT applied suggested code changes
    Strings expectedStrings{"spongebob", "patrick", "sandy", "mr. crabs", "squidward",
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:133:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'RadixSorterUsingQuickSortWith3WayPartitioning<vector<basic_string<char, char_traits<char>, allocator<char>>>, char>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter(getCharacterAtForString, isDigitValidForString);
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:133:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter(getCharacterAtForString, isDigitValidForString);
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:139:5: warning: variable 'expectedStrings' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedStrings{"spongebob", "patrick", "mr. crabs", "squidward", "sandy",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\RadixSorter\RadixSorterUsingQuickSortWith3WayPartitioning_unit.cpp:139:13: note: FIX-IT applied suggested code changes
    Strings expectedStrings{"spongebob", "patrick", "mr. crabs", "squidward", "sandy",
            ^
[267/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/SelectionSorter/SelectionSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'SelectionSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'SelectionSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'SelectionSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:45:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'SelectionSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:45:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:50:5: warning: variable 'sorter' of type 'ListOfCharactersSorter' (aka 'SelectionSorter<list<char>>') can be declared 'const' [misc-const-correctness]
    ListOfCharactersSorter sorter;
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:50:28: note: FIX-IT applied suggested code changes
    ListOfCharactersSorter sorter;
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:55:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'SelectionSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:55:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:60:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'SelectionSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:60:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:65:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'SelectionSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:65:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:70:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'SelectionSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SelectionSorter\SelectionSorter_unit.cpp:70:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[268/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/ShellSorter/ShellSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:26:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'ShellSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:26:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:31:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'ShellSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:36:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'ShellSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:36:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:41:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'ShellSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:41:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:47:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'ShellSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:47:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:52:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'ShellSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:52:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:57:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'ShellSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:57:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:62:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'ShellSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\ShellSorter\ShellSorter_unit.cpp:62:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[269/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/SpecialSorters/BitonicSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/SpecialSorters/BitonicSorter.hpp:18:21: warning: variable 'l' of type 'unsigned int' can be declared 'const' [misc-const-correctness]
                    unsigned int l = i ^ j;
                    ^
                                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/SpecialSorters/BitonicSorter.hpp:18:34: note: FIX-IT applied suggested code changes
                    unsigned int l = i ^ j;
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:28:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BitonicSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:28:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:37:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BitonicSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:37:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:42:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'E'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:42:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'E'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:47:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BitonicSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:47:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:52:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'A', 'E', 'M', 'O', 'R', 'S', 'T', 'X', 'P', 'L', 'E'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:52:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'A', 'E', 'M', 'O', 'R', 'S', 'T', 'X', 'P', 'L', 'E'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:57:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'BitonicSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:57:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:62:5: warning: variable 'valuesToExpect' of type 'Characters' (aka 'vector<char>') can be declared 'const' [misc-const-correctness]
    Characters valuesToExpect{'A', 'A', 'C', 'C', 'D', 'E', 'E', 'I', 'L', 'M', 'M', 'O', 'P', 'P', 'T', 'X', 'L', 'E'};
    ^
               const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:62:16: note: FIX-IT applied suggested code changes
    Characters valuesToExpect{'A', 'A', 'C', 'C', 'D', 'E', 'E', 'I', 'L', 'M', 'M', 'O', 'P', 'P', 'T', 'X', 'L', 'E'};
               ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:69:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'BitonicSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:69:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:74:5: warning: variable 'valuesToExpect' of type 'Integers' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Integers valuesToExpect{-10, -5, -3, -1, 0, 5, 8, 10};
    ^
             const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:74:14: note: FIX-IT applied suggested code changes
    Integers valuesToExpect{-10, -5, -3, -1, 0, 5, 8, 10};
             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:79:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'BitonicSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:79:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:84:5: warning: variable 'valuesToExpect' of type 'Doubles' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    Doubles valuesToExpect{0.1234, 0.565, 0.656, 0.897, 0.665, 0.3434};
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:84:13: note: FIX-IT applied suggested code changes
    Doubles valuesToExpect{0.1234, 0.565, 0.656, 0.897, 0.665, 0.3434};
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:89:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'BitonicSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:89:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:95:5: warning: variable 'valuesToExpect' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings valuesToExpect{"larry", "mr. crabs", "ms. puff",  "patrick", "pearl",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:95:13: note: FIX-IT applied suggested code changes
    Strings valuesToExpect{"larry", "mr. crabs", "ms. puff",  "patrick", "pearl",
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:101:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'BitonicSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:101:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:107:5: warning: variable 'valuesToExpect' of type 'StabilityCheckObjects' (aka 'vector<StabilityCheckObject>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjects valuesToExpect{{'A', 1}, {'A', 2}, {'A', 3}, {'B', 1}, {'C', 1}, {'D', 1}, {'E', 1},
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:107:27: note: FIX-IT applied suggested code changes
    StabilityCheckObjects valuesToExpect{{'A', 1}, {'A', 2}, {'A', 3}, {'B', 1}, {'C', 1}, {'D', 1}, {'E', 1},
                          ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:109:5: warning: variable 'isSortedButNotStable' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isSortedButNotStable = std::equal(
    ^
         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\BitonicSorter_unit.cpp:109:10: note: FIX-IT applied suggested code changes
    bool isSortedButNotStable = std::equal(
         ^
[270/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/SpecialSorters/PancakeSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PancakeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PancakeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PancakeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:45:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'PancakeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:45:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:50:5: warning: variable 'sorter' of type 'ListOfCharactersSorter' (aka 'PancakeSorter<list<char>>') can be declared 'const' [misc-const-correctness]
    ListOfCharactersSorter sorter;
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:50:28: note: FIX-IT applied suggested code changes
    ListOfCharactersSorter sorter;
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:55:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'PancakeSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:55:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:60:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'PancakeSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:60:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:65:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'PancakeSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:65:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:70:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'PancakeSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\SpecialSorters\PancakeSorter_unit.cpp:70:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[271/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/TreeSorter/TreeSorter_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/BaseSorter.hpp:6:7: warning: class 'BaseSorter' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSorter {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/TreeSorter/TreeSorter.hpp:16:9: warning: variable 'tree' of type 'std::multiset<Value>' (aka 'multiset<char>') can be declared 'const' [misc-const-correctness]
        std::multiset<Value> tree(valuesToSort.cbegin(), valuesToSort.cend());
        ^
                             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Sort/TreeSorter/TreeSorter.hpp:16:30: note: FIX-IT applied suggested code changes
        std::multiset<Value> tree(valuesToSort.cbegin(), valuesToSort.cend());
                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'TreeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'TreeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'TreeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:45:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'TreeSorter<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:45:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:50:5: warning: variable 'sorter' of type 'ListOfCharactersSorter' (aka 'TreeSorter<list<char>>') can be declared 'const' [misc-const-correctness]
    ListOfCharactersSorter sorter;
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:50:28: note: FIX-IT applied suggested code changes
    ListOfCharactersSorter sorter;
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:55:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'TreeSorter<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:55:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:60:5: warning: variable 'sorter' of type 'DoublesSorter' (aka 'TreeSorter<vector<double>>') can be declared 'const' [misc-const-correctness]
    DoublesSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:60:19: note: FIX-IT applied suggested code changes
    DoublesSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:65:5: warning: variable 'sorter' of type 'StringsSorter' (aka 'TreeSorter<vector<basic_string<char, char_traits<char>, allocator<char>>>>') can be declared 'const' [misc-const-correctness]
    StringsSorter sorter;
    ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:65:19: note: FIX-IT applied suggested code changes
    StringsSorter sorter;
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:70:5: warning: variable 'sorter' of type 'StabilityCheckObjectsSorter' (aka 'TreeSorter<vector<StabilityCheckObject>>') can be declared 'const' [misc-const-correctness]
    StabilityCheckObjectsSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Sort\TreeSorter\TreeSorter_unit.cpp:70:33: note: FIX-IT applied suggested code changes
    StabilityCheckObjectsSorter sorter;
                                ^
[272/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Sort/Utilities/StabilityCheckObject.cpp.obj
[273/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Stack/DoublingSizeStack_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/BaseStack.hpp:6:7: warning: class 'BaseStack' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStack {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/DoublingSizeStack.hpp:11:7: warning: class 'DoublingSizeStack' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class DoublingSizeStack : public BaseStack<Object> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Stack/Utilities/CommonTestsWithStack.hpp:70:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(stack.pop(), "Assertion failed!");
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Stack\DoublingSizeStack_unit.cpp:23:5: warning: variable 'stack1' of type 'StackForTest' (aka 'DoublingSizeStack<int>') can be declared 'const' [misc-const-correctness]
    StackForTest stack1;
    ^
                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Stack\DoublingSizeStack_unit.cpp:23:18: note: FIX-IT applied suggested code changes
    StackForTest stack1;
                 ^
[274/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Stack/FixedSizeStack_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/BaseStack.hpp:6:7: warning: class 'BaseStack' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStack {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Stack/Utilities/CommonTestsWithStack.hpp:70:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(stack.pop(), "Assertion failed!");
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\Stack\FixedSizeStack_unit.cpp:35:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(stack.push(100), "Assertion failed!");
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
[275/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Stack/LinkedListStack_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/BaseStack.hpp:6:7: warning: class 'BaseStack' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStack {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Stack/Utilities/CommonTestsWithStack.hpp:70:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(stack.pop(), "Assertion failed!");
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
[276/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/Stack/StackUsingTwoQueues_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Queue/BaseQueue.hpp:6:7: warning: class 'BaseQueue' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseQueue {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Queue/DoublingSizeCircularQueue.hpp:12:7: warning: class 'DoublingSizeCircularQueue' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class DoublingSizeCircularQueue : public BaseQueue<Object> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/BaseStack.hpp:6:7: warning: class 'BaseStack' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStack {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/StackUsingTwoQueues.hpp:40:9: warning: variable 'targetSizeAtTop' of type 'int' can be declared 'const' [misc-const-correctness]
        int targetSizeAtTop = getTargetSizeAtTop(getSize());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/StackUsingTwoQueues.hpp:40:13: note: FIX-IT applied suggested code changes
        int targetSizeAtTop = getTargetSizeAtTop(getSize());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/StackUsingTwoQueues.hpp:41:9: warning: variable 'limitSizeAtTop' of type 'int' can be declared 'const' [misc-const-correctness]
        int limitSizeAtTop = targetSizeAtTop * 2;
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/StackUsingTwoQueues.hpp:41:13: note: FIX-IT applied suggested code changes
        int limitSizeAtTop = targetSizeAtTop * 2;
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/StackUsingTwoQueues.hpp:55:13: warning: variable 'targetSizeAtTop' of type 'int' can be declared 'const' [misc-const-correctness]
            int targetSizeAtTop = getTargetSizeAtTop(m_queueAtTheBottom.getSize());
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Stack/StackUsingTwoQueues.hpp:55:17: note: FIX-IT applied suggested code changes
            int targetSizeAtTop = getTargetSizeAtTop(m_queueAtTheBottom.getSize());
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Stack/Utilities/CommonTestsWithStack.hpp:70:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(stack.pop(), "Assertion failed!");
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
[277/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/Alphabet/Alphabets_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Alphabet/Alphabet.hpp:18:9: warning: variable 'indexOfCharacter' of type 'int' can be declared 'const' [misc-const-correctness]
        int indexOfCharacter = m_characters.find_first_of(c);
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Alphabet/Alphabet.hpp:18:13: note: FIX-IT applied suggested code changes
        int indexOfCharacter = m_characters.find_first_of(c);
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Alphabet\Alphabets_unit.cpp:58:5: warning: variable 'values' of type 'AlphabetForTest::DigitValues' (aka 'vector<unsigned char>') can be declared 'const' [misc-const-correctness]
    AlphabetForTest::DigitValues values{1, 1, 0, 0, 5, 3, 3, 0, 4};
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Alphabet\Alphabets_unit.cpp:58:34: note: FIX-IT applied suggested code changes
    AlphabetForTest::DigitValues values{1, 1, 0, 0, 5, 3, 3, 0, 4};
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Alphabet\Alphabets_unit.cpp:64:5: warning: variable 'values' of type 'AlphabetForTest::DigitValues' (aka 'vector<unsigned char>') can be declared 'const' [misc-const-correctness]
    AlphabetForTest::DigitValues values{1, 1, 0, 5, 3, 4};
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Alphabet\Alphabets_unit.cpp:64:34: note: FIX-IT applied suggested code changes
    AlphabetForTest::DigitValues values{1, 1, 0, 5, 3, 4};
                                 ^
[278/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/Alphabet/GenomicExample_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Alphabet\GenomicExample_unit.cpp:24:9: warning: variable 'valueBitset' of type 'bitset<2>' can be declared 'const' [misc-const-correctness]
        bitset<2> valueBitset(dnaAlphabet.getDigitValue(reader.readCharData()));
        ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Alphabet\GenomicExample_unit.cpp:24:19: note: FIX-IT applied suggested code changes
        bitset<2> valueBitset(dnaAlphabet.getDigitValue(reader.readCharData()));
                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Alphabet\GenomicExample_unit.cpp:43:9: warning: variable 'valueBitset' of type 'bitset<2>' can be declared 'const' [misc-const-correctness]
        bitset<2> valueBitset(reader.readBitsetData<2>(0, 1));
        ^
                  const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Alphabet\GenomicExample_unit.cpp:43:19: note: FIX-IT applied suggested code changes
        bitset<2> valueBitset(reader.readBitsetData<2>(0, 1));
                  ^
[279/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/Alphabet/KnownAlphabets_unit.cpp.obj
[280/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/RegularExpression/RegularExpressionPatternMatching_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/DirectedGraph/BaseDirectedGraph.hpp:8:7: warning: class 'BaseDirectedGraph' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseDirectedGraph : public BaseGraph<Vertex> {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/Graph/PathSearch/Common/BasePathSearchWithBfsAndDfs.hpp:9:7: warning: class 'BasePathSearchWithBfsAndDfs' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BasePathSearchWithBfsAndDfs {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/RegularExpression/RegularExpressionPatternMatching.hpp:30:21: warning: variable 'charInRE' of type 'char' can be declared 'const' [misc-const-correctness]
                    char charInRE(m_regularExpression[nullTransitionState]);
                    ^
                         const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/RegularExpression/RegularExpressionPatternMatching.hpp:30:26: note: FIX-IT applied suggested code changes
                    char charInRE(m_regularExpression[nullTransitionState]);
                         ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/RegularExpression/RegularExpressionPatternMatching.hpp:58:9: warning: variable 'nullTransitionPathSearch' of type 'PathSearchUsingDfs<int>' can be declared 'const' [misc-const-correctness]
        PathSearchUsingDfs<Index> nullTransitionPathSearch(m_nullTransitionsGraph, statesFromAMatch);
        ^
                                  const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/RegularExpression/RegularExpressionPatternMatching.hpp:58:35: note: FIX-IT applied suggested code changes
        PathSearchUsingDfs<Index> nullTransitionPathSearch(m_nullTransitionsGraph, statesFromAMatch);
                                  ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\RegularExpression\RegularExpressionPatternMatching_unit.cpp:15:5: warning: variable 'patternMatching' of type 'PatternMatchingToTest' (aka 'RegularExpressionPatternMatching<int>') can be declared 'const' [misc-const-correctness]
    PatternMatchingToTest patternMatching("((A*B|AC)D)");
    ^
                          const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\RegularExpression\RegularExpressionPatternMatching_unit.cpp:15:27: note: FIX-IT applied suggested code changes
    PatternMatchingToTest patternMatching("((A*B|AC)D)");
                          ^
[281/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/SubstringSearch/AhoCorasickMultipleSubstringsSearch_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:17:5: warning: variable 'emptyString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string emptyString;
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:17:12: note: FIX-IT applied suggested code changes
    string emptyString;
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:18:5: warning: variable 'nonEmptyString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string nonEmptyString("NonEmptyString");
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:18:12: note: FIX-IT applied suggested code changes
    string nonEmptyString("NonEmptyString");
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:19:5: warning: variable 'queries' of type 'SubstringSearchForTest::Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest::Strings queries{emptyString, nonEmptyString};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:19:37: note: FIX-IT applied suggested code changes
    SubstringSearchForTest::Strings queries{emptyString, nonEmptyString};
                                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:22:5: warning: variable 'expectedResult1' of type 'SubstringSearchForTest::SearchResult' (aka 'map<basic_string<char, char_traits<char>, allocator<char>>, vector<int>>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest::SearchResult expectedResult1;
    ^
                                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:22:42: note: FIX-IT applied suggested code changes
    SubstringSearchForTest::SearchResult expectedResult1;
                                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:23:5: warning: variable 'expectedResult2' of type 'SubstringSearchForTest::SearchResult' (aka 'map<basic_string<char, char_traits<char>, allocator<char>>, vector<int>>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest::SearchResult expectedResult2{{"NonEmptyString", {0}}};
    ^
                                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:23:42: note: FIX-IT applied suggested code changes
    SubstringSearchForTest::SearchResult expectedResult2{{"NonEmptyString", {0}}};
                                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:29:5: warning: variable 'queries' of type 'SubstringSearchForTest::Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest::Strings queries{"AACAA", "BBB"};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:29:37: note: FIX-IT applied suggested code changes
    SubstringSearchForTest::Strings queries{"AACAA", "BBB"};
                                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:31:5: warning: variable 'searchSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string searchSpace("AABRAACADABRAACAADABRA");
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:31:12: note: FIX-IT applied suggested code changes
    string searchSpace("AABRAACADABRAACAADABRA");
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:33:5: warning: variable 'expectedResult' of type 'SubstringSearchForTest::SearchResult' (aka 'map<basic_string<char, char_traits<char>, allocator<char>>, vector<int>>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest::SearchResult expectedResult{{"AACAA", {12}}};
    ^
                                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:33:42: note: FIX-IT applied suggested code changes
    SubstringSearchForTest::SearchResult expectedResult{{"AACAA", {12}}};
                                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:38:5: warning: variable 'queries' of type 'SubstringSearchForTest::Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest::Strings queries{"blue", "red"};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:38:37: note: FIX-IT applied suggested code changes
    SubstringSearchForTest::Strings queries{"blue", "red"};
                                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:40:5: warning: variable 'searchSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string searchSpace("Mr. Blue has a blue house");
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:40:12: note: FIX-IT applied suggested code changes
    string searchSpace("Mr. Blue has a blue house");
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:42:5: warning: variable 'expectedResult' of type 'SubstringSearchForTest::SearchResult' (aka 'map<basic_string<char, char_traits<char>, allocator<char>>, vector<int>>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest::SearchResult expectedResult{{"blue", {15}}};
    ^
                                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:42:42: note: FIX-IT applied suggested code changes
    SubstringSearchForTest::SearchResult expectedResult{{"blue", {15}}};
                                         ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:47:5: warning: variable 'queries' of type 'SubstringSearchForTest::Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest::Strings queries{"lets", "Dance", "Too", "his", "Song", "T"};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:47:37: note: FIX-IT applied suggested code changes
    SubstringSearchForTest::Strings queries{"lets", "Dance", "Too", "his", "Song", "T"};
                                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:49:5: warning: variable 'searchSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string searchSpace("LetsDanceToThisSong");
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:49:12: note: FIX-IT applied suggested code changes
    string searchSpace("LetsDanceToThisSong");
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:51:5: warning: variable 'expectedResult' of type 'SubstringSearchForTest::SearchResult' (aka 'map<basic_string<char, char_traits<char>, allocator<char>>, vector<int>>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest::SearchResult expectedResult{{"Dance", {4}}, {"Song", {15}}, {"T", {9, 11}}, {"his", {12}}};
    ^
                                         const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\AhoCorasickMultipleSubstringsSearch_unit.cpp:51:42: note: FIX-IT applied suggested code changes
    SubstringSearchForTest::SearchResult expectedResult{{"Dance", {4}}, {"Song", {15}}, {"T", {9, 11}}, {"his", {12}}};
                                         ^
[282/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/SubstringSearch/BoyerMooreSubstringSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/SubstringSearch/Utilities/CommonTestsWithSubstringSearch.hpp:13:5: warning: variable 'emptyString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string emptyString;
    ^
           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/SubstringSearch/Utilities/CommonTestsWithSubstringSearch.hpp:13:12: note: FIX-IT applied suggested code changes
    string emptyString;
           ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/SubstringSearch/Utilities/CommonTestsWithSubstringSearch.hpp:14:5: warning: variable 'nonEmptyString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string nonEmptyString("NonEmptyString");
    ^
           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/SubstringSearch/Utilities/CommonTestsWithSubstringSearch.hpp:14:12: note: FIX-IT applied suggested code changes
    string nonEmptyString("NonEmptyString");
           ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/SubstringSearch/Utilities/CommonTestsWithSubstringSearch.hpp:28:5: warning: variable 'searchSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string searchSpace("AABRAACADABRAACAADABRA");
    ^
           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/SubstringSearch/Utilities/CommonTestsWithSubstringSearch.hpp:28:12: note: FIX-IT applied suggested code changes
    string searchSpace("AABRAACADABRAACAADABRA");
           ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/SubstringSearch/Utilities/CommonTestsWithSubstringSearch.hpp:38:5: warning: variable 'searchSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string searchSpace("Mr. Blue has a blue house");
    ^
           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/SubstringSearch/Utilities/CommonTestsWithSubstringSearch.hpp:38:12: note: FIX-IT applied suggested code changes
    string searchSpace("Mr. Blue has a blue house");
           ^
[283/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/SubstringSearch/BruteForceSubstringSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:22:9: warning: variable 'searchSpaceLength' of type 'int' can be declared 'const' [misc-const-correctness]
        int searchSpaceLength(searchSpace.length());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:22:13: note: FIX-IT applied suggested code changes
        int searchSpaceLength(searchSpace.length());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:22:31: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int searchSpaceLength(searchSpace.length());
                              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:23:9: warning: variable 'queryLength' of type 'int' can be declared 'const' [misc-const-correctness]
        int queryLength(query.length());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:23:13: note: FIX-IT applied suggested code changes
        int queryLength(query.length());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:23:25: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int queryLength(query.length());
                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:43:9: warning: variable 'searchSpaceLength' of type 'int' can be declared 'const' [misc-const-correctness]
        int searchSpaceLength(searchSpace.length());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:43:13: note: FIX-IT applied suggested code changes
        int searchSpaceLength(searchSpace.length());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:43:31: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int searchSpaceLength(searchSpace.length());
                              ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:44:9: warning: variable 'queryLength' of type 'int' can be declared 'const' [misc-const-correctness]
        int queryLength(query.length());
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:44:13: note: FIX-IT applied suggested code changes
        int queryLength(query.length());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/BruteForceSubstringSearch.hpp:44:25: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int queryLength(query.length());
                        ^
[284/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/SubstringSearch/KnuthMorrisPrattSubstringSearch_unit.cpp.obj
[285/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/SubstringSearch/RabinKarpSubstringSearchWithRunningHash_unit.cpp.obj
[286/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/SubstringSearch/RabinKarpSubstringSearchWithSubstringHash_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/RabinKarpSubstringSearchWithSubstringHash.hpp:23:13: warning: variable 'hashFunction' of type 'HornerHashFunctionForSubstrings<unsigned long long>' can be declared 'const' [misc-const-correctness]
            HornerHashFunctionForSubstrings<HashValue> hashFunction(RADIX, A_LARGE_PRIME, searchSpace);
            ^
                                                       const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/RabinKarpSubstringSearchWithSubstringHash.hpp:23:56: note: FIX-IT applied suggested code changes
            HornerHashFunctionForSubstrings<HashValue> hashFunction(RADIX, A_LARGE_PRIME, searchSpace);
                                                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\RabinKarpSubstringSearchWithSubstringHash_unit.cpp:19:5: warning: variable 'emptyString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string emptyString;
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\RabinKarpSubstringSearchWithSubstringHash_unit.cpp:19:12: note: FIX-IT applied suggested code changes
    string emptyString;
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\RabinKarpSubstringSearchWithSubstringHash_unit.cpp:20:5: warning: variable 'nonEmptyString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string nonEmptyString("NonEmptyString");
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\RabinKarpSubstringSearchWithSubstringHash_unit.cpp:20:12: note: FIX-IT applied suggested code changes
    string nonEmptyString("NonEmptyString");
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\RabinKarpSubstringSearchWithSubstringHash_unit.cpp:21:5: warning: variable 'emptyStringSearch' of type 'SubstringSearchForTest' (aka 'RabinKarpSubstringSearchWithSubstringHash<int, unsigned long long>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest emptyStringSearch(emptyString);
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\RabinKarpSubstringSearchWithSubstringHash_unit.cpp:21:28: note: FIX-IT applied suggested code changes
    SubstringSearchForTest emptyStringSearch(emptyString);
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\RabinKarpSubstringSearchWithSubstringHash_unit.cpp:22:5: warning: variable 'nonEmptyStringSearch' of type 'SubstringSearchForTest' (aka 'RabinKarpSubstringSearchWithSubstringHash<int, unsigned long long>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest nonEmptyStringSearch(nonEmptyString);
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\RabinKarpSubstringSearchWithSubstringHash_unit.cpp:22:28: note: FIX-IT applied suggested code changes
    SubstringSearchForTest nonEmptyStringSearch(nonEmptyString);
                           ^
[287/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/SubstringSearch/SubstringSearchUsingZAlgorithm_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/SubstringSearchUsingZAlgorithm.hpp:19:9: warning: variable 'stringForZAlgorithm' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        std::string stringForZAlgorithm = createStringForZAlgorithm(searchSpace);
        ^
                    const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/SubstringSearchUsingZAlgorithm.hpp:19:21: note: FIX-IT applied suggested code changes
        std::string stringForZAlgorithm = createStringForZAlgorithm(searchSpace);
                    ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/SubstringSearchUsingZAlgorithm.hpp:34:9: warning: variable 'stringForZAlgorithm' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        std::string stringForZAlgorithm = createStringForZAlgorithm(searchSpace);
        ^
                    const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/SubstringSearchUsingZAlgorithm.hpp:34:21: note: FIX-IT applied suggested code changes
        std::string stringForZAlgorithm = createStringForZAlgorithm(searchSpace);
                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:19:5: warning: variable 'emptyString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string emptyString;
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:19:12: note: FIX-IT applied suggested code changes
    string emptyString;
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:20:5: warning: variable 'nonEmptyString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string nonEmptyString("NonEmptyString");
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:20:12: note: FIX-IT applied suggested code changes
    string nonEmptyString("NonEmptyString");
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:21:5: warning: variable 'emptyStringSearch' of type 'SubstringSearchForTest' (aka 'SubstringSearchUsingZAlgorithm<int, '#'>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest emptyStringSearch(emptyString);
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:21:28: note: FIX-IT applied suggested code changes
    SubstringSearchForTest emptyStringSearch(emptyString);
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:22:5: warning: variable 'nonEmptyStringSearch' of type 'SubstringSearchForTest' (aka 'SubstringSearchUsingZAlgorithm<int, '#'>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest nonEmptyStringSearch(nonEmptyString);
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:22:28: note: FIX-IT applied suggested code changes
    SubstringSearchForTest nonEmptyStringSearch(nonEmptyString);
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:39:5: warning: variable 'substringSearch' of type 'SubstringSearchForTest' (aka 'SubstringSearchUsingZAlgorithm<int, '#'>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest substringSearch("ATT");
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:39:28: note: FIX-IT applied suggested code changes
    SubstringSearchForTest substringSearch("ATT");
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:40:5: warning: variable 'searchSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string searchSpace("HATTIVATTI");
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:40:12: note: FIX-IT applied suggested code changes
    string searchSpace("HATTIVATTI");
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:46:5: warning: variable 'substringSearch' of type 'SubstringSearchForTest' (aka 'SubstringSearchUsingZAlgorithm<int, '#'>') can be declared 'const' [misc-const-correctness]
    SubstringSearchForTest substringSearch("ATT");
    ^
                           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:46:28: note: FIX-IT applied suggested code changes
    SubstringSearchForTest substringSearch("ATT");
                           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:47:5: warning: variable 'searchSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string searchSpace("HATTIVATTI");
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SubstringSearch\SubstringSearchUsingZAlgorithm_unit.cpp:47:12: note: FIX-IT applied suggested code changes
    string searchSpace("HATTIVATTI");
           ^
[288/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/SubstringSearch/SuffixTrieSubStringSearch_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/SuffixTrieSubStringSearch.hpp:23:9: warning: variable 'trie' of type 'TernarySearchSuffixTrie' can be declared 'const' [misc-const-correctness]
        TernarySearchSuffixTrie trie(searchSpace);
        ^
                                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SubstringSearch/SuffixTrieSubStringSearch.hpp:23:33: note: FIX-IT applied suggested code changes
        TernarySearchSuffixTrie trie(searchSpace);
                                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseStringSymbolTable.hpp:9:7: warning: class 'BaseStringSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStringSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseTernarySearchTrie.hpp:10:7: warning: class 'BaseTernarySearchTrie' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTernarySearchTrie : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchSuffixTrie.hpp:30:9: warning: variable 'length' of type 'int' can be declared 'const' [misc-const-correctness]
        int length = searchSpace.length();
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchSuffixTrie.hpp:30:13: note: FIX-IT applied suggested code changes
        int length = searchSpace.length();
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchSuffixTrie.hpp:30:22: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int length = searchSpace.length();
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchSuffixTrie.hpp:44:9: warning: variable 'charAtKey' of type 'char' can be declared 'const' [misc-const-correctness]
        char charAtKey(key[index]);
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchSuffixTrie.hpp:44:14: note: FIX-IT applied suggested code changes
        char charAtKey(key[index]);
             ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:130:46: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int const previousPrefixLength = previousPrefix.length();
                                             ^
[289/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/SuffixArray/KeywordInContextIndexing_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\KeywordInContextIndexing_unit.cpp:15:5: warning: variable 'searchSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string searchSpace(
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\KeywordInContextIndexing_unit.cpp:15:12: note: FIX-IT applied suggested code changes
    string searchSpace(
           ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\KeywordInContextIndexing_unit.cpp:23:5: warning: variable 'stringsToExpect' of type 'strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    strings stringsToExpect{"om it was the age of foolis", "es it was the age of wisdom"};
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\KeywordInContextIndexing_unit.cpp:23:13: note: FIX-IT applied suggested code changes
    strings stringsToExpect{"om it was the age of foolis", "es it was the age of wisdom"};
            ^
[290/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/SuffixArray/LongestRepeatedSubstring_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SuffixArray/LongestRepeatedSubstring.hpp:18:9: warning: variable 'suffixArray' of type 'SuffixArray<int>' can be declared 'const' [misc-const-correctness]
        SuffixArray<Index> suffixArray(stringToCheck);
        ^
                           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SuffixArray/LongestRepeatedSubstring.hpp:18:28: note: FIX-IT applied suggested code changes
        SuffixArray<Index> suffixArray(stringToCheck);
                           ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SuffixArray/LongestRepeatedSubstring.hpp:22:13: warning: variable 'commonPrefix' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
            std::string commonPrefix(suffixArray.getLongestCommonPrefixOfTwoSuffixes(i - 1, i));
            ^
                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/SuffixArray/LongestRepeatedSubstring.hpp:22:25: note: FIX-IT applied suggested code changes
            std::string commonPrefix(suffixArray.getLongestCommonPrefixOfTwoSuffixes(i - 1, i));
                        ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\LongestRepeatedSubstring_unit.cpp:14:5: warning: variable 'stringToTest' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string stringToTest(
    ^
           const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\LongestRepeatedSubstring_unit.cpp:14:12: note: FIX-IT applied suggested code changes
    string stringToTest(
           ^
[291/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/SuffixArray/SuffixArray_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\SuffixArray_unit.cpp:14:5: warning: variable 'suffixArray' of type 'SuffixArrayForTest' (aka 'SuffixArray<int>') can be declared 'const' [misc-const-correctness]
    SuffixArrayForTest suffixArray("LetsDanceToThisSong");
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\SuffixArray_unit.cpp:14:24: note: FIX-IT applied suggested code changes
    SuffixArrayForTest suffixArray("LetsDanceToThisSong");
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\SuffixArray_unit.cpp:20:5: warning: variable 'suffixArray' of type 'SuffixArrayForTest' (aka 'SuffixArray<int>') can be declared 'const' [misc-const-correctness]
    SuffixArrayForTest suffixArray("LetsDanceToThisSong");
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\SuffixArray_unit.cpp:20:24: note: FIX-IT applied suggested code changes
    SuffixArrayForTest suffixArray("LetsDanceToThisSong");
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\SuffixArray_unit.cpp:28:5: warning: variable 'suffixArray' of type 'SuffixArrayForTest' (aka 'SuffixArray<int>') can be declared 'const' [misc-const-correctness]
    SuffixArrayForTest suffixArray("LetsDanceToThisSong");
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\SuffixArray_unit.cpp:28:24: note: FIX-IT applied suggested code changes
    SuffixArrayForTest suffixArray("LetsDanceToThisSong");
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\SuffixArray_unit.cpp:34:5: warning: variable 'suffixArray' of type 'SuffixArrayForTest' (aka 'SuffixArray<int>') can be declared 'const' [misc-const-correctness]
    SuffixArrayForTest suffixArray("LetsDanceToThisSong");
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\SuffixArray_unit.cpp:34:24: note: FIX-IT applied suggested code changes
    SuffixArrayForTest suffixArray("LetsDanceToThisSong");
                       ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\SuffixArray_unit.cpp:49:5: warning: variable 'suffixArray' of type 'SuffixArrayForTest' (aka 'SuffixArray<int>') can be declared 'const' [misc-const-correctness]
    SuffixArrayForTest suffixArray("LetsDanceToThisSong");
    ^
                       const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\SuffixArray\SuffixArray_unit.cpp:49:24: note: FIX-IT applied suggested code changes
    SuffixArrayForTest suffixArray("LetsDanceToThisSong");
                       ^
[292/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/Tries/RWayTrieUsingLinkedArrays_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseStringSymbolTable.hpp:9:7: warning: class 'BaseStringSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStringSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingLinkedArrays.hpp:32:9: warning: variable 'longestPrefixLength' of type 'int' can be declared 'const' [misc-const-correctness]
        int longestPrefixLength(getLengthOfLongestPrefix(m_root.get(), keyToCheck, 0, 0));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingLinkedArrays.hpp:32:13: note: FIX-IT applied suggested code changes
        int longestPrefixLength(getLengthOfLongestPrefix(m_root.get(), keyToCheck, 0, 0));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingLinkedArrays.hpp:130:13: warning: variable 'prefixLength' of type 'int' can be declared 'const' [misc-const-correctness]
            int prefixLength = previousPrefix.length();
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingLinkedArrays.hpp:130:17: note: FIX-IT applied suggested code changes
            int prefixLength = previousPrefix.length();
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingLinkedArrays.hpp:130:32: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int prefixLength = previousPrefix.length();
                               ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingLinkedArrays.hpp:134:17: warning: variable 'charToMatch' of type 'char' can be declared 'const' [misc-const-correctness]
                char charToMatch = patternToMatch[prefixLength];
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingLinkedArrays.hpp:134:22: note: FIX-IT applied suggested code changes
                char charToMatch = patternToMatch[prefixLength];
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingLinkedArrays.hpp:154:17: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
                char c = keyToCheck[index];
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingLinkedArrays.hpp:154:22: note: FIX-IT applied suggested code changes
                char c = keyToCheck[index];
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingLinkedArrays.hpp:191:17: warning: variable 'isASingleNextDeleted' of type 'bool' can be declared 'const' [misc-const-correctness]
                bool isASingleNextDeleted =
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingLinkedArrays.hpp:191:22: note: FIX-IT applied suggested code changes
                bool isASingleNextDeleted =
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:127:5: warning: variable 'keysToVerify' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings keysToVerify(trie.getKeys());
    ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:127:13: note: FIX-IT applied suggested code changes
    Strings keysToVerify(trie.getKeys());
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:129:5: warning: variable 'expectedKeys' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedKeys{"by", "s", "sea", "sells", "she", "shells", "shore", "the"};
    ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:129:13: note: FIX-IT applied suggested code changes
    Strings expectedKeys{"by", "s", "sea", "sells", "she", "shells", "shore", "the"};
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:147:5: warning: variable 'keysToVerify' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings keysToVerify(trie.getAllKeysWithPrefix("s"));
    ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:147:13: note: FIX-IT applied suggested code changes
    Strings keysToVerify(trie.getAllKeysWithPrefix("s"));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:149:5: warning: variable 'expectedKeys' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedKeys{"s", "sea", "sells", "she", "shells", "shore"};
    ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:149:13: note: FIX-IT applied suggested code changes
    Strings expectedKeys{"s", "sea", "sells", "she", "shells", "shore"};
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:167:5: warning: variable 'keysToVerify' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings keysToVerify(trie.getAllKeysThatMatch("s.."));
    ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:167:13: note: FIX-IT applied suggested code changes
    Strings keysToVerify(trie.getAllKeysThatMatch("s.."));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:169:5: warning: variable 'expectedKeys' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedKeys{"sea", "she"};
    ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/String/Tries/Utilities/CommonTestsWithTries.hpp:169:13: note: FIX-IT applied suggested code changes
    Strings expectedKeys{"sea", "she"};
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\RWayTrieUsingLinkedArrays_unit.cpp:39:5: warning: variable 'trie' of type 'TrieForTest' (aka 'RWayTrieUsingLinkedArrays<int>') can be declared 'const' [misc-const-correctness]
    TrieForTest trie;
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\RWayTrieUsingLinkedArrays_unit.cpp:39:17: note: FIX-IT applied suggested code changes
    TrieForTest trie;
                ^
[293/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/Tries/RWayTrieUsingMatrix_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseStringSymbolTable.hpp:9:7: warning: class 'BaseStringSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStringSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:36:9: warning: variable 'longestPrefixLength' of type 'int' can be declared 'const' [misc-const-correctness]
        int longestPrefixLength(getLengthOfLongestPrefix(0, keyToCheck, 0));
        ^
            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:36:13: note: FIX-IT applied suggested code changes
        int longestPrefixLength(getLengthOfLongestPrefix(0, keyToCheck, 0));
            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:50:9: warning: variable 'coordinateOfPrefix' of type 'Coordinate' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
        Coordinate coordinateOfPrefix(getCoordinate(0, prefix, 0));
        ^
                   const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:50:20: note: FIX-IT applied suggested code changes
        Coordinate coordinateOfPrefix(getCoordinate(0, prefix, 0));
                   ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:71:9: warning: variable 'valueUniquePointer' of type 'ValueUniquePointer' (aka 'unique_ptr<int>') can be declared 'const' [misc-const-correctness]
        ValueUniquePointer valueUniquePointer(getValuePointer(0, key, 0));
        ^
                           const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:71:28: note: FIX-IT applied suggested code changes
        ValueUniquePointer valueUniquePointer(getValuePointer(0, key, 0));
                           ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:124:17: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
                char c(key[keyIndex]);
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:124:22: note: FIX-IT applied suggested code changes
                char c(key[keyIndex]);
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:148:17: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
                char c(key[keyIndex]);
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:148:22: note: FIX-IT applied suggested code changes
                char c(key[keyIndex]);
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:173:17: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
                char c(keyToCheck[keyIndex]);
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:173:22: note: FIX-IT applied suggested code changes
                char c(keyToCheck[keyIndex]);
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:209:21: warning: variable 'newPrefix' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
                    std::string newPrefix(previousPrefix + static_cast<char>(c));
                    ^
                                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:209:33: note: FIX-IT applied suggested code changes
                    std::string newPrefix(previousPrefix + static_cast<char>(c));
                                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:224:13: warning: variable 'prefixLength' of type 'int' can be declared 'const' [misc-const-correctness]
            int prefixLength = previousPrefix.length();
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:224:17: note: FIX-IT applied suggested code changes
            int prefixLength = previousPrefix.length();
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:224:32: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int prefixLength = previousPrefix.length();
                               ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:226:17: warning: variable 'charToMatch' of type 'char' can be declared 'const' [misc-const-correctness]
                char charToMatch = patternToMatch[prefixLength];
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:226:22: note: FIX-IT applied suggested code changes
                char charToMatch = patternToMatch[prefixLength];
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:231:29: warning: variable 'newPrefix' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
                            std::string newPrefix(previousPrefix + static_cast<char>(c));
                            ^
                                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:231:41: note: FIX-IT applied suggested code changes
                            std::string newPrefix(previousPrefix + static_cast<char>(c));
                                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:251:13: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
            char c(key[keyIndex]);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:251:18: note: FIX-IT applied suggested code changes
            char c(key[keyIndex]);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:299:17: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
                char c(key[keyIndex]);
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:299:22: note: FIX-IT applied suggested code changes
                char c(key[keyIndex]);
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:301:51: warning: unnecessary temporary object created while calling emplace_back [hicpp-use-emplace,modernize-use-emplace]
                traversedCoordinates.emplace_back(Coordinate{c, currentNodeId});
                                                  ^~~~~~~~~~~                ~
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:301:51: note: FIX-IT applied suggested code changes
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/RWayTrieUsingMatrix.hpp:301:78: note: FIX-IT applied suggested code changes
                traversedCoordinates.emplace_back(Coordinate{c, currentNodeId});
                                                                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\RWayTrieUsingMatrix_unit.cpp:137:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(trie.put("se", 100), "Assertion failed!");
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
[294/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/Tries/TernarySearchSuffixTrie_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseStringSymbolTable.hpp:9:7: warning: class 'BaseStringSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStringSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseTernarySearchTrie.hpp:10:7: warning: class 'BaseTernarySearchTrie' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTernarySearchTrie : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchSuffixTrie.hpp:30:28: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int const length = searchSpace.length();
                           ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:130:46: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int const previousPrefixLength = previousPrefix.length();
                                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchSuffixTrie_unit.cpp:14:5: warning: variable 'trie' of type 'TrieForTest' (aka 'alba::algorithm::TernarySearchSuffixTrie') can be declared 'const' [misc-const-correctness]
    TrieForTest trie("ABCDEF");
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchSuffixTrie_unit.cpp:14:17: note: FIX-IT applied suggested code changes
    TrieForTest trie("ABCDEF");
                ^
[295/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/Tries/TernarySearchTrieSubstringsSet.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseStringSet.hpp:8:7: warning: class 'BaseStringSet' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStringSet {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseTernarySearchTrie.hpp:10:7: warning: class 'BaseTernarySearchTrie' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTernarySearchTrie : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:51:13: warning: variable 'c' of type 'char' can be declared 'const' [misc-const-correctness]
            char c(keyToCheck[index]);
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:51:18: note: FIX-IT applied suggested code changes
            char c(keyToCheck[index]);
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:68:13: warning: variable 'currentPrefix' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
            std::string currentPrefix(previousPrefix + currentNodePointer->c);
            ^
                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:68:25: note: FIX-IT applied suggested code changes
            std::string currentPrefix(previousPrefix + currentNodePointer->c);
                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:79:13: warning: variable 'previousPrefixLength' of type 'int' can be declared 'const' [misc-const-correctness]
            int previousPrefixLength = previousPrefix.length();
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:79:17: note: FIX-IT applied suggested code changes
            int previousPrefixLength = previousPrefix.length();
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:79:40: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int previousPrefixLength = previousPrefix.length();
                                       ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:80:13: warning: variable 'lastIndexToMatch' of type 'int' can be declared 'const' [misc-const-correctness]
            int lastIndexToMatch = patternToMatch.length() - 1;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:80:17: note: FIX-IT applied suggested code changes
            int lastIndexToMatch = patternToMatch.length() - 1;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:80:36: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int lastIndexToMatch = patternToMatch.length() - 1;
                                   ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:81:13: warning: variable 'currentChar' of type 'char' can be declared 'const' [misc-const-correctness]
            char currentChar = currentNodePointer->c;
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:81:18: note: FIX-IT applied suggested code changes
            char currentChar = currentNodePointer->c;
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:82:13: warning: variable 'charToMatch' of type 'char' can be declared 'const' [misc-const-correctness]
            char charToMatch = patternToMatch[previousPrefixLength];
            ^
                 const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:82:18: note: FIX-IT applied suggested code changes
            char charToMatch = patternToMatch[previousPrefixLength];
                 ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:83:13: warning: variable 'currentPrefix' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
            std::string currentPrefix(previousPrefix + currentNodePointer->c);
            ^
                        const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:83:25: note: FIX-IT applied suggested code changes
            std::string currentPrefix(previousPrefix + currentNodePointer->c);
                        ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:112:13: warning: variable 'lastIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int lastIndex = key.length() - 1;
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:112:17: note: FIX-IT applied suggested code changes
            int lastIndex = key.length() - 1;
                ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:112:29: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int lastIndex = key.length() - 1;
                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:114:17: warning: variable 'charAtKey' of type 'char' can be declared 'const' [misc-const-correctness]
                char charAtKey(key[index]);
                ^
                     const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:114:22: note: FIX-IT applied suggested code changes
                char charAtKey(key[index]);
                     ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:138:9: warning: variable 'charAtKey' of type 'char' can be declared 'const' [misc-const-correctness]
        char charAtKey(key[index]);
        ^
             const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSubstringsSet.hpp:138:14: note: FIX-IT applied suggested code changes
        char charAtKey(key[index]);
             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:14:5: warning: variable 'trie' of type 'TrieForTest' (aka 'alba::algorithm::TernarySearchTrieSubstringsSet') can be declared 'const' [misc-const-correctness]
    TrieForTest trie;
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:14:17: note: FIX-IT applied suggested code changes
    TrieForTest trie;
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:35:5: warning: variable 'trie' of type 'TrieForTest' (aka 'alba::algorithm::TernarySearchTrieSubstringsSet') can be declared 'const' [misc-const-correctness]
    TrieForTest trie;
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:35:17: note: FIX-IT applied suggested code changes
    TrieForTest trie;
                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:111:5: warning: variable 'keysToVerify' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings keysToVerify(trie.getKeys());
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:111:13: note: FIX-IT applied suggested code changes
    Strings keysToVerify(trie.getKeys());
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:113:5: warning: variable 'expectedKeys' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedKeys{"b",    "by",    "s",      "se",  "sea",  "sel",   "sell", "sells", "sh", "she",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:113:13: note: FIX-IT applied suggested code changes
    Strings expectedKeys{"b",    "by",    "s",      "se",  "sea",  "sel",   "sell", "sells", "sh", "she",
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:131:5: warning: variable 'keysToVerify' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings keysToVerify(trie.getAllKeysWithPrefix("s"));
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:131:13: note: FIX-IT applied suggested code changes
    Strings keysToVerify(trie.getAllKeysWithPrefix("s"));
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:133:5: warning: variable 'expectedKeys' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedKeys{"s",   "se",   "sea",   "sel",    "sell", "sells", "sh",
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:133:13: note: FIX-IT applied suggested code changes
    Strings expectedKeys{"s",   "se",   "sea",   "sel",    "sell", "sells", "sh",
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:151:5: warning: variable 'keysToVerify' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings keysToVerify(trie.getAllKeysThatMatch("s.."));
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:151:13: note: FIX-IT applied suggested code changes
    Strings keysToVerify(trie.getAllKeysThatMatch("s.."));
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:153:5: warning: variable 'expectedKeys' of type 'Strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    Strings expectedKeys{"sea", "sel", "she"};
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:153:13: note: FIX-IT applied suggested code changes
    Strings expectedKeys{"sea", "sel", "she"};
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:183:5: warning: variable 'trie' of type 'TrieForTest' (aka 'alba::algorithm::TernarySearchTrieSubstringsSet') can be declared 'const' [misc-const-correctness]
    TrieForTest trie;
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSubstringsSet.cpp:183:17: note: FIX-IT applied suggested code changes
    TrieForTest trie;
                ^
[296/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/Tries/TernarySearchTrieSymbolTable_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseStringSymbolTable.hpp:9:7: warning: class 'BaseStringSymbolTable' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseStringSymbolTable {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/BaseTernarySearchTrie.hpp:10:7: warning: class 'BaseTernarySearchTrie' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTernarySearchTrie : public BaseDataStructure {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/String/Tries/TernarySearchTrieSymbolTable.hpp:130:46: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int const previousPrefixLength = previousPrefix.length();
                                             ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSymbolTable_unit.cpp:30:5: warning: variable 'trie' of type 'TrieForTest' (aka 'TernarySearchTrieSymbolTable<int>') can be declared 'const' [misc-const-correctness]
    TrieForTest trie;
    ^
                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\Tries\TernarySearchTrieSymbolTable_unit.cpp:30:17: note: FIX-IT applied suggested code changes
    TrieForTest trie;
                ^
[297/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/String/ZAlgorithm/ZAlgorithm_unit.cpp.obj
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\ZAlgorithm\ZAlgorithm_unit.cpp:15:5: warning: variable 'expectedIndexes' of type 'Indexes' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Indexes expectedIndexes{0, 5, 4, 3, 2, 1};
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\ZAlgorithm\ZAlgorithm_unit.cpp:15:13: note: FIX-IT applied suggested code changes
    Indexes expectedIndexes{0, 5, 4, 3, 2, 1};
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\ZAlgorithm\ZAlgorithm_unit.cpp:21:5: warning: variable 'expectedIndexes' of type 'Indexes' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Indexes expectedIndexes{0, 1, 0, 0, 3, 1, 0, 0, 2, 2, 1, 0};
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\ZAlgorithm\ZAlgorithm_unit.cpp:21:13: note: FIX-IT applied suggested code changes
    Indexes expectedIndexes{0, 1, 0, 0, 3, 1, 0, 0, 2, 2, 1, 0};
            ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\ZAlgorithm\ZAlgorithm_unit.cpp:27:5: warning: variable 'expectedIndexes' of type 'Indexes' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Indexes expectedIndexes{0, 0, 0, 2, 0, 0, 5, 0, 0, 7, 0, 0, 2, 0, 0, 1};
    ^
            const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\String\ZAlgorithm\ZAlgorithm_unit.cpp:27:13: note: FIX-IT applied suggested code changes
    Indexes expectedIndexes{0, 0, 0, 2, 0, 0, 5, 0, 0, 7, 0, 0, 2, 0, 0, 1};
            ^
[298/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/UnionFind/PercolationExample/MonteCarloSimulationOfPerculation_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/UnionFind/PercolationExample/MonteCarloSimulationOfPerculation.hpp:23:17: warning: variable 'cell' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
                std::string cell = isSiteOpen(getIndex(x, y)) ? " " : "X";
                ^
                            const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/UnionFind/PercolationExample/MonteCarloSimulationOfPerculation.hpp:23:29: note: FIX-IT applied suggested code changes
                std::string cell = isSiteOpen(getIndex(x, y)) ? " " : "X";
                            ^
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/UnionFind/PercolationExample/MonteCarloSimulationOfPerculation.hpp:47:13: warning: variable 'newOpenSiteIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int newOpenSiteIndex(m_randomizer.getRandomValue());
            ^
                const 
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/UnionFind/PercolationExample/MonteCarloSimulationOfPerculation.hpp:47:17: note: FIX-IT applied suggested code changes
            int newOpenSiteIndex(m_randomizer.getRandomValue());
                ^
[299/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/UnionFind/QuickFind_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\QuickFind_unit.cpp:58:5: warning: variable 'expectedInitialRootArray' of type 'UnionFindForTest::RootArray' (aka 'array<int, 13>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::RootArray expectedInitialRootArray{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\QuickFind_unit.cpp:58:33: note: FIX-IT applied suggested code changes
    UnionFindForTest::RootArray expectedInitialRootArray{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\QuickFind_unit.cpp:67:5: warning: variable 'expectedRootArray' of type 'UnionFindForTest::RootArray' (aka 'array<int, 13>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::RootArray expectedRootArray{0, 2, 2, 9, 9, 6, 6, 7, 9, 9, 10, 11, 12};
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\QuickFind_unit.cpp:67:33: note: FIX-IT applied suggested code changes
    UnionFindForTest::RootArray expectedRootArray{0, 2, 2, 9, 9, 6, 6, 7, 9, 9, 10, 11, 12};
                                ^
[300/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/UnionFind/QuickUnion_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\QuickUnion_unit.cpp:58:5: warning: variable 'expectedInitialRelativeRootArray' of type 'UnionFindForTest::RootArray' (aka 'array<int, 13>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::RootArray expectedInitialRelativeRootArray{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\QuickUnion_unit.cpp:58:33: note: FIX-IT applied suggested code changes
    UnionFindForTest::RootArray expectedInitialRelativeRootArray{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\QuickUnion_unit.cpp:67:5: warning: variable 'expectedRelativeRootArray' of type 'UnionFindForTest::RootArray' (aka 'array<int, 13>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::RootArray expectedRelativeRootArray{0, 1, 1, 8, 3, 5, 5, 7, 8, 8, 10, 11, 12};
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\QuickUnion_unit.cpp:67:33: note: FIX-IT applied suggested code changes
    UnionFindForTest::RootArray expectedRelativeRootArray{0, 1, 1, 8, 3, 5, 5, 7, 8, 8, 10, 11, 12};
                                ^
[301/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/UnionFind/UnionFindForFreeIndex_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\UnionFindForFreeIndex_unit.cpp:78:5: warning: variable 'expectedInitialRelativeRootVector' of type 'UnionFindForTest::RootVector' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::RootVector expectedInitialRelativeRootVector{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\UnionFindForFreeIndex_unit.cpp:78:34: note: FIX-IT applied suggested code changes
    UnionFindForTest::RootVector expectedInitialRelativeRootVector{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\UnionFindForFreeIndex_unit.cpp:87:5: warning: variable 'expectedRelativeRootVector' of type 'UnionFindForTest::RootVector' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::RootVector expectedRelativeRootVector{0, 1, 1, 8, 8, 5, 5, 7, 8, 8, 10, 11, 12};
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\UnionFindForFreeIndex_unit.cpp:87:34: note: FIX-IT applied suggested code changes
    UnionFindForTest::RootVector expectedRelativeRootVector{0, 1, 1, 8, 8, 5, 5, 7, 8, 8, 10, 11, 12};
                                 ^
[302/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/UnionFind/UnionFindUsingMap_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\UnionFindUsingMap_unit.cpp:58:5: warning: variable 'expectedInitialConnectionMap' of type 'UnionFindForTest::ConnectionMap' (aka 'map<int, int>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::ConnectionMap expectedInitialConnectionMap;
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\UnionFindUsingMap_unit.cpp:58:37: note: FIX-IT applied suggested code changes
    UnionFindForTest::ConnectionMap expectedInitialConnectionMap;
                                    ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\UnionFindUsingMap_unit.cpp:67:5: warning: variable 'expectedConnectionMap' of type 'UnionFindForTest::ConnectionMap' (aka 'map<int, int>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::ConnectionMap expectedConnectionMap{{1, 1}, {2, 1}, {3, 3}, {4, 3},
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\UnionFindUsingMap_unit.cpp:67:37: note: FIX-IT applied suggested code changes
    UnionFindForTest::ConnectionMap expectedConnectionMap{{1, 1}, {2, 1}, {3, 3}, {4, 3},
                                    ^
[303/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/UnionFind/WeightedQuickUnionWithArray_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithArray_unit.cpp:100:5: warning: variable 'expectedInitialRelativeRootArray' of type 'UnionFindForTest::RootArray' (aka 'array<int, 13>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::RootArray expectedInitialRelativeRootArray{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithArray_unit.cpp:100:33: note: FIX-IT applied suggested code changes
    UnionFindForTest::RootArray expectedInitialRelativeRootArray{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
                                ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithArray_unit.cpp:109:5: warning: variable 'expectedRelativeRootArray' of type 'UnionFindForTest::RootArray' (aka 'array<int, 13>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::RootArray expectedRelativeRootArray{0, 2, 2, 4, 4, 6, 6, 7, 4, 4, 10, 11, 12};
    ^
                                const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithArray_unit.cpp:109:33: note: FIX-IT applied suggested code changes
    UnionFindForTest::RootArray expectedRelativeRootArray{0, 2, 2, 4, 4, 6, 6, 7, 4, 4, 10, 11, 12};
                                ^
[304/305] Building CXX object CMakeFiles/AprgAlgorithm.dir/tst/AlgorithmTests/UnionFind/WeightedQuickUnionWithVector_unit.cpp.obj
D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/src\Algorithm/UnionFind/BaseUnionFind.hpp:6:7: warning: class 'BaseUnionFind' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseUnionFind {
      ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithVector_unit.cpp:100:5: warning: variable 'expectedInitialRelativeRootVector' of type 'UnionFindForTest::RootVector' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::RootVector expectedInitialRelativeRootVector{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithVector_unit.cpp:100:34: note: FIX-IT applied suggested code changes
    UnionFindForTest::RootVector expectedInitialRelativeRootVector{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithVector_unit.cpp:109:5: warning: variable 'expectedRelativeRootVector' of type 'UnionFindForTest::RootVector' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::RootVector expectedRelativeRootVector{0, 2, 2, 4, 4, 6, 6, 7, 4, 4, 10, 11, 12};
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithVector_unit.cpp:109:34: note: FIX-IT applied suggested code changes
    UnionFindForTest::RootVector expectedRelativeRootVector{0, 2, 2, 4, 4, 6, 6, 7, 4, 4, 10, 11, 12};
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithVector_unit.cpp:116:5: warning: variable 'expectedInitialRelativeRootVector' of type 'UnionFindForTest::SizeVector' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::SizeVector expectedInitialRelativeRootVector{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithVector_unit.cpp:116:34: note: FIX-IT applied suggested code changes
    UnionFindForTest::SizeVector expectedInitialRelativeRootVector{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
                                 ^
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithVector_unit.cpp:125:5: warning: variable 'expectedRelativeRootVector' of type 'UnionFindForTest::SizeVector' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    UnionFindForTest::SizeVector expectedRelativeRootVector{1, 1, 2, 1, 4, 1, 2, 1, 1, 1, 1, 1, 1};
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgorithm\AprgAlgorithm\tst\AlgorithmTests\UnionFind\WeightedQuickUnionWithVector_unit.cpp:125:34: note: FIX-IT applied suggested code changes
    UnionFindForTest::SizeVector expectedRelativeRootVector{1, 1, 2, 1, 4, 1, 2, 1, 1, 1, 1, 1, 1};
                                 ^
[305/305] Linking CXX executable AprgAlgorithm.exe
[35m2023-09-11T01:14:33[0m | [33mBuildAndRun.sh:218[0m | The script [BuildAndRun.sh] for [buildOnOneCore] is finished.
DONE!
