StaticAnalysisJobIdentifier: [011]
2023-09-11T13:58:47
[35m2023-09-11T14:00:04[0m | [33mBuildAndRun.sh:28[0m | The current path is [/d/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems].
[35m2023-09-11T14:00:04[0m | [33mBuildAndRun.sh:29[0m | The scriptPath is [/d/a/aprg/aprg/AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh].
[35m2023-09-11T14:00:04[0m | [33mBuildAndRun.sh:30[0m | The scriptOption is [buildOnOneCore].
[35m2023-09-11T14:00:04[0m | [33mBuildAndRun.sh:31[0m | The buildDirectoryName is [StaticAnalyzersBuild].
[35m2023-09-11T14:00:04[0m | [33mBuildAndRun.sh:32[0m | The argument1 is [Debug] and argument2 is [].
[35m2023-09-11T14:00:04[0m | [33mBuildAndRun.sh:33[0m | The immediateDirectoryName is [AprgUniqueProblems].
[35m2023-09-11T14:00:04[0m | [33mBuildAndRun.sh:84[0m | The buildType is [Debug].
[35m2023-09-11T14:00:04[0m | [33mBuildAndRun.sh:85[0m | The numberOfCores is [2].
[35m2023-09-11T14:00:04[0m | [33mBuildAndRun.sh:68[0m | The build path is [/d/a/aprg/aprg/AprgUniqueProblems/StaticAnalyzersBuild] and the output of [ls -la --color=auto]:
total 640
drwxr-xr-x 1 runneradmin 197121      0 Sep 11 14:00 .
drwxr-xr-x 1 runneradmin 197121      0 Sep 11 13:58 ..
-rw-r--r-- 1 runneradmin 197121  18083 Sep 11 14:00 CMakeCache.txt
drwxr-xr-x 1 runneradmin 197121      0 Sep 11 14:00 CMakeFiles
-rw-r--r-- 1 runneradmin 197121    602 Sep 11 14:00 CTestTestfile.cmake
-rw-r--r-- 1 runneradmin 197121 613765 Sep 11 14:00 build.ninja
-rw-r--r-- 1 runneradmin 197121   2328 Sep 11 14:00 cmake_install.cmake
[1/275] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc.obj
In file included from D:/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc:49:
D:/a/aprg/aprg/gtest/gtest/googletest\src/gtest.cc:2604:3: warning: extension used [-Wlanguage-extension-token]
  __try {
  ^
1 warning generated.
[2/275] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest_main.cc.obj
[3/275] Linking CXX static library gtest.lib
[4/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Container/AlbaContainerHelper.cpp.obj
[5/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/File/AlbaFileReader.cpp.obj
[6/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Angle/AlbaAngle.cpp.obj
[7/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComplexNumberHelpers.cpp.obj
[8/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComputationHelpers.cpp.obj
[9/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/FactorAndMulitplesHelpers.cpp.obj
[10/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PowerHelpers.cpp.obj
[11/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PrecisionHelpers.cpp.obj
[12/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/StatisticsHelpers.cpp.obj
[13/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaComplexNumber.cpp.obj
[14/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaNumber.cpp.obj
[15/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberInterval.cpp.obj
[16/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalEndpoint.cpp.obj
[17/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalHelpers.cpp.obj
[18/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Ratio/AlbaRatio.cpp.obj
[19/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Memory/AlbaMemoryBuffer.cpp.obj
[20/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaPathHandler.cpp.obj
[21/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaWebPathHandler.cpp.obj
[22/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Print/AlbaPrintFunctions.cpp.obj
[23/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/AlbaOldRandomizer.cpp.obj
[24/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaCombinedEntropySource.cpp.obj
[25/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaEntropySourceBasedOnTime.cpp.obj
[26/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitReader.cpp.obj
[27/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitWriter.cpp.obj
[28/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterReader.cpp.obj
[29/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterWriter.cpp.obj
[30/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/String/AlbaStringHelper.cpp.obj
[31/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTime.cpp.obj
[32/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTimeHelper.cpp.obj
[33/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
1 warning generated.
[34/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimer.cpp.obj
[35/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/AlbaUserInterface.cpp.obj
[36/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/DisplayTable.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:205:67: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
int DisplayTablePrinter::getVerticalBorderLength() const { return m_verticalBorder.length(); }
                                                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:208:12: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return ((m_maxLengthAtColumn.size() + 1) * getVerticalBorderLength()) + m_totalColumnLength;
           ^
[37/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Utility/AlbaScopeGuard.cpp.obj
[38/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/BaseFileReaderTest.cpp.obj
[39/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/FileUtilities.cpp.obj
[40/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/PathHandler/AlbaWindowsPathHandler.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:28:24: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const length = fullPath.length();
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:30:45: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int const indexWithSlashCharacter = fullPath.find_first_of(m_slashCharacterString, index);
                                            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:270:23: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const index = m_directory.find_first_of(m_slashCharacterString + ":");
                      ^
[41/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Time\AlbaWindowsTimeHelper.cpp:6:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return AlbaDateTime(
           ^
[42/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimer.cpp.obj
[43/275] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Windows/AlbaWindowsHelper.cpp.obj
[44/275] Linking CXX static library APRG_COMMON.lib
[45/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/ThreeDimensions/Constructs/Ellipsoid.cpp.obj
[46/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/ThreeDimensions/Constructs/EllipticCone.cpp.obj
[47/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/ThreeDimensions/Constructs/EllipticHyperboloid.cpp.obj
[48/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/ThreeDimensions/Constructs/EllipticParaboloid.cpp.obj
[49/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/ThreeDimensions/Constructs/HyperbolicParaboloid.cpp.obj
[50/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/ThreeDimensions/Constructs/Line.cpp.obj
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\ThreeDimensions\Constructs\Line.cpp:20:9: warning: narrowing conversion from '_Iter_diff_t<_Vector_const_iterator<_Vector_val<_Simple_types<double>>>>' (aka 'long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        std::count_if(deltas.cbegin(), deltas.cend(), [&](double const delta) { return delta < 0; });
        ^
[51/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/ThreeDimensions/Constructs/Plane.cpp.obj
[52/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/ThreeDimensions/Constructs/Sphere.cpp.obj
[53/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/ThreeDimensions/Utilities/ThreeDimensionsUtilities.cpp.obj
[54/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/TwoDimensions/Constructs/Circle.cpp.obj
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Circle.cpp:106:5: warning: Variable 'y' with floating point type 'double' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (double y = 0; y <= m_radius; y += interval) {
    ^                  ~              ~
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Circle.cpp:106:5: note: Variable 'y' with floating point type 'double' should not be used as a loop counter
    for (double y = 0; y <= m_radius; y += interval) {
    ^                  ~              ~
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Circle.cpp:109:13: warning: Variable 'x' with floating point type 'double' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (double x = 0; x <= xAtTheEdgeOfCircleOptional.value(); x += interval) {
            ^                  ~                                        ~
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Circle.cpp:109:13: note: Variable 'x' with floating point type 'double' should not be used as a loop counter
            for (double x = 0; x <= xAtTheEdgeOfCircleOptional.value(); x += interval) {
            ^                  ~                                        ~
[55/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/TwoDimensions/Constructs/Ellipse.cpp.obj
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Ellipse.cpp:188:5: warning: Variable 'y' with floating point type 'double' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (double y = 0; y <= m_bValue; y += interval) {
    ^                  ~              ~
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Ellipse.cpp:188:5: note: Variable 'y' with floating point type 'double' should not be used as a loop counter
    for (double y = 0; y <= m_bValue; y += interval) {
    ^                  ~              ~
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Ellipse.cpp:190:9: warning: Variable 'x' with floating point type 'double' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
        for (double x = 0; x <= xAtTheEdgeOfEllipse; x += interval) {
        ^                  ~                         ~
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Ellipse.cpp:190:9: note: Variable 'x' with floating point type 'double' should not be used as a loop counter
        for (double x = 0; x <= xAtTheEdgeOfEllipse; x += interval) {
        ^                  ~                         ~
[56/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/TwoDimensions/Constructs/Hyperbola.cpp.obj
[57/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/TwoDimensions/Constructs/Limacon.cpp.obj
[58/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/TwoDimensions/Constructs/Line.cpp.obj
[59/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/TwoDimensions/Constructs/Polygon.cpp.obj
[60/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/TwoDimensions/Constructs/Quadrilateral.cpp.obj
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Quadrilateral.cpp:31:27: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const groupSize = groupOfPointsBasedOnYValue.size();
                          ^
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Quadrilateral.cpp:65:29: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const points1Size = points1.size();
                            ^
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Quadrilateral.cpp:66:29: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const points2Size = points2.size();
                            ^
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Quadrilateral.cpp:105:29: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const points1Size = points1.size();
                            ^
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Quadrilateral.cpp:106:29: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const points2Size = points2.size();
                            ^
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Constructs\Quadrilateral.cpp:107:29: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const points3Size = points3.size();
                            ^
[61/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/TwoDimensions/Constructs/Rectangle.cpp.obj
[62/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/TwoDimensions/Constructs/Triangle.cpp.obj
[63/275] Building CXX object CMakeFiles/APRG_GEOMETRY.dir/D_/a/aprg/aprg/AprgGeometry/AprgGeometry/src/Geometry/TwoDimensions/Utilities/TwoDimensionsUtilities.cpp.obj
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Utilities\TwoDimensionsUtilities.cpp:579:5: warning: Variable 'y' with floating point type 'double' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
    for (double y = 0; y < outerRadius; y += interval) {
    ^                  ~                ~
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Utilities\TwoDimensionsUtilities.cpp:579:5: note: Variable 'y' with floating point type 'double' should not be used as a loop counter
    for (double y = 0; y < outerRadius; y += interval) {
    ^                  ~                ~
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Utilities\TwoDimensionsUtilities.cpp:583:13: warning: Variable 'x' with floating point type 'double' should not be used as a loop counter [clang-analyzer-security.FloatLoopCounter]
            for (double x = xAtInnerCircleOptional.value(); x < xAtOuterCircleOptional.value(); x += interval) {
            ^                                               ~                                   ~
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Utilities\TwoDimensionsUtilities.cpp:583:13: note: Variable 'x' with floating point type 'double' should not be used as a loop counter
            for (double x = xAtInnerCircleOptional.value(); x < xAtOuterCircleOptional.value(); x += interval) {
            ^                                               ~                                   ~
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Utilities\TwoDimensionsUtilities.cpp:742:24: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int endIndex = (startIndex + 1) % points.size();
                       ^
D:\a\aprg\aprg\AprgGeometry\AprgGeometry\src\Geometry\TwoDimensions\Utilities\TwoDimensionsUtilities.cpp:761:31: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const auxiliarySize = auxiliary.size();
                              ^
[64/275] Linking CXX static library APRG_GEOMETRY.lib
[65/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/Combinatorics/BurnsideLemma.cpp.obj
[66/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/Combinatorics/CatalanNumbers.cpp.obj
[67/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/Combinatorics/CayleysFormula.cpp.obj
[68/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/Combinatorics/CombinationUtilities.cpp.obj
[69/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/Combinatorics/Derangements.cpp.obj
D:\a\aprg\aprg\AprgMath\AprgMath\src\Math\Combinatorics\Derangements.cpp:168:65: warning: narrowing conversion from 'unsigned long long' to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getIntegerAfterRoundingADoubleValue<UnsignedInteger>(getNumberOfPermutations(n, n) / E_DOUBLE_VALUE);
                                                                ^
D:\a\aprg\aprg\AprgMath\AprgMath\src\Math\Combinatorics\Derangements.cpp:172:62: warning: narrowing conversion from 'unsigned long long' to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return static_cast<double>(getNumberOfDerangements(n)) / getNumberOfPermutations(n, n);
                                                             ^
[70/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/Combinatorics/InclusionExclusion.cpp.obj
[71/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/GameTheory/Common/GameUtilities.cpp.obj
[72/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/GameTheory/NimGame.cpp.obj
[73/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/GameTheory/SpecificGames/GameWithGraph.cpp.obj
[74/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/GameTheory/SpecificGames/GameWithMaze.cpp.obj
[75/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/GameTheory/SpecificGames/MisereGame.cpp.obj
[76/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/GameTheory/SpecificGames/StickGame.cpp.obj
[77/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/GameTheory/SubGames/GrundyGame.cpp.obj
D:\a\aprg\aprg\AprgMath\AprgMath\src\Math\GameTheory\SubGames\GrundyGame.cpp:24:55: warning: narrowing conversion from 'UnsignedInteger' (aka 'unsigned long long') to signed type 'difference_type' (aka 'long long') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            m_stickHeaps.erase(m_stickHeaps.begin() + index);
                                                      ^
D:\a\aprg\aprg\AprgMath\AprgMath\src\Math\GameTheory\SubGames\GrundyGame.cpp:25:57: warning: narrowing conversion from 'UnsignedInteger' (aka 'unsigned long long') to signed type 'difference_type' (aka 'long long') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            m_stickHeaps.emplace(m_stickHeaps.begin() + index, secondPile);
                                                        ^
D:\a\aprg\aprg\AprgMath\AprgMath\src\Math\GameTheory\SubGames\GrundyGame.cpp:26:57: warning: narrowing conversion from 'UnsignedInteger' (aka 'unsigned long long') to signed type 'difference_type' (aka 'long long') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            m_stickHeaps.emplace(m_stickHeaps.begin() + index, firstPile);
                                                        ^
D:\a\aprg\aprg\AprgMath\AprgMath\src\Math\GameTheory\SubGames\GrundyGame.cpp:79:23: warning: narrowing conversion from 'UnsignedInteger' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int const b = numberOfSticks - a;
                      ^
[78/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/GameTheory/SubGames/MultipleGamesWithMaze.cpp.obj
[79/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/Matrices/LinearRecurrence.cpp.obj
[80/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/NumberTheory/ChineseRemainderTheorem.cpp.obj
[81/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/NumberTheory/ModularArithmetic.cpp.obj
[82/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/NumberTheory/OtherUtilities.cpp.obj
[83/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/NumberTheory/PrimeAndFactorUtilities.cpp.obj
D:\a\aprg\aprg\AprgMath\AprgMath\src\Math\NumberTheory\PrimeAndFactorUtilities.cpp:60:12: warning: narrowing conversion from 'UnsignedInteger' (aka 'unsigned long long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return number / log(number);
           ^
D:\a\aprg\aprg\AprgMath\AprgMath\src\Math\NumberTheory\PrimeAndFactorUtilities.cpp:60:12: warning: narrowing conversion from 'double' to 'UnsignedInteger' (aka 'unsigned long long') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
D:\a\aprg\aprg\AprgMath\AprgMath\src\Math\NumberTheory\PrimeAndFactorUtilities.cpp:91:49: warning: narrowing conversion from 'UnsignedInteger' (aka 'unsigned long long') to signed type 'difference_type' (aka 'long long') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            find(sieveOfEratosthenes.cbegin() + candidatePrime + 1, sieveOfEratosthenes.cend(), true);
                                                ^
[84/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/NumberTheory/PythagoreanTripleUtilities.cpp.obj
[85/275] Building CXX object CMakeFiles/APRG_MATH.dir/D_/a/aprg/aprg/AprgMath/AprgMath/src/Math/Probability/ProbabilityUtilities.cpp.obj
[86/275] Linking CXX static library APRG_MATH.lib
[87/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/AmortizedAnalysis/TwoPointers/SubArraySum.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\AmortizedAnalysis\TwoPointers\SubArraySum.cpp:15:9: warning: variable 'size' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index size = m_valuesToCheck.size();
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\AmortizedAnalysis\TwoPointers\SubArraySum.cpp:15:15: note: FIX-IT applied suggested code changes
        Index size = m_valuesToCheck.size();
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\AmortizedAnalysis\TwoPointers\SubArraySum.cpp:15:22: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index size = m_valuesToCheck.size();
                     ^
[88/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/AmortizedAnalysis/TwoPointers/TwoSum.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\AmortizedAnalysis\TwoPointers\TwoSum.cpp:18:27: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index highIndex = m_sortedValues.size() - 1;
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\AmortizedAnalysis\TwoPointers\TwoSum.cpp:20:13: warning: variable 'currentSum' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value currentSum(m_sortedValues[lowIndex] + m_sortedValues[highIndex]);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\AmortizedAnalysis\TwoPointers\TwoSum.cpp:20:19: note: FIX-IT applied suggested code changes
            Value currentSum(m_sortedValues[lowIndex] + m_sortedValues[highIndex]);
                  ^
[89/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/BitManipulation/AddTwoNumbersWithoutUsingArithmeticOperators.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\AddTwoNumbersWithoutUsingArithmeticOperators.cpp:15:9: warning: variable 'newCarry' of type 'int' can be declared 'const' [misc-const-correctness]
        int newCarry = sum & carry;
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\AddTwoNumbersWithoutUsingArithmeticOperators.cpp:15:13: note: FIX-IT applied suggested code changes
        int newCarry = sum & carry;
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\AddTwoNumbersWithoutUsingArithmeticOperators.cpp:15:24: warning: narrowing conversion from 'Value' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int newCarry = sum & carry;
                       ^
[90/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/BitManipulation/BitManipulationUniqueProblems.cpp.obj
[91/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/BitManipulation/CountTotalSetBitsInAllNumbersFrom1ToN.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:25:9: warning: variable 'valueForBitPosition' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        Value valueForBitPosition = (1 << bitPosition) + 2 * countsBeforeThisBit[bitPosition - 1];
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:25:15: note: FIX-IT applied suggested code changes
        Value valueForBitPosition = (1 << bitPosition) + 2 * countsBeforeThisBit[bitPosition - 1];
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:44:9: warning: variable 'powerOfTwo' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        Value powerOfTwo = static_cast<Value>(1) << bitPositionPlusOne;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:44:15: note: FIX-IT applied suggested code changes
        Value powerOfTwo = static_cast<Value>(1) << bitPositionPlusOne;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:45:9: warning: variable 'seriesOfOnes' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        Value seriesOfOnes = powerOfTwo - 1;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:45:15: note: FIX-IT applied suggested code changes
        Value seriesOfOnes = powerOfTwo - 1;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:61:9: warning: variable 'powerOfTwo' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        Value powerOfTwo = static_cast<Value>(1) << bitPosition;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:61:15: note: FIX-IT applied suggested code changes
        Value powerOfTwo = static_cast<Value>(1) << bitPosition;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:62:9: warning: variable 'seriesOfOnes' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        Value seriesOfOnes = powerOfTwo - 1;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:62:15: note: FIX-IT applied suggested code changes
        Value seriesOfOnes = powerOfTwo - 1;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:64:13: warning: variable 'countForThisBit' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
            Value countForThisBit = (endValue & seriesOfOnes) + 1;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN.cpp:64:19: note: FIX-IT applied suggested code changes
            Value countForThisBit = (endValue & seriesOfOnes) + 1;
                  ^
[92/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/BitManipulation/CountingSubGrids.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:17:39: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                commonBlackColumns += BitValueUtilities::getNumberOfOnes(
                                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:29:9: warning: variable 'newColumns' of type 'int' can be declared 'const' [misc-const-correctness]
        int newColumns((bitGrid.getNumberOfColumns() + NUMBER_OF_BITS - 1) / NUMBER_OF_BITS);
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:29:13: note: FIX-IT applied suggested code changes
        int newColumns((bitGrid.getNumberOfColumns() + NUMBER_OF_BITS - 1) / NUMBER_OF_BITS);
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:29:24: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int newColumns((bitGrid.getNumberOfColumns() + NUMBER_OF_BITS - 1) / NUMBER_OF_BITS);
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:30:9: warning: variable 'newRows' of type 'int' can be declared 'const' [misc-const-correctness]
        int newRows(bitGrid.getNumberOfRows());
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:30:13: note: FIX-IT applied suggested code changes
        int newRows(bitGrid.getNumberOfRows());
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:30:21: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int newRows(bitGrid.getNumberOfRows());
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:38:17: warning: variable 'bitPosition' of type 'int' can be declared 'const' [misc-const-correctness]
                int bitPosition = NUMBER_OF_BITS - 1 - x % NUMBER_OF_BITS;
                ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:38:21: note: FIX-IT applied suggested code changes
                int bitPosition = NUMBER_OF_BITS - 1 - x % NUMBER_OF_BITS;
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:46:9: warning: variable 'newColumns' of type 'int' can be declared 'const' [misc-const-correctness]
        int newColumns((bitGrid.getNumberOfRows() + NUMBER_OF_BITS - 1) / NUMBER_OF_BITS);
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:46:13: note: FIX-IT applied suggested code changes
        int newColumns((bitGrid.getNumberOfRows() + NUMBER_OF_BITS - 1) / NUMBER_OF_BITS);
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:46:24: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int newColumns((bitGrid.getNumberOfRows() + NUMBER_OF_BITS - 1) / NUMBER_OF_BITS);
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:47:9: warning: variable 'newRows' of type 'int' can be declared 'const' [misc-const-correctness]
        int newRows(bitGrid.getNumberOfColumns());
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:47:13: note: FIX-IT applied suggested code changes
        int newRows(bitGrid.getNumberOfColumns());
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:47:21: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int newRows(bitGrid.getNumberOfColumns());
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:52:17: warning: variable 'bitPosition' of type 'int' can be declared 'const' [misc-const-correctness]
                int bitPosition = x % NUMBER_OF_BITS;
                ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\CountingSubGrids.cpp:52:21: note: FIX-IT applied suggested code changes
                int bitPosition = x % NUMBER_OF_BITS;
                    ^
[93/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/BitManipulation/NextHigherNumberWithSameNumberOfSetBits.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\NextHigherNumberWithSameNumberOfSetBits.cpp:13:9: warning: variable 'lastBitOne' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        Value lastBitOne = AlbaBitValueUtilities<Value>::getLastBitOneOnly(value);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\NextHigherNumberWithSameNumberOfSetBits.cpp:13:15: note: FIX-IT applied suggested code changes
        Value lastBitOne = AlbaBitValueUtilities<Value>::getLastBitOneOnly(value);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\NextHigherNumberWithSameNumberOfSetBits.cpp:14:9: warning: variable 'nextHigherByOneBit' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        Value nextHigherByOneBit = value + lastBitOne;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\NextHigherNumberWithSameNumberOfSetBits.cpp:14:15: note: FIX-IT applied suggested code changes
        Value nextHigherByOneBit = value + lastBitOne;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\NextHigherNumberWithSameNumberOfSetBits.cpp:15:9: warning: variable 'remainingBitsAtTheRight' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        Value remainingBitsAtTheRight = ((value ^ nextHigherByOneBit) / lastBitOne) >> 2;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\NextHigherNumberWithSameNumberOfSetBits.cpp:15:15: note: FIX-IT applied suggested code changes
        Value remainingBitsAtTheRight = ((value ^ nextHigherByOneBit) / lastBitOne) >> 2;
              ^
[94/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/BitManipulation/SmallestOfThreeIntegersWithoutComparisonOperators.cpp.obj
[95/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/BitManipulation/UniqueElement.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\UniqueElement.cpp:26:5: warning: variable 'xorResult' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    Value xorResult = getXorResult(values);
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\UniqueElement.cpp:26:11: note: FIX-IT applied suggested code changes
    Value xorResult = getXorResult(values);
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\UniqueElement.cpp:27:5: warning: variable 'lastBitOne' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    Value lastBitOne = AlbaBitValueUtilities<Value>::getLastBitOneOnly(xorResult);
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\UniqueElement.cpp:27:11: note: FIX-IT applied suggested code changes
    Value lastBitOne = AlbaBitValueUtilities<Value>::getLastBitOneOnly(xorResult);
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\UniqueElement.cpp:57:9: warning: variable 'maskToRemoveCommonBits' of type 'Value' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        Value maskToRemoveCommonBits = ~(oneElementTracker & twoElementsTracker);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BitManipulation\UniqueElement.cpp:57:15: note: FIX-IT applied suggested code changes
        Value maskToRemoveCommonBits = ~(oneElementTracker & twoElementsTracker);
              ^
[96/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/BranchAndBound/BranchAndBoundZeroAndOneKnapsack.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\BranchAndBoundZeroAndOneKnapsack.cpp:17:5: warning: variable 'itemSize' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
    Index itemSize = items.size();
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\BranchAndBoundZeroAndOneKnapsack.cpp:17:11: note: FIX-IT applied suggested code changes
    Index itemSize = items.size();
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\BranchAndBoundZeroAndOneKnapsack.cpp:17:22: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    Index itemSize = items.size();
                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\BranchAndBoundZeroAndOneKnapsack.cpp:22:9: warning: variable 'currentNode' of type 'Node' can be declared 'const' [misc-const-correctness]
        Node currentNode = remainingNodes.front();
        ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\BranchAndBoundZeroAndOneKnapsack.cpp:22:14: note: FIX-IT applied suggested code changes
        Node currentNode = remainingNodes.front();
             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\BranchAndBoundZeroAndOneKnapsack.cpp:62:9: warning: variable 'itemSize' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index itemSize = items.size();
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\BranchAndBoundZeroAndOneKnapsack.cpp:62:15: note: FIX-IT applied suggested code changes
        Index itemSize = items.size();
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\BranchAndBoundZeroAndOneKnapsack.cpp:62:26: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index itemSize = items.size();
                         ^
[97/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/BranchAndBound/EightPuzzlePossibleProblem.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:14:18: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      m_sideSize(m_startMatrix.getNumberOfColumns()),
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:21:5: warning: variable 'blankTile' of type 'Coordinate' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    Coordinate blankTile(getBlankTile(m_startMatrix));
    ^
               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:21:16: note: FIX-IT applied suggested code changes
    Coordinate blankTile(getBlankTile(m_startMatrix));
               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:22:5: warning: variable 'initialSnapshot' of type 'PuzzleSnapshot' can be declared 'const' [misc-const-correctness]
    PuzzleSnapshot initialSnapshot{INVALID_NODE_ID, blankTile, m_startMatrix};
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:22:20: note: FIX-IT applied suggested code changes
    PuzzleSnapshot initialSnapshot{INVALID_NODE_ID, blankTile, m_startMatrix};
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:28:9: warning: variable 'currentNode' of type 'SearchNode' can be declared 'const' [misc-const-correctness]
        SearchNode currentNode(nodesInMinCost.top());
        ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:28:20: note: FIX-IT applied suggested code changes
        SearchNode currentNode(nodesInMinCost.top());
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:34:9: warning: variable 'currentBlankTile' of type 'Coordinate' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
        Coordinate currentBlankTile(m_nodeIdToSnapshot[currentNode.nodeId].blankTile);
        ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:34:20: note: FIX-IT applied suggested code changes
        Coordinate currentBlankTile(m_nodeIdToSnapshot[currentNode.nodeId].blankTile);
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:36:13: warning: variable 'nextBlankTile' of type 'Coordinate' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
            Coordinate nextBlankTile{currentBlankTile.first + X_OFFSETS[i], currentBlankTile.second + Y_OFFSETS[i]};
            ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:36:24: note: FIX-IT applied suggested code changes
            Coordinate nextBlankTile{currentBlankTile.first + X_OFFSETS[i], currentBlankTile.second + Y_OFFSETS[i]};
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:110:5: warning: variable 'nextNodeId' of type 'SearchNodeId' (aka 'int') can be declared 'const' [misc-const-correctness]
    SearchNodeId nextNodeId = getNextNodeId();
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\EightPuzzlePossibleProblem.cpp:110:18: note: FIX-IT applied suggested code changes
    SearchNodeId nextNodeId = getNextNodeId();
                 ^
[98/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/BranchAndBound/JobAssignmentProblem.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:12:25: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      m_numberOfWorkers(m_costMatrix.getNumberOfColumns()),
                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:13:22: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      m_numberOfJobs(m_costMatrix.getNumberOfRows()),
                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:19:5: warning: variable 'initialDetails' of type 'SearchNodeDetails' can be declared 'const' [misc-const-correctness]
    SearchNodeDetails initialDetails{INVALID_NODE_ID, -1, -1, BoolVector(m_numberOfJobs, false)};
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:19:23: note: FIX-IT applied suggested code changes
    SearchNodeDetails initialDetails{INVALID_NODE_ID, -1, -1, BoolVector(m_numberOfJobs, false)};
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:26:9: warning: variable 'currentNode' of type 'SearchNode' can be declared 'const' [misc-const-correctness]
        SearchNode currentNode(nodesInMinCost.top());
        ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:26:20: note: FIX-IT applied suggested code changes
        SearchNode currentNode(nodesInMinCost.top());
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:28:9: warning: variable 'nextWorkerId' of type 'int' can be declared 'const' [misc-const-correctness]
        int nextWorkerId = m_nodeIdToDetails[currentNode.nodeId].workerId + 1;
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:28:13: note: FIX-IT applied suggested code changes
        int nextWorkerId = m_nodeIdToDetails[currentNode.nodeId].workerId + 1;
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:79:5: warning: variable 'nextNodeId' of type 'SearchNodeId' (aka 'int') can be declared 'const' [misc-const-correctness]
    SearchNodeId nextNodeId = getNextNodeId();
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:79:18: note: FIX-IT applied suggested code changes
    SearchNodeId nextNodeId = getNextNodeId();
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:84:5: warning: variable 'accumulatedCost' of type 'int' can be declared 'const' [misc-const-correctness]
    int accumulatedCost = getAccumulatedCost(workerId, jobId, currentNode);
    ^
        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:84:9: note: FIX-IT applied suggested code changes
    int accumulatedCost = getAccumulatedCost(workerId, jobId, currentNode);
        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:85:5: warning: variable 'minimumPossibleCost' of type 'int' can be declared 'const' [misc-const-correctness]
    int minimumPossibleCost = accumulatedCost + getMinimumPossibleCost(workerId, jobId, nextNodeDetails.isJobAssigned);
    ^
        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\BranchAndBound\JobAssignmentProblem.cpp:85:9: note: FIX-IT applied suggested code changes
    int minimumPossibleCost = accumulatedCost + getMinimumPossibleCost(workerId, jobId, nextNodeDetails.isJobAssigned);
        ^
[99/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/CombiningAlgorithms/NearestEqualCells.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\CombiningAlgorithms\NearestEqualCells.cpp:23:5: warning: variable 'coordinatesWithValue' of type 'Coordinates' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Coordinates coordinatesWithValue(getCoordinatesWithThisValue(value));
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\CombiningAlgorithms\NearestEqualCells.cpp:23:17: note: FIX-IT applied suggested code changes
    Coordinates coordinatesWithValue(getCoordinatesWithThisValue(value));
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\CombiningAlgorithms\NearestEqualCells.cpp:34:5: warning: variable 'coordinates' of type 'Coordinates' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Coordinates coordinates(getCoordinatesWithThisValue(value));
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\CombiningAlgorithms\NearestEqualCells.cpp:34:17: note: FIX-IT applied suggested code changes
    Coordinates coordinates(getCoordinatesWithThisValue(value));
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\CombiningAlgorithms\NearestEqualCells.cpp:47:17: warning: variable 'distance' of type 'int' can be declared 'const' [misc-const-correctness]
                int distance = getDistance(twoCoordinates[0], twoCoordinates[1]);
                ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\CombiningAlgorithms\NearestEqualCells.cpp:47:21: note: FIX-IT applied suggested code changes
                int distance = getDistance(twoCoordinates[0], twoCoordinates[1]);
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\CombiningAlgorithms\NearestEqualCells.cpp:61:5: warning: variable 'firstCoordinate' of type 'Coordinate' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    Coordinate firstCoordinate(getFirstCoordinateUsingBfs(value));
    ^
               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\CombiningAlgorithms\NearestEqualCells.cpp:61:16: note: FIX-IT applied suggested code changes
    Coordinate firstCoordinate(getFirstCoordinateUsingBfs(value));
               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\CombiningAlgorithms\NearestEqualCells.cpp:71:5: warning: variable 'coordinates' of type 'Coordinates' (aka 'vector<pair<int, int>>') can be declared 'const' [misc-const-correctness]
    Coordinates coordinates(getCoordinatesWithThisValue(value));
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\CombiningAlgorithms\NearestEqualCells.cpp:71:17: note: FIX-IT applied suggested code changes
    Coordinates coordinates(getCoordinatesWithThisValue(value));
                ^
[100/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/CompleteSearch/GridPathSearch.cpp.obj
[101/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DataStructures/InvertingABinaryTree.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\InvertingABinaryTree.cpp:9:42: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
        unique_ptr<Node> newRightChild = move(parent->leftPointer);
                                         ^
                                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\InvertingABinaryTree.cpp:9:42: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\InvertingABinaryTree.cpp:10:41: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
        unique_ptr<Node> newLeftChild = move(parent->rightPointer);
                                        ^
                                        std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\InvertingABinaryTree.cpp:10:41: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\InvertingABinaryTree.cpp:11:49: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
        parent->leftPointer = invertABinaryTree(move(newLeftChild));
                                                ^
                                                std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\InvertingABinaryTree.cpp:11:49: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\InvertingABinaryTree.cpp:12:50: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
        parent->rightPointer = invertABinaryTree(move(newRightChild));
                                                 ^
                                                 std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\InvertingABinaryTree.cpp:12:50: note: FIX-IT applied suggested code changes
[102/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DataStructures/ReversingALinkedList.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:10:36: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
        unique_ptr<Node> current = move(head->nextPointer);
                                   ^
                                   std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:10:36: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:11:18: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
        result = move(head);
                 ^
                 std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:11:18: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:13:42: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
            unique_ptr<Node> temporary = move(current->nextPointer);
                                         ^
                                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:13:42: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:14:36: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
            current->nextPointer = move(result);
                                   ^
                                   std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:14:36: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:15:22: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
            result = move(current);
                     ^
                     std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:15:22: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:16:23: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
            current = move(temporary);
                      ^
                      std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DataStructures\ReversingALinkedList.cpp:16:23: note: FIX-IT applied suggested code changes
[103/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Graph/Tree/LargestIndependentSetProblem.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\LargestIndependentSetProblem.cpp:70:9: warning: variable 'result' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
        Count result = max(countIfVertexIsIncluded, countIfVertexIsNotIncluded);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\LargestIndependentSetProblem.cpp:70:15: note: FIX-IT applied suggested code changes
        Count result = max(countIfVertexIsIncluded, countIfVertexIsNotIncluded);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\LargestIndependentSetProblem.cpp:84:13: warning: variable 'childSet' of type 'SetOfVertices' (aka 'set<int>') can be declared 'const' [misc-const-correctness]
            SetOfVertices childSet(getMaximumSetUsingMemoizationDP(vertexToMaximumSetMap, child));
            ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\LargestIndependentSetProblem.cpp:84:27: note: FIX-IT applied suggested code changes
            SetOfVertices childSet(getMaximumSetUsingMemoizationDP(vertexToMaximumSetMap, child));
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\LargestIndependentSetProblem.cpp:89:17: warning: variable 'grandChildSet' of type 'SetOfVertices' (aka 'set<int>') can be declared 'const' [misc-const-correctness]
                SetOfVertices grandChildSet(getMaximumSetUsingMemoizationDP(vertexToMaximumSetMap, grandChild));
                ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\LargestIndependentSetProblem.cpp:89:31: note: FIX-IT applied suggested code changes
                SetOfVertices grandChildSet(getMaximumSetUsingMemoizationDP(vertexToMaximumSetMap, grandChild));
                              ^
[104/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Graph/Tree/OptimalBinarySearchTree.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree.cpp:22:58: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getMinimumCostUsingNaiveRecursion(1, 0, m_valueAndFrequencyPairs.size() - 1);
                                                         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree.cpp:32:9: warning: variable 'numberOfPairs' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index numberOfPairs = m_valueAndFrequencyPairs.size();
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree.cpp:32:15: note: FIX-IT applied suggested code changes
        Index numberOfPairs = m_valueAndFrequencyPairs.size();
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree.cpp:32:31: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index numberOfPairs = m_valueAndFrequencyPairs.size();
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree.cpp:40:9: warning: variable 'frequencyRange' of type 'RangeQueryWithAccumulator<Frequencies>' (aka 'RangeQueryWithAccumulator<vector<int>>') can be declared 'const' [misc-const-correctness]
        RangeQueryWithAccumulator<Frequencies> frequencyRange(frequencies, plus<>(), minus<>());
        ^
                                               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree.cpp:40:48: note: FIX-IT applied suggested code changes
        RangeQueryWithAccumulator<Frequencies> frequencyRange(frequencies, plus<>(), minus<>());
                                               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree.cpp:49:17: warning: variable 'right' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index right = left + length - 1;
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree.cpp:49:23: note: FIX-IT applied suggested code changes
                Index right = left + length - 1;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree.cpp:51:17: warning: variable 'offsetCost' of type 'Cost' (aka 'int') can be declared 'const' [misc-const-correctness]
                Cost offsetCost(
                ^
                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree.cpp:51:22: note: FIX-IT applied suggested code changes
                Cost offsetCost(
                     ^
[105/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Graph/Tree/VertexCoverProblem.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\VertexCoverProblem.cpp:49:9: warning: variable 'childrenCount' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
        Count childrenCount = getMinimumCountUsingNaiveRecursion(child);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\VertexCoverProblem.cpp:49:15: note: FIX-IT applied suggested code changes
        Count childrenCount = getMinimumCountUsingNaiveRecursion(child);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\VertexCoverProblem.cpp:67:13: warning: variable 'childrenCount' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count childrenCount = getMinimumCountUsingMemoizationDP(vertexToCountMap, child);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\VertexCoverProblem.cpp:67:19: note: FIX-IT applied suggested code changes
            Count childrenCount = getMinimumCountUsingMemoizationDP(vertexToCountMap, child);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\VertexCoverProblem.cpp:75:9: warning: variable 'result' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
        Count result = min(countIfVertexIsIncluded, countIfVertexIsNotIncluded);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\VertexCoverProblem.cpp:75:15: note: FIX-IT applied suggested code changes
        Count result = min(countIfVertexIsIncluded, countIfVertexIsNotIncluded);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\VertexCoverProblem.cpp:89:13: warning: variable 'childSet' of type 'SetOfVertices' (aka 'set<int>') can be declared 'const' [misc-const-correctness]
            SetOfVertices childSet(getMinimumSetUsingMemoizationDP(vertexToMinimumSetMap, child));
            ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\VertexCoverProblem.cpp:89:27: note: FIX-IT applied suggested code changes
            SetOfVertices childSet(getMinimumSetUsingMemoizationDP(vertexToMinimumSetMap, child));
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\VertexCoverProblem.cpp:93:17: warning: variable 'grandChildSet' of type 'SetOfVertices' (aka 'set<int>') can be declared 'const' [misc-const-correctness]
                SetOfVertices grandChildSet(getMinimumSetUsingMemoizationDP(vertexToMinimumSetMap, grandChild));
                ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Graph\Tree\VertexCoverProblem.cpp:93:31: note: FIX-IT applied suggested code changes
                SetOfVertices grandChildSet(getMinimumSetUsingMemoizationDP(vertexToMinimumSetMap, grandChild));
                              ^
[106/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Grid/CollectMaximumPointsInAGridUsingTwoTraversals.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:21:60: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getMaximumPointsUsingNaiveRecursion(0, 0, m_inputGrid.getNumberOfColumns() - 1);
                                                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:32:9: warning: variable 'initialValueGrid' of type 'ValueGrid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
        ValueGrid initialValueGrid(m_inputGrid.getNumberOfColumns(), m_inputGrid.getNumberOfColumns(), UNUSED_COUNT);
        ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:32:19: note: FIX-IT applied suggested code changes
        ValueGrid initialValueGrid(m_inputGrid.getNumberOfColumns(), m_inputGrid.getNumberOfColumns(), UNUSED_COUNT);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:34:71: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getMaximumPointsUsingMemoizationDP(valueGrids, 0, 0, m_inputGrid.getNumberOfColumns() - 1);
                                                                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:45:9: warning: variable 'initialValueGrid' of type 'ValueGrid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
        ValueGrid initialValueGrid(m_inputGrid.getNumberOfColumns(), m_inputGrid.getNumberOfColumns(), INVALID_COUNT);
        ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:45:19: note: FIX-IT applied suggested code changes
        ValueGrid initialValueGrid(m_inputGrid.getNumberOfColumns(), m_inputGrid.getNumberOfColumns(), INVALID_COUNT);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:49:13: warning: variable 'columnLeft' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index columnLeft(0);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:49:19: note: FIX-IT applied suggested code changes
            Index columnLeft(0);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:50:13: warning: variable 'columnRight' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index columnRight(m_inputGrid.getNumberOfColumns() - 1);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:50:19: note: FIX-IT applied suggested code changes
            Index columnRight(m_inputGrid.getNumberOfColumns() - 1);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:50:31: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            Index columnRight(m_inputGrid.getNumberOfColumns() - 1);
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:51:13: warning: variable 'firstEntryResult' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value firstEntryResult = (columnLeft == columnRight)
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:51:19: note: FIX-IT applied suggested code changes
            Value firstEntryResult = (columnLeft == columnRight)
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:63:25: warning: variable 'previousRow' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                        Index previousRow = row - 1;
                        ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:63:31: note: FIX-IT applied suggested code changes
                        Index previousRow = row - 1;
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:64:25: warning: variable 'previousColumnLeft' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                        Index previousColumnLeft = columnLeft + leftOffset;
                        ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:64:31: note: FIX-IT applied suggested code changes
                        Index previousColumnLeft = columnLeft + leftOffset;
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:65:25: warning: variable 'previousColumnRight' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                        Index previousColumnRight = columnRight + rightOffset;
                        ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:65:31: note: FIX-IT applied suggested code changes
                        Index previousColumnRight = columnRight + rightOffset;
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:68:29: warning: variable 'previousValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                            Value previousValue =
                            ^
                                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:68:35: note: FIX-IT applied suggested code changes
                            Value previousValue =
                                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:100:13: warning: variable 'nextRow' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index nextRow = row + 1;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:100:19: note: FIX-IT applied suggested code changes
            Index nextRow = row + 1;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:101:13: warning: variable 'nextColumnLeft' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index nextColumnLeft = columnLeft + leftOffset;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:101:19: note: FIX-IT applied suggested code changes
            Index nextColumnLeft = columnLeft + leftOffset;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:102:13: warning: variable 'nextColumnRight' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index nextColumnRight = columnRight + rightOffset;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:102:19: note: FIX-IT applied suggested code changes
            Index nextColumnRight = columnRight + rightOffset;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:104:17: warning: variable 'nextValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value nextValue = getMaximumPointsUsingNaiveRecursion(nextRow, nextColumnLeft, nextColumnRight);
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:104:23: note: FIX-IT applied suggested code changes
                Value nextValue = getMaximumPointsUsingNaiveRecursion(nextRow, nextColumnLeft, nextColumnRight);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:129:17: warning: variable 'nextRow' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index nextRow = row + 1;
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:129:23: note: FIX-IT applied suggested code changes
                Index nextRow = row + 1;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:130:17: warning: variable 'nextColumnLeft' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index nextColumnLeft = columnLeft + leftOffset;
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:130:23: note: FIX-IT applied suggested code changes
                Index nextColumnLeft = columnLeft + leftOffset;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:131:17: warning: variable 'nextColumnRight' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index nextColumnRight = columnRight + rightOffset;
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:131:23: note: FIX-IT applied suggested code changes
                Index nextColumnRight = columnRight + rightOffset;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:133:21: warning: variable 'nextValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Value nextValue =
                    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals.cpp:133:27: note: FIX-IT applied suggested code changes
                    Value nextValue =
                          ^
[107/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Grid/FindLengthOfTheLongestConsecutivePath.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:42:5: warning: variable 'nextValue' of type 'Value' (aka 'char') can be declared 'const' [misc-const-correctness]
    Value nextValue = m_inputGrid.getEntry(x, y) + 1;
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:42:11: note: FIX-IT applied suggested code changes
    Value nextValue = m_inputGrid.getEntry(x, y) + 1;
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:42:23: warning: narrowing conversion from 'int' to signed type 'Value' (aka 'char') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    Value nextValue = m_inputGrid.getEntry(x, y) + 1;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:45:9: warning: variable 'neighborX' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index neighborX = x + xOffset;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:45:15: note: FIX-IT applied suggested code changes
        Index neighborX = x + xOffset;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:46:9: warning: variable 'neighborY' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index neighborY = y + yOffset;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:46:15: note: FIX-IT applied suggested code changes
        Index neighborY = y + yOffset;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:72:9: warning: variable 'nextValue' of type 'Value' (aka 'char') can be declared 'const' [misc-const-correctness]
        Value nextValue = m_inputGrid.getEntry(x, y) + 1;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:72:15: note: FIX-IT applied suggested code changes
        Value nextValue = m_inputGrid.getEntry(x, y) + 1;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:72:27: warning: narrowing conversion from 'int' to signed type 'Value' (aka 'char') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Value nextValue = m_inputGrid.getEntry(x, y) + 1;
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:75:13: warning: variable 'neighborX' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index neighborX = x + neighborOffset.first;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:75:19: note: FIX-IT applied suggested code changes
            Index neighborX = x + neighborOffset.first;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:76:13: warning: variable 'neighborY' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index neighborY = y + neighborOffset.second;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath.cpp:76:19: note: FIX-IT applied suggested code changes
            Index neighborY = y + neighborOffset.second;
                  ^
[108/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Grid/MaximumSizeSquareSubMatrixWithAllOnes.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:25:13: warning: variable 'side' of type 'Unit' (aka 'int') can be declared 'const' [misc-const-correctness]
            Unit side = sideMatrix.getEntry(x, y);
            ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:25:18: note: FIX-IT applied suggested code changes
            Unit side = sideMatrix.getEntry(x, y);
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:47:17: warning: variable 'maxSideOfSmallerSquare' of type 'Unit' (aka 'int') can be declared 'const' [misc-const-correctness]
                Unit maxSideOfSmallerSquare = sideMatrix.getEntry(x - 1, y - 1);
                ^
                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:47:22: note: FIX-IT applied suggested code changes
                Unit maxSideOfSmallerSquare = sideMatrix.getEntry(x - 1, y - 1);
                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:49:17: warning: variable 'upX' of type 'int' can be declared 'const' [misc-const-correctness]
                int upX = static_cast<int>(x - maxSideOfSmallerSquare);
                ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:49:21: note: FIX-IT applied suggested code changes
                int upX = static_cast<int>(x - maxSideOfSmallerSquare);
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:50:17: warning: variable 'leftY' of type 'int' can be declared 'const' [misc-const-correctness]
                int leftY = static_cast<int>(y - maxSideOfSmallerSquare);
                ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:50:21: note: FIX-IT applied suggested code changes
                int leftY = static_cast<int>(y - maxSideOfSmallerSquare);
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:66:13: warning: variable 'side' of type 'Unit' (aka 'int') can be declared 'const' [misc-const-correctness]
            Unit side = sideMatrix.getEntry(x, y);
            ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:66:18: note: FIX-IT applied suggested code changes
            Unit side = sideMatrix.getEntry(x, y);
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:124:13: warning: variable 'maxSideOfSmallerSquare' of type 'Unit' (aka 'int') can be declared 'const' [misc-const-correctness]
            Unit maxSideOfSmallerSquare = getMaximumSideUsingMemoizationDP(sideMatrix, x - 1, y - 1);
            ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:124:18: note: FIX-IT applied suggested code changes
            Unit maxSideOfSmallerSquare = getMaximumSideUsingMemoizationDP(sideMatrix, x - 1, y - 1);
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:126:13: warning: variable 'upX' of type 'int' can be declared 'const' [misc-const-correctness]
            int upX = static_cast<int>(x - maxSideOfSmallerSquare);
            ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:126:17: note: FIX-IT applied suggested code changes
            int upX = static_cast<int>(x - maxSideOfSmallerSquare);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:127:13: warning: variable 'leftY' of type 'int' can be declared 'const' [misc-const-correctness]
            int leftY = static_cast<int>(y - maxSideOfSmallerSquare);
            ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes.cpp:127:17: note: FIX-IT applied suggested code changes
            int leftY = static_cast<int>(y - maxSideOfSmallerSquare);
                ^
[109/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Grid/MaximumSubMatrixSum.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSubMatrixSum.cpp:19:13: warning: variable 'maximumSubArraySum' of type 'MaximumSubArraySum' can be declared 'const' [misc-const-correctness]
            MaximumSubArraySum maximumSubArraySum(accumulatedColumn);
            ^
                               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSubMatrixSum.cpp:19:32: note: FIX-IT applied suggested code changes
            MaximumSubArraySum maximumSubArraySum(accumulatedColumn);
                               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSubMatrixSum.cpp:48:13: warning: variable 'maximumSubArraySum' of type 'MaximumSubArraySum' can be declared 'const' [misc-const-correctness]
            MaximumSubArraySum maximumSubArraySum(accumulatedColumn);
            ^
                               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MaximumSubMatrixSum.cpp:48:32: note: FIX-IT applied suggested code changes
            MaximumSubArraySum maximumSubArraySum(accumulatedColumn);
                               ^
[110/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Grid/MinimumInitialPointsToReachDestination.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:15:9: warning: variable 'lastX' of type 'int' can be declared 'const' [misc-const-correctness]
        int lastX = m_inputGrid.getNumberOfColumns() - 1;
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:15:13: note: FIX-IT applied suggested code changes
        int lastX = m_inputGrid.getNumberOfColumns() - 1;
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:15:21: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int lastX = m_inputGrid.getNumberOfColumns() - 1;
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:16:9: warning: variable 'lastY' of type 'int' can be declared 'const' [misc-const-correctness]
        int lastY = m_inputGrid.getNumberOfRows() - 1;
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:16:13: note: FIX-IT applied suggested code changes
        int lastY = m_inputGrid.getNumberOfRows() - 1;
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:16:21: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int lastY = m_inputGrid.getNumberOfRows() - 1;
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:17:9: warning: variable 'lastValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value lastValue = m_inputGrid.getEntry(lastX, lastY) > 0 ? 1 : m_inputGrid.getEntry(lastX, lastY) * -1 + 1;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:17:15: note: FIX-IT applied suggested code changes
        Value lastValue = m_inputGrid.getEntry(lastX, lastY) > 0 ? 1 : m_inputGrid.getEntry(lastX, lastY) * -1 + 1;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:24:13: warning: variable 'neededPointsForThisCell' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value neededPointsForThisCell =
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:24:19: note: FIX-IT applied suggested code changes
            Value neededPointsForThisCell =
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:30:13: warning: variable 'neededPointsForThisCell' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value neededPointsForThisCell =
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:30:19: note: FIX-IT applied suggested code changes
            Value neededPointsForThisCell =
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:37:17: warning: variable 'minFromRightOrDown' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value minFromRightOrDown =
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:37:23: note: FIX-IT applied suggested code changes
                Value minFromRightOrDown =
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:39:17: warning: variable 'neededPointsForThisCell' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value neededPointsForThisCell = max(1, minFromRightOrDown - m_inputGrid.getEntry(x, y));
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination.cpp:39:23: note: FIX-IT applied suggested code changes
                Value neededPointsForThisCell = max(1, minFromRightOrDown - m_inputGrid.getEntry(x, y));
                      ^
[111/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Grid/PathSumInGridInRightOrDownTraversal.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal.cpp:15:9: warning: variable 'partialSumGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
        Grid partialSumGrid(getPartialSumGridUsingIterativeDP());
        ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal.cpp:15:14: note: FIX-IT applied suggested code changes
        Grid partialSumGrid(getPartialSumGridUsingIterativeDP());
             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal.cpp:16:19: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index x = partialSumGrid.getNumberOfColumns() - 1;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal.cpp:17:19: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index y = partialSumGrid.getNumberOfRows() - 1;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal.cpp:43:47: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            getBestPathSumUsingNaiveRecursion(m_inputGrid.getNumberOfColumns() - 1, m_inputGrid.getNumberOfRows() - 1);
                                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal.cpp:43:85: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            getBestPathSumUsingNaiveRecursion(m_inputGrid.getNumberOfColumns() - 1, m_inputGrid.getNumberOfRows() - 1);
                                                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal.cpp:54:29: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            partialSumGrid, m_inputGrid.getNumberOfColumns() - 1, m_inputGrid.getNumberOfRows() - 1);
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal.cpp:54:67: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            partialSumGrid, m_inputGrid.getNumberOfColumns() - 1, m_inputGrid.getNumberOfRows() - 1);
                                                                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal.cpp:63:9: warning: variable 'partialSumGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
        Grid partialSumGrid(getPartialSumGridUsingIterativeDP());
        ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal.cpp:63:14: note: FIX-IT applied suggested code changes
        Grid partialSumGrid(getPartialSumGridUsingIterativeDP());
             ^
[112/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Grid/PathSumInGridInRightOrDownWithDiagonalTraversal.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:17:9: warning: variable 'partialSumGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
        Grid partialSumGrid(getPartialSumGridUsingIterativeDP());
        ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:17:14: note: FIX-IT applied suggested code changes
        Grid partialSumGrid(getPartialSumGridUsingIterativeDP());
             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:18:19: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index x = partialSumGrid.getNumberOfColumns() - 1;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:19:19: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index y = partialSumGrid.getNumberOfRows() - 1;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:30:17: warning: variable 'bestNeighbor' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value bestNeighbor = m_minMaxFunction(
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:30:23: note: FIX-IT applied suggested code changes
                Value bestNeighbor = m_minMaxFunction(
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:52:47: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            getBestPathSumUsingNaiveRecursion(m_inputGrid.getNumberOfColumns() - 1, m_inputGrid.getNumberOfRows() - 1);
                                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:52:85: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            getBestPathSumUsingNaiveRecursion(m_inputGrid.getNumberOfColumns() - 1, m_inputGrid.getNumberOfRows() - 1);
                                                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:63:29: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            partialSumGrid, m_inputGrid.getNumberOfColumns() - 1, m_inputGrid.getNumberOfRows() - 1);
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:63:67: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            partialSumGrid, m_inputGrid.getNumberOfColumns() - 1, m_inputGrid.getNumberOfRows() - 1);
                                                                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:73:9: warning: variable 'partialSumGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
        Grid partialSumGrid(getPartialSumGridUsingIterativeDP());
        ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal.cpp:73:14: note: FIX-IT applied suggested code changes
        Grid partialSumGrid(getPartialSumGridUsingIterativeDP());
             ^
[113/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/KnapsackProblems/AllPartialSumsInZeroOneKnapsack.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack.cpp:14:5: warning: variable 'sum' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
    Value sum(accumulate(m_inputValues.cbegin(), m_inputValues.cend(), 0));
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack.cpp:14:11: note: FIX-IT applied suggested code changes
    Value sum(accumulate(m_inputValues.cbegin(), m_inputValues.cend(), 0));
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack.cpp:30:5: warning: variable 'sum' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
    Value sum(accumulate(m_inputValues.cbegin(), m_inputValues.cend(), 0));
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack.cpp:30:11: note: FIX-IT applied suggested code changes
    Value sum(accumulate(m_inputValues.cbegin(), m_inputValues.cend(), 0));
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack.cpp:37:17: warning: variable 'possibleNextValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value possibleNextValue = static_cast<Value>(partialSum) + inputValue;
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack.cpp:37:23: note: FIX-IT applied suggested code changes
                Value possibleNextValue = static_cast<Value>(partialSum) + inputValue;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack.cpp:69:5: warning: variable 'sum' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
    Value sum(accumulate(m_inputValues.cbegin(), m_inputValues.cend(), 0));
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack.cpp:69:11: note: FIX-IT applied suggested code changes
    Value sum(accumulate(m_inputValues.cbegin(), m_inputValues.cend(), 0));
          ^
[114/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/KnapsackProblems/IsPartialSumPossibleInZeroOneKnapsack.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack.cpp:50:17: warning: variable 'previousValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value previousValue(m_inputValues[valueIndex - 1]);
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack.cpp:50:23: note: FIX-IT applied suggested code changes
                Value previousValue(m_inputValues[valueIndex - 1]);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack.cpp:89:9: warning: variable 'currentValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value currentValue(m_inputValues[valueIndex]);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack.cpp:89:15: note: FIX-IT applied suggested code changes
        Value currentValue(m_inputValues[valueIndex]);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack.cpp:106:5: warning: variable 'resultState' of type 'State' can be declared 'const' [misc-const-correctness]
    State resultState = stateMatrix.getEntry(partialSum, valueIndex);
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack.cpp:106:11: note: FIX-IT applied suggested code changes
    State resultState = stateMatrix.getEntry(partialSum, valueIndex);
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack.cpp:110:13: warning: variable 'currentValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value currentValue(m_inputValues[valueIndex]);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack.cpp:110:19: note: FIX-IT applied suggested code changes
            Value currentValue(m_inputValues[valueIndex]);
                  ^
[115/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/KnapsackProblems/MaximizeProfitInZeroOneKnapsack.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\MaximizeProfitInZeroOneKnapsack.cpp:38:9: warning: variable 'smallestItemWeight' of type 'Weight' (aka 'int') can be declared 'const' [misc-const-correctness]
        Weight smallestItemWeight(getSmallestItemWeight());
        ^
               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\MaximizeProfitInZeroOneKnapsack.cpp:38:16: note: FIX-IT applied suggested code changes
        Weight smallestItemWeight(getSmallestItemWeight());
               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\MaximizeProfitInZeroOneKnapsack.cpp:43:21: warning: variable 'profit' of type 'Profit' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Profit profit =
                    ^
                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\MaximizeProfitInZeroOneKnapsack.cpp:43:28: note: FIX-IT applied suggested code changes
                    Profit profit =
                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\MaximizeProfitInZeroOneKnapsack.cpp:66:9: warning: variable 'smallestItemWeight' of type 'Weight' (aka 'int') can be declared 'const' [misc-const-correctness]
        Weight smallestItemWeight(getSmallestItemWeight());
        ^
               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\KnapsackProblems\MaximizeProfitInZeroOneKnapsack.cpp:66:16: note: FIX-IT applied suggested code changes
        Weight smallestItemWeight(getSmallestItemWeight());
               ^
[116/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Math/BinomialCoefficient.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\BinomialCoefficient.cpp:39:13: warning: variable 'lastK' of type 'Value' (aka 'long long') can be declared 'const' [misc-const-correctness]
            Value lastK = min(n, m_k);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\BinomialCoefficient.cpp:39:19: note: FIX-IT applied suggested code changes
            Value lastK = min(n, m_k);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\BinomialCoefficient.cpp:84:13: warning: variable 'lastK' of type 'Value' (aka 'long long') can be declared 'const' [misc-const-correctness]
            Value lastK = min(n, m_k);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\BinomialCoefficient.cpp:84:19: note: FIX-IT applied suggested code changes
            Value lastK = min(n, m_k);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\BinomialCoefficient.cpp:117:100: warning: narrowing conversion from 'Value' (aka 'long long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                mathHelper::isValueBeyondLimits<Value>(static_cast<double>(accumulatedNumerator) * numerator)) {
                                                                                                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\BinomialCoefficient.cpp:118:17: warning: variable 'gcf' of type 'Value' (aka 'long long') can be declared 'const' [misc-const-correctness]
                Value gcf = mathHelper::getGreatestCommonFactor(accumulatedNumerator, accumulatedDenominator);
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\BinomialCoefficient.cpp:118:23: note: FIX-IT applied suggested code changes
                Value gcf = mathHelper::getGreatestCommonFactor(accumulatedNumerator, accumulatedDenominator);
                      ^
[117/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Math/Digits/ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:43:9: warning: variable 'digitValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value digitValue = numberForDigitsSum % 10;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:43:15: note: FIX-IT applied suggested code changes
        Value digitValue = numberForDigitsSum % 10;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:44:9: warning: variable 'sumAtDigit' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value sumAtDigit = getSummationFrom1ToN(digitValue - 1) * powerOf10 + digitValue * (previousDigits + 1);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:44:15: note: FIX-IT applied suggested code changes
        Value sumAtDigit = getSummationFrom1ToN(digitValue - 1) * powerOf10 + digitValue * (previousDigits + 1);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:45:9: warning: variable 'numberOf0To9' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value numberOf0To9 = digitIndex * previousPowerOf10;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:45:15: note: FIX-IT applied suggested code changes
        Value numberOf0To9 = digitIndex * previousPowerOf10;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:46:9: warning: variable 'sumAtLessSignificantDigits' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value sumAtLessSignificantDigits = digitValue * numberOf0To9 * getSummationFrom1ToN(9);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:46:15: note: FIX-IT applied suggested code changes
        Value sumAtLessSignificantDigits = digitValue * numberOf0To9 * getSummationFrom1ToN(9);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:67:9: warning: variable 'numberOfDigitsMinus1' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value numberOfDigitsMinus1 = getLogarithmForIntegers(10, number);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:67:15: note: FIX-IT applied suggested code changes
        Value numberOfDigitsMinus1 = getLogarithmForIntegers(10, number);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:81:9: warning: variable 'highestPowerOf10' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value highestPowerOf10 = getRaiseToPowerForIntegers(10, numberOfDigitsMinus1);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:81:15: note: FIX-IT applied suggested code changes
        Value highestPowerOf10 = getRaiseToPowerForIntegers(10, numberOfDigitsMinus1);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:82:9: warning: variable 'mostSignificantDigit' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value mostSignificantDigit = number / highestPowerOf10;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:82:15: note: FIX-IT applied suggested code changes
        Value mostSignificantDigit = number / highestPowerOf10;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:83:9: warning: variable 'remainingDigits' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value remainingDigits = number % highestPowerOf10;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN.cpp:83:15: note: FIX-IT applied suggested code changes
        Value remainingDigits = number % highestPowerOf10;
              ^
[118/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Math/Digits/CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum.cpp:93:9: warning: variable 'start' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value start = getRaiseToPowerForIntegers(10, m_numberOfDigits - 1);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum.cpp:93:15: note: FIX-IT applied suggested code changes
        Value start = getRaiseToPowerForIntegers(10, m_numberOfDigits - 1);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum.cpp:94:9: warning: variable 'end' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value end = getRaiseToPowerForIntegers(10, m_numberOfDigits);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum.cpp:94:15: note: FIX-IT applied suggested code changes
        Value end = getRaiseToPowerForIntegers(10, m_numberOfDigits);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum.cpp:118:13: warning: variable 'lastDigitValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value lastDigitValue = min(partialSum - 1, 9);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum.cpp:118:19: note: FIX-IT applied suggested code changes
            Value lastDigitValue = min(partialSum - 1, 9);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum.cpp:140:17: warning: variable 'lastDigitValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value lastDigitValue = min(partialSum - 1, 9);
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum.cpp:140:23: note: FIX-IT applied suggested code changes
                Value lastDigitValue = min(partialSum - 1, 9);
                      ^
[119/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Math/Digits/TotalNumberOfNonDecreasingNumbersWithNDigits.cpp.obj
[120/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Math/MatrixMultiplicationOrder.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MatrixMultiplicationOrder.cpp:14:69: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getMinimumNumberOfOperationsUsingNaiveRecursion(0, m_dimensions.size() - 1);
                                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MatrixMultiplicationOrder.cpp:25:81: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getMinimumNumberOfOperationsUsingMemoizationDP(countMatrix, 0, m_dimensions.size() - 1);
                                                                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MatrixMultiplicationOrder.cpp:40:17: warning: variable 'rightParenthesis' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index rightParenthesis = leftParenthesis + length - 1;
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MatrixMultiplicationOrder.cpp:40:23: note: FIX-IT applied suggested code changes
                Index rightParenthesis = leftParenthesis + length - 1;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MatrixMultiplicationOrder.cpp:43:21: warning: variable 'currentCount' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Count currentCount =
                    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MatrixMultiplicationOrder.cpp:43:27: note: FIX-IT applied suggested code changes
                    Count currentCount =
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MatrixMultiplicationOrder.cpp:64:13: warning: variable 'currentCount' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count currentCount =
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MatrixMultiplicationOrder.cpp:64:19: note: FIX-IT applied suggested code changes
            Count currentCount =
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MatrixMultiplicationOrder.cpp:82:17: warning: variable 'currentCount' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                Count currentCount =
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MatrixMultiplicationOrder.cpp:82:23: note: FIX-IT applied suggested code changes
                Count currentCount =
                      ^
[121/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Math/MinimumNumberOfSquaresWithSumEqualToN.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN.cpp:63:9: warning: variable 'immediateNode' of type 'NodeDetails' can be declared 'const' [misc-const-correctness]
        NodeDetails immediateNode(immediateNodes.front());
        ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN.cpp:63:21: note: FIX-IT applied suggested code changes
        NodeDetails immediateNode(immediateNodes.front());
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN.cpp:69:13: warning: variable 'newSum' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count newSum = immediateNode.sum - base * base;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN.cpp:69:19: note: FIX-IT applied suggested code changes
            Count newSum = immediateNode.sum - base * base;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN.cpp:88:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem(squaredValues);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN.cpp:88:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem(squaredValues);
                ^
[122/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Math/NumberTheory/FibonacciProblems/CountNumberOfBinaryStringsWithoutConsecutiveOnes.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\FibonacciProblems\CountNumberOfBinaryStringsWithoutConsecutiveOnes.cpp:30:13: warning: variable 'previousZeroCount' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count previousZeroCount = valueMatrix.getEntry(0, index - 1);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\FibonacciProblems\CountNumberOfBinaryStringsWithoutConsecutiveOnes.cpp:30:19: note: FIX-IT applied suggested code changes
            Count previousZeroCount = valueMatrix.getEntry(0, index - 1);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\FibonacciProblems\CountNumberOfBinaryStringsWithoutConsecutiveOnes.cpp:31:13: warning: variable 'previousOneCount' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count previousOneCount = valueMatrix.getEntry(1, index - 1);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\FibonacciProblems\CountNumberOfBinaryStringsWithoutConsecutiveOnes.cpp:31:19: note: FIX-IT applied suggested code changes
            Count previousOneCount = valueMatrix.getEntry(1, index - 1);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\FibonacciProblems\CountNumberOfBinaryStringsWithoutConsecutiveOnes.cpp:50:13: warning: variable 'nextZeroCount' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count nextZeroCount = zeroCount + oneCount;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\FibonacciProblems\CountNumberOfBinaryStringsWithoutConsecutiveOnes.cpp:50:19: note: FIX-IT applied suggested code changes
            Count nextZeroCount = zeroCount + oneCount;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\FibonacciProblems\CountNumberOfBinaryStringsWithoutConsecutiveOnes.cpp:65:18: warning: narrowing conversion from 'UnsignedInteger' (aka 'unsigned long long') to signed type 'Count' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getNthFibonacciNumberUsingBinetsFormula(m_length + 2);
                 ^
[123/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Math/NumberTheory/FibonacciProblems/CountWaysToReachTheNthStair.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\FibonacciProblems\CountWaysToReachTheNthStair.cpp:18:18: warning: narrowing conversion from 'UnsignedInteger' (aka 'unsigned long long') to signed type 'Count' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getNthFibonacciNumberUsingBinetsFormula(m_numberOfStairs + 1);
                 ^
[124/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Math/NumberTheory/UglyNumbers.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\UglyNumbers.cpp:23:13: warning: variable 'isCurrentNumberUgly' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool isCurrentNumberUgly = isDivisible(currentNumber, 2)   ? isUglyNumber[(currentNumber / 2) - 1]
            ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\UglyNumbers.cpp:23:18: note: FIX-IT applied suggested code changes
            bool isCurrentNumberUgly = isDivisible(currentNumber, 2)   ? isUglyNumber[(currentNumber / 2) - 1]
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\UglyNumbers.cpp:51:13: warning: variable 'nextUglyNumber' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
            Number nextUglyNumber = min(min(next2Multiple, next3Multiple), next5Multiple);
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Math\NumberTheory\UglyNumbers.cpp:51:20: note: FIX-IT applied suggested code changes
            Number nextUglyNumber = min(min(next2Multiple, next3Multiple), next5Multiple);
                   ^
[125/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/BooleanParenthesizationProblem.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:18:62: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getNumberOfWaysUsingNaiveRecursion(true, 0, m_inputValues.size() - 1);
                                                             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:29:76: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getNumberOfWaysUsingMemoizationDP(countMatrices, true, 0, m_inputValues.size() - 1);
                                                                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:50:17: warning: variable 'rightParenthesis' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index rightParenthesis = leftParenthesis + length - 1;
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:50:23: note: FIX-IT applied suggested code changes
                Index rightParenthesis = leftParenthesis + length - 1;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:54:21: warning: variable 'numberOfFalseInLeft' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Count numberOfFalseInLeft = countsForFalse.getEntry(leftParenthesis, operationIndex);
                    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:54:27: note: FIX-IT applied suggested code changes
                    Count numberOfFalseInLeft = countsForFalse.getEntry(leftParenthesis, operationIndex);
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:55:21: warning: variable 'numberOfTrueInLeft' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Count numberOfTrueInLeft = countsForTrue.getEntry(leftParenthesis, operationIndex);
                    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:55:27: note: FIX-IT applied suggested code changes
                    Count numberOfTrueInLeft = countsForTrue.getEntry(leftParenthesis, operationIndex);
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:56:21: warning: variable 'numberOfFalseInRight' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Count numberOfFalseInRight = countsForFalse.getEntry(operationIndex + 1, rightParenthesis);
                    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:56:27: note: FIX-IT applied suggested code changes
                    Count numberOfFalseInRight = countsForFalse.getEntry(operationIndex + 1, rightParenthesis);
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:57:21: warning: variable 'numberOfTrueInRight' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Count numberOfTrueInRight = countsForTrue.getEntry(operationIndex + 1, rightParenthesis);
                    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:57:27: note: FIX-IT applied suggested code changes
                    Count numberOfTrueInRight = countsForTrue.getEntry(operationIndex + 1, rightParenthesis);
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:106:13: warning: variable 'numberOfFalseInLeft' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count numberOfFalseInLeft = getNumberOfWaysUsingNaiveRecursion(false, leftParenthesis, operationIndex);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:106:19: note: FIX-IT applied suggested code changes
            Count numberOfFalseInLeft = getNumberOfWaysUsingNaiveRecursion(false, leftParenthesis, operationIndex);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:107:13: warning: variable 'numberOfTrueInLeft' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count numberOfTrueInLeft = getNumberOfWaysUsingNaiveRecursion(true, leftParenthesis, operationIndex);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:107:19: note: FIX-IT applied suggested code changes
            Count numberOfTrueInLeft = getNumberOfWaysUsingNaiveRecursion(true, leftParenthesis, operationIndex);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:108:13: warning: variable 'numberOfFalseInRight' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count numberOfFalseInRight =
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:108:19: note: FIX-IT applied suggested code changes
            Count numberOfFalseInRight =
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:110:13: warning: variable 'numberOfTrueInRight' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count numberOfTrueInRight = getNumberOfWaysUsingNaiveRecursion(true, operationIndex + 1, rightParenthesis);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:110:19: note: FIX-IT applied suggested code changes
            Count numberOfTrueInRight = getNumberOfWaysUsingNaiveRecursion(true, operationIndex + 1, rightParenthesis);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:138:5: warning: variable 'expectedOutputIndex' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
    Count expectedOutputIndex = convertBoolToCount(expectedOutput);
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:138:11: note: FIX-IT applied suggested code changes
    Count expectedOutputIndex = convertBoolToCount(expectedOutput);
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:145:17: warning: variable 'numberOfFalseInLeft' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                Count numberOfFalseInLeft = getNumberOfWaysUsingNaiveRecursion(false, leftParenthesis, operationIndex);
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:145:23: note: FIX-IT applied suggested code changes
                Count numberOfFalseInLeft = getNumberOfWaysUsingNaiveRecursion(false, leftParenthesis, operationIndex);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:146:17: warning: variable 'numberOfTrueInLeft' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                Count numberOfTrueInLeft = getNumberOfWaysUsingNaiveRecursion(true, leftParenthesis, operationIndex);
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:146:23: note: FIX-IT applied suggested code changes
                Count numberOfTrueInLeft = getNumberOfWaysUsingNaiveRecursion(true, leftParenthesis, operationIndex);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:147:17: warning: variable 'numberOfFalseInRight' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                Count numberOfFalseInRight =
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:147:23: note: FIX-IT applied suggested code changes
                Count numberOfFalseInRight =
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:149:17: warning: variable 'numberOfTrueInRight' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                Count numberOfTrueInRight =
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\BooleanParenthesizationProblem.cpp:149:23: note: FIX-IT applied suggested code changes
                Count numberOfTrueInRight =
                      ^
[126/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/CoinProblem.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CoinProblem.cpp:110:17: warning: variable 'subCount' of type 'int' can be declared 'const' [misc-const-correctness]
                int subCount = countPerValue[partialValue - availableCoin];
                ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CoinProblem.cpp:110:21: note: FIX-IT applied suggested code changes
                int subCount = countPerValue[partialValue - availableCoin];
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CoinProblem.cpp:147:40: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            countByValueByCoin, total, m_availableCoins.size() - 1);
                                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CoinProblem.cpp:266:34: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                    fewestSize = subSolution.size();
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CoinProblem.cpp:286:17: warning: variable 'subCount' of type 'int' can be declared 'const' [misc-const-correctness]
                int subCount(getNumberOfFewestCoinsUsingMemoizationDPInternal(countPerValue, total - availableCoin));
                ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CoinProblem.cpp:286:21: note: FIX-IT applied suggested code changes
                int subCount(getNumberOfFewestCoinsUsingMemoizationDPInternal(countPerValue, total - availableCoin));
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CoinProblem.cpp:318:13: warning: variable 'countWithoutCoin' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value countWithoutCoin = getNumberOfCoinCombinationsUsingMemoizationDPInternal(
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CoinProblem.cpp:318:19: note: FIX-IT applied suggested code changes
            Value countWithoutCoin = getNumberOfCoinCombinationsUsingMemoizationDPInternal(
                  ^
[127/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/CountNumberOfWaysToReachAGivenScoreInAGame.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame.cpp:34:5: warning: variable 'moveScores' of type 'CoinProblem::Coins' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    CoinProblem::Coins moveScores{3, 5, 10};
    ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame.cpp:34:24: note: FIX-IT applied suggested code changes
    CoinProblem::Coins moveScores{3, 5, 10};
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame.cpp:36:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem(moveScores);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame.cpp:36:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem(moveScores);
                ^
[128/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/CountPossibleWaysToConstructBuildings.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings.cpp:45:13: warning: variable 'previousCountOfBuildings' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count previousCountOfBuildings = countOfBuildings;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings.cpp:45:19: note: FIX-IT applied suggested code changes
            Count previousCountOfBuildings = countOfBuildings;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings.cpp:46:13: warning: variable 'previousCountOfSpaces' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count previousCountOfSpaces = countOfSpaces;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings.cpp:46:19: note: FIX-IT applied suggested code changes
            Count previousCountOfSpaces = countOfSpaces;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings.cpp:95:5: warning: variable 'resultInOnSide' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
    Count resultInOnSide = getNthFibonacciNumber(m_numberOfSections + 2);
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings.cpp:95:11: note: FIX-IT applied suggested code changes
    Count resultInOnSide = getNthFibonacciNumber(m_numberOfSections + 2);
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings.cpp:95:28: warning: narrowing conversion from 'UnsignedInteger' (aka 'unsigned long long') to signed type 'Count' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    Count resultInOnSide = getNthFibonacciNumber(m_numberOfSections + 2);
                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings.cpp:104:5: warning: variable 'maxNumberOfBuildings' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
    Count maxNumberOfBuildings = (m_numberOfSections + 1) / 2;
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings.cpp:104:11: note: FIX-IT applied suggested code changes
    Count maxNumberOfBuildings = (m_numberOfSections + 1) / 2;
          ^
[129/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/CountingTilings.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountingTilings.cpp:22:5: warning: variable 'currentRow' of type 'Row' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    Row currentRow(getEmptyRow(m_numberOfColumns));
    ^
        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountingTilings.cpp:22:9: note: FIX-IT applied suggested code changes
    Row currentRow(getEmptyRow(m_numberOfColumns));
        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountingTilings.cpp:48:56: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Count' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    possibleNextDetails.emplace(NextDetail{getEmptyRow(currentRow.length()), 0});
                                                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountingTilings.cpp:52:9: warning: variable 'nextIndex' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
        Count nextIndex(nextDetail.nextIndex);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountingTilings.cpp:52:15: note: FIX-IT applied suggested code changes
        Count nextIndex(nextDetail.nextIndex);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountingTilings.cpp:75:9: warning: variable 'emptyRow' of type 'Row' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        Row emptyRow(getEmptyRow(currentRow.length()));
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountingTilings.cpp:75:13: note: FIX-IT applied suggested code changes
        Row emptyRow(getEmptyRow(currentRow.length()));
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\CountingTilings.cpp:75:34: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Count' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Row emptyRow(getEmptyRow(currentRow.length()));
                                 ^
[130/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/EggDroppingPuzzle.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\EggDroppingPuzzle.cpp:39:17: warning: variable 'countForFloor' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                Count countForFloor =
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\EggDroppingPuzzle.cpp:39:23: note: FIX-IT applied suggested code changes
                Count countForFloor =
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\EggDroppingPuzzle.cpp:60:9: warning: variable 'countForFloor' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
        Count countForFloor =
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\EggDroppingPuzzle.cpp:60:15: note: FIX-IT applied suggested code changes
        Count countForFloor =
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\EggDroppingPuzzle.cpp:77:17: warning: variable 'countForFloor' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
                Count countForFloor =
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\EggDroppingPuzzle.cpp:77:23: note: FIX-IT applied suggested code changes
                Count countForFloor =
                      ^
[131/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/ElevatorWeightProblem.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\ElevatorWeightProblem.cpp:32:5: warning: variable 'allPeopleBits' of type 'int' can be declared 'const' [misc-const-correctness]
    int allPeopleBits = getNumberOfPeopleSubsets() - 1;
    ^
        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\ElevatorWeightProblem.cpp:32:9: note: FIX-IT applied suggested code changes
    int allPeopleBits = getNumberOfPeopleSubsets() - 1;
        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\ElevatorWeightProblem.cpp:54:89: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'ElevatorWeightProblem::Person' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
ElevatorWeightProblem::Person ElevatorWeightProblem::getNumberOfPeople() const { return m_peopleWeights.size(); }
                                                                                        ^
[132/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/FindTheMinimumCostToReachDestinationUsingATrain.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\FindTheMinimumCostToReachDestinationUsingATrain.cpp:19:52: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getMinimumCostUsingNaiveRecursion(m_pricesAtEachStation.getNumberOfColumns() - 1);
                                                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\FindTheMinimumCostToReachDestinationUsingATrain.cpp:31:63: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getMinimumCostUsingMemoizationDP(savedCosts, m_pricesAtEachStation.getNumberOfColumns() - 1);
                                                              ^
[133/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/MaximizeProfitInCuttingARod.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MaximizeProfitInCuttingARod.cpp:33:9: warning: variable 'smallestItemLength' of type 'Length' (aka 'int') can be declared 'const' [misc-const-correctness]
        Length smallestItemLength(getSmallestItemLength());
        ^
               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MaximizeProfitInCuttingARod.cpp:33:16: note: FIX-IT applied suggested code changes
        Length smallestItemLength(getSmallestItemLength());
               ^
[134/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/MaximumProfitByBuyingAndSellingAShareAtMostTwice.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice.cpp:21:28: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        for (Index right = m_prices.size() - 1; right > 0; --right) {
                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice.cpp:22:13: warning: variable 'left' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index left = right - 1;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice.cpp:22:19: note: FIX-IT applied suggested code changes
            Index left = right - 1;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice.cpp:31:13: warning: variable 'left' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index left = right - 1;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice.cpp:31:19: note: FIX-IT applied suggested code changes
            Index left = right - 1;
                  ^
[135/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/MinimumCostPolygonTriangulation.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumCostPolygonTriangulation.cpp:19:69: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getMinimumNumberOfOperationsUsingNaiveRecursion(0, m_vertices.size() - 1);
                                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumCostPolygonTriangulation.cpp:31:81: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getMinimumNumberOfOperationsUsingMemoizationDP(countMatrix, 0, m_vertices.size() - 1);
                                                                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumCostPolygonTriangulation.cpp:46:17: warning: variable 'right' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index right = left + length - 1;
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumCostPolygonTriangulation.cpp:46:23: note: FIX-IT applied suggested code changes
                Index right = left + length - 1;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumCostPolygonTriangulation.cpp:49:21: warning: variable 'currentCount' of type 'Cost' (aka 'double') can be declared 'const' [misc-const-correctness]
                    Cost currentCount = countMatrix.getEntry(left, inBetween) + countMatrix.getEntry(inBetween, right) +
                    ^
                         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumCostPolygonTriangulation.cpp:49:26: note: FIX-IT applied suggested code changes
                    Cost currentCount = countMatrix.getEntry(left, inBetween) + countMatrix.getEntry(inBetween, right) +
                         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumCostPolygonTriangulation.cpp:68:13: warning: variable 'currentCount' of type 'Cost' (aka 'double') can be declared 'const' [misc-const-correctness]
            Cost currentCount = getMinimumNumberOfOperationsUsingNaiveRecursion(left, inBetween) +
            ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumCostPolygonTriangulation.cpp:68:18: note: FIX-IT applied suggested code changes
            Cost currentCount = getMinimumNumberOfOperationsUsingNaiveRecursion(left, inBetween) +
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumCostPolygonTriangulation.cpp:92:17: warning: variable 'currentCount' of type 'Cost' (aka 'double') can be declared 'const' [misc-const-correctness]
                Cost currentCount = getMinimumNumberOfOperationsUsingMemoizationDP(countMatrix, left, inBetween) +
                ^
                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumCostPolygonTriangulation.cpp:92:22: note: FIX-IT applied suggested code changes
                Cost currentCount = getMinimumNumberOfOperationsUsingMemoizationDP(countMatrix, left, inBetween) +
                     ^
[136/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/MinimumNumberOfJumpsToReachEnd.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:47:13: warning: variable 'countOfJumps' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count countOfJumps = indexToCountOfJumps[startOfJumpIndex] + 1;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:47:19: note: FIX-IT applied suggested code changes
            Count countOfJumps = indexToCountOfJumps[startOfJumpIndex] + 1;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:48:13: warning: variable 'maxPossibleJumpIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index maxPossibleJumpIndex =
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:48:19: note: FIX-IT applied suggested code changes
            Index maxPossibleJumpIndex =
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:93:15: warning: variable 'jumpCount' set but not used [clang-diagnostic-unused-but-set-variable]
        Count jumpCount(0);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:101:13: warning: variable 'nextJumpIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index nextJumpIndex = min(index + m_sequence[index], static_cast<Index>(m_sequence.size() - 1));
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:101:19: note: FIX-IT applied suggested code changes
            Index nextJumpIndex = min(index + m_sequence[index], static_cast<Index>(m_sequence.size() - 1));
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:116:31: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index traverseIndex = m_sequence.size() - 1;
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:132:9: warning: variable 'maxPossibleJumpIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index maxPossibleJumpIndex =
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:132:15: note: FIX-IT applied suggested code changes
        Index maxPossibleJumpIndex =
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:148:13: warning: variable 'maxPossibleJumpIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index maxPossibleJumpIndex =
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd.cpp:148:19: note: FIX-IT applied suggested code changes
            Index maxPossibleJumpIndex =
                  ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src/UniqueProblems/DynamicProgramming/Other/MinimumNumberOfJumpsToReachEnd.cpp:93:15: warning: variable 'jumpCount' set but not used [-Wunused-but-set-variable]
        Count jumpCount(0);
              ^
1 warning generated.
[137/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/MobileNumericKeypadProblem.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MobileNumericKeypadProblem.cpp:43:13: warning: variable 'previousLengthMinus1' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count previousLengthMinus1 = lengthMinus1 - 1;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MobileNumericKeypadProblem.cpp:43:19: note: FIX-IT applied suggested code changes
            Count previousLengthMinus1 = lengthMinus1 - 1;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MobileNumericKeypadProblem.cpp:129:9: warning: variable 'lengthMinus1' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
        Count lengthMinus1 = length - 1;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MobileNumericKeypadProblem.cpp:129:15: note: FIX-IT applied suggested code changes
        Count lengthMinus1 = length - 1;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MobileNumericKeypadProblem.cpp:202:13: warning: variable 'lengthMinus1' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count lengthMinus1 = length - 1;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\MobileNumericKeypadProblem.cpp:202:19: note: FIX-IT applied suggested code changes
            Count lengthMinus1 = length - 1;
                  ^
[138/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/PrintMaximumNumberOfAs.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\PrintMaximumNumberOfAs.cpp:14:5: warning: variable 'countDetails' of type 'CountDetails' (aka 'vector<CountDetail>') can be declared 'const' [misc-const-correctness]
    CountDetails countDetails{
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\PrintMaximumNumberOfAs.cpp:14:18: note: FIX-IT applied suggested code changes
    CountDetails countDetails{
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\PrintMaximumNumberOfAs.cpp:33:5: warning: variable 'countDetails' of type 'CountDetails' (aka 'vector<CountDetail>') can be declared 'const' [misc-const-correctness]
    CountDetails countDetails{
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\PrintMaximumNumberOfAs.cpp:33:18: note: FIX-IT applied suggested code changes
    CountDetails countDetails{
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\PrintMaximumNumberOfAs.cpp:88:13: warning: variable 'countIfBreakPoint' of type 'Count' (aka 'int') can be declared 'const' [misc-const-correctness]
            Count countIfBreakPoint = (remainingNumberOfPresses - breakPoint - 1) * countsOnScreen[breakPoint - 1];
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\PrintMaximumNumberOfAs.cpp:88:19: note: FIX-IT applied suggested code changes
            Count countIfBreakPoint = (remainingNumberOfPresses - breakPoint - 1) * countsOnScreen[breakPoint - 1];
                  ^
[139/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/ProductDayProblem.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\ProductDayProblem.cpp:52:21: warning: variable 'previousDayWithoutProduct' of type 'Price' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Price previousDayWithoutProduct =
                    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\ProductDayProblem.cpp:52:27: note: FIX-IT applied suggested code changes
                    Price previousDayWithoutProduct =
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\ProductDayProblem.cpp:55:25: warning: variable 'currentMinimum' of type 'Price' (aka 'int') can be declared 'const' [misc-const-correctness]
                        Price currentMinimum =
                        ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\ProductDayProblem.cpp:55:31: note: FIX-IT applied suggested code changes
                        Price currentMinimum =
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\ProductDayProblem.cpp:92:12: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'ProductDayProblem::Day' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return m_pricesInDayByProduct.getNumberOfColumns();
           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\ProductDayProblem.cpp:96:12: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to signed type 'ProductDayProblem::Product' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return m_pricesInDayByProduct.getNumberOfRows();
           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\ProductDayProblem.cpp:116:21: warning: variable 'previousDayWithoutProduct' of type 'Price' (aka 'int') can be declared 'const' [misc-const-correctness]
                    Price previousDayWithoutProduct =
                    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\ProductDayProblem.cpp:116:27: note: FIX-IT applied suggested code changes
                    Price previousDayWithoutProduct =
                          ^
[140/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Other/WeightedJobScheduling.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:45:13: warning: variable 'timeIndexBeforeJob' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index timeIndexBeforeJob =
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:45:19: note: FIX-IT applied suggested code changes
            Index timeIndexBeforeJob =
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:46:17: warning: narrowing conversion from '_Iter_diff_t<_Vector_iterator<_Vector_val<_Simple_types<int>>>>' (aka 'long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                distance(timeStamps.begin(), find(timeStamps.begin(), timeStamps.end(), job.startTime));
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:47:13: warning: variable 'timeIndexAfterJob' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index timeIndexAfterJob =
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:47:19: note: FIX-IT applied suggested code changes
            Index timeIndexAfterJob =
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:48:17: warning: narrowing conversion from '_Iter_diff_t<_Vector_iterator<_Vector_val<_Simple_types<int>>>>' (aka 'long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                distance(timeStamps.begin(), find(timeStamps.begin(), timeStamps.end(), job.endTime));
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:49:13: warning: variable 'profitBeforeJob' of type 'Profit' (aka 'int') can be declared 'const' [misc-const-correctness]
            Profit profitBeforeJob = maxProfitsAtTime[timeIndexBeforeJob];
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:49:20: note: FIX-IT applied suggested code changes
            Profit profitBeforeJob = maxProfitsAtTime[timeIndexBeforeJob];
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:50:13: warning: variable 'profitAfterJob' of type 'Profit' (aka 'int') can be declared 'const' [misc-const-correctness]
            Profit profitAfterJob = maxProfitsAtTime[timeIndexAfterJob];
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:50:20: note: FIX-IT applied suggested code changes
            Profit profitAfterJob = maxProfitsAtTime[timeIndexAfterJob];
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:51:13: warning: variable 'profitIfJobIsDone' of type 'Profit' (aka 'int') can be declared 'const' [misc-const-correctness]
            Profit profitIfJobIsDone = profitBeforeJob + job.profit;
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:51:20: note: FIX-IT applied suggested code changes
            Profit profitIfJobIsDone = profitBeforeJob + job.profit;
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:52:13: warning: variable 'maxProfitForJob' of type 'Profit' (aka 'int') can be declared 'const' [misc-const-correctness]
            Profit maxProfitForJob = max(profitIfJobIsDone, profitAfterJob);
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Other\WeightedJobScheduling.cpp:52:20: note: FIX-IT applied suggested code changes
            Profit maxProfitForJob = max(profitIfJobIsDone, profitAfterJob);
                   ^
[141/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/OverlappingSubproblems/FibonacciExample.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:20:5: warning: variable 'size' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
    Number size = max(number + 1, 2);
    ^
           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:20:12: note: FIX-IT applied suggested code changes
    Number size = max(number + 1, 2);
           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:42:9: warning: variable 'nextFibonacci' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
        Number nextFibonacci = currentFibonacci + previousFibonacci;
        ^
               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:42:16: note: FIX-IT applied suggested code changes
        Number nextFibonacci = currentFibonacci + previousFibonacci;
               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:54:5: warning: variable 'sqrtOf5' of type 'double' can be declared 'const' [misc-const-correctness]
    double sqrtOf5 = sqrt(5);
    ^
           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:54:12: note: FIX-IT applied suggested code changes
    double sqrtOf5 = sqrt(5);
           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:55:5: warning: variable 'phi' of type 'double' can be declared 'const' [misc-const-correctness]
    double phi = (1 + sqrtOf5) / 2;
    ^
           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:55:12: note: FIX-IT applied suggested code changes
    double phi = (1 + sqrtOf5) / 2;
           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:72:5: warning: variable 'formulaicTransform' of type 'NumberMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    NumberMatrix formulaicTransform(2, 2, {0, 1, 1, 1});
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:72:18: note: FIX-IT applied suggested code changes
    NumberMatrix formulaicTransform(2, 2, {0, 1, 1, 1});
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:90:5: warning: variable 'formulaicTransform' of type 'NumberMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    NumberMatrix formulaicTransform(2, 2, {0, 1, 1, 1});
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:90:18: note: FIX-IT applied suggested code changes
    NumberMatrix formulaicTransform(2, 2, {0, 1, 1, 1});
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:92:5: warning: variable 'fibonacciMatrix' of type 'NumberMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    NumberMatrix fibonacciMatrix(getMatrixRaiseToScalarPower(formulaicTransform, number - 1));  // logarithmic
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:92:18: note: FIX-IT applied suggested code changes
    NumberMatrix fibonacciMatrix(getMatrixRaiseToScalarPower(formulaicTransform, number - 1));  // logarithmic
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:100:9: warning: variable 'size' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
        Number size = max(number + 1, 2);
        ^
               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:100:16: note: FIX-IT applied suggested code changes
        Number size = max(number + 1, 2);
               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:116:17: warning: variable 'k2' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
                Number k2 = (step + 1) / 2;
                ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:116:24: note: FIX-IT applied suggested code changes
                Number k2 = (step + 1) / 2;
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:117:17: warning: variable 'fibonacciAtK' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
                Number fibonacciAtK = iterativeData[k2];
                ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:117:24: note: FIX-IT applied suggested code changes
                Number fibonacciAtK = iterativeData[k2];
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:118:17: warning: variable 'fibonacciAtKMinus1' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
                Number fibonacciAtKMinus1 = iterativeData[k2 - 1];
                ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:118:24: note: FIX-IT applied suggested code changes
                Number fibonacciAtKMinus1 = iterativeData[k2 - 1];
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:121:17: warning: variable 'k2' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
                Number k2 = step / 2;
                ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:121:24: note: FIX-IT applied suggested code changes
                Number k2 = step / 2;
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:122:17: warning: variable 'fibonacciAtK' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
                Number fibonacciAtK = iterativeData[k2];
                ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:122:24: note: FIX-IT applied suggested code changes
                Number fibonacciAtK = iterativeData[k2];
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:123:17: warning: variable 'fibonacciAtKMinus1' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
                Number fibonacciAtKMinus1 = iterativeData[k2 - 1];
                ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:123:24: note: FIX-IT applied suggested code changes
                Number fibonacciAtKMinus1 = iterativeData[k2 - 1];
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:153:5: warning: variable 'size' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
    Number size = max(number + 1, 2);
    ^
           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:153:12: note: FIX-IT applied suggested code changes
    Number size = max(number + 1, 2);
           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:163:5: warning: variable 'size' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
    Number size = max(number + 1, 2);
    ^
           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:163:12: note: FIX-IT applied suggested code changes
    Number size = max(number + 1, 2);
           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:186:13: warning: variable 'k' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
            Number k = (number + 1) / 2;
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:186:20: note: FIX-IT applied suggested code changes
            Number k = (number + 1) / 2;
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:187:13: warning: variable 'fibonacciAtK' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
            Number fibonacciAtK = getNthFibonacciUsingLogarithmicMemoizationDP(memoizationData, k);
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:187:20: note: FIX-IT applied suggested code changes
            Number fibonacciAtK = getNthFibonacciUsingLogarithmicMemoizationDP(memoizationData, k);
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:188:13: warning: variable 'fibonacciAtKMinus1' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
            Number fibonacciAtKMinus1 = getNthFibonacciUsingLogarithmicMemoizationDP(memoizationData, k - 1);
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:188:20: note: FIX-IT applied suggested code changes
            Number fibonacciAtKMinus1 = getNthFibonacciUsingLogarithmicMemoizationDP(memoizationData, k - 1);
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:191:13: warning: variable 'k' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
            Number k = number / 2;
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:191:20: note: FIX-IT applied suggested code changes
            Number k = number / 2;
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:192:13: warning: variable 'fibonacciAtK' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
            Number fibonacciAtK = getNthFibonacciUsingLogarithmicMemoizationDP(memoizationData, k);
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:192:20: note: FIX-IT applied suggested code changes
            Number fibonacciAtK = getNthFibonacciUsingLogarithmicMemoizationDP(memoizationData, k);
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:193:13: warning: variable 'fibonacciAtKMinus1' of type 'Number' (aka 'int') can be declared 'const' [misc-const-correctness]
            Number fibonacciAtKMinus1 = getNthFibonacciUsingLogarithmicMemoizationDP(memoizationData, k - 1);
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\OverlappingSubproblems\FibonacciExample.cpp:193:20: note: FIX-IT applied suggested code changes
            Number fibonacciAtKMinus1 = getNthFibonacciUsingLogarithmicMemoizationDP(memoizationData, k - 1);
                   ^
[142/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Palindrome/LongestPalindromicSubsequence.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubsequence.cpp:13:57: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getLongestLengthUsingNaiveRecursion(0, m_string.length() - 1);
                                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubsequence.cpp:22:70: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getLongestLengthUsingMemoizationDP(lengthMatrix, 0, m_string.length() - 1);
                                                                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubsequence.cpp:32:9: warning: variable 'stringLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index stringLength = m_string.length();
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubsequence.cpp:32:15: note: FIX-IT applied suggested code changes
        Index stringLength = m_string.length();
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubsequence.cpp:32:30: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index stringLength = m_string.length();
                             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubsequence.cpp:63:5: warning: variable 'stringLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
    Index stringLength = m_string.length();
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubsequence.cpp:63:11: note: FIX-IT applied suggested code changes
    Index stringLength = m_string.length();
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubsequence.cpp:63:26: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    Index stringLength = m_string.length();
                         ^
[143/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Palindrome/LongestPalindromicSubstring.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:14:57: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getLongestLengthUsingNaiveRecursion(0, m_string.length() - 1);
                                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:25:70: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getLongestLengthUsingMemoizationDP(lengthMatrix, 0, m_string.length() - 1);
                                                                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:38:36: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index const stringLength = m_string.length();
                                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:55:17: warning: variable 'right' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index right = left + length - 1;
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:55:23: note: FIX-IT applied suggested code changes
                Index right = left + length - 1;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:72:36: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index const stringLength = m_string.length();
                                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:98:36: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index const stringLength = m_string.length();
                                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:127:5: warning: variable 'length' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
    Index length = right - left + 1;
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:127:11: note: FIX-IT applied suggested code changes
    Index length = right - left + 1;
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:135:13: warning: variable 'middleLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index middleLength = getLongestLengthUsingNaiveRecursion(left + 1, right - 1);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:135:19: note: FIX-IT applied suggested code changes
            Index middleLength = getLongestLengthUsingNaiveRecursion(left + 1, right - 1);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:155:9: warning: variable 'length' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index length = right - left + 1;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:155:15: note: FIX-IT applied suggested code changes
        Index length = right - left + 1;
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:163:17: warning: variable 'middleLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index middleLength = getLongestLengthUsingNaiveRecursion(left + 1, right - 1);
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\LongestPalindromicSubstring.cpp:163:23: note: FIX-IT applied suggested code changes
                Index middleLength = getLongestLengthUsingNaiveRecursion(left + 1, right - 1);
                      ^
[144/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Palindrome/PalindromePartitioning.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\PalindromePartitioning.cpp:14:63: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getMinimumNumberOfCutsUsingNaiveRecursion(0, m_string.length() - 1);
                                                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\PalindromePartitioning.cpp:25:75: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getMinimumNumberOfCutsUsingMemoizationDP(countMatrix, 0, m_string.length() - 1);
                                                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\PalindromePartitioning.cpp:35:9: warning: variable 'stringLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index stringLength = m_string.length();
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\PalindromePartitioning.cpp:35:15: note: FIX-IT applied suggested code changes
        Index stringLength = m_string.length();
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\PalindromePartitioning.cpp:35:30: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index stringLength = m_string.length();
                             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\PalindromePartitioning.cpp:40:17: warning: variable 'right' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index right = left + length - 1;
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\PalindromePartitioning.cpp:40:23: note: FIX-IT applied suggested code changes
                Index right = left + length - 1;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\PalindromePartitioning.cpp:64:36: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index const stringLength = m_string.length();
                                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\PalindromePartitioning.cpp:79:17: warning: variable 'right' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index right = left + length - 1;
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Palindrome\PalindromePartitioning.cpp:79:23: note: FIX-IT applied suggested code changes
                Index right = left + length - 1;
                      ^
[145/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/String/LevenshteinDistance.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:16:54: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getLevenshteinDistanceUsingNaiveRecursion(m_string1.length(), m_string2.length());
                                                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:16:74: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getLevenshteinDistanceUsingNaiveRecursion(m_string1.length(), m_string2.length());
                                                                         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:21:67: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getLevenshteinDistanceUsingMemoizationDP(distanceGrid, m_string1.length(), m_string2.length());
                                                                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:21:87: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getLevenshteinDistanceUsingMemoizationDP(distanceGrid, m_string1.length(), m_string2.length());
                                                                                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:54:13: warning: variable 'replaceDistance' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index replaceDistance = distanceGrid.getEntry(x - 1, y - 1);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:54:19: note: FIX-IT applied suggested code changes
            Index replaceDistance = distanceGrid.getEntry(x - 1, y - 1);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:55:13: warning: variable 'deleteDistance' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index deleteDistance = distanceGrid.getEntry(x - 1, y);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:55:19: note: FIX-IT applied suggested code changes
            Index deleteDistance = distanceGrid.getEntry(x - 1, y);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:56:13: warning: variable 'insertDistance' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index insertDistance = distanceGrid.getEntry(x, y - 1);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:56:19: note: FIX-IT applied suggested code changes
            Index insertDistance = distanceGrid.getEntry(x, y - 1);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:88:13: warning: variable 'cost' of type 'int' can be declared 'const' [misc-const-correctness]
            int cost = m_string1[index1 - 1] == m_string2[index2 - 1] ? 0 : 1;
            ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:88:17: note: FIX-IT applied suggested code changes
            int cost = m_string1[index1 - 1] == m_string2[index2 - 1] ? 0 : 1;
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:109:5: warning: variable 'replaceDistance' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
    Index replaceDistance = getLevenshteinDistanceUsingNaiveRecursion(index1 - 1, index2 - 1);
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:109:11: note: FIX-IT applied suggested code changes
    Index replaceDistance = getLevenshteinDistanceUsingNaiveRecursion(index1 - 1, index2 - 1);
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:110:5: warning: variable 'deleteDistance' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
    Index deleteDistance = getLevenshteinDistanceUsingNaiveRecursion(index1 - 1, index2);
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:110:11: note: FIX-IT applied suggested code changes
    Index deleteDistance = getLevenshteinDistanceUsingNaiveRecursion(index1 - 1, index2);
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:111:5: warning: variable 'insertDistance' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
    Index insertDistance = getLevenshteinDistanceUsingNaiveRecursion(index1, index2 - 1);
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:111:11: note: FIX-IT applied suggested code changes
    Index insertDistance = getLevenshteinDistanceUsingNaiveRecursion(index1, index2 - 1);
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:128:13: warning: variable 'replaceDistance' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index replaceDistance = getLevenshteinDistanceUsingMemoizationDP(distanceGrid, index1 - 1, index2 - 1);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:128:19: note: FIX-IT applied suggested code changes
            Index replaceDistance = getLevenshteinDistanceUsingMemoizationDP(distanceGrid, index1 - 1, index2 - 1);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:129:13: warning: variable 'deleteDistance' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index deleteDistance = getLevenshteinDistanceUsingMemoizationDP(distanceGrid, index1 - 1, index2);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:129:19: note: FIX-IT applied suggested code changes
            Index deleteDistance = getLevenshteinDistanceUsingMemoizationDP(distanceGrid, index1 - 1, index2);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:130:13: warning: variable 'insertDistance' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index insertDistance = getLevenshteinDistanceUsingMemoizationDP(distanceGrid, index1, index2 - 1);
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LevenshteinDistance.cpp:130:19: note: FIX-IT applied suggested code changes
            Index insertDistance = getLevenshteinDistanceUsingMemoizationDP(distanceGrid, index1, index2 - 1);
                  ^
[146/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/String/LongestCommonSubstring.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LongestCommonSubstring.cpp:17:17: warning: variable 'length' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index length = getLongestCommonSubstringLengthUsingNaiveRecursion(index1, index2);
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LongestCommonSubstring.cpp:17:23: note: FIX-IT applied suggested code changes
                Index length = getLongestCommonSubstringLengthUsingNaiveRecursion(index1, index2);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LongestCommonSubstring.cpp:31:17: warning: variable 'length' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index length = getLongestCommonSubstringLengthUsingMemoizationDP(lengthGrid, index1, index2);
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\LongestCommonSubstring.cpp:31:23: note: FIX-IT applied suggested code changes
                Index length = getLongestCommonSubstringLengthUsingMemoizationDP(lengthGrid, index1, index2);
                      ^
[147/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/String/StringConstruction.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:23:27: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getCount(m_stringToConstruct.length());
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:31:46: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = getCountSquareRootAlgorithm(m_stringToConstruct.length());
                                             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:55:5: warning: variable 'hashFunction' of type 'HornerHashFunctionForWholeString<HashValue>' (aka 'HornerHashFunctionForWholeString<unsigned long long>') can be declared 'const' [misc-const-correctness]
    HornerHashFunctionForWholeString<HashValue> hashFunction(RADIX, A_LARGE_PRIME);
    ^
                                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:55:49: note: FIX-IT applied suggested code changes
    HornerHashFunctionForWholeString<HashValue> hashFunction(RADIX, A_LARGE_PRIME);
                                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:83:9: warning: variable 'subStringLength' of type 'int' can be declared 'const' [misc-const-correctness]
        int subStringLength = subString.length();
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:83:13: note: FIX-IT applied suggested code changes
        int subStringLength = subString.length();
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:83:31: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int subStringLength = subString.length();
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:102:5: warning: variable 'mainHashFunction' of type 'HornerHashFunctionForSubstrings<HashValue>' (aka 'HornerHashFunctionForSubstrings<unsigned long long>') can be declared 'const' [misc-const-correctness]
    HornerHashFunctionForSubstrings<HashValue> mainHashFunction(RADIX, A_LARGE_PRIME, m_stringToConstruct);
    ^
                                               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:102:48: note: FIX-IT applied suggested code changes
    HornerHashFunctionForSubstrings<HashValue> mainHashFunction(RADIX, A_LARGE_PRIME, m_stringToConstruct);
                                               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:105:5: warning: variable 'limit' of type 'int' can be declared 'const' [misc-const-correctness]
    int limit = min(m_subStrings.size(), m_subStringHash.size());
    ^
        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:105:9: note: FIX-IT applied suggested code changes
    int limit = min(m_subStrings.size(), m_subStringHash.size());
        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:105:17: warning: narrowing conversion from 'unsigned long long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int limit = min(m_subStrings.size(), m_subStringHash.size());
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:107:9: warning: variable 'subStringLength' of type 'int' can be declared 'const' [misc-const-correctness]
        int subStringLength = m_subStrings[i].length();
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:107:13: note: FIX-IT applied suggested code changes
        int subStringLength = m_subStrings[i].length();
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:107:31: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int subStringLength = m_subStrings[i].length();
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:108:9: warning: variable 'subStringHash' of type 'HashValue' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        HashValue subStringHash = m_subStringHash[i];
        ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\StringConstruction.cpp:108:19: note: FIX-IT applied suggested code changes
        HashValue subStringHash = m_subStringHash[i];
                  ^
[148/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/String/WordWrapProblemWithLineWidth.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:15:9: warning: variable 'firstWordLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index firstWordLength = m_words.front().length();
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:15:15: note: FIX-IT applied suggested code changes
        Index firstWordLength = m_words.front().length();
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:15:33: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index firstWordLength = m_words.front().length();
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:16:9: warning: variable 'recursionDetails' of type 'RecursionDetails' can be declared 'const' [misc-const-correctness]
        RecursionDetails recursionDetails{Indices{firstWordLength}};  // bad idea to have structure as argument
        ^
                         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:16:26: note: FIX-IT applied suggested code changes
        RecursionDetails recursionDetails{Indices{firstWordLength}};  // bad idea to have structure as argument
                         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:31:30: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            Index lineLength(m_words.front().length());
                             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:33:17: warning: variable 'wordLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index wordLength(it->length());
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:33:23: note: FIX-IT applied suggested code changes
                Index wordLength(it->length());
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:33:34: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                Index wordLength(it->length());
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:62:9: warning: variable 'numberOfWords' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index numberOfWords(m_words.size());
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:62:15: note: FIX-IT applied suggested code changes
        Index numberOfWords(m_words.size());
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:62:29: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index numberOfWords(m_words.size());
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:70:31: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                lineLength += m_words[lastWordIndex].length();
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:97:9: warning: variable 'wordLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index wordLength(m_words[wordIndex].length());
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:97:15: note: FIX-IT applied suggested code changes
        Index wordLength(m_words[wordIndex].length());
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:97:26: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index wordLength(m_words[wordIndex].length());
                         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:99:13: warning: variable 'lastLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index lastLength(recursionDetails.lineLengths.back());
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:99:19: note: FIX-IT applied suggested code changes
            Index lastLength(recursionDetails.lineLengths.back());
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:123:18: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = m_words.front().length();
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithLineWidth.cpp:125:23: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            result += it->length() + 1;  // plus one for space
                      ^
[149/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/String/WordWrapProblemWithoutLineWidth.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:16:9: warning: variable 'firstWordLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index firstWordLength = m_words.front().length();
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:16:15: note: FIX-IT applied suggested code changes
        Index firstWordLength = m_words.front().length();
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:16:33: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index firstWordLength = m_words.front().length();
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:17:9: warning: variable 'recursionDetails' of type 'RecursionDetails' can be declared 'const' [misc-const-correctness]
        RecursionDetails recursionDetails{firstWordLength, Indices{firstWordLength}};
        ^
                         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:17:26: note: FIX-IT applied suggested code changes
        RecursionDetails recursionDetails{firstWordLength, Indices{firstWordLength}};
                         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:27:5: warning: variable 'totalLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
    Index totalLength(getTotalLength());
    ^
          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:27:11: note: FIX-IT applied suggested code changes
    Index totalLength(getTotalLength());
          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:33:30: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            Index lineLength(m_words.front().length());
                             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:35:17: warning: variable 'wordLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index wordLength(it->length());
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:35:23: note: FIX-IT applied suggested code changes
                Index wordLength(it->length());
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:35:34: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                Index wordLength(it->length());
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:83:9: warning: variable 'wordLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index wordLength(m_words[wordIndex].length());
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:83:15: note: FIX-IT applied suggested code changes
        Index wordLength(m_words[wordIndex].length());
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:83:26: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index wordLength(m_words[wordIndex].length());
                         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:106:18: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        result = m_words.front().length();
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\String\WordWrapProblemWithoutLineWidth.cpp:108:23: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            result += it->length() + 1;  // plus one for space
                      ^
[150/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/SubArray/LongestEqualLengthSubArraysWithSameSum.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum.cpp:21:5: warning: variable 'partialSumsQuery' of type 'RangeQueryWithAccumulator<Values>' (aka 'RangeQueryWithAccumulator<vector<int>>') can be declared 'const' [misc-const-correctness]
    RangeQueryWithAccumulator<Values> partialSumsQuery(m_values, plus<>(), minus<>());
    ^
                                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum.cpp:21:39: note: FIX-IT applied suggested code changes
    RangeQueryWithAccumulator<Values> partialSumsQuery(m_values, plus<>(), minus<>());
                                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum.cpp:22:33: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    for (Index subArrayLength = m_values.size() / 2; subArrayLength > 0; --subArrayLength) {
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum.cpp:26:13: warning: variable 'startOfSubArray2' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index startOfSubArray2 = startOfSubArray1 + subArrayLength;
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum.cpp:26:19: note: FIX-IT applied suggested code changes
            Index startOfSubArray2 = startOfSubArray1 + subArrayLength;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum.cpp:27:13: warning: variable 'sum1' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value sum1 =
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum.cpp:27:19: note: FIX-IT applied suggested code changes
            Value sum1 =
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum.cpp:29:13: warning: variable 'sum2' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value sum2 =
            ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum.cpp:29:19: note: FIX-IT applied suggested code changes
            Value sum2 =
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum.cpp:45:9: warning: variable 'endOfSubArray1' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index endOfSubArray1 = startOfSubArray2 - 1;
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum.cpp:45:15: note: FIX-IT applied suggested code changes
        Index endOfSubArray1 = startOfSubArray2 - 1;
              ^
[151/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/SubArray/MaximumSubArraySum.cpp.obj
[152/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Subsequence/Increasing/BoxStackingProblem.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\BoxStackingProblem.cpp:42:9: warning: variable 'indexOfMaxSum' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index indexOfMaxSum = distance(partialHeights.cbegin(), itMax);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\BoxStackingProblem.cpp:42:15: note: FIX-IT applied suggested code changes
        Index indexOfMaxSum = distance(partialHeights.cbegin(), itMax);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\BoxStackingProblem.cpp:42:31: warning: narrowing conversion from '_Iter_diff_t<_Vector_const_iterator<_Vector_val<_Simple_types<int>>>>' (aka 'long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index indexOfMaxSum = distance(partialHeights.cbegin(), itMax);
                              ^
[153/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Subsequence/Increasing/BuildingBridges.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\BuildingBridges.cpp:47:17: warning: variable 'currentLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index currentLength = distance(lengthMinus1ToEndValue.begin(), lowerBoundItForEndValue);
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\BuildingBridges.cpp:47:23: note: FIX-IT applied suggested code changes
                Index currentLength = distance(lengthMinus1ToEndValue.begin(), lowerBoundItForEndValue);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\BuildingBridges.cpp:47:39: warning: narrowing conversion from '_Iter_diff_t<_Vector_iterator<_Vector_val<_Simple_types<int>>>>' (aka 'long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                Index currentLength = distance(lengthMinus1ToEndValue.begin(), lowerBoundItForEndValue);
                                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\BuildingBridges.cpp:80:5: warning: variable 'lis' of type 'LongestIncreasingSubsequenceLinearithmic' can be declared 'const' [misc-const-correctness]
    LongestIncreasingSubsequenceLinearithmic lis(secondPoints);
    ^
                                             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\BuildingBridges.cpp:80:46: note: FIX-IT applied suggested code changes
    LongestIncreasingSubsequenceLinearithmic lis(secondPoints);
                                             ^
[154/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Subsequence/Increasing/LongestIncreasingSubsequence.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequence.cpp:53:9: warning: variable 'indexOfLongestLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index indexOfLongestLength = distance(subLengths.cbegin(), itMax);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequence.cpp:53:15: note: FIX-IT applied suggested code changes
        Index indexOfLongestLength = distance(subLengths.cbegin(), itMax);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequence.cpp:53:38: warning: narrowing conversion from '_Iter_diff_t<_Vector_const_iterator<_Vector_val<_Simple_types<int>>>>' (aka 'long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index indexOfLongestLength = distance(subLengths.cbegin(), itMax);
                                     ^
[155/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Subsequence/Increasing/LongestIncreasingSubsequenceLinearithmic.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequenceLinearithmic.cpp:57:17: warning: variable 'currentLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index currentLength = distance(lengthMinus1ToEndValue.begin(), lowerBoundItForEndValue);
                ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequenceLinearithmic.cpp:57:23: note: FIX-IT applied suggested code changes
                Index currentLength = distance(lengthMinus1ToEndValue.begin(), lowerBoundItForEndValue);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequenceLinearithmic.cpp:57:39: warning: narrowing conversion from '_Iter_diff_t<_Vector_iterator<_Vector_val<_Simple_types<int>>>>' (aka 'long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                Index currentLength = distance(lengthMinus1ToEndValue.begin(), lowerBoundItForEndValue);
                                      ^
[156/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Subsequence/Increasing/MaximumLengthChainOfPairs.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\MaximumLengthChainOfPairs.cpp:56:9: warning: variable 'indexOfLongestLength' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index indexOfLongestLength = distance(subLengths.cbegin(), itMax);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\MaximumLengthChainOfPairs.cpp:56:15: note: FIX-IT applied suggested code changes
        Index indexOfLongestLength = distance(subLengths.cbegin(), itMax);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\MaximumLengthChainOfPairs.cpp:56:38: warning: narrowing conversion from '_Iter_diff_t<_Vector_const_iterator<_Vector_val<_Simple_types<int>>>>' (aka 'long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index indexOfLongestLength = distance(subLengths.cbegin(), itMax);
                                     ^
[157/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Subsequence/Increasing/MaximumSumIncreasingSubsequence.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\MaximumSumIncreasingSubsequence.cpp:52:9: warning: variable 'indexOfMaxSum' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index indexOfMaxSum = distance(partialSums.cbegin(), itMax);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\MaximumSumIncreasingSubsequence.cpp:52:15: note: FIX-IT applied suggested code changes
        Index indexOfMaxSum = distance(partialSums.cbegin(), itMax);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\Increasing\MaximumSumIncreasingSubsequence.cpp:52:31: warning: narrowing conversion from '_Iter_diff_t<_Vector_const_iterator<_Vector_val<_Simple_types<int>>>>' (aka 'long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        Index indexOfMaxSum = distance(partialSums.cbegin(), itMax);
                              ^
[158/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Subsequence/LongestBitonicSubsequence.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\LongestBitonicSubsequence.cpp:65:22: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    for (int index = m_sequence.size() - 1; index >= 0; --index) {
                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\LongestBitonicSubsequence.cpp:92:22: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    for (int index = m_sequence.size() - 1; index >= 0; --index) {
                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\LongestBitonicSubsequence.cpp:111:9: warning: variable 'lengthAtIndex' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value lengthAtIndex(increasingPartialLengths[index] + decreasingPartialLengths[index] - 1);
        ^
              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\LongestBitonicSubsequence.cpp:111:15: note: FIX-IT applied suggested code changes
        Value lengthAtIndex(increasingPartialLengths[index] + decreasingPartialLengths[index] - 1);
              ^
[159/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Subsequence/LongestCommonSubsequence.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\LongestCommonSubsequence.cpp:11:48: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getLongestLengthUsingNaiveRecursion(m_sequence1.size(), m_sequence2.size());
                                               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\LongestCommonSubsequence.cpp:11:68: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getLongestLengthUsingNaiveRecursion(m_sequence1.size(), m_sequence2.size());
                                                                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\LongestCommonSubsequence.cpp:23:61: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getLongestLengthUsingMemoizationDP(lengthMatrix, m_sequence1.size(), m_sequence2.size());
                                                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Subsequence\LongestCommonSubsequence.cpp:23:81: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getLongestLengthUsingMemoizationDP(lengthMatrix, m_sequence1.size(), m_sequence2.size());
                                                                                ^
[160/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/DynamicProgramming/Supersequence/ShortestCommonSupersequence.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Supersequence\ShortestCommonSupersequence.cpp:13:49: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getShortestLengthUsingNaiveRecursion(m_sequence1.size(), m_sequence2.size());
                                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Supersequence\ShortestCommonSupersequence.cpp:13:69: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getShortestLengthUsingNaiveRecursion(m_sequence1.size(), m_sequence2.size());
                                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Supersequence\ShortestCommonSupersequence.cpp:28:62: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getShortestLengthUsingMemoizationDP(lengthMatrix, m_sequence1.size(), m_sequence2.size());
                                                             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\DynamicProgramming\Supersequence\ShortestCommonSupersequence.cpp:28:82: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'Index' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return getShortestLengthUsingMemoizationDP(lengthMatrix, m_sequence1.size(), m_sequence2.size());
                                                                                 ^
[161/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/GreedyAlgorithm/FractionalKnapsack.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\GreedyAlgorithm\FractionalKnapsack.cpp:24:23: warning: narrowing conversion from 'double' to 'Profit' (aka 'int') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            result += profit * (static_cast<double>(remainingWeight) / weight);
                      ^
[162/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/GreedyAlgorithm/GreedyAlgorithmForFewestCoins.cpp.obj
[163/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/GreedyAlgorithm/JobWithProfitAndDeadlines.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\GreedyAlgorithm\JobWithProfitAndDeadlines.cpp:25:9: warning: variable 'availableTime' of type 'int' can be declared 'const' [misc-const-correctness]
        int availableTime = availableSchedule.getPreviousFreeIndexAt(job.deadline);
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\GreedyAlgorithm\JobWithProfitAndDeadlines.cpp:25:13: note: FIX-IT applied suggested code changes
        int availableTime = availableSchedule.getPreviousFreeIndexAt(job.deadline);
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\GreedyAlgorithm\JobWithProfitAndDeadlines.cpp:26:9: warning: variable 'isAvailableTime' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool isAvailableTime =
        ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\GreedyAlgorithm\JobWithProfitAndDeadlines.cpp:26:14: note: FIX-IT applied suggested code changes
        bool isAvailableTime =
             ^
[164/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/GreedyAlgorithm/SchedulingEvents.cpp.obj
[165/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/GreedyAlgorithm/SweepLine/MaximumEmployeeCount.cpp.obj
[166/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/GreedyAlgorithm/SweepLine/MinimumNumberOfPlatformsRequiredForARailwayStation.cpp.obj
[167/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/GreedyAlgorithm/TaskAndDeadlines.cpp.obj
[168/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/RandomProblems/Rand7FromRand5.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\RandomProblems\Rand7FromRand5.cpp:23:9: warning: variable 'randomFrom0To24' of type 'int' can be declared 'const' [misc-const-correctness]
        int randomFrom0To24 = 5 * getRandomFrom0To4() + getRandomFrom0To4();
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\RandomProblems\Rand7FromRand5.cpp:23:13: note: FIX-IT applied suggested code changes
        int randomFrom0To24 = 5 * getRandomFrom0To4() + getRandomFrom0To4();
            ^
[169/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/SpecialProblems/DeBruijnSequences.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\DeBruijnSequences.cpp:20:9: warning: variable 'eulerPathSearch' of type 'HierholzerAlgorithmForDirectedGraph<string>' (aka 'HierholzerAlgorithmForDirectedGraph<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
        HierholzerAlgorithmForDirectedGraph<string> eulerPathSearch(m_graph);
        ^
                                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\DeBruijnSequences.cpp:20:53: note: FIX-IT applied suggested code changes
        HierholzerAlgorithmForDirectedGraph<string> eulerPathSearch(m_graph);
                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\DeBruijnSequences.cpp:39:5: warning: variable 'substring' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string substring(m_substringSize - 1, m_alphabet.front());
    ^
           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\DeBruijnSequences.cpp:39:12: note: FIX-IT applied suggested code changes
    string substring(m_substringSize - 1, m_alphabet.front());
           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\DeBruijnSequences.cpp:46:13: warning: variable 'newSubstring' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
            string newSubstring = substring.substr(1, substring.length()) + c;
            ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\DeBruijnSequences.cpp:46:20: note: FIX-IT applied suggested code changes
            string newSubstring = substring.substr(1, substring.length()) + c;
                   ^
[170/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/SpecialProblems/JosephusProblem.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\JosephusProblem.cpp:21:17: warning: variable 'possibleIndex' of type 'int' can be declared 'const' [misc-const-correctness]
                int possibleIndex = skipTree.getIndexWithTargetValue(index, skipCount - actualSkip, minus<>());
                ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\JosephusProblem.cpp:21:21: note: FIX-IT applied suggested code changes
                int possibleIndex = skipTree.getIndexWithTargetValue(index, skipCount - actualSkip, minus<>());
                    ^
[171/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/SpecialProblems/KnightsTour.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\KnightsTour.cpp:92:5: warning: variable 'sourceNeighbors' of type 'int' can be declared 'const' [misc-const-correctness]
    int sourceNeighbors = getNumberOfNeighbors(x, y);
    ^
        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\KnightsTour.cpp:92:9: note: FIX-IT applied suggested code changes
    int sourceNeighbors = getNumberOfNeighbors(x, y);
        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\KnightsTour.cpp:93:5: warning: variable 'sourceIndex' of type 'int' can be declared 'const' [misc-const-correctness]
    int sourceIndex = getChessBoardIndex(x, y);
    ^
        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\KnightsTour.cpp:93:9: note: FIX-IT applied suggested code changes
    int sourceIndex = getChessBoardIndex(x, y);
        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\KnightsTour.cpp:111:9: warning: variable 'destinationNeighbors' of type 'int' can be declared 'const' [misc-const-correctness]
        int destinationNeighbors = getNumberOfNeighbors(x, y);
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\KnightsTour.cpp:111:13: note: FIX-IT applied suggested code changes
        int destinationNeighbors = getNumberOfNeighbors(x, y);
            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\KnightsTour.cpp:112:9: warning: variable 'destinationIndex' of type 'int' can be declared 'const' [misc-const-correctness]
        int destinationIndex = getChessBoardIndex(x, y);
        ^
            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\KnightsTour.cpp:112:13: note: FIX-IT applied suggested code changes
        int destinationIndex = getChessBoardIndex(x, y);
            ^
[172/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/SpecialProblems/TowersOfHanoi.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\TowersOfHanoi.cpp:29:5: warning: variable 'disk' of type 'Disk' (aka 'int') can be declared 'const' [misc-const-correctness]
    Disk disk = source.disks.top();
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\TowersOfHanoi.cpp:29:10: note: FIX-IT applied suggested code changes
    Disk disk = source.disks.top();
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\TowersOfHanoi.cpp:39:5: warning: variable 'outputIterator' of type 'std::ostream_iterator<Disk>' (aka 'ostream_iterator<int>') can be declared 'const' [misc-const-correctness]
    std::ostream_iterator<Disk> outputIterator(cout, ", ");
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\src\UniqueProblems\SpecialProblems\TowersOfHanoi.cpp:39:33: note: FIX-IT applied suggested code changes
    std::ostream_iterator<Disk> outputIterator(cout, ", ");
                                ^
[173/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/src/UniqueProblems/Utilities/PrintUtilities.cpp.obj
[174/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/AmortizedAnalysis/TwoPointers/SubArraySum_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\AmortizedAnalysis\TwoPointers\SubArraySum_unit.cpp:15:5: warning: variable 'search' of type 'SubArraySum' can be declared 'const' [misc-const-correctness]
    SubArraySum search({1, 3, 2, 5, 1, 1, 2, 3});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\AmortizedAnalysis\TwoPointers\SubArraySum_unit.cpp:15:17: note: FIX-IT applied suggested code changes
    SubArraySum search({1, 3, 2, 5, 1, 1, 2, 3});
                ^
[175/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/AmortizedAnalysis/TwoPointers/TwoSum_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\AmortizedAnalysis\TwoPointers\TwoSum_unit.cpp:16:5: warning: variable 'search' of type 'TwoSum' can be declared 'const' [misc-const-correctness]
    TwoSum search({10, 9, 9, 7, 1, 4, 5, 6});
    ^
           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\AmortizedAnalysis\TwoPointers\TwoSum_unit.cpp:16:12: note: FIX-IT applied suggested code changes
    TwoSum search({10, 9, 9, 7, 1, 4, 5, 6});
           ^
[176/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/BitManipulation/AddTwoNumbersWithoutUsingArithmeticOperators_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\AddTwoNumbersWithoutUsingArithmeticOperators_unit.cpp:10:5: warning: variable 'solution' of type 'AddTwoNumbersWithoutUsingArithmeticOperators' can be declared 'const' [misc-const-correctness]
    AddTwoNumbersWithoutUsingArithmeticOperators solution;
    ^
                                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\AddTwoNumbersWithoutUsingArithmeticOperators_unit.cpp:10:50: note: FIX-IT applied suggested code changes
    AddTwoNumbersWithoutUsingArithmeticOperators solution;
                                                 ^
[177/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/BitManipulation/BitManipulationUniqueProblems_unit.cpp.obj
[178/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/BitManipulation/CountTotalSetBitsInAllNumbersFrom1ToN_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN_unit.cpp:10:5: warning: variable 'solution' of type 'CountTotalSetBitsInAllNumbersFrom1ToN' can be declared 'const' [misc-const-correctness]
    CountTotalSetBitsInAllNumbersFrom1ToN solution;
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN_unit.cpp:10:43: note: FIX-IT applied suggested code changes
    CountTotalSetBitsInAllNumbersFrom1ToN solution;
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN_unit.cpp:25:5: warning: variable 'solution' of type 'CountTotalSetBitsInAllNumbersFrom1ToN' can be declared 'const' [misc-const-correctness]
    CountTotalSetBitsInAllNumbersFrom1ToN solution;
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN_unit.cpp:25:43: note: FIX-IT applied suggested code changes
    CountTotalSetBitsInAllNumbersFrom1ToN solution;
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN_unit.cpp:40:5: warning: variable 'solution' of type 'CountTotalSetBitsInAllNumbersFrom1ToN' can be declared 'const' [misc-const-correctness]
    CountTotalSetBitsInAllNumbersFrom1ToN solution;
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\CountTotalSetBitsInAllNumbersFrom1ToN_unit.cpp:40:43: note: FIX-IT applied suggested code changes
    CountTotalSetBitsInAllNumbersFrom1ToN solution;
                                          ^
[179/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/BitManipulation/CountingSubGrids_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\CountingSubGrids_unit.cpp:10:5: warning: variable 'bitGrid' of type 'CountingSubGrids::BitGrid' (aka 'AlbaMatrix<bool>') can be declared 'const' [misc-const-correctness]
    CountingSubGrids::BitGrid bitGrid(
    ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\CountingSubGrids_unit.cpp:10:31: note: FIX-IT applied suggested code changes
    CountingSubGrids::BitGrid bitGrid(
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\CountingSubGrids_unit.cpp:13:5: warning: variable 'countingSubGrids' of type 'CountingSubGrids' can be declared 'const' [misc-const-correctness]
    CountingSubGrids countingSubGrids(bitGrid);
    ^
                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\CountingSubGrids_unit.cpp:13:22: note: FIX-IT applied suggested code changes
    CountingSubGrids countingSubGrids(bitGrid);
                     ^
[180/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/BitManipulation/NextHigherNumberWithSameNumberOfSetBits_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\NextHigherNumberWithSameNumberOfSetBits_unit.cpp:10:5: warning: variable 'solution' of type 'NextHigherNumberWithSameNumberOfSetBits' can be declared 'const' [misc-const-correctness]
    NextHigherNumberWithSameNumberOfSetBits solution;
    ^
                                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\NextHigherNumberWithSameNumberOfSetBits_unit.cpp:10:45: note: FIX-IT applied suggested code changes
    NextHigherNumberWithSameNumberOfSetBits solution;
                                            ^
[181/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/BitManipulation/SmallestOfThreeIntegersWithoutComparisonOperators_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\SmallestOfThreeIntegersWithoutComparisonOperators_unit.cpp:10:5: warning: variable 'solution' of type 'SmallestOfThreeIntegersWithoutComparisonOperators' can be declared 'const' [misc-const-correctness]
    SmallestOfThreeIntegersWithoutComparisonOperators solution;
    ^
                                                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\SmallestOfThreeIntegersWithoutComparisonOperators_unit.cpp:10:55: note: FIX-IT applied suggested code changes
    SmallestOfThreeIntegersWithoutComparisonOperators solution;
                                                      ^
[182/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/BitManipulation/UniqueElement_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:10:5: warning: variable 'values' of type 'UniqueElement::Values' (aka 'vector<unsigned long long>') can be declared 'const' [misc-const-correctness]
    UniqueElement::Values values{2, 3, 7, 11, 2, 3, 11};
    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:10:27: note: FIX-IT applied suggested code changes
    UniqueElement::Values values{2, 3, 7, 11, 2, 3, 11};
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:11:5: warning: variable 'solution' of type 'UniqueElement' can be declared 'const' [misc-const-correctness]
    UniqueElement solution;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:11:19: note: FIX-IT applied suggested code changes
    UniqueElement solution;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:17:5: warning: variable 'values' of type 'UniqueElement::Values' (aka 'vector<unsigned long long>') can be declared 'const' [misc-const-correctness]
    UniqueElement::Values values{2, 3, 7, 9, 11, 2, 3, 11};
    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:17:27: note: FIX-IT applied suggested code changes
    UniqueElement::Values values{2, 3, 7, 9, 11, 2, 3, 11};
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:18:5: warning: variable 'solution' of type 'UniqueElement' can be declared 'const' [misc-const-correctness]
    UniqueElement solution;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:18:19: note: FIX-IT applied suggested code changes
    UniqueElement solution;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:20:5: warning: variable 'expectedPair' of type 'UniqueElement::ValuePairs' (aka 'pair<unsigned long long, unsigned long long>') can be declared 'const' [misc-const-correctness]
    UniqueElement::ValuePairs expectedPair{7U, 9U};
    ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:20:31: note: FIX-IT applied suggested code changes
    UniqueElement::ValuePairs expectedPair{7U, 9U};
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:25:5: warning: variable 'values' of type 'UniqueElement::Values' (aka 'vector<unsigned long long>') can be declared 'const' [misc-const-correctness]
    UniqueElement::Values values{12, 1, 12, 3, 12, 1, 1, 2, 3, 3};
    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:25:27: note: FIX-IT applied suggested code changes
    UniqueElement::Values values{12, 1, 12, 3, 12, 1, 1, 2, 3, 3};
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:26:5: warning: variable 'solution' of type 'UniqueElement' can be declared 'const' [misc-const-correctness]
    UniqueElement solution;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:26:19: note: FIX-IT applied suggested code changes
    UniqueElement solution;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:32:5: warning: variable 'values' of type 'UniqueElement::Values' (aka 'vector<unsigned long long>') can be declared 'const' [misc-const-correctness]
    UniqueElement::Values values{5, 7, 2, 7, 5, 2, 5};
    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:32:27: note: FIX-IT applied suggested code changes
    UniqueElement::Values values{5, 7, 2, 7, 5, 2, 5};
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:33:5: warning: variable 'solution' of type 'UniqueElement' can be declared 'const' [misc-const-correctness]
    UniqueElement solution;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BitManipulation\UniqueElement_unit.cpp:33:19: note: FIX-IT applied suggested code changes
    UniqueElement solution;
                  ^
[183/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/BranchAndBound/BranchAndBoundZeroAndOneKnapsack_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BranchAndBound\BranchAndBoundZeroAndOneKnapsack_unit.cpp:10:5: warning: variable 'queryForTest' of type 'BranchAndBoundZeroAndOneKnapsack' can be declared 'const' [misc-const-correctness]
    BranchAndBoundZeroAndOneKnapsack queryForTest;
    ^
                                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BranchAndBound\BranchAndBoundZeroAndOneKnapsack_unit.cpp:10:38: note: FIX-IT applied suggested code changes
    BranchAndBoundZeroAndOneKnapsack queryForTest;
                                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BranchAndBound\BranchAndBoundZeroAndOneKnapsack_unit.cpp:16:5: warning: variable 'queryForTest' of type 'BranchAndBoundZeroAndOneKnapsack' can be declared 'const' [misc-const-correctness]
    BranchAndBoundZeroAndOneKnapsack queryForTest;
    ^
                                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BranchAndBound\BranchAndBoundZeroAndOneKnapsack_unit.cpp:16:38: note: FIX-IT applied suggested code changes
    BranchAndBoundZeroAndOneKnapsack queryForTest;
                                     ^
[184/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/BranchAndBound/EightPuzzlePossibleProblem_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BranchAndBound\EightPuzzlePossibleProblem_unit.cpp:10:5: warning: variable 'start' of type 'EightPuzzlePossibleProblem::NumberMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    EightPuzzlePossibleProblem::NumberMatrix start(3, 3, {{1, 2, 3, 5, 6, 0, 7, 8, 4}});
    ^
                                             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BranchAndBound\EightPuzzlePossibleProblem_unit.cpp:10:46: note: FIX-IT applied suggested code changes
    EightPuzzlePossibleProblem::NumberMatrix start(3, 3, {{1, 2, 3, 5, 6, 0, 7, 8, 4}});
                                             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BranchAndBound\EightPuzzlePossibleProblem_unit.cpp:11:5: warning: variable 'target' of type 'EightPuzzlePossibleProblem::NumberMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    EightPuzzlePossibleProblem::NumberMatrix target(3, 3, {{1, 2, 3, 5, 8, 6, 0, 7, 4}});
    ^
                                             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BranchAndBound\EightPuzzlePossibleProblem_unit.cpp:11:46: note: FIX-IT applied suggested code changes
    EightPuzzlePossibleProblem::NumberMatrix target(3, 3, {{1, 2, 3, 5, 8, 6, 0, 7, 4}});
                                             ^
[185/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/BranchAndBound/JobAssignmentProblem_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BranchAndBound\JobAssignmentProblem_unit.cpp:10:5: warning: variable 'costMatrix' of type 'JobAssignmentProblem::CostMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    JobAssignmentProblem::CostMatrix costMatrix(4, 4, {{9, 2, 7, 8, 6, 4, 3, 7, 5, 8, 1, 8, 7, 6, 9, 4}});
    ^
                                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\BranchAndBound\JobAssignmentProblem_unit.cpp:10:38: note: FIX-IT applied suggested code changes
    JobAssignmentProblem::CostMatrix costMatrix(4, 4, {{9, 2, 7, 8, 6, 4, 3, 7, 5, 8, 1, 8, 7, 6, 9, 4}});
                                     ^
[186/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/CombiningAlgorithms/NearestEqualCells_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:15:5: warning: variable 'valueMatrix' of type 'ValueMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    ValueMatrix valueMatrix(4, 4, {1, 6, 2, 1, 3, 5, 7, 5, 2, 4, 1, 6, 1, 3, 2, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:15:17: note: FIX-IT applied suggested code changes
    ValueMatrix valueMatrix(4, 4, {1, 6, 2, 1, 3, 5, 7, 5, 2, 4, 1, 6, 1, 3, 2, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:16:5: warning: variable 'nearestEqualCells' of type 'NearestEqualCells' can be declared 'const' [misc-const-correctness]
    NearestEqualCells nearestEqualCells(valueMatrix);
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:16:23: note: FIX-IT applied suggested code changes
    NearestEqualCells nearestEqualCells(valueMatrix);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:18:5: warning: variable 'expectedCoordinatePair' of type 'CoordinatePair' (aka 'pair<pair<int, int>, pair<int, int>>') can be declared 'const' [misc-const-correctness]
    CoordinatePair expectedCoordinatePair{{2, 0}, {2, 3}};
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:18:20: note: FIX-IT applied suggested code changes
    CoordinatePair expectedCoordinatePair{{2, 0}, {2, 3}};
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:23:5: warning: variable 'valueMatrix' of type 'ValueMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    ValueMatrix valueMatrix(4, 4, {1, 6, 2, 1, 3, 5, 7, 5, 2, 4, 1, 6, 1, 3, 2, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:23:17: note: FIX-IT applied suggested code changes
    ValueMatrix valueMatrix(4, 4, {1, 6, 2, 1, 3, 5, 7, 5, 2, 4, 1, 6, 1, 3, 2, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:24:5: warning: variable 'nearestEqualCells' of type 'NearestEqualCells' can be declared 'const' [misc-const-correctness]
    NearestEqualCells nearestEqualCells(valueMatrix);
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:24:23: note: FIX-IT applied suggested code changes
    NearestEqualCells nearestEqualCells(valueMatrix);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:26:5: warning: variable 'expectedCoordinatePair' of type 'CoordinatePair' (aka 'pair<pair<int, int>, pair<int, int>>') can be declared 'const' [misc-const-correctness]
    CoordinatePair expectedCoordinatePair{{2, 0}, {2, 3}};
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:26:20: note: FIX-IT applied suggested code changes
    CoordinatePair expectedCoordinatePair{{2, 0}, {2, 3}};
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:31:5: warning: variable 'valueMatrix' of type 'ValueMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    ValueMatrix valueMatrix(4, 4, {1, 6, 2, 1, 3, 5, 7, 5, 2, 4, 1, 6, 1, 3, 2, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:31:17: note: FIX-IT applied suggested code changes
    ValueMatrix valueMatrix(4, 4, {1, 6, 2, 1, 3, 5, 7, 5, 2, 4, 1, 6, 1, 3, 2, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:32:5: warning: variable 'nearestEqualCells' of type 'NearestEqualCells' can be declared 'const' [misc-const-correctness]
    NearestEqualCells nearestEqualCells(valueMatrix);
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:32:23: note: FIX-IT applied suggested code changes
    NearestEqualCells nearestEqualCells(valueMatrix);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:34:5: warning: variable 'expectedCoordinatePair' of type 'CoordinatePair' (aka 'pair<pair<int, int>, pair<int, int>>') can be declared 'const' [misc-const-correctness]
    CoordinatePair expectedCoordinatePair{{0, 2}, {2, 3}};
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\CombiningAlgorithms\NearestEqualCells_unit.cpp:34:20: note: FIX-IT applied suggested code changes
    CoordinatePair expectedCoordinatePair{{0, 2}, {2, 3}};
                   ^
[187/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/CompleteSearch/GridPathSearch_unit.cpp.obj
[188/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DataStructures/InvertingABinaryTree_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:13:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node2->leftPointer = move(node1);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:13:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:14:27: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node2->rightPointer = move(node3);
                          ^
                          std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:14:27: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:16:5: warning: variable 'result' of type 'std::unique_ptr<Node>' can be declared 'const' [misc-const-correctness]
    std::unique_ptr<Node> result = invertABinaryTree(move(node2));
    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:16:27: note: FIX-IT applied suggested code changes
    std::unique_ptr<Node> result = invertABinaryTree(move(node2));
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:16:54: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    std::unique_ptr<Node> result = invertABinaryTree(move(node2));
                                                     ^
                                                     std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:16:54: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:35:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node2->leftPointer = move(node1);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:35:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:36:27: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node2->rightPointer = move(node3);
                          ^
                          std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:36:27: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:37:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node6->leftPointer = move(node5);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:37:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:38:27: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node6->rightPointer = move(node7);
                          ^
                          std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:38:27: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:39:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node4->leftPointer = move(node2);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:39:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:40:27: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node4->rightPointer = move(node6);
                          ^
                          std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:40:27: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:42:5: warning: variable 'result' of type 'std::unique_ptr<Node>' can be declared 'const' [misc-const-correctness]
    std::unique_ptr<Node> result = invertABinaryTree(move(node4));
    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:42:27: note: FIX-IT applied suggested code changes
    std::unique_ptr<Node> result = invertABinaryTree(move(node4));
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:42:54: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    std::unique_ptr<Node> result = invertABinaryTree(move(node4));
                                                     ^
                                                     std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\InvertingABinaryTree_unit.cpp:42:54: note: FIX-IT applied suggested code changes
[189/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DataStructures/ReversingALinkedList.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:13:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node2->nextPointer = move(node3);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:13:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:14:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node1->nextPointer = move(node2);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:14:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:16:55: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    std::unique_ptr<Node> result = reverseALinkedList(move(node1));
                                                      ^
                                                      std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:16:55: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:19:14: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    result = move(result->nextPointer);
             ^
             std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:19:14: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:21:14: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    result = move(result->nextPointer);
             ^
             std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:21:14: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:23:14: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    result = move(result->nextPointer);
             ^
             std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:23:14: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:35:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node6->nextPointer = move(node7);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:35:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:36:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node5->nextPointer = move(node6);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:36:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:37:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node4->nextPointer = move(node5);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:37:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:38:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node3->nextPointer = move(node4);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:38:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:39:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node2->nextPointer = move(node3);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:39:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:40:26: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    node1->nextPointer = move(node2);
                         ^
                         std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:40:26: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:42:55: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    std::unique_ptr<Node> result = reverseALinkedList(move(node1));
                                                      ^
                                                      std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:42:55: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:45:14: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    result = move(result->nextPointer);
             ^
             std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:45:14: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:47:14: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    result = move(result->nextPointer);
             ^
             std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:47:14: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:49:14: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    result = move(result->nextPointer);
             ^
             std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:49:14: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:51:14: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    result = move(result->nextPointer);
             ^
             std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:51:14: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:53:14: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    result = move(result->nextPointer);
             ^
             std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:53:14: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:55:14: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    result = move(result->nextPointer);
             ^
             std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:55:14: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:57:14: warning: unqualified call to 'std::move' [clang-diagnostic-unqualified-std-cast-call]
    result = move(result->nextPointer);
             ^
             std::
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DataStructures\ReversingALinkedList.cpp:57:14: note: FIX-IT applied suggested code changes
[190/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Graph/Tree/LargestIndependentSetProblem_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\LargestIndependentSetProblem_unit.cpp:22:5: warning: variable 'queryForTest' of type 'LargestIndependentSetProblem' can be declared 'const' [misc-const-correctness]
    LargestIndependentSetProblem queryForTest(graph, 10);
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\LargestIndependentSetProblem_unit.cpp:22:34: note: FIX-IT applied suggested code changes
    LargestIndependentSetProblem queryForTest(graph, 10);
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\LargestIndependentSetProblem_unit.cpp:38:5: warning: variable 'queryForTest' of type 'LargestIndependentSetProblem' can be declared 'const' [misc-const-correctness]
    LargestIndependentSetProblem queryForTest(graph, 1);
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\LargestIndependentSetProblem_unit.cpp:38:34: note: FIX-IT applied suggested code changes
    LargestIndependentSetProblem queryForTest(graph, 1);
                                 ^
[191/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Graph/Tree/OptimalBinarySearchTree_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree_unit.cpp:10:5: warning: variable 'queryForTest' of type 'OptimalBinarySearchTree' can be declared 'const' [misc-const-correctness]
    OptimalBinarySearchTree queryForTest({{10, 34}, {12, 50}});
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree_unit.cpp:10:29: note: FIX-IT applied suggested code changes
    OptimalBinarySearchTree queryForTest({{10, 34}, {12, 50}});
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree_unit.cpp:17:5: warning: variable 'queryForTest' of type 'OptimalBinarySearchTree' can be declared 'const' [misc-const-correctness]
    OptimalBinarySearchTree queryForTest({{10, 34}, {12, 8}, {20, 50}});
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\OptimalBinarySearchTree_unit.cpp:17:29: note: FIX-IT applied suggested code changes
    OptimalBinarySearchTree queryForTest({{10, 34}, {12, 8}, {20, 50}});
                            ^
[192/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Graph/Tree/VertexCoverProblem_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\VertexCoverProblem_unit.cpp:22:5: warning: variable 'queryForTest' of type 'VertexCoverProblem' can be declared 'const' [misc-const-correctness]
    VertexCoverProblem queryForTest(graph, 10);
    ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\VertexCoverProblem_unit.cpp:22:24: note: FIX-IT applied suggested code changes
    VertexCoverProblem queryForTest(graph, 10);
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\VertexCoverProblem_unit.cpp:38:5: warning: variable 'queryForTest' of type 'VertexCoverProblem' can be declared 'const' [misc-const-correctness]
    VertexCoverProblem queryForTest(graph, 1);
    ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Graph\Tree\VertexCoverProblem_unit.cpp:38:24: note: FIX-IT applied suggested code changes
    VertexCoverProblem queryForTest(graph, 1);
                       ^
[193/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Grid/CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:14:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid;
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:14:10: note: FIX-IT applied suggested code changes
    Grid inputGrid;
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:15:5: warning: variable 'queryForTest' of type 'CollectMaximumPointsInAGridUsingTwoTraversals' can be declared 'const' [misc-const-correctness]
    CollectMaximumPointsInAGridUsingTwoTraversals queryForTest(inputGrid);
    ^
                                                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:15:51: note: FIX-IT applied suggested code changes
    CollectMaximumPointsInAGridUsingTwoTraversals queryForTest(inputGrid);
                                                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:23:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(1, 1, {100});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:23:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(1, 1, {100});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:24:5: warning: variable 'queryForTest' of type 'CollectMaximumPointsInAGridUsingTwoTraversals' can be declared 'const' [misc-const-correctness]
    CollectMaximumPointsInAGridUsingTwoTraversals queryForTest(inputGrid);
    ^
                                                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:24:51: note: FIX-IT applied suggested code changes
    CollectMaximumPointsInAGridUsingTwoTraversals queryForTest(inputGrid);
                                                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:32:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(4, 5, {3, 6, 8, 2, 5, 2, 4, 3, 1, 1, 20, 10, 1, 1, 20, 10, 1, 1, 20, 10});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:32:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(4, 5, {3, 6, 8, 2, 5, 2, 4, 3, 1, 1, 20, 10, 1, 1, 20, 10, 1, 1, 20, 10});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:33:5: warning: variable 'queryForTest' of type 'CollectMaximumPointsInAGridUsingTwoTraversals' can be declared 'const' [misc-const-correctness]
    CollectMaximumPointsInAGridUsingTwoTraversals queryForTest(inputGrid);
    ^
                                                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\CollectMaximumPointsInAGridUsingTwoTraversals_unit.cpp:33:51: note: FIX-IT applied suggested code changes
    CollectMaximumPointsInAGridUsingTwoTraversals queryForTest(inputGrid);
                                                  ^
[194/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Grid/FindLengthOfTheLongestConsecutivePath_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath_unit.cpp:14:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<char>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(3, 3, {'a', 'c', 'd', 'h', 'b', 'e', 'i', 'g', 'f'});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath_unit.cpp:14:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(3, 3, {'a', 'c', 'd', 'h', 'b', 'e', 'i', 'g', 'f'});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath_unit.cpp:15:5: warning: variable 'queryForTest' of type 'FindLengthOfTheLongestConsecutivePath' can be declared 'const' [misc-const-correctness]
    FindLengthOfTheLongestConsecutivePath queryForTest(inputGrid);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath_unit.cpp:15:43: note: FIX-IT applied suggested code changes
    FindLengthOfTheLongestConsecutivePath queryForTest(inputGrid);
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath_unit.cpp:24:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<char>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(3, 3, {'b', 'e', 'f', 'h', 'd', 'a', 'i', 'c', 'a'});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath_unit.cpp:24:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(3, 3, {'b', 'e', 'f', 'h', 'd', 'a', 'i', 'c', 'a'});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath_unit.cpp:25:5: warning: variable 'queryForTest' of type 'FindLengthOfTheLongestConsecutivePath' can be declared 'const' [misc-const-correctness]
    FindLengthOfTheLongestConsecutivePath queryForTest(inputGrid);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\FindLengthOfTheLongestConsecutivePath_unit.cpp:25:43: note: FIX-IT applied suggested code changes
    FindLengthOfTheLongestConsecutivePath queryForTest(inputGrid);
                                          ^
[195/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Grid/MaximumSizeSquareSubMatrixWithAllOnes_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes_unit.cpp:14:5: warning: variable 'booleanMatrix' of type 'BooleanMatrix' (aka 'AlbaMatrix<bool>') can be declared 'const' [misc-const-correctness]
    BooleanMatrix booleanMatrix(
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes_unit.cpp:14:19: note: FIX-IT applied suggested code changes
    BooleanMatrix booleanMatrix(
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes_unit.cpp:17:5: warning: variable 'queryForTest' of type 'MaximumSizeSquareSubMatrixWithAllOnes' can be declared 'const' [misc-const-correctness]
    MaximumSizeSquareSubMatrixWithAllOnes queryForTest(booleanMatrix);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSizeSquareSubMatrixWithAllOnes_unit.cpp:17:43: note: FIX-IT applied suggested code changes
    MaximumSizeSquareSubMatrixWithAllOnes queryForTest(booleanMatrix);
                                          ^
[196/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Grid/MaximumSubMatrixSum_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSubMatrixSum_unit.cpp:15:5: warning: variable 'pricesInDayByProduct' of type 'ValueMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    ValueMatrix pricesInDayByProduct(5, 4, {1, 2, -1, -4, -20, -8, -3, 4, 2, 1, 3, 8, 10, 1, 3, -4, -1, 1, 7, -6});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSubMatrixSum_unit.cpp:15:17: note: FIX-IT applied suggested code changes
    ValueMatrix pricesInDayByProduct(5, 4, {1, 2, -1, -4, -20, -8, -3, 4, 2, 1, 3, 8, 10, 1, 3, -4, -1, 1, 7, -6});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSubMatrixSum_unit.cpp:16:5: warning: variable 'queryForTest' of type 'MaximumSubMatrixSum' can be declared 'const' [misc-const-correctness]
    MaximumSubMatrixSum queryForTest(pricesInDayByProduct);
    ^
                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSubMatrixSum_unit.cpp:16:25: note: FIX-IT applied suggested code changes
    MaximumSubMatrixSum queryForTest(pricesInDayByProduct);
                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSubMatrixSum_unit.cpp:22:5: warning: variable 'pricesInDayByProduct' of type 'ValueMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    ValueMatrix pricesInDayByProduct(5, 4, {1, 2, -1, -4, -20, -8, -3, 4, 2, 1, 3, 8, 10, 1, 3, -4, -1, 1, 7, -6});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSubMatrixSum_unit.cpp:22:17: note: FIX-IT applied suggested code changes
    ValueMatrix pricesInDayByProduct(5, 4, {1, 2, -1, -4, -20, -8, -3, 4, 2, 1, 3, 8, 10, 1, 3, -4, -1, 1, 7, -6});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSubMatrixSum_unit.cpp:23:5: warning: variable 'queryForTest' of type 'MaximumSubMatrixSum' can be declared 'const' [misc-const-correctness]
    MaximumSubMatrixSum queryForTest(pricesInDayByProduct);
    ^
                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSubMatrixSum_unit.cpp:23:25: note: FIX-IT applied suggested code changes
    MaximumSubMatrixSum queryForTest(pricesInDayByProduct);
                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSubMatrixSum_unit.cpp:25:5: warning: variable 'subArrayDetailsToVerify' of type 'SubArrayDetails' (aka 'alba::MaximumSubMatrixSum::SubArrayDetails') can be declared 'const' [misc-const-correctness]
    SubArrayDetails subArrayDetailsToVerify(queryForTest.getMaximumSubMatrixSumWithDetails());
    ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MaximumSubMatrixSum_unit.cpp:25:21: note: FIX-IT applied suggested code changes
    SubArrayDetails subArrayDetailsToVerify(queryForTest.getMaximumSubMatrixSumWithDetails());
                    ^
[197/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Grid/MinimumInitialPointsToReachDestination_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination_unit.cpp:14:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(3, 3, {-2, -3, 3, -5, -10, 1, 10, 30, -5});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination_unit.cpp:14:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(3, 3, {-2, -3, 3, -5, -10, 1, 10, 30, -5});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination_unit.cpp:15:5: warning: variable 'queryForTest' of type 'MinimumInitialPointsToReachDestination' can be declared 'const' [misc-const-correctness]
    MinimumInitialPointsToReachDestination queryForTest(inputGrid);
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\MinimumInitialPointsToReachDestination_unit.cpp:15:44: note: FIX-IT applied suggested code changes
    MinimumInitialPointsToReachDestination queryForTest(inputGrid);
                                           ^
[198/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Grid/PathSumInGridInRightOrDownTraversal_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:15:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:15:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:16:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MinimumSum, inputGrid);
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:16:41: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MinimumSum, inputGrid);
                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:24:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:24:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:25:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MinimumSum, inputGrid);
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:25:41: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MinimumSum, inputGrid);
                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:33:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:33:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:34:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MaximumSum, inputGrid);
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:34:41: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MaximumSum, inputGrid);
                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:42:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:42:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:43:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MaximumSum, inputGrid);
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:43:41: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MaximumSum, inputGrid);
                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:51:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:51:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:52:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MinimumSum, inputGrid);
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:52:41: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MinimumSum, inputGrid);
                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:58:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:58:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:59:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MaximumSum, inputGrid);
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:59:41: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MaximumSum, inputGrid);
                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:65:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:65:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:66:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MinimumSum, inputGrid);
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:66:41: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MinimumSum, inputGrid);
                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:72:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:72:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:73:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MaximumSum, inputGrid);
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownTraversal_unit.cpp:73:41: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownTraversal queryForTest(PathSumInGridInRightOrDownTraversal::Type::MaximumSum, inputGrid);
                                        ^
[199/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Grid/PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:15:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:15:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:16:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownWithDiagonalTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
    ^
                                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:16:53: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:25:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:25:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:26:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownWithDiagonalTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
    ^
                                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:26:53: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:35:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:35:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:36:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownWithDiagonalTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
    ^
                                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:36:53: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:45:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:45:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:46:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownWithDiagonalTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
    ^
                                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:46:53: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:55:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:55:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:56:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownWithDiagonalTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
    ^
                                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:56:53: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:63:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:63:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(5, 5, {3, 7, 9, 2, 7, 9, 8, 3, 5, 5, 1, 7, 9, 8, 5, 3, 8, 6, 4, 10, 6, 3, 9, 7, 8});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:64:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownWithDiagonalTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
    ^
                                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:64:53: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:71:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:71:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:72:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownWithDiagonalTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
    ^
                                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:72:53: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:79:5: warning: variable 'inputGrid' of type 'Grid' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
    ^
         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:79:10: note: FIX-IT applied suggested code changes
    Grid inputGrid(3, 3, {1, 2, 3, 4, 8, 2, 1, 5, 3});
         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:80:5: warning: variable 'queryForTest' of type 'PathSumInGridInRightOrDownWithDiagonalTraversal' can be declared 'const' [misc-const-correctness]
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
    ^
                                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Grid\PathSumInGridInRightOrDownWithDiagonalTraversal_unit.cpp:80:53: note: FIX-IT applied suggested code changes
    PathSumInGridInRightOrDownWithDiagonalTraversal queryForTest(
                                                    ^
[200/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/KnapsackProblems/AllPartialSumsInZeroOneKnapsack_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack_unit.cpp:15:5: warning: variable 'queryForTest' of type 'AllPartialSumsInZeroOneKnapsack' can be declared 'const' [misc-const-correctness]
    AllPartialSumsInZeroOneKnapsack queryForTest({1, 3, 3, 5});
    ^
                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack_unit.cpp:15:37: note: FIX-IT applied suggested code changes
    AllPartialSumsInZeroOneKnapsack queryForTest({1, 3, 3, 5});
                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack_unit.cpp:17:5: warning: variable 'expectedValues' of type 'Values' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Values expectedValues{0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12};
    ^
           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack_unit.cpp:17:12: note: FIX-IT applied suggested code changes
    Values expectedValues{0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12};
           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack_unit.cpp:24:5: warning: variable 'expectedValues' of type 'Values' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Values expectedValues{0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12};
    ^
           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\AllPartialSumsInZeroOneKnapsack_unit.cpp:24:12: note: FIX-IT applied suggested code changes
    Values expectedValues{0, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12};
           ^
[201/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/KnapsackProblems/IsPartialSumPossibleInZeroOneKnapsack_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack_unit.cpp:10:5: warning: variable 'queryForTest' of type 'IsPartialSumPossibleInZeroOneKnapsack' can be declared 'const' [misc-const-correctness]
    IsPartialSumPossibleInZeroOneKnapsack queryForTest(9, {{3, 34, 4, 12, 5, 2}});
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack_unit.cpp:10:43: note: FIX-IT applied suggested code changes
    IsPartialSumPossibleInZeroOneKnapsack queryForTest(9, {{3, 34, 4, 12, 5, 2}});
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack_unit.cpp:19:5: warning: variable 'queryForTest' of type 'IsPartialSumPossibleInZeroOneKnapsack' can be declared 'const' [misc-const-correctness]
    IsPartialSumPossibleInZeroOneKnapsack queryForTest(30, {{3, 34, 4, 12, 5, 2}});
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack_unit.cpp:19:43: note: FIX-IT applied suggested code changes
    IsPartialSumPossibleInZeroOneKnapsack queryForTest(30, {{3, 34, 4, 12, 5, 2}});
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack_unit.cpp:28:5: warning: variable 'queryForTest' of type 'IsPartialSumPossibleInZeroOneKnapsack' can be declared 'const' [misc-const-correctness]
    IsPartialSumPossibleInZeroOneKnapsack queryForTest(11, {{1, 5, 5, 8}});
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack_unit.cpp:28:43: note: FIX-IT applied suggested code changes
    IsPartialSumPossibleInZeroOneKnapsack queryForTest(11, {{1, 5, 5, 8}});
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack_unit.cpp:37:5: warning: variable 'queryForTest' of type 'IsPartialSumPossibleInZeroOneKnapsack' can be declared 'const' [misc-const-correctness]
    IsPartialSumPossibleInZeroOneKnapsack queryForTest(2, {{1, 5, 8}});
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack_unit.cpp:37:43: note: FIX-IT applied suggested code changes
    IsPartialSumPossibleInZeroOneKnapsack queryForTest(2, {{1, 5, 8}});
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack_unit.cpp:46:5: warning: variable 'queryForTest' of type 'IsPartialSumPossibleInZeroOneKnapsack' can be declared 'const' [misc-const-correctness]
    IsPartialSumPossibleInZeroOneKnapsack queryForTest(9, {{1, 5, 8}});
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\IsPartialSumPossibleInZeroOneKnapsack_unit.cpp:46:43: note: FIX-IT applied suggested code changes
    IsPartialSumPossibleInZeroOneKnapsack queryForTest(9, {{1, 5, 8}});
                                          ^
[202/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/KnapsackProblems/MaximizeProfitInZeroOneKnapsack_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\MaximizeProfitInZeroOneKnapsack_unit.cpp:10:5: warning: variable 'queryForTest' of type 'MaximizeProfitInZeroOneKnapsack' can be declared 'const' [misc-const-correctness]
    MaximizeProfitInZeroOneKnapsack queryForTest(50, {{10, 60}, {20, 100}, {30, 120}});
    ^
                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\MaximizeProfitInZeroOneKnapsack_unit.cpp:10:37: note: FIX-IT applied suggested code changes
    MaximizeProfitInZeroOneKnapsack queryForTest(50, {{10, 60}, {20, 100}, {30, 120}});
                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\MaximizeProfitInZeroOneKnapsack_unit.cpp:19:5: warning: variable 'queryForTest' of type 'MaximizeProfitInZeroOneKnapsack' can be declared 'const' [misc-const-correctness]
    MaximizeProfitInZeroOneKnapsack queryForTest(
    ^
                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\KnapsackProblems\MaximizeProfitInZeroOneKnapsack_unit.cpp:19:37: note: FIX-IT applied suggested code changes
    MaximizeProfitInZeroOneKnapsack queryForTest(
                                    ^
[203/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Math/BinomialCoefficient_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\BinomialCoefficient_unit.cpp:10:5: warning: variable 'queryForTest' of type 'BinomialCoefficient' can be declared 'const' [misc-const-correctness]
    BinomialCoefficient queryForTest(0, 0);
    ^
                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\BinomialCoefficient_unit.cpp:10:25: note: FIX-IT applied suggested code changes
    BinomialCoefficient queryForTest(0, 0);
                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\BinomialCoefficient_unit.cpp:20:5: warning: variable 'queryForTest' of type 'BinomialCoefficient' can be declared 'const' [misc-const-correctness]
    BinomialCoefficient queryForTest(5, 2);
    ^
                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\BinomialCoefficient_unit.cpp:20:25: note: FIX-IT applied suggested code changes
    BinomialCoefficient queryForTest(5, 2);
                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\BinomialCoefficient_unit.cpp:30:5: warning: variable 'queryForTest' of type 'BinomialCoefficient' can be declared 'const' [misc-const-correctness]
    BinomialCoefficient queryForTest(34, 17);
    ^
                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\BinomialCoefficient_unit.cpp:30:25: note: FIX-IT applied suggested code changes
    BinomialCoefficient queryForTest(34, 17);
                        ^
[204/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Math/Digits/ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:10:5: warning: variable 'queryForTest' of type 'ComputeSumOfDigitsInAllNumbersFrom1ToN' can be declared 'const' [misc-const-correctness]
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(0);
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:10:44: note: FIX-IT applied suggested code changes
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(0);
                                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:18:5: warning: variable 'queryForTest' of type 'ComputeSumOfDigitsInAllNumbersFrom1ToN' can be declared 'const' [misc-const-correctness]
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(5);
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:18:44: note: FIX-IT applied suggested code changes
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(5);
                                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:26:5: warning: variable 'queryForTest' of type 'ComputeSumOfDigitsInAllNumbersFrom1ToN' can be declared 'const' [misc-const-correctness]
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(12);
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:26:44: note: FIX-IT applied suggested code changes
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(12);
                                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:34:5: warning: variable 'queryForTest' of type 'ComputeSumOfDigitsInAllNumbersFrom1ToN' can be declared 'const' [misc-const-correctness]
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(28);
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:34:44: note: FIX-IT applied suggested code changes
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(28);
                                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:42:5: warning: variable 'queryForTest' of type 'ComputeSumOfDigitsInAllNumbersFrom1ToN' can be declared 'const' [misc-const-correctness]
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(328);
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:42:44: note: FIX-IT applied suggested code changes
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(328);
                                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:50:5: warning: variable 'queryForTest' of type 'ComputeSumOfDigitsInAllNumbersFrom1ToN' can be declared 'const' [misc-const-correctness]
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(69446);
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\ComputeSumOfDigitsInAllNumbersFrom1ToN_unit.cpp:50:44: note: FIX-IT applied suggested code changes
    ComputeSumOfDigitsInAllNumbersFrom1ToN queryForTest(69446);
                                           ^
[205/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Math/Digits/CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum_unit.cpp:10:5: warning: variable 'queryForTest' of type 'CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum' can be declared 'const' [misc-const-correctness]
    CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum queryForTest(1, 0);
    ^
                                                         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum_unit.cpp:10:58: note: FIX-IT applied suggested code changes
    CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum queryForTest(1, 0);
                                                         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum_unit.cpp:20:5: warning: variable 'queryForTest' of type 'CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum' can be declared 'const' [misc-const-correctness]
    CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum queryForTest(2, 0);
    ^
                                                         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum_unit.cpp:20:58: note: FIX-IT applied suggested code changes
    CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum queryForTest(2, 0);
                                                         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum_unit.cpp:30:5: warning: variable 'queryForTest' of type 'CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum' can be declared 'const' [misc-const-correctness]
    CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum queryForTest(2, 2);
    ^
                                                         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum_unit.cpp:30:58: note: FIX-IT applied suggested code changes
    CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum queryForTest(2, 2);
                                                         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum_unit.cpp:40:5: warning: variable 'queryForTest' of type 'CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum' can be declared 'const' [misc-const-correctness]
    CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum queryForTest(2, 5);
    ^
                                                         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum_unit.cpp:40:58: note: FIX-IT applied suggested code changes
    CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum queryForTest(2, 5);
                                                         ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum_unit.cpp:50:5: warning: variable 'queryForTest' of type 'CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum' can be declared 'const' [misc-const-correctness]
    CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum queryForTest(3, 6);
    ^
                                                         const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum_unit.cpp:50:58: note: FIX-IT applied suggested code changes
    CountOfNDigitNumbersWhoseSumOfDigitsEqualsToGivenSum queryForTest(3, 6);
                                                         ^
[206/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Math/Digits/TotalNumberOfNonDecreasingNumbersWithNDigits_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\TotalNumberOfNonDecreasingNumbersWithNDigits_unit.cpp:10:5: warning: variable 'queryForTest' of type 'TotalNumberOfNonDecreasingNumbersWithNDigits' can be declared 'const' [misc-const-correctness]
    TotalNumberOfNonDecreasingNumbersWithNDigits queryForTest(0);
    ^
                                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\TotalNumberOfNonDecreasingNumbersWithNDigits_unit.cpp:10:50: note: FIX-IT applied suggested code changes
    TotalNumberOfNonDecreasingNumbersWithNDigits queryForTest(0);
                                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\TotalNumberOfNonDecreasingNumbersWithNDigits_unit.cpp:20:5: warning: variable 'queryForTest' of type 'TotalNumberOfNonDecreasingNumbersWithNDigits' can be declared 'const' [misc-const-correctness]
    TotalNumberOfNonDecreasingNumbersWithNDigits queryForTest(1);
    ^
                                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\TotalNumberOfNonDecreasingNumbersWithNDigits_unit.cpp:20:50: note: FIX-IT applied suggested code changes
    TotalNumberOfNonDecreasingNumbersWithNDigits queryForTest(1);
                                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\TotalNumberOfNonDecreasingNumbersWithNDigits_unit.cpp:30:5: warning: variable 'queryForTest' of type 'TotalNumberOfNonDecreasingNumbersWithNDigits' can be declared 'const' [misc-const-correctness]
    TotalNumberOfNonDecreasingNumbersWithNDigits queryForTest(2);
    ^
                                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\TotalNumberOfNonDecreasingNumbersWithNDigits_unit.cpp:30:50: note: FIX-IT applied suggested code changes
    TotalNumberOfNonDecreasingNumbersWithNDigits queryForTest(2);
                                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\TotalNumberOfNonDecreasingNumbersWithNDigits_unit.cpp:40:5: warning: variable 'queryForTest' of type 'TotalNumberOfNonDecreasingNumbersWithNDigits' can be declared 'const' [misc-const-correctness]
    TotalNumberOfNonDecreasingNumbersWithNDigits queryForTest(3);
    ^
                                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\TotalNumberOfNonDecreasingNumbersWithNDigits_unit.cpp:40:50: note: FIX-IT applied suggested code changes
    TotalNumberOfNonDecreasingNumbersWithNDigits queryForTest(3);
                                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\TotalNumberOfNonDecreasingNumbersWithNDigits_unit.cpp:50:5: warning: variable 'queryForTest' of type 'TotalNumberOfNonDecreasingNumbersWithNDigits' can be declared 'const' [misc-const-correctness]
    TotalNumberOfNonDecreasingNumbersWithNDigits queryForTest(10);
    ^
                                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\Digits\TotalNumberOfNonDecreasingNumbersWithNDigits_unit.cpp:50:50: note: FIX-IT applied suggested code changes
    TotalNumberOfNonDecreasingNumbersWithNDigits queryForTest(10);
                                                 ^
[207/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Math/MatrixMultiplicationOrder_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MatrixMultiplicationOrder_unit.cpp:10:5: warning: variable 'queryForTest' of type 'MatrixMultiplicationOrder' can be declared 'const' [misc-const-correctness]
    MatrixMultiplicationOrder queryForTest({40, 20, 30, 10, 30});
    ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MatrixMultiplicationOrder_unit.cpp:10:31: note: FIX-IT applied suggested code changes
    MatrixMultiplicationOrder queryForTest({40, 20, 30, 10, 30});
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MatrixMultiplicationOrder_unit.cpp:18:5: warning: variable 'queryForTest' of type 'MatrixMultiplicationOrder' can be declared 'const' [misc-const-correctness]
    MatrixMultiplicationOrder queryForTest({10, 20, 30, 40, 30});
    ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MatrixMultiplicationOrder_unit.cpp:18:31: note: FIX-IT applied suggested code changes
    MatrixMultiplicationOrder queryForTest({10, 20, 30, 40, 30});
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MatrixMultiplicationOrder_unit.cpp:26:5: warning: variable 'queryForTest' of type 'MatrixMultiplicationOrder' can be declared 'const' [misc-const-correctness]
    MatrixMultiplicationOrder queryForTest({10, 20, 30});
    ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MatrixMultiplicationOrder_unit.cpp:26:31: note: FIX-IT applied suggested code changes
    MatrixMultiplicationOrder queryForTest({10, 20, 30});
                              ^
[208/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Math/MinimumNumberOfSquaresWithSumEqualToN_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN_unit.cpp:10:5: warning: variable 'queryForTest' of type 'MinimumNumberOfSquaresWithSumEqualToN' can be declared 'const' [misc-const-correctness]
    MinimumNumberOfSquaresWithSumEqualToN queryForTest(0);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN_unit.cpp:10:43: note: FIX-IT applied suggested code changes
    MinimumNumberOfSquaresWithSumEqualToN queryForTest(0);
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN_unit.cpp:21:5: warning: variable 'queryForTest' of type 'MinimumNumberOfSquaresWithSumEqualToN' can be declared 'const' [misc-const-correctness]
    MinimumNumberOfSquaresWithSumEqualToN queryForTest(1);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN_unit.cpp:21:43: note: FIX-IT applied suggested code changes
    MinimumNumberOfSquaresWithSumEqualToN queryForTest(1);
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN_unit.cpp:31:5: warning: variable 'queryForTest' of type 'MinimumNumberOfSquaresWithSumEqualToN' can be declared 'const' [misc-const-correctness]
    MinimumNumberOfSquaresWithSumEqualToN queryForTest(100);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN_unit.cpp:31:43: note: FIX-IT applied suggested code changes
    MinimumNumberOfSquaresWithSumEqualToN queryForTest(100);
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN_unit.cpp:41:5: warning: variable 'queryForTest' of type 'MinimumNumberOfSquaresWithSumEqualToN' can be declared 'const' [misc-const-correctness]
    MinimumNumberOfSquaresWithSumEqualToN queryForTest(6);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN_unit.cpp:41:43: note: FIX-IT applied suggested code changes
    MinimumNumberOfSquaresWithSumEqualToN queryForTest(6);
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN_unit.cpp:51:5: warning: variable 'queryForTest' of type 'MinimumNumberOfSquaresWithSumEqualToN' can be declared 'const' [misc-const-correctness]
    MinimumNumberOfSquaresWithSumEqualToN queryForTest(47);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\MinimumNumberOfSquaresWithSumEqualToN_unit.cpp:51:43: note: FIX-IT applied suggested code changes
    MinimumNumberOfSquaresWithSumEqualToN queryForTest(47);
                                          ^
[209/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Math/NumberTheory/FibonacciNumbers/CountNumberOfBinaryStringsWithoutConsecutiveOnes_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountNumberOfBinaryStringsWithoutConsecutiveOnes_unit.cpp:10:5: warning: variable 'queryForTest' of type 'CountNumberOfBinaryStringsWithoutConsecutiveOnes' can be declared 'const' [misc-const-correctness]
    CountNumberOfBinaryStringsWithoutConsecutiveOnes queryForTest(1);
    ^
                                                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountNumberOfBinaryStringsWithoutConsecutiveOnes_unit.cpp:10:54: note: FIX-IT applied suggested code changes
    CountNumberOfBinaryStringsWithoutConsecutiveOnes queryForTest(1);
                                                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountNumberOfBinaryStringsWithoutConsecutiveOnes_unit.cpp:19:5: warning: variable 'queryForTest' of type 'CountNumberOfBinaryStringsWithoutConsecutiveOnes' can be declared 'const' [misc-const-correctness]
    CountNumberOfBinaryStringsWithoutConsecutiveOnes queryForTest(2);
    ^
                                                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountNumberOfBinaryStringsWithoutConsecutiveOnes_unit.cpp:19:54: note: FIX-IT applied suggested code changes
    CountNumberOfBinaryStringsWithoutConsecutiveOnes queryForTest(2);
                                                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountNumberOfBinaryStringsWithoutConsecutiveOnes_unit.cpp:28:5: warning: variable 'queryForTest' of type 'CountNumberOfBinaryStringsWithoutConsecutiveOnes' can be declared 'const' [misc-const-correctness]
    CountNumberOfBinaryStringsWithoutConsecutiveOnes queryForTest(3);
    ^
                                                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountNumberOfBinaryStringsWithoutConsecutiveOnes_unit.cpp:28:54: note: FIX-IT applied suggested code changes
    CountNumberOfBinaryStringsWithoutConsecutiveOnes queryForTest(3);
                                                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountNumberOfBinaryStringsWithoutConsecutiveOnes_unit.cpp:37:5: warning: variable 'queryForTest' of type 'CountNumberOfBinaryStringsWithoutConsecutiveOnes' can be declared 'const' [misc-const-correctness]
    CountNumberOfBinaryStringsWithoutConsecutiveOnes queryForTest(10);
    ^
                                                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountNumberOfBinaryStringsWithoutConsecutiveOnes_unit.cpp:37:54: note: FIX-IT applied suggested code changes
    CountNumberOfBinaryStringsWithoutConsecutiveOnes queryForTest(10);
                                                     ^
[210/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Math/NumberTheory/FibonacciNumbers/CountWaysToReachTheNthStair_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountWaysToReachTheNthStair_unit.cpp:10:5: warning: variable 'queryForTest' of type 'CountWaysToReachTheNthStair' can be declared 'const' [misc-const-correctness]
    CountWaysToReachTheNthStair queryForTest(1);
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountWaysToReachTheNthStair_unit.cpp:10:33: note: FIX-IT applied suggested code changes
    CountWaysToReachTheNthStair queryForTest(1);
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountWaysToReachTheNthStair_unit.cpp:16:5: warning: variable 'queryForTest' of type 'CountWaysToReachTheNthStair' can be declared 'const' [misc-const-correctness]
    CountWaysToReachTheNthStair queryForTest(2);
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountWaysToReachTheNthStair_unit.cpp:16:33: note: FIX-IT applied suggested code changes
    CountWaysToReachTheNthStair queryForTest(2);
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountWaysToReachTheNthStair_unit.cpp:22:5: warning: variable 'queryForTest' of type 'CountWaysToReachTheNthStair' can be declared 'const' [misc-const-correctness]
    CountWaysToReachTheNthStair queryForTest(4);
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountWaysToReachTheNthStair_unit.cpp:22:33: note: FIX-IT applied suggested code changes
    CountWaysToReachTheNthStair queryForTest(4);
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountWaysToReachTheNthStair_unit.cpp:28:5: warning: variable 'queryForTest' of type 'CountWaysToReachTheNthStair' can be declared 'const' [misc-const-correctness]
    CountWaysToReachTheNthStair queryForTest(10);
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\FibonacciNumbers\CountWaysToReachTheNthStair_unit.cpp:28:33: note: FIX-IT applied suggested code changes
    CountWaysToReachTheNthStair queryForTest(10);
                                ^
[211/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Math/NumberTheory/UglyNumbers_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\UglyNumbers_unit.cpp:10:5: warning: variable 'queryForTest' of type 'UglyNumbers' can be declared 'const' [misc-const-correctness]
    UglyNumbers queryForTest(0);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\UglyNumbers_unit.cpp:10:17: note: FIX-IT applied suggested code changes
    UglyNumbers queryForTest(0);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\UglyNumbers_unit.cpp:17:5: warning: variable 'queryForTest' of type 'UglyNumbers' can be declared 'const' [misc-const-correctness]
    UglyNumbers queryForTest(1);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\UglyNumbers_unit.cpp:17:17: note: FIX-IT applied suggested code changes
    UglyNumbers queryForTest(1);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\UglyNumbers_unit.cpp:24:5: warning: variable 'queryForTest' of type 'UglyNumbers' can be declared 'const' [misc-const-correctness]
    UglyNumbers queryForTest(7);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\UglyNumbers_unit.cpp:24:17: note: FIX-IT applied suggested code changes
    UglyNumbers queryForTest(7);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\UglyNumbers_unit.cpp:31:5: warning: variable 'queryForTest' of type 'UglyNumbers' can be declared 'const' [misc-const-correctness]
    UglyNumbers queryForTest(15);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\UglyNumbers_unit.cpp:31:17: note: FIX-IT applied suggested code changes
    UglyNumbers queryForTest(15);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\UglyNumbers_unit.cpp:38:5: warning: variable 'queryForTest' of type 'UglyNumbers' can be declared 'const' [misc-const-correctness]
    UglyNumbers queryForTest(150);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Math\NumberTheory\UglyNumbers_unit.cpp:38:17: note: FIX-IT applied suggested code changes
    UglyNumbers queryForTest(150);
                ^
[212/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/BooleanParenthesizationProblem_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\BooleanParenthesizationProblem_unit.cpp:10:5: warning: variable 'queryForTest' of type 'BooleanParenthesizationProblem' can be declared 'const' [misc-const-correctness]
    BooleanParenthesizationProblem queryForTest({true, false, true}, {'^'});
    ^
                                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\BooleanParenthesizationProblem_unit.cpp:10:36: note: FIX-IT applied suggested code changes
    BooleanParenthesizationProblem queryForTest({true, false, true}, {'^'});
                                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\BooleanParenthesizationProblem_unit.cpp:18:5: warning: variable 'queryForTest' of type 'BooleanParenthesizationProblem' can be declared 'const' [misc-const-correctness]
    BooleanParenthesizationProblem queryForTest({true, false, true}, {'^', '&'});
    ^
                                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\BooleanParenthesizationProblem_unit.cpp:18:36: note: FIX-IT applied suggested code changes
    BooleanParenthesizationProblem queryForTest({true, false, true}, {'^', '&'});
                                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\BooleanParenthesizationProblem_unit.cpp:26:5: warning: variable 'queryForTest' of type 'BooleanParenthesizationProblem' can be declared 'const' [misc-const-correctness]
    BooleanParenthesizationProblem queryForTest({true, true, false, true}, {'|', '&', '^'});
    ^
                                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\BooleanParenthesizationProblem_unit.cpp:26:36: note: FIX-IT applied suggested code changes
    BooleanParenthesizationProblem queryForTest({true, true, false, true}, {'|', '&', '^'});
                                   ^
[213/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/CoinProblem_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:16:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 2, 5, 10, 20, 50, 100, 200});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:16:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 2, 5, 10, 20, 50, 100, 200});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:24:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 2, 5, 10, 20, 50, 100, 200});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:24:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 2, 5, 10, 20, 50, 100, 200});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:32:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 2, 5, 10, 20, 50, 100, 200});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:32:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 2, 5, 10, 20, 50, 100, 200});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:40:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 3, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:40:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 3, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:48:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 2, 5, 10, 20, 50, 100, 200});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:48:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 2, 5, 10, 20, 50, 100, 200});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:56:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 3, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:56:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 3, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:64:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 3, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:64:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 3, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:74:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 3, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:74:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 3, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:84:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 3, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:84:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 3, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:104:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 3, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:104:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 3, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:124:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 3, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:124:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 3, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:135:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 3, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:135:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 3, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:146:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 3, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:146:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 3, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:157:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 3, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:157:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 3, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:167:5: warning: variable 'coinProblem' of type 'CoinProblem' can be declared 'const' [misc-const-correctness]
    CoinProblem coinProblem({1, 3, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CoinProblem_unit.cpp:167:17: note: FIX-IT applied suggested code changes
    CoinProblem coinProblem({1, 3, 4});
                ^
[214/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/CountNumberOfWaysToReachAGivenScoreInAGame_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame_unit.cpp:10:5: warning: variable 'queryForTest' of type 'CountNumberOfWaysToReachAGivenScoreInAGame' can be declared 'const' [misc-const-correctness]
    CountNumberOfWaysToReachAGivenScoreInAGame queryForTest(0);
    ^
                                               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame_unit.cpp:10:48: note: FIX-IT applied suggested code changes
    CountNumberOfWaysToReachAGivenScoreInAGame queryForTest(0);
                                               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame_unit.cpp:18:5: warning: variable 'queryForTest' of type 'CountNumberOfWaysToReachAGivenScoreInAGame' can be declared 'const' [misc-const-correctness]
    CountNumberOfWaysToReachAGivenScoreInAGame queryForTest(1);
    ^
                                               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame_unit.cpp:18:48: note: FIX-IT applied suggested code changes
    CountNumberOfWaysToReachAGivenScoreInAGame queryForTest(1);
                                               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame_unit.cpp:25:5: warning: variable 'queryForTest' of type 'CountNumberOfWaysToReachAGivenScoreInAGame' can be declared 'const' [misc-const-correctness]
    CountNumberOfWaysToReachAGivenScoreInAGame queryForTest(13);
    ^
                                               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame_unit.cpp:25:48: note: FIX-IT applied suggested code changes
    CountNumberOfWaysToReachAGivenScoreInAGame queryForTest(13);
                                               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame_unit.cpp:32:5: warning: variable 'queryForTest' of type 'CountNumberOfWaysToReachAGivenScoreInAGame' can be declared 'const' [misc-const-correctness]
    CountNumberOfWaysToReachAGivenScoreInAGame queryForTest(20);
    ^
                                               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountNumberOfWaysToReachAGivenScoreInAGame_unit.cpp:32:48: note: FIX-IT applied suggested code changes
    CountNumberOfWaysToReachAGivenScoreInAGame queryForTest(20);
                                               ^
[215/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/CountPossibleWaysToConstructBuildings_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:10:5: warning: variable 'queryForTest' of type 'CountPossibleWaysToConstructBuildings' can be declared 'const' [misc-const-correctness]
    CountPossibleWaysToConstructBuildings queryForTest(0);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:10:43: note: FIX-IT applied suggested code changes
    CountPossibleWaysToConstructBuildings queryForTest(0);
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:18:5: warning: variable 'queryForTest' of type 'CountPossibleWaysToConstructBuildings' can be declared 'const' [misc-const-correctness]
    CountPossibleWaysToConstructBuildings queryForTest(1);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:18:43: note: FIX-IT applied suggested code changes
    CountPossibleWaysToConstructBuildings queryForTest(1);
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:26:5: warning: variable 'queryForTest' of type 'CountPossibleWaysToConstructBuildings' can be declared 'const' [misc-const-correctness]
    CountPossibleWaysToConstructBuildings queryForTest(2);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:26:43: note: FIX-IT applied suggested code changes
    CountPossibleWaysToConstructBuildings queryForTest(2);
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:34:5: warning: variable 'queryForTest' of type 'CountPossibleWaysToConstructBuildings' can be declared 'const' [misc-const-correctness]
    CountPossibleWaysToConstructBuildings queryForTest(3);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:34:43: note: FIX-IT applied suggested code changes
    CountPossibleWaysToConstructBuildings queryForTest(3);
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:42:5: warning: variable 'queryForTest' of type 'CountPossibleWaysToConstructBuildings' can be declared 'const' [misc-const-correctness]
    CountPossibleWaysToConstructBuildings queryForTest(4);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:42:43: note: FIX-IT applied suggested code changes
    CountPossibleWaysToConstructBuildings queryForTest(4);
                                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:50:5: warning: variable 'queryForTest' of type 'CountPossibleWaysToConstructBuildings' can be declared 'const' [misc-const-correctness]
    CountPossibleWaysToConstructBuildings queryForTest(5);
    ^
                                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\CountPossibleWaysToConstructBuildings_unit.cpp:50:43: note: FIX-IT applied suggested code changes
    CountPossibleWaysToConstructBuildings queryForTest(5);
                                          ^
[216/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/CountingTilings_unit.cpp.obj
[217/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/EggDroppingPuzzle_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\EggDroppingPuzzle_unit.cpp:10:5: warning: variable 'queryForTest' of type 'EggDroppingPuzzle' can be declared 'const' [misc-const-correctness]
    EggDroppingPuzzle queryForTest(0, 0);
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\EggDroppingPuzzle_unit.cpp:10:23: note: FIX-IT applied suggested code changes
    EggDroppingPuzzle queryForTest(0, 0);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\EggDroppingPuzzle_unit.cpp:18:5: warning: variable 'queryForTest' of type 'EggDroppingPuzzle' can be declared 'const' [misc-const-correctness]
    EggDroppingPuzzle queryForTest(1, 5);
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\EggDroppingPuzzle_unit.cpp:18:23: note: FIX-IT applied suggested code changes
    EggDroppingPuzzle queryForTest(1, 5);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\EggDroppingPuzzle_unit.cpp:26:5: warning: variable 'queryForTest' of type 'EggDroppingPuzzle' can be declared 'const' [misc-const-correctness]
    EggDroppingPuzzle queryForTest(2, 10);
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\EggDroppingPuzzle_unit.cpp:26:23: note: FIX-IT applied suggested code changes
    EggDroppingPuzzle queryForTest(2, 10);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\EggDroppingPuzzle_unit.cpp:34:5: warning: variable 'queryForTest' of type 'EggDroppingPuzzle' can be declared 'const' [misc-const-correctness]
    EggDroppingPuzzle queryForTest(2, 36);
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\EggDroppingPuzzle_unit.cpp:34:23: note: FIX-IT applied suggested code changes
    EggDroppingPuzzle queryForTest(2, 36);
                      ^
[218/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/ElevatorWeightProblem_unit.cpp.obj
[219/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/FindTheMinimumCostToReachDestinationUsingATrain_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\FindTheMinimumCostToReachDestinationUsingATrain_unit.cpp:16:5: warning: variable 'valueMatrix' of type 'ValueMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    ValueMatrix valueMatrix(0, 0);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\FindTheMinimumCostToReachDestinationUsingATrain_unit.cpp:16:17: note: FIX-IT applied suggested code changes
    ValueMatrix valueMatrix(0, 0);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\FindTheMinimumCostToReachDestinationUsingATrain_unit.cpp:17:5: warning: variable 'queryForTest' of type 'FindTheMinimumCostToReachDestinationUsingATrain' can be declared 'const' [misc-const-correctness]
    FindTheMinimumCostToReachDestinationUsingATrain queryForTest(valueMatrix);
    ^
                                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\FindTheMinimumCostToReachDestinationUsingATrain_unit.cpp:17:53: note: FIX-IT applied suggested code changes
    FindTheMinimumCostToReachDestinationUsingATrain queryForTest(valueMatrix);
                                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\FindTheMinimumCostToReachDestinationUsingATrain_unit.cpp:25:5: warning: variable 'valueMatrix' of type 'ValueMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    ValueMatrix valueMatrix(4, 4, {0, UV, UV, UV, 15, 0, UV, UV, 80, 40, 0, UV, 90, 50, 70, 0});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\FindTheMinimumCostToReachDestinationUsingATrain_unit.cpp:25:17: note: FIX-IT applied suggested code changes
    ValueMatrix valueMatrix(4, 4, {0, UV, UV, UV, 15, 0, UV, UV, 80, 40, 0, UV, 90, 50, 70, 0});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\FindTheMinimumCostToReachDestinationUsingATrain_unit.cpp:26:5: warning: variable 'queryForTest' of type 'FindTheMinimumCostToReachDestinationUsingATrain' can be declared 'const' [misc-const-correctness]
    FindTheMinimumCostToReachDestinationUsingATrain queryForTest(valueMatrix);
    ^
                                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\FindTheMinimumCostToReachDestinationUsingATrain_unit.cpp:26:53: note: FIX-IT applied suggested code changes
    FindTheMinimumCostToReachDestinationUsingATrain queryForTest(valueMatrix);
                                                    ^
[220/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/MaximizeProfitInCuttingARod_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximizeProfitInCuttingARod_unit.cpp:10:5: warning: variable 'queryForTest' of type 'MaximizeProfitInCuttingARod' can be declared 'const' [misc-const-correctness]
    MaximizeProfitInCuttingARod queryForTest(8, {{1, 1}, {2, 5}, {3, 8}, {4, 9}, {5, 10}, {6, 17}, {7, 17}, {8, 20}});
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximizeProfitInCuttingARod_unit.cpp:10:33: note: FIX-IT applied suggested code changes
    MaximizeProfitInCuttingARod queryForTest(8, {{1, 1}, {2, 5}, {3, 8}, {4, 9}, {5, 10}, {6, 17}, {7, 17}, {8, 20}});
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximizeProfitInCuttingARod_unit.cpp:19:5: warning: variable 'queryForTest' of type 'MaximizeProfitInCuttingARod' can be declared 'const' [misc-const-correctness]
    MaximizeProfitInCuttingARod queryForTest(8, {{1, 3}, {2, 5}, {3, 8}, {4, 9}, {5, 10}, {6, 17}, {7, 17}, {8, 20}});
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximizeProfitInCuttingARod_unit.cpp:19:33: note: FIX-IT applied suggested code changes
    MaximizeProfitInCuttingARod queryForTest(8, {{1, 3}, {2, 5}, {3, 8}, {4, 9}, {5, 10}, {6, 17}, {7, 17}, {8, 20}});
                                ^
[221/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/MaximumProfitByBuyingAndSellingAShareAtMostTwice_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice_unit.cpp:12:5: warning: variable 'queryForTest' of type 'MaximumProfitByBuyingAndSellingAShareAtMostTwice' can be declared 'const' [misc-const-correctness]
    MaximumProfitByBuyingAndSellingAShareAtMostTwice queryForTest({10, 22, 5, 75, 65, 80});
    ^
                                                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice_unit.cpp:12:54: note: FIX-IT applied suggested code changes
    MaximumProfitByBuyingAndSellingAShareAtMostTwice queryForTest({10, 22, 5, 75, 65, 80});
                                                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice_unit.cpp:20:5: warning: variable 'queryForTest' of type 'MaximumProfitByBuyingAndSellingAShareAtMostTwice' can be declared 'const' [misc-const-correctness]
    MaximumProfitByBuyingAndSellingAShareAtMostTwice queryForTest({2, 30, 15, 10, 8, 25, 80});
    ^
                                                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice_unit.cpp:20:54: note: FIX-IT applied suggested code changes
    MaximumProfitByBuyingAndSellingAShareAtMostTwice queryForTest({2, 30, 15, 10, 8, 25, 80});
                                                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice_unit.cpp:28:5: warning: variable 'queryForTest' of type 'MaximumProfitByBuyingAndSellingAShareAtMostTwice' can be declared 'const' [misc-const-correctness]
    MaximumProfitByBuyingAndSellingAShareAtMostTwice queryForTest({100, 30, 15, 10, 8, 25, 80});
    ^
                                                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice_unit.cpp:28:54: note: FIX-IT applied suggested code changes
    MaximumProfitByBuyingAndSellingAShareAtMostTwice queryForTest({100, 30, 15, 10, 8, 25, 80});
                                                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice_unit.cpp:36:5: warning: variable 'queryForTest' of type 'MaximumProfitByBuyingAndSellingAShareAtMostTwice' can be declared 'const' [misc-const-correctness]
    MaximumProfitByBuyingAndSellingAShareAtMostTwice queryForTest({90, 80, 70, 60, 50});
    ^
                                                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MaximumProfitByBuyingAndSellingAShareAtMostTwice_unit.cpp:36:54: note: FIX-IT applied suggested code changes
    MaximumProfitByBuyingAndSellingAShareAtMostTwice queryForTest({90, 80, 70, 60, 50});
                                                     ^
[222/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/MinimumCostPolygonTriangulation_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MinimumCostPolygonTriangulation_unit.cpp:10:5: warning: variable 'queryForTest' of type 'MinimumCostPolygonTriangulation' can be declared 'const' [misc-const-correctness]
    MinimumCostPolygonTriangulation queryForTest({{0, 2}, {1, 2}, {2, 1}, {1, 0}, {0, 0}});
    ^
                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MinimumCostPolygonTriangulation_unit.cpp:10:37: note: FIX-IT applied suggested code changes
    MinimumCostPolygonTriangulation queryForTest({{0, 2}, {1, 2}, {2, 1}, {1, 0}, {0, 0}});
                                    ^
[223/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/MinimumNumberOfJumpsToReachEnd_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd_unit.cpp:14:5: warning: variable 'queryForTest' of type 'MinimumNumberOfJumpsToReachEnd' can be declared 'const' [misc-const-correctness]
    MinimumNumberOfJumpsToReachEnd queryForTest({1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9});
    ^
                                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd_unit.cpp:14:36: note: FIX-IT applied suggested code changes
    MinimumNumberOfJumpsToReachEnd queryForTest({1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9});
                                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd_unit.cpp:23:5: warning: variable 'queryForTest' of type 'MinimumNumberOfJumpsToReachEnd' can be declared 'const' [misc-const-correctness]
    MinimumNumberOfJumpsToReachEnd queryForTest({1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9});
    ^
                                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MinimumNumberOfJumpsToReachEnd_unit.cpp:23:36: note: FIX-IT applied suggested code changes
    MinimumNumberOfJumpsToReachEnd queryForTest({1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9});
                                   ^
[224/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/MobileNumericKeypadProblem_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MobileNumericKeypadProblem_unit.cpp:10:5: warning: variable 'queryForTest' of type 'MobileNumericKeypadProblem' can be declared 'const' [misc-const-correctness]
    MobileNumericKeypadProblem queryForTest(1);
    ^
                               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MobileNumericKeypadProblem_unit.cpp:10:32: note: FIX-IT applied suggested code changes
    MobileNumericKeypadProblem queryForTest(1);
                               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MobileNumericKeypadProblem_unit.cpp:19:5: warning: variable 'queryForTest' of type 'MobileNumericKeypadProblem' can be declared 'const' [misc-const-correctness]
    MobileNumericKeypadProblem queryForTest(2);
    ^
                               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MobileNumericKeypadProblem_unit.cpp:19:32: note: FIX-IT applied suggested code changes
    MobileNumericKeypadProblem queryForTest(2);
                               ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MobileNumericKeypadProblem_unit.cpp:28:5: warning: variable 'queryForTest' of type 'MobileNumericKeypadProblem' can be declared 'const' [misc-const-correctness]
    MobileNumericKeypadProblem queryForTest(10);
    ^
                               const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\MobileNumericKeypadProblem_unit.cpp:28:32: note: FIX-IT applied suggested code changes
    MobileNumericKeypadProblem queryForTest(10);
                               ^
[225/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/PrintMaximumNumberOfAs_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\PrintMaximumNumberOfAs_unit.cpp:10:5: warning: variable 'queryForTest' of type 'PrintMaximumNumberOfAs' can be declared 'const' [misc-const-correctness]
    PrintMaximumNumberOfAs queryForTest(0);
    ^
                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\PrintMaximumNumberOfAs_unit.cpp:10:28: note: FIX-IT applied suggested code changes
    PrintMaximumNumberOfAs queryForTest(0);
                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\PrintMaximumNumberOfAs_unit.cpp:19:5: warning: variable 'queryForTest' of type 'PrintMaximumNumberOfAs' can be declared 'const' [misc-const-correctness]
    PrintMaximumNumberOfAs queryForTest(1);
    ^
                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\PrintMaximumNumberOfAs_unit.cpp:19:28: note: FIX-IT applied suggested code changes
    PrintMaximumNumberOfAs queryForTest(1);
                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\PrintMaximumNumberOfAs_unit.cpp:28:5: warning: variable 'queryForTest' of type 'PrintMaximumNumberOfAs' can be declared 'const' [misc-const-correctness]
    PrintMaximumNumberOfAs queryForTest(3);
    ^
                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\PrintMaximumNumberOfAs_unit.cpp:28:28: note: FIX-IT applied suggested code changes
    PrintMaximumNumberOfAs queryForTest(3);
                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\PrintMaximumNumberOfAs_unit.cpp:37:5: warning: variable 'queryForTest' of type 'PrintMaximumNumberOfAs' can be declared 'const' [misc-const-correctness]
    PrintMaximumNumberOfAs queryForTest(7);
    ^
                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\PrintMaximumNumberOfAs_unit.cpp:37:28: note: FIX-IT applied suggested code changes
    PrintMaximumNumberOfAs queryForTest(7);
                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\PrintMaximumNumberOfAs_unit.cpp:46:5: warning: variable 'queryForTest' of type 'PrintMaximumNumberOfAs' can be declared 'const' [misc-const-correctness]
    PrintMaximumNumberOfAs queryForTest(11);
    ^
                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\PrintMaximumNumberOfAs_unit.cpp:46:28: note: FIX-IT applied suggested code changes
    PrintMaximumNumberOfAs queryForTest(11);
                           ^
[226/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/ProductDayProblem_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\ProductDayProblem_unit.cpp:14:5: warning: variable 'pricesInDayByProduct' of type 'PriceMatrix' (aka 'AlbaMatrix<int>') can be declared 'const' [misc-const-correctness]
    PriceMatrix pricesInDayByProduct(8, 3, {6, 9, 5, 2, 8, 9, 1, 6, 8, 2, 6, 2, 7, 5, 7, 2, 5, 3, 9, 7, 3, 5, 1, 4});
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\ProductDayProblem_unit.cpp:14:17: note: FIX-IT applied suggested code changes
    PriceMatrix pricesInDayByProduct(8, 3, {6, 9, 5, 2, 8, 9, 1, 6, 8, 2, 6, 2, 7, 5, 7, 2, 5, 3, 9, 7, 3, 5, 1, 4});
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\ProductDayProblem_unit.cpp:15:5: warning: variable 'queryForTest' of type 'ProductDayProblem' can be declared 'const' [misc-const-correctness]
    ProductDayProblem queryForTest(pricesInDayByProduct);
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\ProductDayProblem_unit.cpp:15:23: note: FIX-IT applied suggested code changes
    ProductDayProblem queryForTest(pricesInDayByProduct);
                      ^
[227/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Other/WeightedJobScheduling_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\WeightedJobScheduling_unit.cpp:10:5: warning: variable 'queryForTest' of type 'WeightedJobScheduling' can be declared 'const' [misc-const-correctness]
    WeightedJobScheduling queryForTest({});
    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\WeightedJobScheduling_unit.cpp:10:27: note: FIX-IT applied suggested code changes
    WeightedJobScheduling queryForTest({});
                          ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\WeightedJobScheduling_unit.cpp:17:5: warning: variable 'queryForTest' of type 'WeightedJobScheduling' can be declared 'const' [misc-const-correctness]
    WeightedJobScheduling queryForTest({{1, 2, 50}, {3, 5, 20}, {6, 19, 100}, {2, 100, 200}});
    ^
                          const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Other\WeightedJobScheduling_unit.cpp:17:27: note: FIX-IT applied suggested code changes
    WeightedJobScheduling queryForTest({{1, 2, 50}, {3, 5, 20}, {6, 19, 100}, {2, 100, 200}});
                          ^
[228/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/OverlappingSubproblems/FibonacciExample_unit.cpp.obj
[229/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Palindrome/LongestPalindromicSubsequence_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubsequence_unit.cpp:10:5: warning: variable 'queryForTest' of type 'LongestPalindromicSubsequence' can be declared 'const' [misc-const-correctness]
    LongestPalindromicSubsequence queryForTest("GEEKSFORGEEKS");
    ^
                                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubsequence_unit.cpp:10:35: note: FIX-IT applied suggested code changes
    LongestPalindromicSubsequence queryForTest("GEEKSFORGEEKS");
                                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubsequence_unit.cpp:19:5: warning: variable 'queryForTest' of type 'LongestPalindromicSubsequence' can be declared 'const' [misc-const-correctness]
    LongestPalindromicSubsequence queryForTest("BBABCBCAB");
    ^
                                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubsequence_unit.cpp:19:35: note: FIX-IT applied suggested code changes
    LongestPalindromicSubsequence queryForTest("BBABCBCAB");
                                  ^
[230/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Palindrome/LongestPalindromicSubstring_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubstring_unit.cpp:10:5: warning: variable 'queryForTest' of type 'LongestPalindromicSubstring' can be declared 'const' [misc-const-correctness]
    LongestPalindromicSubstring queryForTest("forgeeksskeegfor");
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubstring_unit.cpp:10:33: note: FIX-IT applied suggested code changes
    LongestPalindromicSubstring queryForTest("forgeeksskeegfor");
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubstring_unit.cpp:20:5: warning: variable 'queryForTest' of type 'LongestPalindromicSubstring' can be declared 'const' [misc-const-correctness]
    LongestPalindromicSubstring queryForTest("Geeks");
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubstring_unit.cpp:20:33: note: FIX-IT applied suggested code changes
    LongestPalindromicSubstring queryForTest("Geeks");
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubstring_unit.cpp:30:5: warning: variable 'queryForTest' of type 'LongestPalindromicSubstring' can be declared 'const' [misc-const-correctness]
    LongestPalindromicSubstring queryForTest("eeeeee");
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubstring_unit.cpp:30:33: note: FIX-IT applied suggested code changes
    LongestPalindromicSubstring queryForTest("eeeeee");
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubstring_unit.cpp:40:5: warning: variable 'queryForTest' of type 'LongestPalindromicSubstring' can be declared 'const' [misc-const-correctness]
    LongestPalindromicSubstring queryForTest("bananas");
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubstring_unit.cpp:40:33: note: FIX-IT applied suggested code changes
    LongestPalindromicSubstring queryForTest("bananas");
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubstring_unit.cpp:50:5: warning: variable 'queryForTest' of type 'LongestPalindromicSubstring' can be declared 'const' [misc-const-correctness]
    LongestPalindromicSubstring queryForTest("abbcccbbbcaaccbababcbcabca");
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\LongestPalindromicSubstring_unit.cpp:50:33: note: FIX-IT applied suggested code changes
    LongestPalindromicSubstring queryForTest("abbcccbbbcaaccbababcbcabca");
                                ^
[231/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Palindrome/PalindromePartitioning_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\PalindromePartitioning_unit.cpp:10:5: warning: variable 'queryForTest' of type 'PalindromePartitioning' can be declared 'const' [misc-const-correctness]
    PalindromePartitioning queryForTest("ababbbabbababa");
    ^
                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\PalindromePartitioning_unit.cpp:10:28: note: FIX-IT applied suggested code changes
    PalindromePartitioning queryForTest("ababbbabbababa");
                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\PalindromePartitioning_unit.cpp:19:5: warning: variable 'queryForTest' of type 'PalindromePartitioning' can be declared 'const' [misc-const-correctness]
    PalindromePartitioning queryForTest("GEEKSFORGEEKS");
    ^
                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\PalindromePartitioning_unit.cpp:19:28: note: FIX-IT applied suggested code changes
    PalindromePartitioning queryForTest("GEEKSFORGEEKS");
                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\PalindromePartitioning_unit.cpp:28:5: warning: variable 'queryForTest' of type 'PalindromePartitioning' can be declared 'const' [misc-const-correctness]
    PalindromePartitioning queryForTest("BBABCBCAB");
    ^
                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Palindrome\PalindromePartitioning_unit.cpp:28:28: note: FIX-IT applied suggested code changes
    PalindromePartitioning queryForTest("BBABCBCAB");
                           ^
[232/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/String/LevenshteinDistance_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\LevenshteinDistance_unit.cpp:14:5: warning: variable 'queryForTest' of type 'LevenshteinDistance' can be declared 'const' [misc-const-correctness]
    LevenshteinDistance queryForTest("MOVIE", "LOVE");
    ^
                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\LevenshteinDistance_unit.cpp:14:25: note: FIX-IT applied suggested code changes
    LevenshteinDistance queryForTest("MOVIE", "LOVE");
                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\LevenshteinDistance_unit.cpp:23:5: warning: variable 'queryForTest' of type 'LevenshteinDistance' can be declared 'const' [misc-const-correctness]
    LevenshteinDistance queryForTest("This is a statement", "This is not a statement");
    ^
                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\LevenshteinDistance_unit.cpp:23:25: note: FIX-IT applied suggested code changes
    LevenshteinDistance queryForTest("This is a statement", "This is not a statement");
                        ^
[233/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/String/LongestCommonSubstring_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\LongestCommonSubstring_unit.cpp:14:5: warning: variable 'queryForTest' of type 'LongestCommonSubstring' can be declared 'const' [misc-const-correctness]
    LongestCommonSubstring queryForTest("MOVIE", "LOVE");
    ^
                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\LongestCommonSubstring_unit.cpp:14:28: note: FIX-IT applied suggested code changes
    LongestCommonSubstring queryForTest("MOVIE", "LOVE");
                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\LongestCommonSubstring_unit.cpp:24:5: warning: variable 'queryForTest' of type 'LongestCommonSubstring' can be declared 'const' [misc-const-correctness]
    LongestCommonSubstring queryForTest("This is a statement", "This is not a statement");
    ^
                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\LongestCommonSubstring_unit.cpp:24:28: note: FIX-IT applied suggested code changes
    LongestCommonSubstring queryForTest("This is a statement", "This is not a statement");
                           ^
[234/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/String/StringConstruction_unit.cpp.obj
[235/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/String/WordWrapProblemWithLineWidth_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\WordWrapProblemWithLineWidth_unit.cpp:10:5: warning: variable 'queryForTest' of type 'WordWrapProblemWithLineWidth' can be declared 'const' [misc-const-correctness]
    WordWrapProblemWithLineWidth queryForTest(15, {"Geeks", "for", "Geeks", "presents", "word", "wrap", "problem"});
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\WordWrapProblemWithLineWidth_unit.cpp:10:34: note: FIX-IT applied suggested code changes
    WordWrapProblemWithLineWidth queryForTest(15, {"Geeks", "for", "Geeks", "presents", "word", "wrap", "problem"});
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\WordWrapProblemWithLineWidth_unit.cpp:18:5: warning: variable 'queryForTest' of type 'WordWrapProblemWithLineWidth' can be declared 'const' [misc-const-correctness]
    WordWrapProblemWithLineWidth queryForTest(6, {"aaa", "bb", "cc", "ddddd"});
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\WordWrapProblemWithLineWidth_unit.cpp:18:34: note: FIX-IT applied suggested code changes
    WordWrapProblemWithLineWidth queryForTest(6, {"aaa", "bb", "cc", "ddddd"});
                                 ^
[236/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/String/WordWrapProblemWithoutLineWidth_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\WordWrapProblemWithoutLineWidth_unit.cpp:10:5: warning: variable 'queryForTest' of type 'WordWrapProblemWithoutLineWidth' can be declared 'const' [misc-const-correctness]
    WordWrapProblemWithoutLineWidth queryForTest({"Geeks", "for", "Geeks", "presents", "word", "wrap", "problem"});
    ^
                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\WordWrapProblemWithoutLineWidth_unit.cpp:10:37: note: FIX-IT applied suggested code changes
    WordWrapProblemWithoutLineWidth queryForTest({"Geeks", "for", "Geeks", "presents", "word", "wrap", "problem"});
                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\WordWrapProblemWithoutLineWidth_unit.cpp:17:5: warning: variable 'queryForTest' of type 'WordWrapProblemWithoutLineWidth' can be declared 'const' [misc-const-correctness]
    WordWrapProblemWithoutLineWidth queryForTest({"aaa", "bb", "cc", "ddddd"});
    ^
                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\String\WordWrapProblemWithoutLineWidth_unit.cpp:17:37: note: FIX-IT applied suggested code changes
    WordWrapProblemWithoutLineWidth queryForTest({"aaa", "bb", "cc", "ddddd"});
                                    ^
[237/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/SubArray/LongestEqualLengthSubArraysWithSameSum_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum_unit.cpp:10:5: warning: variable 'queryForTest' of type 'LongestEqualLengthSubArraysWithSameSum' can be declared 'const' [misc-const-correctness]
    LongestEqualLengthSubArraysWithSameSum queryForTest({});
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum_unit.cpp:10:44: note: FIX-IT applied suggested code changes
    LongestEqualLengthSubArraysWithSameSum queryForTest({});
                                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum_unit.cpp:17:5: warning: variable 'queryForTest' of type 'LongestEqualLengthSubArraysWithSameSum' can be declared 'const' [misc-const-correctness]
    LongestEqualLengthSubArraysWithSameSum queryForTest({10});
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum_unit.cpp:17:44: note: FIX-IT applied suggested code changes
    LongestEqualLengthSubArraysWithSameSum queryForTest({10});
                                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum_unit.cpp:24:5: warning: variable 'queryForTest' of type 'LongestEqualLengthSubArraysWithSameSum' can be declared 'const' [misc-const-correctness]
    LongestEqualLengthSubArraysWithSameSum queryForTest({10, 10});
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum_unit.cpp:24:44: note: FIX-IT applied suggested code changes
    LongestEqualLengthSubArraysWithSameSum queryForTest({10, 10});
                                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum_unit.cpp:31:5: warning: variable 'queryForTest' of type 'LongestEqualLengthSubArraysWithSameSum' can be declared 'const' [misc-const-correctness]
    LongestEqualLengthSubArraysWithSameSum queryForTest({1, 2, 3, 1, 2, 3});
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum_unit.cpp:31:44: note: FIX-IT applied suggested code changes
    LongestEqualLengthSubArraysWithSameSum queryForTest({1, 2, 3, 1, 2, 3});
                                           ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum_unit.cpp:38:5: warning: variable 'queryForTest' of type 'LongestEqualLengthSubArraysWithSameSum' can be declared 'const' [misc-const-correctness]
    LongestEqualLengthSubArraysWithSameSum queryForTest({1, 5, 3, 8, 0, 2, 3});
    ^
                                           const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\LongestEqualLengthSubArraysWithSameSum_unit.cpp:38:44: note: FIX-IT applied suggested code changes
    LongestEqualLengthSubArraysWithSameSum queryForTest({1, 5, 3, 8, 0, 2, 3});
                                           ^
[238/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/SubArray/MaximumSubArraySum_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:14:5: warning: variable 'queryForTest' of type 'MaximumSubArraySum' can be declared 'const' [misc-const-correctness]
    MaximumSubArraySum queryForTest({-1, 2, 4, -3, 5, 2, -5, 2});
    ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:14:24: note: FIX-IT applied suggested code changes
    MaximumSubArraySum queryForTest({-1, 2, 4, -3, 5, 2, -5, 2});
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:20:5: warning: variable 'queryForTest' of type 'MaximumSubArraySum' can be declared 'const' [misc-const-correctness]
    MaximumSubArraySum queryForTest({-6, -2, -1, -3, -5, -2, -5, -2});  // all negative  numbers
    ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:20:24: note: FIX-IT applied suggested code changes
    MaximumSubArraySum queryForTest({-6, -2, -1, -3, -5, -2, -5, -2});  // all negative  numbers
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:25:5: warning: variable 'queryForTest' of type 'MaximumSubArraySum' can be declared 'const' [misc-const-correctness]
    MaximumSubArraySum queryForTest({-1, 2, 4, -3, 5, 2, -5, 2});
    ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:25:24: note: FIX-IT applied suggested code changes
    MaximumSubArraySum queryForTest({-1, 2, 4, -3, 5, 2, -5, 2});
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:27:5: warning: variable 'subArrayDetailsToVerify' of type 'SubArrayDetails' (aka 'alba::MaximumSubArraySum::SubArrayDetails') can be declared 'const' [misc-const-correctness]
    SubArrayDetails subArrayDetailsToVerify(queryForTest.getMaximumSubArraySumWithDetails());
    ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:27:21: note: FIX-IT applied suggested code changes
    SubArrayDetails subArrayDetailsToVerify(queryForTest.getMaximumSubArraySumWithDetails());
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:35:5: warning: variable 'queryForTest' of type 'MaximumSubArraySum' can be declared 'const' [misc-const-correctness]
    MaximumSubArraySum queryForTest({-6, -2, -1, -3, -5, -2, -5, -2});  // all negative  numbers
    ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:35:24: note: FIX-IT applied suggested code changes
    MaximumSubArraySum queryForTest({-6, -2, -1, -3, -5, -2, -5, -2});  // all negative  numbers
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:36:5: warning: variable 'subArrayDetailsToVerify' of type 'SubArrayDetails' (aka 'alba::MaximumSubArraySum::SubArrayDetails') can be declared 'const' [misc-const-correctness]
    SubArrayDetails subArrayDetailsToVerify(queryForTest.getMaximumSubArraySumWithDetails());
    ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\SubArray\MaximumSubArraySum_unit.cpp:36:21: note: FIX-IT applied suggested code changes
    SubArrayDetails subArrayDetailsToVerify(queryForTest.getMaximumSubArraySumWithDetails());
                    ^
[239/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Subsequence/Increasing/BoxStackingProblem_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BoxStackingProblem_unit.cpp:14:5: warning: variable 'queryForTest' of type 'BoxStackingProblem' can be declared 'const' [misc-const-correctness]
    BoxStackingProblem queryForTest({{4, 6, 7}, {1, 2, 3}, {4, 5, 6}, {10, 12, 32}});
    ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BoxStackingProblem_unit.cpp:14:24: note: FIX-IT applied suggested code changes
    BoxStackingProblem queryForTest({{4, 6, 7}, {1, 2, 3}, {4, 5, 6}, {10, 12, 32}});
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BoxStackingProblem_unit.cpp:20:5: warning: variable 'queryForTest' of type 'BoxStackingProblem' can be declared 'const' [misc-const-correctness]
    BoxStackingProblem queryForTest({{4, 6, 7}, {1, 2, 3}, {4, 5, 6}, {10, 12, 32}});
    ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BoxStackingProblem_unit.cpp:20:24: note: FIX-IT applied suggested code changes
    BoxStackingProblem queryForTest({{4, 6, 7}, {1, 2, 3}, {4, 5, 6}, {10, 12, 32}});
                       ^
[240/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Subsequence/Increasing/BuildingBridges_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BuildingBridges_unit.cpp:14:5: warning: variable 'queryForTest' of type 'BuildingBridges' can be declared 'const' [misc-const-correctness]
    BuildingBridges queryForTest({{6, 2}, {4, 3}, {2, 6}, {1, 5}});
    ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BuildingBridges_unit.cpp:14:21: note: FIX-IT applied suggested code changes
    BuildingBridges queryForTest({{6, 2}, {4, 3}, {2, 6}, {1, 5}});
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BuildingBridges_unit.cpp:20:5: warning: variable 'queryForTest' of type 'BuildingBridges' can be declared 'const' [misc-const-correctness]
    BuildingBridges queryForTest({{8, 1}, {1, 2}, {4, 3}, {3, 4}, {5, 5}, {2, 6}, {6, 7}, {7, 8}});
    ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BuildingBridges_unit.cpp:20:21: note: FIX-IT applied suggested code changes
    BuildingBridges queryForTest({{8, 1}, {1, 2}, {4, 3}, {3, 4}, {5, 5}, {2, 6}, {6, 7}, {7, 8}});
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BuildingBridges_unit.cpp:26:5: warning: variable 'queryForTest' of type 'BuildingBridges' can be declared 'const' [misc-const-correctness]
    BuildingBridges queryForTest({{6, 2}, {4, 3}, {2, 6}, {1, 5}});
    ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BuildingBridges_unit.cpp:26:21: note: FIX-IT applied suggested code changes
    BuildingBridges queryForTest({{6, 2}, {4, 3}, {2, 6}, {1, 5}});
                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BuildingBridges_unit.cpp:32:5: warning: variable 'queryForTest' of type 'BuildingBridges' can be declared 'const' [misc-const-correctness]
    BuildingBridges queryForTest({{8, 1}, {1, 2}, {4, 3}, {3, 4}, {5, 5}, {2, 6}, {6, 7}, {7, 8}});
    ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\BuildingBridges_unit.cpp:32:21: note: FIX-IT applied suggested code changes
    BuildingBridges queryForTest({{8, 1}, {1, 2}, {4, 3}, {3, 4}, {5, 5}, {2, 6}, {6, 7}, {7, 8}});
                    ^
[241/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Subsequence/Increasing/LongestIncreasingSubsequenceLinearithmic_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequenceLinearithmic_unit.cpp:14:5: warning: variable 'queryForTest' of type 'LongestIncreasingSubsequenceLinearithmic' can be declared 'const' [misc-const-correctness]
    LongestIncreasingSubsequenceLinearithmic queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
    ^
                                             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequenceLinearithmic_unit.cpp:14:46: note: FIX-IT applied suggested code changes
    LongestIncreasingSubsequenceLinearithmic queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
                                             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequenceLinearithmic_unit.cpp:20:5: warning: variable 'queryForTest' of type 'LongestIncreasingSubsequenceLinearithmic' can be declared 'const' [misc-const-correctness]
    LongestIncreasingSubsequenceLinearithmic queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
    ^
                                             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequenceLinearithmic_unit.cpp:20:46: note: FIX-IT applied suggested code changes
    LongestIncreasingSubsequenceLinearithmic queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
                                             ^
[242/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Subsequence/Increasing/LongestIncreasingSubsequence_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequence_unit.cpp:14:5: warning: variable 'queryForTest' of type 'LongestIncreasingSubsequence' can be declared 'const' [misc-const-correctness]
    LongestIncreasingSubsequence queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequence_unit.cpp:14:34: note: FIX-IT applied suggested code changes
    LongestIncreasingSubsequence queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequence_unit.cpp:20:5: warning: variable 'queryForTest' of type 'LongestIncreasingSubsequence' can be declared 'const' [misc-const-correctness]
    LongestIncreasingSubsequence queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\LongestIncreasingSubsequence_unit.cpp:20:34: note: FIX-IT applied suggested code changes
    LongestIncreasingSubsequence queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
                                 ^
[243/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Subsequence/Increasing/MaximumLengthChainOfPairs_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\MaximumLengthChainOfPairs_unit.cpp:14:5: warning: variable 'queryForTest' of type 'MaximumLengthChainOfPairs' can be declared 'const' [misc-const-correctness]
    MaximumLengthChainOfPairs queryForTest({{5, 24}, {39, 60}, {15, 28}, {27, 40}, {50, 90}});
    ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\MaximumLengthChainOfPairs_unit.cpp:14:31: note: FIX-IT applied suggested code changes
    MaximumLengthChainOfPairs queryForTest({{5, 24}, {39, 60}, {15, 28}, {27, 40}, {50, 90}});
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\MaximumLengthChainOfPairs_unit.cpp:20:5: warning: variable 'queryForTest' of type 'MaximumLengthChainOfPairs' can be declared 'const' [misc-const-correctness]
    MaximumLengthChainOfPairs queryForTest({{5, 24}, {39, 60}, {15, 28}, {27, 40}, {50, 90}});
    ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\MaximumLengthChainOfPairs_unit.cpp:20:31: note: FIX-IT applied suggested code changes
    MaximumLengthChainOfPairs queryForTest({{5, 24}, {39, 60}, {15, 28}, {27, 40}, {50, 90}});
                              ^
[244/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Subsequence/Increasing/MaximumSumIncreasingSubsequence_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\MaximumSumIncreasingSubsequence_unit.cpp:14:5: warning: variable 'queryForTest' of type 'MaximumSumIncreasingSubsequence' can be declared 'const' [misc-const-correctness]
    MaximumSumIncreasingSubsequence queryForTest({1, 101, 2, 3, 100, 4, 5});
    ^
                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\MaximumSumIncreasingSubsequence_unit.cpp:14:37: note: FIX-IT applied suggested code changes
    MaximumSumIncreasingSubsequence queryForTest({1, 101, 2, 3, 100, 4, 5});
                                    ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\MaximumSumIncreasingSubsequence_unit.cpp:20:5: warning: variable 'queryForTest' of type 'MaximumSumIncreasingSubsequence' can be declared 'const' [misc-const-correctness]
    MaximumSumIncreasingSubsequence queryForTest({1, 101, 2, 3, 100, 4, 5});
    ^
                                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\Increasing\MaximumSumIncreasingSubsequence_unit.cpp:20:37: note: FIX-IT applied suggested code changes
    MaximumSumIncreasingSubsequence queryForTest({1, 101, 2, 3, 100, 4, 5});
                                    ^
[245/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Subsequence/LongestBitonicSubsequence_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\LongestBitonicSubsequence_unit.cpp:14:5: warning: variable 'queryForTest' of type 'LongestBitonicSubsequence' can be declared 'const' [misc-const-correctness]
    LongestBitonicSubsequence queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
    ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\LongestBitonicSubsequence_unit.cpp:14:31: note: FIX-IT applied suggested code changes
    LongestBitonicSubsequence queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\LongestBitonicSubsequence_unit.cpp:20:5: warning: variable 'queryForTest' of type 'LongestBitonicSubsequence' can be declared 'const' [misc-const-correctness]
    LongestBitonicSubsequence queryForTest({12, 11, 40, 5, 3, 1});
    ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\LongestBitonicSubsequence_unit.cpp:20:31: note: FIX-IT applied suggested code changes
    LongestBitonicSubsequence queryForTest({12, 11, 40, 5, 3, 1});
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\LongestBitonicSubsequence_unit.cpp:26:5: warning: variable 'queryForTest' of type 'LongestBitonicSubsequence' can be declared 'const' [misc-const-correctness]
    LongestBitonicSubsequence queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
    ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\LongestBitonicSubsequence_unit.cpp:26:31: note: FIX-IT applied suggested code changes
    LongestBitonicSubsequence queryForTest({6, 2, 5, 1, 7, 4, 8, 3});
                              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\LongestBitonicSubsequence_unit.cpp:32:5: warning: variable 'queryForTest' of type 'LongestBitonicSubsequence' can be declared 'const' [misc-const-correctness]
    LongestBitonicSubsequence queryForTest({12, 11, 40, 5, 3, 1});
    ^
                              const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\LongestBitonicSubsequence_unit.cpp:32:31: note: FIX-IT applied suggested code changes
    LongestBitonicSubsequence queryForTest({12, 11, 40, 5, 3, 1});
                              ^
[246/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Subsequence/LongestCommonSubsequence_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\LongestCommonSubsequence_unit.cpp:10:5: warning: variable 'queryForTest' of type 'LongestCommonSubsequence' can be declared 'const' [misc-const-correctness]
    LongestCommonSubsequence queryForTest({1, 2, 3, 4, 7, 8}, {1, 5, 4, 6, 8, 18});
    ^
                             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Subsequence\LongestCommonSubsequence_unit.cpp:10:30: note: FIX-IT applied suggested code changes
    LongestCommonSubsequence queryForTest({1, 2, 3, 4, 7, 8}, {1, 5, 4, 6, 8, 18});
                             ^
[247/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/DynamicProgramming/Supersequence/ShortestCommonSupersequence_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Supersequence\ShortestCommonSupersequence_unit.cpp:10:5: warning: variable 'queryForTest' of type 'ShortestCommonSupersequence' can be declared 'const' [misc-const-correctness]
    ShortestCommonSupersequence queryForTest({7, 5, 5, 11}, {5, 11, 5});
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Supersequence\ShortestCommonSupersequence_unit.cpp:10:33: note: FIX-IT applied suggested code changes
    ShortestCommonSupersequence queryForTest({7, 5, 5, 11}, {5, 11, 5});
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Supersequence\ShortestCommonSupersequence_unit.cpp:19:5: warning: variable 'queryForTest' of type 'ShortestCommonSupersequence' can be declared 'const' [misc-const-correctness]
    ShortestCommonSupersequence queryForTest({1, 7, 7, 20, 1, 2}, {7, 24, 20, 24, 1, 25, 2});
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\DynamicProgramming\Supersequence\ShortestCommonSupersequence_unit.cpp:19:33: note: FIX-IT applied suggested code changes
    ShortestCommonSupersequence queryForTest({1, 7, 7, 20, 1, 2}, {7, 24, 20, 24, 1, 25, 2});
                                ^
[248/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/GreedyAlgorithm/FractionalKnapsack_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\FractionalKnapsack_unit.cpp:10:5: warning: variable 'queryForTest' of type 'FractionalKnapsack' can be declared 'const' [misc-const-correctness]
    FractionalKnapsack queryForTest;
    ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\FractionalKnapsack_unit.cpp:10:24: note: FIX-IT applied suggested code changes
    FractionalKnapsack queryForTest;
                       ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\FractionalKnapsack_unit.cpp:16:5: warning: variable 'queryForTest' of type 'FractionalKnapsack' can be declared 'const' [misc-const-correctness]
    FractionalKnapsack queryForTest;
    ^
                       const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\FractionalKnapsack_unit.cpp:16:24: note: FIX-IT applied suggested code changes
    FractionalKnapsack queryForTest;
                       ^
[249/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/GreedyAlgorithm/GreedyAlgorithmForFewestCoins_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\GreedyAlgorithmForFewestCoins_unit.cpp:10:5: warning: variable 'fewestCoins' of type 'GreedyAlgorithmForFewestCoins' can be declared 'const' [misc-const-correctness]
    GreedyAlgorithmForFewestCoins fewestCoins({1, 2, 5, 10, 20, 50, 100});
    ^
                                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\GreedyAlgorithmForFewestCoins_unit.cpp:10:35: note: FIX-IT applied suggested code changes
    GreedyAlgorithmForFewestCoins fewestCoins({1, 2, 5, 10, 20, 50, 100});
                                  ^
[250/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/GreedyAlgorithm/JobWithProfitAndDeadlines_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\JobWithProfitAndDeadlines_unit.cpp:16:5: warning: variable 'actualNames' of type 'JobWithProfitAndDeadlines::JobNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    JobWithProfitAndDeadlines::JobNames actualNames(taskAndDeadlines.getJobsOrderWithMaximumProfit());
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\JobWithProfitAndDeadlines_unit.cpp:16:41: note: FIX-IT applied suggested code changes
    JobWithProfitAndDeadlines::JobNames actualNames(taskAndDeadlines.getJobsOrderWithMaximumProfit());
                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\JobWithProfitAndDeadlines_unit.cpp:18:5: warning: variable 'expectedNames' of type 'JobWithProfitAndDeadlines::JobNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    JobWithProfitAndDeadlines::JobNames expectedNames{"C", "A"};
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\JobWithProfitAndDeadlines_unit.cpp:18:41: note: FIX-IT applied suggested code changes
    JobWithProfitAndDeadlines::JobNames expectedNames{"C", "A"};
                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\JobWithProfitAndDeadlines_unit.cpp:30:5: warning: variable 'actualNames' of type 'JobWithProfitAndDeadlines::JobNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    JobWithProfitAndDeadlines::JobNames actualNames(taskAndDeadlines.getJobsOrderWithMaximumProfit());
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\JobWithProfitAndDeadlines_unit.cpp:30:41: note: FIX-IT applied suggested code changes
    JobWithProfitAndDeadlines::JobNames actualNames(taskAndDeadlines.getJobsOrderWithMaximumProfit());
                                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\JobWithProfitAndDeadlines_unit.cpp:32:5: warning: variable 'expectedNames' of type 'JobWithProfitAndDeadlines::JobNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    JobWithProfitAndDeadlines::JobNames expectedNames{"A", "C", "E"};
    ^
                                        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\JobWithProfitAndDeadlines_unit.cpp:32:41: note: FIX-IT applied suggested code changes
    JobWithProfitAndDeadlines::JobNames expectedNames{"A", "C", "E"};
                                        ^
[251/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/GreedyAlgorithm/SchedulingEvents_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:16:5: warning: variable 'actualNames' of type 'SchedulingEvents::EventNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SchedulingEvents::EventNames actualNames(schedulingEvents.getAsMuchEventsAsPossible());
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:16:34: note: FIX-IT applied suggested code changes
    SchedulingEvents::EventNames actualNames(schedulingEvents.getAsMuchEventsAsPossible());
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:18:5: warning: variable 'expectedNames' of type 'SchedulingEvents::EventNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SchedulingEvents::EventNames expectedNames{"A", "D"};
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:18:34: note: FIX-IT applied suggested code changes
    SchedulingEvents::EventNames expectedNames{"A", "D"};
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:28:5: warning: variable 'actualNames' of type 'SchedulingEvents::EventNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SchedulingEvents::EventNames actualNames(schedulingEvents.getAsMuchEventsAsPossible());
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:28:34: note: FIX-IT applied suggested code changes
    SchedulingEvents::EventNames actualNames(schedulingEvents.getAsMuchEventsAsPossible());
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:30:5: warning: variable 'expectedNames' of type 'SchedulingEvents::EventNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SchedulingEvents::EventNames expectedNames{"A", "C"};
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:30:34: note: FIX-IT applied suggested code changes
    SchedulingEvents::EventNames expectedNames{"A", "C"};
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:40:5: warning: variable 'actualNames' of type 'SchedulingEvents::EventNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SchedulingEvents::EventNames actualNames(schedulingEvents.getAsMuchEventsAsPossible());
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:40:34: note: FIX-IT applied suggested code changes
    SchedulingEvents::EventNames actualNames(schedulingEvents.getAsMuchEventsAsPossible());
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:42:5: warning: variable 'expectedNames' of type 'SchedulingEvents::EventNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SchedulingEvents::EventNames expectedNames{"B", "C"};
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:42:34: note: FIX-IT applied suggested code changes
    SchedulingEvents::EventNames expectedNames{"B", "C"};
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:52:5: warning: variable 'actualNames' of type 'SchedulingEvents::EventNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SchedulingEvents::EventNames actualNames(schedulingEvents.getAsMuchEventsAsPossible());
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:52:34: note: FIX-IT applied suggested code changes
    SchedulingEvents::EventNames actualNames(schedulingEvents.getAsMuchEventsAsPossible());
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:54:5: warning: variable 'expectedNames' of type 'SchedulingEvents::EventNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SchedulingEvents::EventNames expectedNames{"A", "C"};
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:54:34: note: FIX-IT applied suggested code changes
    SchedulingEvents::EventNames expectedNames{"A", "C"};
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:67:5: warning: variable 'actualNames' of type 'SchedulingEvents::EventNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SchedulingEvents::EventNames actualNames(schedulingEvents.getAsMuchEventsAsPossible());
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:67:34: note: FIX-IT applied suggested code changes
    SchedulingEvents::EventNames actualNames(schedulingEvents.getAsMuchEventsAsPossible());
                                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:69:5: warning: variable 'expectedNames' of type 'SchedulingEvents::EventNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    SchedulingEvents::EventNames expectedNames{"A", "B", "D", "E"};
    ^
                                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\SchedulingEvents_unit.cpp:69:34: note: FIX-IT applied suggested code changes
    SchedulingEvents::EventNames expectedNames{"A", "B", "D", "E"};
                                 ^
[252/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/GreedyAlgorithm/SweepLine/MaximumEmployeeCount_unit.cpp.obj
[253/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/GreedyAlgorithm/SweepLine/MinimumNumberOfPlatformsRequiredForARailwayStation_unit.cpp.obj
[254/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/GreedyAlgorithm/TaskAndDeadlines_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\TaskAndDeadlines_unit.cpp:16:5: warning: variable 'actualNames' of type 'TaskAndDeadlines::TaskNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    TaskAndDeadlines::TaskNames actualNames(taskAndDeadlines.getTasksOrderWithMaximumScore());
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\TaskAndDeadlines_unit.cpp:16:33: note: FIX-IT applied suggested code changes
    TaskAndDeadlines::TaskNames actualNames(taskAndDeadlines.getTasksOrderWithMaximumScore());
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\TaskAndDeadlines_unit.cpp:18:5: warning: variable 'expectedNames' of type 'TaskAndDeadlines::TaskNames' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    TaskAndDeadlines::TaskNames expectedNames{"C", "B", "A", "D"};
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\GreedyAlgorithm\TaskAndDeadlines_unit.cpp:18:33: note: FIX-IT applied suggested code changes
    TaskAndDeadlines::TaskNames expectedNames{"C", "B", "A", "D"};
                                ^
[255/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/RandomProblems/Rand7FromRand5_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\RandomProblems\Rand7FromRand5_unit.cpp:22:5: warning: variable 'deviationCount' of type 'int' can be declared 'const' [misc-const-correctness]
    int deviationCount(*maxIterator - *minIterator);
    ^
        const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\RandomProblems\Rand7FromRand5_unit.cpp:22:9: note: FIX-IT applied suggested code changes
    int deviationCount(*maxIterator - *minIterator);
        ^
[256/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/BinarySearchProblems_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:24:13: warning: variable 'higherIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index higherIndex = getNearestFloorIndex(sortedValues, valueToCheck);
            ^
                  const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:24:19: note: FIX-IT applied suggested code changes
            Index higherIndex = getNearestFloorIndex(sortedValues, valueToCheck);
                  ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:25:13: warning: variable 'lowerIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index lowerIndex = getNearestCielIndex(sortedValues, valueToCheck);
            ^
                  const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:25:19: note: FIX-IT applied suggested code changes
            Index lowerIndex = getNearestCielIndex(sortedValues, valueToCheck);
                  ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:55:17: warning: variable 'middleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index middleIndex = getMidpointOfIndexes(lowerIndex, higherIndex);
                ^
                      const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:55:23: note: FIX-IT applied suggested code changes
                Index middleIndex = getMidpointOfIndexes(lowerIndex, higherIndex);
                      ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:98:13: warning: variable 'middleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index middleIndex = getMidpointOfIndexes(lowerIndex, higherIndex);
            ^
                  const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:98:19: note: FIX-IT applied suggested code changes
            Index middleIndex = getMidpointOfIndexes(lowerIndex, higherIndex);
                  ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:99:13: warning: variable 'middleValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value middleValue(sortedValues[middleIndex]);
            ^
                  const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:99:19: note: FIX-IT applied suggested code changes
            Value middleValue(sortedValues[middleIndex]);
                  ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:114:13: warning: variable 'middleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index middleIndex = getMidpointOfIndexes(lowerIndex, higherIndex);
            ^
                  const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:114:19: note: FIX-IT applied suggested code changes
            Index middleIndex = getMidpointOfIndexes(lowerIndex, higherIndex);
                  ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:115:13: warning: variable 'middleValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value middleValue(sortedValues[middleIndex]);
            ^
                  const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/BinarySearchProblems.hpp:115:19: note: FIX-IT applied suggested code changes
            Value middleValue(sortedValues[middleIndex]);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\BinarySearchProblems_unit.cpp:16:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{1, 2, 3, 5, 6, 8, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\BinarySearchProblems_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{1, 2, 3, 5, 6, 8, 9, 10};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\BinarySearchProblems_unit.cpp:23:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{1, 2, 3, 5, 6, 8, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\BinarySearchProblems_unit.cpp:23:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{1, 2, 3, 5, 6, 8, 9, 10};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\BinarySearchProblems_unit.cpp:30:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{1, 2, 3, 5, 6, 7, 7, 7, 8, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\BinarySearchProblems_unit.cpp:30:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{1, 2, 3, 5, 6, 7, 7, 7, 8, 9, 10};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\BinarySearchProblems_unit.cpp:37:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{6, 7, 8, 9, 10, 1, 2, 3, 4, 5};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\BinarySearchProblems_unit.cpp:37:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{6, 7, 8, 9, 10, 1, 2, 3, 4, 5};
                  ^
[257/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/CountOnesInASortedBinaryContainer_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/CountOnesInASortedBinaryContainer.hpp:19:17: warning: variable 'middleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index middleIndex = (lowerIndex + higherIndex) / 2;
                ^
                      const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/CountOnesInASortedBinaryContainer.hpp:19:23: note: FIX-IT applied suggested code changes
                Index middleIndex = (lowerIndex + higherIndex) / 2;
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\CountOnesInASortedBinaryContainer_unit.cpp:15:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<bool>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\CountOnesInASortedBinaryContainer_unit.cpp:15:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\CountOnesInASortedBinaryContainer_unit.cpp:22:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<bool>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{true};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\CountOnesInASortedBinaryContainer_unit.cpp:22:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{true};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\CountOnesInASortedBinaryContainer_unit.cpp:29:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<bool>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{false, false, false, false, false, false, false};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\CountOnesInASortedBinaryContainer_unit.cpp:29:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{false, false, false, false, false, false, false};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\CountOnesInASortedBinaryContainer_unit.cpp:36:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<bool>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{true, true, true, true, true, true, true};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\CountOnesInASortedBinaryContainer_unit.cpp:36:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{true, true, true, true, true, true, true};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\CountOnesInASortedBinaryContainer_unit.cpp:43:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<bool>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{false, false, false, true, true, true, true};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\CountOnesInASortedBinaryContainer_unit.cpp:43:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{false, false, false, true, true, true, true};
                  ^
[258/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/FindAPairInAContainerWithSumClosestToAValue_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindAPairInAContainerWithSumClosestToAValue.hpp:36:17: warning: variable 'currentSum' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value currentSum(m_sortedValues[lowerIndex] + m_sortedValues[higherIndex]);
                ^
                      const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindAPairInAContainerWithSumClosestToAValue.hpp:36:23: note: FIX-IT applied suggested code changes
                Value currentSum(m_sortedValues[lowerIndex] + m_sortedValues[higherIndex]);
                      ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindAPairInAContainerWithSumClosestToAValue.hpp:37:17: warning: variable 'currentDeviation' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value currentDeviation(mathHelper::getPositiveDelta(currentSum, targetSum));
                ^
                      const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindAPairInAContainerWithSumClosestToAValue.hpp:37:23: note: FIX-IT applied suggested code changes
                Value currentDeviation(mathHelper::getPositiveDelta(currentSum, targetSum));
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:16:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:17:5: warning: variable 'query' of type 'QueryForTest' (aka 'FindAPairInAContainerWithSumClosestToAValue<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(valuesForTest);
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:17:18: note: FIX-IT applied suggested code changes
    QueryForTest query(valuesForTest);
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:19:5: warning: variable 'expectedValuePair' of type 'QueryForTest::ValuePair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::ValuePair expectedValuePair{};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:19:29: note: FIX-IT applied suggested code changes
    QueryForTest::ValuePair expectedValuePair{};
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:24:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{12};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:24:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{12};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:25:5: warning: variable 'query' of type 'QueryForTest' (aka 'FindAPairInAContainerWithSumClosestToAValue<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(valuesForTest);
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:25:18: note: FIX-IT applied suggested code changes
    QueryForTest query(valuesForTest);
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:27:5: warning: variable 'expectedValuePair' of type 'QueryForTest::ValuePair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::ValuePair expectedValuePair{};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:27:29: note: FIX-IT applied suggested code changes
    QueryForTest::ValuePair expectedValuePair{};
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:32:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{12, 16, 22, 30, 35, 39, 42, 45, 48, 50, 53, 55, 56};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:32:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{12, 16, 22, 30, 35, 39, 42, 45, 48, 50, 53, 55, 56};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:33:5: warning: variable 'query' of type 'QueryForTest' (aka 'FindAPairInAContainerWithSumClosestToAValue<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(valuesForTest);
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:33:18: note: FIX-IT applied suggested code changes
    QueryForTest query(valuesForTest);
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:35:5: warning: variable 'expectedValuePair' of type 'QueryForTest::ValuePair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::ValuePair expectedValuePair{12, 39};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:35:29: note: FIX-IT applied suggested code changes
    QueryForTest::ValuePair expectedValuePair{12, 39};
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:40:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{10, 22, 28, 29, 30, 40};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:40:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{10, 22, 28, 29, 30, 40};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:41:5: warning: variable 'query' of type 'QueryForTest' (aka 'FindAPairInAContainerWithSumClosestToAValue<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(valuesForTest);
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:41:18: note: FIX-IT applied suggested code changes
    QueryForTest query(valuesForTest);
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:43:5: warning: variable 'expectedValuePair' of type 'QueryForTest::ValuePair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::ValuePair expectedValuePair{22, 30};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindAPairInAContainerWithSumClosestToAValue_unit.cpp:43:29: note: FIX-IT applied suggested code changes
    QueryForTest::ValuePair expectedValuePair{22, 30};
                            ^
[259/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/FindCommonElementsInThreeSortedContainers.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:16:5: warning: variable 'values1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values1{1, 5, 10, 20, 40, 80};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:16:19: note: FIX-IT applied suggested code changes
    ValuesForTest values1{1, 5, 10, 20, 40, 80};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:17:5: warning: variable 'values2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values2;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:17:19: note: FIX-IT applied suggested code changes
    ValuesForTest values2;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:18:5: warning: variable 'values3' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values3;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:18:19: note: FIX-IT applied suggested code changes
    ValuesForTest values3;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:21:5: warning: variable 'expectedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest expectedValues;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:21:19: note: FIX-IT applied suggested code changes
    ValuesForTest expectedValues;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:26:5: warning: variable 'values1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values1;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:26:19: note: FIX-IT applied suggested code changes
    ValuesForTest values1;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:27:5: warning: variable 'values2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values2{6, 7, 20, 80, 100};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:27:19: note: FIX-IT applied suggested code changes
    ValuesForTest values2{6, 7, 20, 80, 100};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:28:5: warning: variable 'values3' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values3;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:28:19: note: FIX-IT applied suggested code changes
    ValuesForTest values3;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:31:5: warning: variable 'expectedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest expectedValues;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:31:19: note: FIX-IT applied suggested code changes
    ValuesForTest expectedValues;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:36:5: warning: variable 'values1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values1;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:36:19: note: FIX-IT applied suggested code changes
    ValuesForTest values1;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:37:5: warning: variable 'values2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values2;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:37:19: note: FIX-IT applied suggested code changes
    ValuesForTest values2;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:38:5: warning: variable 'values3' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values3{3, 4, 15, 20, 30, 70, 80, 120};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:38:19: note: FIX-IT applied suggested code changes
    ValuesForTest values3{3, 4, 15, 20, 30, 70, 80, 120};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:41:5: warning: variable 'expectedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest expectedValues;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:41:19: note: FIX-IT applied suggested code changes
    ValuesForTest expectedValues;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:46:5: warning: variable 'values1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values1{1, 5, 10, 20, 40, 80};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:46:19: note: FIX-IT applied suggested code changes
    ValuesForTest values1{1, 5, 10, 20, 40, 80};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:47:5: warning: variable 'values2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values2{6, 7, 20, 80, 100};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:47:19: note: FIX-IT applied suggested code changes
    ValuesForTest values2{6, 7, 20, 80, 100};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:48:5: warning: variable 'values3' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values3{3, 4, 15, 20, 30, 70, 80, 120};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:48:19: note: FIX-IT applied suggested code changes
    ValuesForTest values3{3, 4, 15, 20, 30, 70, 80, 120};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:51:5: warning: variable 'expectedValues1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest expectedValues1{20, 80};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:51:19: note: FIX-IT applied suggested code changes
    ValuesForTest expectedValues1{20, 80};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:56:5: warning: variable 'values1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values1{1, 5, 5};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:56:19: note: FIX-IT applied suggested code changes
    ValuesForTest values1{1, 5, 5};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:57:5: warning: variable 'values2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values2{3, 4, 5, 5, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:57:19: note: FIX-IT applied suggested code changes
    ValuesForTest values2{3, 4, 5, 5, 10};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:58:5: warning: variable 'values3' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values3{5, 5, 10, 20};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:58:19: note: FIX-IT applied suggested code changes
    ValuesForTest values3{5, 5, 10, 20};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:61:5: warning: variable 'expectedValues1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest expectedValues1{5, 5};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindCommonElementsInThreeSortedContainers.cpp:61:19: note: FIX-IT applied suggested code changes
    ValuesForTest expectedValues1{5, 5};
                  ^
[260/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/FindKClosestElements_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindKClosestElements.hpp:21:9: warning: variable 'nearestIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index nearestIndex(binarySearch.getIndexOfNearestValue(valueToCheck));
        ^
              const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindKClosestElements.hpp:21:15: note: FIX-IT applied suggested code changes
        Index nearestIndex(binarySearch.getIndexOfNearestValue(valueToCheck));
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:16:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:19:5: warning: variable 'expectedIndexPair' of type 'QueryForTest::IndexPair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::IndexPair expectedIndexPair{QueryForTest::INVALID_INDEX, QueryForTest::INVALID_INDEX};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:19:29: note: FIX-IT applied suggested code changes
    QueryForTest::IndexPair expectedIndexPair{QueryForTest::INVALID_INDEX, QueryForTest::INVALID_INDEX};
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:24:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{12};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:24:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{12};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:27:5: warning: variable 'expectedIndexPair' of type 'QueryForTest::IndexPair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::IndexPair expectedIndexPair{0, 0};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:27:29: note: FIX-IT applied suggested code changes
    QueryForTest::IndexPair expectedIndexPair{0, 0};
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:32:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{12, 16, 22, 30, 35, 39, 42, 45, 48, 50, 53, 55, 56};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:32:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{12, 16, 22, 30, 35, 39, 42, 45, 48, 50, 53, 55, 56};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:35:5: warning: variable 'expectedIndexPair' of type 'QueryForTest::IndexPair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::IndexPair expectedIndexPair{3, 6};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindKClosestElements_unit.cpp:35:29: note: FIX-IT applied suggested code changes
    QueryForTest::IndexPair expectedIndexPair{3, 6};
                            ^
[261/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/FindSmallestValueWithTrue_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindSmallestValueWithTrue_unit.cpp:15:5: warning: variable 'binarySearch' of type 'SearchForTest' (aka 'FindSmallestValueWithTrue<int>') can be declared 'const' [misc-const-correctness]
    SearchForTest binarySearch([](ValueForTest const) { return false; });
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindSmallestValueWithTrue_unit.cpp:15:19: note: FIX-IT applied suggested code changes
    SearchForTest binarySearch([](ValueForTest const) { return false; });
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindSmallestValueWithTrue_unit.cpp:21:5: warning: variable 'binarySearch' of type 'SearchForTest' (aka 'FindSmallestValueWithTrue<int>') can be declared 'const' [misc-const-correctness]
    SearchForTest binarySearch([](ValueForTest const value) { return value >= 111; });
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindSmallestValueWithTrue_unit.cpp:21:19: note: FIX-IT applied suggested code changes
    SearchForTest binarySearch([](ValueForTest const value) { return value >= 111; });
                  ^
[262/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/FindTheMissingNumber_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindTheMissingNumber.hpp:24:9: warning: variable 'totalCountOfNumbers' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value totalCountOfNumbers(values.size() + 1);
        ^
              const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindTheMissingNumber.hpp:24:15: note: FIX-IT applied suggested code changes
        Value totalCountOfNumbers(values.size() + 1);
              ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindTheMissingNumber.hpp:25:9: warning: variable 'actualSum' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value actualSum = std::accumulate(values.cbegin(), values.cend(), static_cast<Value>(0), std::plus<Value>());
        ^
              const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindTheMissingNumber.hpp:25:15: note: FIX-IT applied suggested code changes
        Value actualSum = std::accumulate(values.cbegin(), values.cend(), static_cast<Value>(0), std::plus<Value>());
              ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindTheMissingNumber.hpp:26:9: warning: variable 'expectedSum' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value expectedSum = (totalCountOfNumbers + 1) * totalCountOfNumbers / 2;
        ^
              const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindTheMissingNumber.hpp:26:15: note: FIX-IT applied suggested code changes
        Value expectedSum = (totalCountOfNumbers + 1) * totalCountOfNumbers / 2;
              ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindTheMissingNumber.hpp:36:9: warning: variable 'totalCountOfNumbers' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
        Value totalCountOfNumbers(values.size() + 1);
        ^
              const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindTheMissingNumber.hpp:36:15: note: FIX-IT applied suggested code changes
        Value totalCountOfNumbers(values.size() + 1);
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindTheMissingNumber_unit.cpp:15:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindTheMissingNumber_unit.cpp:15:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindTheMissingNumber_unit.cpp:23:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{2};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindTheMissingNumber_unit.cpp:23:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{2};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindTheMissingNumber_unit.cpp:31:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{1, 2, 3, 5};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindTheMissingNumber_unit.cpp:31:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{1, 2, 3, 5};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindTheMissingNumber_unit.cpp:39:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{1, 2, 4, 6, 3, 7, 8};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindTheMissingNumber_unit.cpp:39:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{1, 2, 4, 6, 3, 7, 8};
                  ^
[263/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/FindThePairWithClosestToSum_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindThePairWithClosestToSum.hpp:23:17: warning: variable 'currentSum' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value currentSum = *forwardIt1 + *reverseIt2;
                ^
                      const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindThePairWithClosestToSum.hpp:23:23: note: FIX-IT applied suggested code changes
                Value currentSum = *forwardIt1 + *reverseIt2;
                      ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindThePairWithClosestToSum.hpp:24:17: warning: variable 'currentDeviation' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value currentDeviation = mathHelper::getPositiveDelta(currentSum, sumToCheck);
                ^
                      const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/FindThePairWithClosestToSum.hpp:24:23: note: FIX-IT applied suggested code changes
                Value currentDeviation = mathHelper::getPositiveDelta(currentSum, sumToCheck);
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:16:5: warning: variable 'values1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values1{1, 4, 5, 7};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    ValuesForTest values1{1, 4, 5, 7};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:17:5: warning: variable 'values2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values2;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:17:19: note: FIX-IT applied suggested code changes
    ValuesForTest values2;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:20:5: warning: variable 'expectedValuePair' of type 'QueryForTest::ValuePair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::ValuePair expectedValuePair{};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:20:29: note: FIX-IT applied suggested code changes
    QueryForTest::ValuePair expectedValuePair{};
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:25:5: warning: variable 'values1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values1;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:25:19: note: FIX-IT applied suggested code changes
    ValuesForTest values1;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:26:5: warning: variable 'values2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values2{10, 20, 30, 40};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:26:19: note: FIX-IT applied suggested code changes
    ValuesForTest values2{10, 20, 30, 40};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:29:5: warning: variable 'expectedValuePair' of type 'QueryForTest::ValuePair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::ValuePair expectedValuePair{};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:29:29: note: FIX-IT applied suggested code changes
    QueryForTest::ValuePair expectedValuePair{};
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:34:5: warning: variable 'values1' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values1{1, 4, 5, 7};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:34:19: note: FIX-IT applied suggested code changes
    ValuesForTest values1{1, 4, 5, 7};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:35:5: warning: variable 'values2' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest values2{10, 20, 30, 40};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:35:19: note: FIX-IT applied suggested code changes
    ValuesForTest values2{10, 20, 30, 40};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:38:5: warning: variable 'expectedValuePair1' of type 'QueryForTest::ValuePair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::ValuePair expectedValuePair1{1, 30};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:38:29: note: FIX-IT applied suggested code changes
    QueryForTest::ValuePair expectedValuePair1{1, 30};
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:39:5: warning: variable 'expectedValuePair2' of type 'QueryForTest::ValuePair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::ValuePair expectedValuePair2{7, 40};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\FindThePairWithClosestToSum_unit.cpp:39:29: note: FIX-IT applied suggested code changes
    QueryForTest::ValuePair expectedValuePair2{7, 40};
                            ^
[264/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/GetMinAdjacentSwapsToPutMaxAtFirstAndMinAtLast_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/GetMinAdjacentSwapsToPutMaxAtFirstAndMinAtLast.hpp:15:9: warning: variable 'size' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
        Index size = values.size();
        ^
              const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/GetMinAdjacentSwapsToPutMaxAtFirstAndMinAtLast.hpp:15:15: note: FIX-IT applied suggested code changes
        Index size = values.size();
              ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetMinAdjacentSwapsToPutMaxAtFirstAndMinAtLast_unit.cpp:15:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetMinAdjacentSwapsToPutMaxAtFirstAndMinAtLast_unit.cpp:15:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetMinAdjacentSwapsToPutMaxAtFirstAndMinAtLast_unit.cpp:22:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{3};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetMinAdjacentSwapsToPutMaxAtFirstAndMinAtLast_unit.cpp:22:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{3};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetMinAdjacentSwapsToPutMaxAtFirstAndMinAtLast_unit.cpp:29:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{3, 1, 5, 3, 5, 5, 2};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetMinAdjacentSwapsToPutMaxAtFirstAndMinAtLast_unit.cpp:29:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{3, 1, 5, 3, 5, 5, 2};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetMinAdjacentSwapsToPutMaxAtFirstAndMinAtLast_unit.cpp:36:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{5, 6, 1, 3};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetMinAdjacentSwapsToPutMaxAtFirstAndMinAtLast_unit.cpp:36:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{5, 6, 1, 3};
                  ^
[265/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/GetValuePairWithPositiveDelta_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/GetValuePairWithPositiveDelta.hpp:24:17: warning: variable 'currentPositiveDelta' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
                Value currentPositiveDelta = m_sortedValues[higherIndex] - m_sortedValues[lowerIndex];
                ^
                      const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/GetValuePairWithPositiveDelta.hpp:24:23: note: FIX-IT applied suggested code changes
                Value currentPositiveDelta = m_sortedValues[higherIndex] - m_sortedValues[lowerIndex];
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:16:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:17:5: warning: variable 'query' of type 'QueryForTest' (aka 'GetValuePairWithPositiveDelta<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(sortedValues);
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:17:18: note: FIX-IT applied suggested code changes
    QueryForTest query(sortedValues);
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:19:5: warning: variable 'pairToExpect' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToExpect{};
    ^
                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:19:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToExpect{};
                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:24:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{5};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:24:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{5};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:25:5: warning: variable 'query' of type 'QueryForTest' (aka 'GetValuePairWithPositiveDelta<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(sortedValues);
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:25:18: note: FIX-IT applied suggested code changes
    QueryForTest query(sortedValues);
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:27:5: warning: variable 'pairToExpect' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToExpect{};
    ^
                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:27:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToExpect{};
                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:32:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:32:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{1, 4, 5, 6, 7, 9, 10};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:33:5: warning: variable 'query' of type 'QueryForTest' (aka 'GetValuePairWithPositiveDelta<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query(sortedValues);
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:33:18: note: FIX-IT applied suggested code changes
    QueryForTest query(sortedValues);
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:35:5: warning: variable 'pairToExpect' of type 'ValuePairForTest' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    ValuePairForTest pairToExpect{1, 9};
    ^
                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\GetValuePairWithPositiveDelta_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    ValuePairForTest pairToExpect{1, 9};
                     ^
[266/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/MaximumUnsortedRange_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/MaximumUnsortedRange.hpp:23:13: warning: variable 'startIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index startIndex(getStartIndex(valuesToSort));
            ^
                  const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/MaximumUnsortedRange.hpp:23:19: note: FIX-IT applied suggested code changes
            Index startIndex(getStartIndex(valuesToSort));
                  ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/MaximumUnsortedRange.hpp:25:17: warning: variable 'endIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
                Index endIndex(getEndIndex(valuesToSort));
                ^
                      const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/MaximumUnsortedRange.hpp:25:23: note: FIX-IT applied suggested code changes
                Index endIndex(getEndIndex(valuesToSort));
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:16:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:17:5: warning: variable 'query' of type 'QueryForTest' (aka 'MaximumUnsortedRange<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query;
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:17:18: note: FIX-IT applied suggested code changes
    QueryForTest query;
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:19:5: warning: variable 'expectedIndexPair' of type 'QueryForTest::IndexPair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::IndexPair expectedIndexPair{QueryForTest::INVALID_INDEX, QueryForTest::INVALID_INDEX};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:19:29: note: FIX-IT applied suggested code changes
    QueryForTest::IndexPair expectedIndexPair{QueryForTest::INVALID_INDEX, QueryForTest::INVALID_INDEX};
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:24:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{10};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:24:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{10};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:25:5: warning: variable 'query' of type 'QueryForTest' (aka 'MaximumUnsortedRange<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query;
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:25:18: note: FIX-IT applied suggested code changes
    QueryForTest query;
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:27:5: warning: variable 'expectedIndexPair' of type 'QueryForTest::IndexPair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::IndexPair expectedIndexPair{QueryForTest::INVALID_INDEX, QueryForTest::INVALID_INDEX};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:27:29: note: FIX-IT applied suggested code changes
    QueryForTest::IndexPair expectedIndexPair{QueryForTest::INVALID_INDEX, QueryForTest::INVALID_INDEX};
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:32:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:32:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:33:5: warning: variable 'query' of type 'QueryForTest' (aka 'MaximumUnsortedRange<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query;
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:33:18: note: FIX-IT applied suggested code changes
    QueryForTest query;
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:35:5: warning: variable 'expectedIndexPair' of type 'QueryForTest::IndexPair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::IndexPair expectedIndexPair{3, 8};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:35:29: note: FIX-IT applied suggested code changes
    QueryForTest::IndexPair expectedIndexPair{3, 8};
                            ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:40:5: warning: variable 'valuesForTest' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest valuesForTest{0, 1, 15, 25, 6, 7, 30, 40, 50};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:40:19: note: FIX-IT applied suggested code changes
    ValuesForTest valuesForTest{0, 1, 15, 25, 6, 7, 30, 40, 50};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:41:5: warning: variable 'query' of type 'QueryForTest' (aka 'MaximumUnsortedRange<vector<int>>') can be declared 'const' [misc-const-correctness]
    QueryForTest query;
    ^
                 const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:41:18: note: FIX-IT applied suggested code changes
    QueryForTest query;
                 ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:43:5: warning: variable 'expectedIndexPair' of type 'QueryForTest::IndexPair' (aka 'pair<int, int>') can be declared 'const' [misc-const-correctness]
    QueryForTest::IndexPair expectedIndexPair{2, 5};
    ^
                            const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\MaximumUnsortedRange_unit.cpp:43:29: note: FIX-IT applied suggested code changes
    QueryForTest::IndexPair expectedIndexPair{2, 5};
                            ^
[267/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SearchProblems/SearchUnsortedElementOnAlmostSortedContainer_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/SearchUnsortedElementOnAlmostSortedContainer.hpp:37:13: warning: variable 'middleIndex' of type 'Index' (aka 'int') can be declared 'const' [misc-const-correctness]
            Index middleIndex = (lowerIndex + higherIndex) / 2;
            ^
                  const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/SearchUnsortedElementOnAlmostSortedContainer.hpp:37:19: note: FIX-IT applied suggested code changes
            Index middleIndex = (lowerIndex + higherIndex) / 2;
                  ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/SearchUnsortedElementOnAlmostSortedContainer.hpp:38:13: warning: variable 'middleValue' of type 'Value' (aka 'int') can be declared 'const' [misc-const-correctness]
            Value middleValue(m_sortedValues[middleIndex]);
            ^
                  const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SearchProblems/SearchUnsortedElementOnAlmostSortedContainer.hpp:38:19: note: FIX-IT applied suggested code changes
            Value middleValue(m_sortedValues[middleIndex]);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:16:5: warning: variable 'emptyValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest emptyValues;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    ValuesForTest emptyValues;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:17:5: warning: variable 'search' of type 'SearchForTest' (aka 'SearchUnsortedElementOnAlmostSortedContainer<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(emptyValues);
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:17:19: note: FIX-IT applied suggested code changes
    SearchForTest search(emptyValues);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:23:5: warning: variable 'oneValue' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest oneValue{10};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:23:19: note: FIX-IT applied suggested code changes
    ValuesForTest oneValue{10};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:24:5: warning: variable 'search' of type 'SearchForTest' (aka 'SearchUnsortedElementOnAlmostSortedContainer<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(oneValue);
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:24:19: note: FIX-IT applied suggested code changes
    SearchForTest search(oneValue);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:30:5: warning: variable 'duplicateValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:30:19: note: FIX-IT applied suggested code changes
    ValuesForTest duplicateValues{0, 0, 0, 0, 0};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:31:5: warning: variable 'search' of type 'SearchForTest' (aka 'SearchUnsortedElementOnAlmostSortedContainer<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(duplicateValues);
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:31:19: note: FIX-IT applied suggested code changes
    SearchForTest search(duplicateValues);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:37:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 43, 33, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:37:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 43, 33, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:38:5: warning: variable 'search' of type 'SearchForTest' (aka 'SearchUnsortedElementOnAlmostSortedContainer<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:38:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:46:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 43, 33, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:46:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 43, 33, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:47:5: warning: variable 'search' of type 'SearchForTest' (aka 'SearchUnsortedElementOnAlmostSortedContainer<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:47:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:55:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 43, 33, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:55:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 43, 33, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:56:5: warning: variable 'search' of type 'SearchForTest' (aka 'SearchUnsortedElementOnAlmostSortedContainer<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:56:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:64:5: warning: variable 'sortedValues' of type 'ValuesForTest' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ValuesForTest sortedValues{6, 13, 14, 25, 43, 33, 51, 53, 64, 72, 84, 93, 95, 96, 97};
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:64:19: note: FIX-IT applied suggested code changes
    ValuesForTest sortedValues{6, 13, 14, 25, 43, 33, 51, 53, 64, 72, 84, 93, 95, 96, 97};
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:65:5: warning: variable 'search' of type 'SearchForTest' (aka 'SearchUnsortedElementOnAlmostSortedContainer<vector<int>>') can be declared 'const' [misc-const-correctness]
    SearchForTest search(sortedValues);
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SearchProblems\SearchUnsortedElementOnAlmostSortedContainer_unit.cpp:65:19: note: FIX-IT applied suggested code changes
    SearchForTest search(sortedValues);
                  ^
[268/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SortProblems/SortAKSortedContainer_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SortProblems/SortAKSortedContainer.hpp:16:13: warning: variable 'pqSize' of type 'int' can be declared 'const' [misc-const-correctness]
            int pqSize = (maximumDistanceFromCorrectPosition == static_cast<int>(valuesToSort.size()))
            ^
                const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SortProblems/SortAKSortedContainer.hpp:16:17: note: FIX-IT applied suggested code changes
            int pqSize = (maximumDistanceFromCorrectPosition == static_cast<int>(valuesToSort.size()))
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:15:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'SortAKSortedContainer<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:15:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:24:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'SortAKSortedContainer<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:24:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:29:5: warning: variable 'valuesToExpect' of type 'Integers' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Integers valuesToExpect{5};
    ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:29:14: note: FIX-IT applied suggested code changes
    Integers valuesToExpect{5};
             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:34:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'SortAKSortedContainer<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:34:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:39:5: warning: variable 'valuesToExpect' of type 'Integers' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Integers valuesToExpect{2, 3, 5, 6, 8, 9, 10};
    ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:39:14: note: FIX-IT applied suggested code changes
    Integers valuesToExpect{2, 3, 5, 6, 8, 9, 10};
             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:44:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'SortAKSortedContainer<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:44:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:49:5: warning: variable 'valuesToExpect' of type 'Integers' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Integers valuesToExpect{4, 7, 8, 9, 10, 11, 12, 13};
    ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortAKSortedContainer_unit.cpp:49:14: note: FIX-IT applied suggested code changes
    Integers valuesToExpect{4, 7, 8, 9, 10, 11, 12, 13};
             ^
[269/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SortProblems/SortInWaveForm_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:19:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'SortInWaveForm<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:19:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:28:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'SortInWaveForm<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:28:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:33:5: warning: variable 'valuesToExpect' of type 'Integers' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Integers valuesToExpect{5};
    ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:33:14: note: FIX-IT applied suggested code changes
    Integers valuesToExpect{5};
             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:38:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'SortInWaveForm<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:38:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:43:5: warning: variable 'valuesToExpect' of type 'Integers' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Integers valuesToExpect{6, 3, 5, 2, 10, 8, 9};
    ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:43:14: note: FIX-IT applied suggested code changes
    Integers valuesToExpect{6, 3, 5, 2, 10, 8, 9};
             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:48:5: warning: variable 'sorter' of type 'IntegersSorter' (aka 'SortInWaveForm<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersSorter sorter;
    ^
                   const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:48:20: note: FIX-IT applied suggested code changes
    IntegersSorter sorter;
                   ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:53:5: warning: variable 'valuesToExpect' of type 'Integers' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Integers valuesToExpect{90, 10, 49, 1, 5, 2, 23};
    ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:53:14: note: FIX-IT applied suggested code changes
    Integers valuesToExpect{90, 10, 49, 1, 5, 2, 23};
             ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:58:5: warning: variable 'sorter' of type 'IntegersInForwardListSorter' (aka 'SortInWaveForm<vector<int>>') can be declared 'const' [misc-const-correctness]
    IntegersInForwardListSorter sorter;
    ^
                                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:58:33: note: FIX-IT applied suggested code changes
    IntegersInForwardListSorter sorter;
                                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:63:5: warning: variable 'valuesToExpect' of type 'Integers' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Integers valuesToExpect{90, 10, 49, 1, 5, 2, 23};
    ^
             const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortInWaveForm_unit.cpp:63:14: note: FIX-IT applied suggested code changes
    Integers valuesToExpect{90, 10, 49, 1, 5, 2, 23};
             ^
[270/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SortProblems/SortNNumbersFromZeroToNSquaredMinus1_unit.cpp.obj
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SortProblems/SortNNumbersFromZeroToNSquaredMinus1.hpp:21:9: warning: variable 'size' of type 'int' can be declared 'const' [misc-const-correctness]
        int size = valuesToSort.size();
        ^
            const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SortProblems/SortNNumbersFromZeroToNSquaredMinus1.hpp:21:13: note: FIX-IT applied suggested code changes
        int size = valuesToSort.size();
            ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SortProblems/SortNNumbersFromZeroToNSquaredMinus1.hpp:30:13: warning: variable 'getDigitAt' of type 'GetDigitAtFunction' (aka 'function<char (const char &, const int)>') can be declared 'const' [misc-const-correctness]
            GetDigitAtFunction getDigitAt = [&](Integer const& value, int const mostSignificantDigitIndex) -> Integer {
            ^
                               const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SortProblems/SortNNumbersFromZeroToNSquaredMinus1.hpp:30:32: note: FIX-IT applied suggested code changes
            GetDigitAtFunction getDigitAt = [&](Integer const& value, int const mostSignificantDigitIndex) -> Integer {
                               ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SortProblems/SortNNumbersFromZeroToNSquaredMinus1.hpp:33:13: warning: variable 'isDigitIndexValid' of type 'IsDigitFunction' (aka 'function<bool (const char &, const int)>') can be declared 'const' [misc-const-correctness]
            IsDigitFunction isDigitIndexValid = [numberOfDigits](Integer const&, int const digitIndex) -> bool {
            ^
                            const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SortProblems/SortNNumbersFromZeroToNSquaredMinus1.hpp:33:29: note: FIX-IT applied suggested code changes
            IsDigitFunction isDigitIndexValid = [numberOfDigits](Integer const&, int const digitIndex) -> bool {
                            ^
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SortProblems/SortNNumbersFromZeroToNSquaredMinus1.hpp:37:13: warning: variable 'radixSorter' of type 'RadixSorter' (aka 'RadixSorterUsingQuickSortWith3WayPartitioning<std::vector<char, std::allocator<char>>, char>') can be declared 'const' [misc-const-correctness]
            RadixSorter radixSorter(getDigitAt, isDigitIndexValid);
            ^
                        const 
D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/src\UniqueProblems/SortProblems/SortNNumbersFromZeroToNSquaredMinus1.hpp:37:25: note: FIX-IT applied suggested code changes
            RadixSorter radixSorter(getDigitAt, isDigitIndexValid);
                        ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortNNumbersFromZeroToNSquaredMinus1_unit.cpp:25:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'SortNNumbersFromZeroToNSquaredMinus1<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortNNumbersFromZeroToNSquaredMinus1_unit.cpp:25:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortNNumbersFromZeroToNSquaredMinus1_unit.cpp:30:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'SortNNumbersFromZeroToNSquaredMinus1<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortNNumbersFromZeroToNSquaredMinus1_unit.cpp:30:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortNNumbersFromZeroToNSquaredMinus1_unit.cpp:35:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'SortNNumbersFromZeroToNSquaredMinus1<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortNNumbersFromZeroToNSquaredMinus1_unit.cpp:35:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortNNumbersFromZeroToNSquaredMinus1_unit.cpp:40:5: warning: variable 'sorter' of type 'CharactersSorter' (aka 'SortNNumbersFromZeroToNSquaredMinus1<vector<char>>') can be declared 'const' [misc-const-correctness]
    CharactersSorter sorter;
    ^
                     const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SortProblems\SortNNumbersFromZeroToNSquaredMinus1_unit.cpp:40:22: note: FIX-IT applied suggested code changes
    CharactersSorter sorter;
                     ^
In file included from D:/a/aprg/aprg/AprgUniqueProblems/AprgUniqueProblems/tst/UniqueProblemsTests/SortProblems/SortNNumbersFromZeroToNSquaredMinus1_unit.cpp:1:
In file included from D:/a/aprg/aprg/AprgAlgorithm/AprgAlgorithm/tst\AlgorithmTests/Sort/Utilities/CommonTestsWithSorter.hpp:4:
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Debug/AlbaDebug.hpp:13:2: warning: #warning is a C++2b extension [-Wpedantic]
#warning("The class AlbaDebug is used. Please remove after your done debugging.") // GCC extension
 ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Debug/AlbaDebug.hpp:13:2: warning: ("The class AlbaDebug is used. Please remove after your done debugging.") // GCC extension [-W#warnings]
2 warnings generated.
[271/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SpecialProblems/DeBrujinSequences_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:10:5: warning: variable 'deBruijnSequences' of type 'DeBruijnSequences' can be declared 'const' [misc-const-correctness]
    DeBruijnSequences deBruijnSequences(0, "");
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:10:23: note: FIX-IT applied suggested code changes
    DeBruijnSequences deBruijnSequences(0, "");
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:16:5: warning: variable 'deBruijnSequences' of type 'DeBruijnSequences' can be declared 'const' [misc-const-correctness]
    DeBruijnSequences deBruijnSequences(1, "");
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:16:23: note: FIX-IT applied suggested code changes
    DeBruijnSequences deBruijnSequences(1, "");
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:22:5: warning: variable 'deBruijnSequences' of type 'DeBruijnSequences' can be declared 'const' [misc-const-correctness]
    DeBruijnSequences deBruijnSequences(0, "01");
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:22:23: note: FIX-IT applied suggested code changes
    DeBruijnSequences deBruijnSequences(0, "01");
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:28:5: warning: variable 'deBruijnSequences' of type 'DeBruijnSequences' can be declared 'const' [misc-const-correctness]
    DeBruijnSequences deBruijnSequences(1, "01");
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:28:23: note: FIX-IT applied suggested code changes
    DeBruijnSequences deBruijnSequences(1, "01");
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:34:5: warning: variable 'deBruijnSequences' of type 'DeBruijnSequences' can be declared 'const' [misc-const-correctness]
    DeBruijnSequences deBruijnSequences(2, "01");
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:34:23: note: FIX-IT applied suggested code changes
    DeBruijnSequences deBruijnSequences(2, "01");
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:40:5: warning: variable 'deBruijnSequences' of type 'DeBruijnSequences' can be declared 'const' [misc-const-correctness]
    DeBruijnSequences deBruijnSequences(3, "01");
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:40:23: note: FIX-IT applied suggested code changes
    DeBruijnSequences deBruijnSequences(3, "01");
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:46:5: warning: variable 'deBruijnSequences' of type 'DeBruijnSequences' can be declared 'const' [misc-const-correctness]
    DeBruijnSequences deBruijnSequences(4, "01");
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:46:23: note: FIX-IT applied suggested code changes
    DeBruijnSequences deBruijnSequences(4, "01");
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:52:5: warning: variable 'deBruijnSequences' of type 'DeBruijnSequences' can be declared 'const' [misc-const-correctness]
    DeBruijnSequences deBruijnSequences(2, "ACTG");
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\DeBrujinSequences_unit.cpp:52:23: note: FIX-IT applied suggested code changes
    DeBruijnSequences deBruijnSequences(2, "ACTG");
                      ^
[272/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SpecialProblems/JosephusProblem_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\JosephusProblem_unit.cpp:12:5: warning: variable 'josephusProblem' of type 'JosephusProblem' can be declared 'const' [misc-const-correctness]
    JosephusProblem josephusProblem;
    ^
                    const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\JosephusProblem_unit.cpp:12:21: note: FIX-IT applied suggested code changes
    JosephusProblem josephusProblem;
                    ^
[273/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SpecialProblems/KnightsTour_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:14:5: warning: variable 'knightsTour' of type 'KnightsTour' can be declared 'const' [misc-const-correctness]
    KnightsTour knightsTour(3, 3);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:14:17: note: FIX-IT applied suggested code changes
    KnightsTour knightsTour(3, 3);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:16:5: warning: variable 'expectedKnightsTour' of type 'ChessBoardIndexes' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ChessBoardIndexes expectedKnightsTour{0, 5, 6, 1, 8, 3, 2, 7};
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:16:23: note: FIX-IT applied suggested code changes
    ChessBoardIndexes expectedKnightsTour{0, 5, 6, 1, 8, 3, 2, 7};
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:21:5: warning: variable 'knightsTour' of type 'KnightsTour' can be declared 'const' [misc-const-correctness]
    KnightsTour knightsTour(3, 3);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:21:17: note: FIX-IT applied suggested code changes
    KnightsTour knightsTour(3, 3);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:23:5: warning: variable 'expectedKnightsTour' of type 'ChessBoardIndexes' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ChessBoardIndexes expectedKnightsTour{0, 5, 6, 1, 8, 3, 2, 7, 0};
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:23:23: note: FIX-IT applied suggested code changes
    ChessBoardIndexes expectedKnightsTour{0, 5, 6, 1, 8, 3, 2, 7, 0};
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:28:5: warning: variable 'knightsTour' of type 'KnightsTour' can be declared 'const' [misc-const-correctness]
    KnightsTour knightsTour(4, 4);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:28:17: note: FIX-IT applied suggested code changes
    KnightsTour knightsTour(4, 4);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:34:5: warning: variable 'knightsTour' of type 'KnightsTour' can be declared 'const' [misc-const-correctness]
    KnightsTour knightsTour(4, 4);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:34:17: note: FIX-IT applied suggested code changes
    KnightsTour knightsTour(4, 4);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:40:5: warning: variable 'knightsTour' of type 'KnightsTour' can be declared 'const' [misc-const-correctness]
    KnightsTour knightsTour(5, 5);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:40:17: note: FIX-IT applied suggested code changes
    KnightsTour knightsTour(5, 5);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:42:5: warning: variable 'expectedKnightsTour' of type 'ChessBoardIndexes' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ChessBoardIndexes expectedKnightsTour{0, 7, 4,  13, 24, 17, 20, 11, 2,  5,  16, 23, 14,
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:42:23: note: FIX-IT applied suggested code changes
    ChessBoardIndexes expectedKnightsTour{0, 7, 4,  13, 24, 17, 20, 11, 2,  5,  16, 23, 14,
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:48:5: warning: variable 'knightsTour' of type 'KnightsTour' can be declared 'const' [misc-const-correctness]
    KnightsTour knightsTour(5, 5);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:48:17: note: FIX-IT applied suggested code changes
    KnightsTour knightsTour(5, 5);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:54:5: warning: variable 'knightsTour' of type 'KnightsTour' can be declared 'const' [misc-const-correctness]
    KnightsTour knightsTour(2, 4);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:54:17: note: FIX-IT applied suggested code changes
    KnightsTour knightsTour(2, 4);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:60:5: warning: variable 'knightsTour' of type 'KnightsTour' can be declared 'const' [misc-const-correctness]
    KnightsTour knightsTour(2, 4);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:60:17: note: FIX-IT applied suggested code changes
    KnightsTour knightsTour(2, 4);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:66:5: warning: variable 'knightsTour' of type 'KnightsTour' can be declared 'const' [misc-const-correctness]
    KnightsTour knightsTour(4, 5);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:66:17: note: FIX-IT applied suggested code changes
    KnightsTour knightsTour(4, 5);
                ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:68:5: warning: variable 'expectedKnightsTour' of type 'ChessBoardIndexes' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    ChessBoardIndexes expectedKnightsTour{0, 6, 15, 17, 8, 1, 7, 14, 16, 9, 2, 4, 13, 19, 10, 3, 5, 12, 18, 11};
    ^
                      const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:68:23: note: FIX-IT applied suggested code changes
    ChessBoardIndexes expectedKnightsTour{0, 6, 15, 17, 8, 1, 7, 14, 16, 9, 2, 4, 13, 19, 10, 3, 5, 12, 18, 11};
                      ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:73:5: warning: variable 'knightsTour' of type 'KnightsTour' can be declared 'const' [misc-const-correctness]
    KnightsTour knightsTour(4, 5);
    ^
                const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\KnightsTour_unit.cpp:73:17: note: FIX-IT applied suggested code changes
    KnightsTour knightsTour(4, 5);
                ^
[274/275] Building CXX object CMakeFiles/AprgUniqueProblems.dir/tst/UniqueProblemsTests/SpecialProblems/TowersOfHanoi_unit.cpp.obj
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\TowersOfHanoi_unit.cpp:10:5: warning: variable 'towersOfHanoi' of type 'TowersOfHanoi' can be declared 'const' [misc-const-correctness]
    TowersOfHanoi towersOfHanoi;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\TowersOfHanoi_unit.cpp:10:19: note: FIX-IT applied suggested code changes
    TowersOfHanoi towersOfHanoi;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\TowersOfHanoi_unit.cpp:16:5: warning: variable 'towersOfHanoi' of type 'TowersOfHanoi' can be declared 'const' [misc-const-correctness]
    TowersOfHanoi towersOfHanoi;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\TowersOfHanoi_unit.cpp:16:19: note: FIX-IT applied suggested code changes
    TowersOfHanoi towersOfHanoi;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\TowersOfHanoi_unit.cpp:22:5: warning: variable 'towersOfHanoi' of type 'TowersOfHanoi' can be declared 'const' [misc-const-correctness]
    TowersOfHanoi towersOfHanoi;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\TowersOfHanoi_unit.cpp:22:19: note: FIX-IT applied suggested code changes
    TowersOfHanoi towersOfHanoi;
                  ^
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\TowersOfHanoi_unit.cpp:28:5: warning: variable 'towersOfHanoi' of type 'TowersOfHanoi' can be declared 'const' [misc-const-correctness]
    TowersOfHanoi towersOfHanoi;
    ^
                  const 
D:\a\aprg\aprg\AprgUniqueProblems\AprgUniqueProblems\tst\UniqueProblemsTests\SpecialProblems\TowersOfHanoi_unit.cpp:28:19: note: FIX-IT applied suggested code changes
    TowersOfHanoi towersOfHanoi;
                  ^
[275/275] Linking CXX executable AprgUniqueProblems.exe
[35m2023-09-11T15:30:13[0m | [33mBuildAndRun.sh:218[0m | The script [BuildAndRun.sh] for [buildOnOneCore] is finished.
DONE!
