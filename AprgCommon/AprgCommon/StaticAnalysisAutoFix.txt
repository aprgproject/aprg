StaticAnalysisJobIdentifier: [5]
2023-09-10T15:45:19
[35m2023-09-10T15:46:17[0m | [33mBuildAndRun.sh:28[0m | The current path is [/d/a/aprg/aprg/AprgCommon/AprgCommon].
[35m2023-09-10T15:46:17[0m | [33mBuildAndRun.sh:29[0m | The scriptPath is [/d/a/aprg/aprg/AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh].
[35m2023-09-10T15:46:17[0m | [33mBuildAndRun.sh:30[0m | The scriptOption is [buildOnOneCore].
[35m2023-09-10T15:46:17[0m | [33mBuildAndRun.sh:31[0m | The buildDirectoryName is [StaticAnalyzersBuild].
[35m2023-09-10T15:46:17[0m | [33mBuildAndRun.sh:32[0m | The argument1 is [Debug] and argument2 is [].
[35m2023-09-10T15:46:17[0m | [33mBuildAndRun.sh:33[0m | The immediateDirectoryName is [AprgCommon].
[35m2023-09-10T15:46:17[0m | [33mBuildAndRun.sh:84[0m | The buildType is [Debug].
[35m2023-09-10T15:46:17[0m | [33mBuildAndRun.sh:85[0m | The numberOfCores is [2].
[35m2023-09-10T15:46:17[0m | [33mBuildAndRun.sh:68[0m | The build path is [/d/a/aprg/aprg/AprgCommon/StaticAnalyzersBuild] and the output of [ls -la --color=auto]:
total 269
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 15:46 .
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 15:45 ..
-rw-r--r-- 1 runneradmin 197121  18056 Sep 10 15:46 CMakeCache.txt
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 15:46 CMakeFiles
-rw-r--r-- 1 runneradmin 197121    522 Sep 10 15:46 CTestTestfile.cmake
-rw-r--r-- 1 runneradmin 197121 237260 Sep 10 15:46 build.ninja
-rw-r--r-- 1 runneradmin 197121   2256 Sep 10 15:46 cmake_install.cmake
[1/126] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc.obj
In file included from D:/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc:49:
D:/a/aprg/aprg/gtest/gtest/googletest\src/gtest.cc:2604:3: warning: extension used [-Wlanguage-extension-token]
  __try {
  ^
1 warning generated.
[2/126] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest_main.cc.obj
[3/126] Linking CXX static library gtest.lib
[4/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Container/AlbaContainerHelper.cpp.obj
[5/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/File/AlbaFileReader.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\File\AlbaFileReader.cpp:29:5: warning: variable 'bufferSize' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t bufferSize = m_characterBuffer.size();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\File\AlbaFileReader.cpp:29:12: note: FIX-IT applied suggested code changes
    size_t bufferSize = m_characterBuffer.size();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\File\AlbaFileReader.cpp:100:9: warning: variable 'stringFromBuffer' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string stringFromBuffer(getCharacterBufferPointer());
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\File\AlbaFileReader.cpp:100:16: note: FIX-IT applied suggested code changes
        string stringFromBuffer(getCharacterBufferPointer());
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\File\AlbaFileReader.cpp:112:5: warning: variable 'fileSize' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t fileSize = tellgOutput > 0 ? static_cast<size_t>(tellgOutput) : 0U;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\File\AlbaFileReader.cpp:112:12: note: FIX-IT applied suggested code changes
    size_t fileSize = tellgOutput > 0 ? static_cast<size_t>(tellgOutput) : 0U;
           ^
[6/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Angle/AlbaAngle.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Angle\AlbaAngle.cpp:50:5: warning: variable 'nearestPositiveAngleValueInDegrees' of type 'double' can be declared 'const' [misc-const-correctness]
    double nearestPositiveAngleValueInDegrees(fmod(m_angleValueInDegrees, 360));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Angle\AlbaAngle.cpp:50:12: note: FIX-IT applied suggested code changes
    double nearestPositiveAngleValueInDegrees(fmod(m_angleValueInDegrees, 360));
           ^
[7/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Helpers/ComplexNumberHelpers.cpp.obj
[8/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Helpers/ComputationHelpers.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:12:5: warning: variable 'twoA' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber twoA = aValue * 2;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:12:16: note: FIX-IT applied suggested code changes
    AlbaNumber twoA = aValue * 2;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:13:5: warning: variable 'firstPart' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber firstPart((-bValue) / twoA);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:13:16: note: FIX-IT applied suggested code changes
    AlbaNumber firstPart((-bValue) / twoA);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:14:5: warning: variable 'discriminant' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber discriminant((bValue ^ 2) - (aValue * cValue * 4));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:14:16: note: FIX-IT applied suggested code changes
    AlbaNumber discriminant((bValue ^ 2) - (aValue * cValue * 4));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:16:9: warning: variable 'discriminantSquaredRoot' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber discriminantSquaredRoot = discriminant ^ (AlbaNumber::createFraction(1, 2));
        ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:16:20: note: FIX-IT applied suggested code changes
        AlbaNumber discriminantSquaredRoot = discriminant ^ (AlbaNumber::createFraction(1, 2));
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:17:9: warning: variable 'secondPart' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber secondPart(discriminantSquaredRoot / twoA);
        ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:17:20: note: FIX-IT applied suggested code changes
        AlbaNumber secondPart(discriminantSquaredRoot / twoA);
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:21:9: warning: variable 'discriminantComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
        AlbaComplexNumber<double> discriminantComplex(discriminant.getDouble(), 0.0);
        ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\ComputationHelpers.cpp:21:35: note: FIX-IT applied suggested code changes
        AlbaComplexNumber<double> discriminantComplex(discriminant.getDouble(), 0.0);
                                  ^
[9/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Helpers/FactorAndMulitplesHelpers.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:12:9: warning: variable 'firstFractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
        AlbaNumber::FractionData firstFractionData(firstNumber.getFractionData());
        ^
                                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:12:34: note: FIX-IT applied suggested code changes
        AlbaNumber::FractionData firstFractionData(firstNumber.getFractionData());
                                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:13:9: warning: variable 'secondFractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
        AlbaNumber::FractionData secondFractionData(secondNumber.getFractionData());
        ^
                                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:13:34: note: FIX-IT applied suggested code changes
        AlbaNumber::FractionData secondFractionData(secondNumber.getFractionData());
                                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:14:9: warning: variable 'lcmDenominator' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
        uint32_t lcmDenominator = getLeastCommonMultiple(firstFractionData.denominator, secondFractionData.denominator);
        ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:14:18: note: FIX-IT applied suggested code changes
        uint32_t lcmDenominator = getLeastCommonMultiple(firstFractionData.denominator, secondFractionData.denominator);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:15:9: warning: variable 'firstNumerator' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
        uint32_t firstNumerator = static_cast<uint32_t>(getAbsoluteValue(firstFractionData.numerator)) *
        ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:15:18: note: FIX-IT applied suggested code changes
        uint32_t firstNumerator = static_cast<uint32_t>(getAbsoluteValue(firstFractionData.numerator)) *
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:17:9: warning: variable 'secondNumerator' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
        uint32_t secondNumerator = static_cast<uint32_t>(getAbsoluteValue(secondFractionData.numerator)) *
        ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:17:18: note: FIX-IT applied suggested code changes
        uint32_t secondNumerator = static_cast<uint32_t>(getAbsoluteValue(secondFractionData.numerator)) *
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:19:9: warning: variable 'gcfNumerator' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
        uint32_t gcfNumerator = getGreatestCommonFactor(firstNumerator, secondNumerator);
        ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:19:18: note: FIX-IT applied suggested code changes
        uint32_t gcfNumerator = getGreatestCommonFactor(firstNumerator, secondNumerator);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:30:9: warning: variable 'firstFractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
        AlbaNumber::FractionData firstFractionData(firstNumber.getFractionData());
        ^
                                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:30:34: note: FIX-IT applied suggested code changes
        AlbaNumber::FractionData firstFractionData(firstNumber.getFractionData());
                                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:31:9: warning: variable 'secondFractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
        AlbaNumber::FractionData secondFractionData(secondNumber.getFractionData());
        ^
                                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:31:34: note: FIX-IT applied suggested code changes
        AlbaNumber::FractionData secondFractionData(secondNumber.getFractionData());
                                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:32:9: warning: variable 'lcmDenominator' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
        uint32_t lcmDenominator = getLeastCommonMultiple(firstFractionData.denominator, secondFractionData.denominator);
        ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:32:18: note: FIX-IT applied suggested code changes
        uint32_t lcmDenominator = getLeastCommonMultiple(firstFractionData.denominator, secondFractionData.denominator);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:33:9: warning: variable 'firstNumerator' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
        uint32_t firstNumerator = static_cast<uint32_t>(getAbsoluteValue(firstFractionData.numerator)) *
        ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:33:18: note: FIX-IT applied suggested code changes
        uint32_t firstNumerator = static_cast<uint32_t>(getAbsoluteValue(firstFractionData.numerator)) *
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:35:9: warning: variable 'secondNumerator' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
        uint32_t secondNumerator = static_cast<uint32_t>(getAbsoluteValue(secondFractionData.numerator)) *
        ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:35:18: note: FIX-IT applied suggested code changes
        uint32_t secondNumerator = static_cast<uint32_t>(getAbsoluteValue(secondFractionData.numerator)) *
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:37:9: warning: variable 'lcmNumerator' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
        uint32_t lcmNumerator = getLeastCommonMultiple(firstNumerator, secondNumerator);
        ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\FactorAndMulitplesHelpers.cpp:37:18: note: FIX-IT applied suggested code changes
        uint32_t lcmNumerator = getLeastCommonMultiple(firstNumerator, secondNumerator);
                 ^
[10/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Helpers/PowerHelpers.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\PowerHelpers.cpp:17:9: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
        AlbaNumber::FractionData fractionData(number.getFractionData());
        ^
                                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\PowerHelpers.cpp:17:34: note: FIX-IT applied suggested code changes
        AlbaNumber::FractionData fractionData(number.getFractionData());
                                 ^
[11/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Helpers/PrecisionHelpers.cpp.obj
[12/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Helpers/StatisticsHelpers.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\StatisticsHelpers.cpp:21:9: warning: variable 'probabilityLowest' of type 'double' can be declared 'const' [misc-const-correctness]
        double probabilityLowest = getCumulativeStandardDistributionApproximation(lowestZ);
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\StatisticsHelpers.cpp:21:16: note: FIX-IT applied suggested code changes
        double probabilityLowest = getCumulativeStandardDistributionApproximation(lowestZ);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\StatisticsHelpers.cpp:22:9: warning: variable 'probabilityMiddle' of type 'double' can be declared 'const' [misc-const-correctness]
        double probabilityMiddle = getCumulativeStandardDistributionApproximation(middleZ);
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\StatisticsHelpers.cpp:22:16: note: FIX-IT applied suggested code changes
        double probabilityMiddle = getCumulativeStandardDistributionApproximation(middleZ);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\StatisticsHelpers.cpp:23:9: warning: variable 'probabilityHighest' of type 'double' can be declared 'const' [misc-const-correctness]
        double probabilityHighest = getCumulativeStandardDistributionApproximation(highestZ);
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Helpers\StatisticsHelpers.cpp:23:16: note: FIX-IT applied suggested code changes
        double probabilityHighest = getCumulativeStandardDistributionApproximation(highestZ);
               ^
[13/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Number/AlbaComplexNumber.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Helpers/FractionHelpers.hpp:67:5: warning: variable 'absoluteValueOfDouble' of type 'double' can be declared 'const' [misc-const-correctness]
    double absoluteValueOfDouble = getAbsoluteValue(doubleValue);
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Helpers/FractionHelpers.hpp:67:12: note: FIX-IT applied suggested code changes
    double absoluteValueOfDouble = getAbsoluteValue(doubleValue);
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Helpers/FractionHelpers.hpp:83:13: warning: variable 'previousNumerator' of type 'double' can be declared 'const' [misc-const-correctness]
            double previousNumerator = numerator;
            ^
                   const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Helpers/FractionHelpers.hpp:83:20: note: FIX-IT applied suggested code changes
            double previousNumerator = numerator;
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:93:5: warning: variable 'modulusPart' of type 'double' can be declared 'const' [misc-const-correctness]
    double modulusPart = pow(static_cast<double>(getModulus()), static_cast<double>(exponent));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:93:12: note: FIX-IT applied suggested code changes
    double modulusPart = pow(static_cast<double>(getModulus()), static_cast<double>(exponent));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:94:5: warning: variable 'angleToBeUsed' of type 'double' can be declared 'const' [misc-const-correctness]
    double angleToBeUsed = getBestAngleInRaiseToPowerInRadians(exponent);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:94:12: note: FIX-IT applied suggested code changes
    double angleToBeUsed = getBestAngleInRaiseToPowerInRadians(exponent);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:95:5: warning: variable 'realPart' of type 'double' can be declared 'const' [misc-const-correctness]
    double realPart = modulusPart * cos(angleToBeUsed);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:95:12: note: FIX-IT applied suggested code changes
    double realPart = modulusPart * cos(angleToBeUsed);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:96:5: warning: variable 'imaginaryPart' of type 'double' can be declared 'const' [misc-const-correctness]
    double imaginaryPart = modulusPart * sin(angleToBeUsed);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:96:12: note: FIX-IT applied suggested code changes
    double imaginaryPart = modulusPart * sin(angleToBeUsed);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:193:5: warning: variable 'angleWithoutPi' of type 'double' can be declared 'const' [misc-const-correctness]
    double angleWithoutPi(getAngleInRadians() / getPi());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:193:12: note: FIX-IT applied suggested code changes
    double angleWithoutPi(getAngleInRadians() / getPi());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:194:5: warning: variable 'exponentFraction' of type 'FractionDetails<unsigned long long>' (aka 'alba::mathHelper::FractionDetails<unsigned long long>') can be declared 'const' [misc-const-correctness]
    FractionDetails exponentFraction(getBestFractionDetailsForDoubleValue<size_t>(static_cast<double>(exponent)));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:194:21: note: FIX-IT applied suggested code changes
    FractionDetails exponentFraction(getBestFractionDetailsForDoubleValue<size_t>(static_cast<double>(exponent)));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:196:5: warning: variable 'numberRootsToProcess' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberRootsToProcess = min(MINIMUM_ROOTS, exponentFraction.denominator);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:196:12: note: FIX-IT applied suggested code changes
    size_t numberRootsToProcess = min(MINIMUM_ROOTS, exponentFraction.denominator);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:204:9: warning: variable 'deltaFromNearestInteger' of type 'double' can be declared 'const' [misc-const-correctness]
        double deltaFromNearestInteger = getPositiveDelta(possibleAngleWithoutPi, round(possibleAngleWithoutPi));
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:204:16: note: FIX-IT applied suggested code changes
        double deltaFromNearestInteger = getPositiveDelta(possibleAngleWithoutPi, round(possibleAngleWithoutPi));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:233:5: warning: variable 'modulusPart' of type 'double' can be declared 'const' [misc-const-correctness]
    double modulusPart =
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:233:12: note: FIX-IT applied suggested code changes
    double modulusPart =
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:235:5: warning: variable 'angleToBeUsed' of type 'double' can be declared 'const' [misc-const-correctness]
    double angleToBeUsed = (getAngleInRadians() + getPi() * 2 * static_cast<double>(rootIndex)) / rootDegree;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:235:12: note: FIX-IT applied suggested code changes
    double angleToBeUsed = (getAngleInRadians() + getPi() * 2 * static_cast<double>(rootIndex)) / rootDegree;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:236:5: warning: variable 'realPart' of type 'double' can be declared 'const' [misc-const-correctness]
    double realPart = modulusPart * cos(angleToBeUsed);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:236:12: note: FIX-IT applied suggested code changes
    double realPart = modulusPart * cos(angleToBeUsed);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:237:5: warning: variable 'imaginaryPart' of type 'double' can be declared 'const' [misc-const-correctness]
    double imaginaryPart = modulusPart * sin(angleToBeUsed);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaComplexNumber.cpp:237:12: note: FIX-IT applied suggested code changes
    double imaginaryPart = modulusPart * sin(angleToBeUsed);
           ^
[14/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Number/AlbaNumber.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:74:5: warning: variable 'adjustedRealPart' of type 'double' can be declared 'const' [misc-const-correctness]
    double adjustedRealPart = adjustFloatValue(static_cast<float>(realPart));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:74:12: note: FIX-IT applied suggested code changes
    double adjustedRealPart = adjustFloatValue(static_cast<float>(realPart));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:75:5: warning: variable 'adjustedImaginaryPart' of type 'double' can be declared 'const' [misc-const-correctness]
    double adjustedImaginaryPart = adjustFloatValue(static_cast<float>(imaginaryPart));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:75:12: note: FIX-IT applied suggested code changes
    double adjustedImaginaryPart = adjustFloatValue(static_cast<float>(imaginaryPart));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:284:5: warning: variable 'baseInDouble' of type 'double' can be declared 'const' [misc-const-correctness]
    double baseInDouble(first.getDouble());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:284:12: note: FIX-IT applied suggested code changes
    double baseInDouble(first.getDouble());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:285:5: warning: variable 'exponentInDouble' of type 'double' can be declared 'const' [misc-const-correctness]
    double exponentInDouble(second.getDouble());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:285:12: note: FIX-IT applied suggested code changes
    double exponentInDouble(second.getDouble());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:373:9: warning: variable 'bestFractionDetails' of type 'FractionDetails<unsigned int>' (aka 'alba::mathHelper::FractionDetails<unsigned int>') can be declared 'const' [misc-const-correctness]
        FractionDetails bestFractionDetails(
        ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:373:25: note: FIX-IT applied suggested code changes
        FractionDetails bestFractionDetails(
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:380:9: warning: variable 'doubleValue' of type 'double' can be declared 'const' [misc-const-correctness]
        double doubleValue = createComplexFloat(m_data.complexNumberData).getModulusWithSignOfRealPart();
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:380:16: note: FIX-IT applied suggested code changes
        double doubleValue = createComplexFloat(m_data.complexNumberData).getModulusWithSignOfRealPart();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:381:9: warning: variable 'bestFractionDetails' of type 'FractionDetails<unsigned int>' (aka 'alba::mathHelper::FractionDetails<unsigned int>') can be declared 'const' [misc-const-correctness]
        FractionDetails bestFractionDetails(getBestFractionDetailsForDoubleValue<DenominatorDataType>(doubleValue));
        ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:381:25: note: FIX-IT applied suggested code changes
        FractionDetails bestFractionDetails(getBestFractionDetailsForDoubleValue<DenominatorDataType>(doubleValue));
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:435:5: warning: variable 'fractionData' of type 'FractionData' can be declared 'const' [misc-const-correctness]
    FractionData fractionData(getFractionData());
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:435:18: note: FIX-IT applied suggested code changes
    FractionData fractionData(getFractionData());
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:467:5: warning: variable 'doubleValue' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleValue = static_cast<double>(integerValue1) + static_cast<double>(integerValue2);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:467:12: note: FIX-IT applied suggested code changes
    double doubleValue = static_cast<double>(integerValue1) + static_cast<double>(integerValue2);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:482:5: warning: variable 'doubleNumeratorPart1' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleNumeratorPart1 = doubleLcd * fractionData1.numerator / fractionData1.denominator;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:482:12: note: FIX-IT applied suggested code changes
    double doubleNumeratorPart1 = doubleLcd * fractionData1.numerator / fractionData1.denominator;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:483:5: warning: variable 'doubleNumeratorPart2' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleNumeratorPart2 = doubleLcd * fractionData2.numerator / fractionData2.denominator;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:483:12: note: FIX-IT applied suggested code changes
    double doubleNumeratorPart2 = doubleLcd * fractionData2.numerator / fractionData2.denominator;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:484:5: warning: variable 'doubleNumerator' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleNumerator = doubleNumeratorPart1 + doubleNumeratorPart2;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:484:12: note: FIX-IT applied suggested code changes
    double doubleNumerator = doubleNumeratorPart1 + doubleNumeratorPart2;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:488:9: warning: variable 'integerNumerator' of type 'NumeratorDataType' (aka 'int') can be declared 'const' [misc-const-correctness]
        NumeratorDataType integerNumerator =
        ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:488:27: note: FIX-IT applied suggested code changes
        NumeratorDataType integerNumerator =
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:502:5: warning: variable 'doubleNumerator' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleNumerator = static_cast<double>(integerValue) * fractionData.denominator + fractionData.numerator;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:502:12: note: FIX-IT applied suggested code changes
    double doubleNumerator = static_cast<double>(integerValue) * fractionData.denominator + fractionData.numerator;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:518:5: warning: variable 'doubleValue' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleValue = static_cast<double>(integerValue1) * static_cast<double>(integerValue2);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:518:12: note: FIX-IT applied suggested code changes
    double doubleValue = static_cast<double>(integerValue1) * static_cast<double>(integerValue2);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:531:5: warning: variable 'doubleNumerator' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleNumerator = static_cast<double>(fractionData1.numerator) * fractionData2.numerator;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:531:12: note: FIX-IT applied suggested code changes
    double doubleNumerator = static_cast<double>(fractionData1.numerator) * fractionData2.numerator;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:532:5: warning: variable 'doubleDenominator' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleDenominator = static_cast<double>(fractionData1.denominator) * fractionData2.denominator;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:532:12: note: FIX-IT applied suggested code changes
    double doubleDenominator = static_cast<double>(fractionData1.denominator) * fractionData2.denominator;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:548:5: warning: variable 'doubleNumerator' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleNumerator = static_cast<double>(integerValue) * fractionData.numerator;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:548:12: note: FIX-IT applied suggested code changes
    double doubleNumerator = static_cast<double>(integerValue) * fractionData.numerator;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:577:5: warning: variable 'doubleNumerator' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleNumerator = static_cast<double>(dividendInteger) * dividendUnsignedInteger;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:577:12: note: FIX-IT applied suggested code changes
    double doubleNumerator = static_cast<double>(dividendInteger) * dividendUnsignedInteger;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:578:5: warning: variable 'doubleDenominator' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleDenominator = static_cast<double>(divisorInteger) * divisorUnsignedInteger;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:578:12: note: FIX-IT applied suggested code changes
    double doubleDenominator = static_cast<double>(divisorInteger) * divisorUnsignedInteger;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:588:5: warning: variable 'doubleNumerator' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleNumerator = static_cast<double>(dividendFractionData.numerator) * divisorFractionData.denominator;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:588:12: note: FIX-IT applied suggested code changes
    double doubleNumerator = static_cast<double>(dividendFractionData.numerator) * divisorFractionData.denominator;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:589:5: warning: variable 'doubleDenominator' of type 'double' can be declared 'const' [misc-const-correctness]
    double doubleDenominator = static_cast<double>(dividendFractionData.denominator) * divisorFractionData.numerator;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:589:12: note: FIX-IT applied suggested code changes
    double doubleDenominator = static_cast<double>(dividendFractionData.denominator) * divisorFractionData.numerator;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:591:9: warning: variable 'integerNumerator' of type 'IntDataType' (aka 'long long') can be declared 'const' [misc-const-correctness]
        IntDataType integerNumerator =
        ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:591:21: note: FIX-IT applied suggested code changes
        IntDataType integerNumerator =
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:593:9: warning: variable 'integerDenominator' of type 'IntDataType' (aka 'long long') can be declared 'const' [misc-const-correctness]
        IntDataType integerDenominator =
        ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:593:21: note: FIX-IT applied suggested code changes
        IntDataType integerDenominator =
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:602:5: warning: variable 'powerUsingPositiveValues' of type 'double' can be declared 'const' [misc-const-correctness]
    double powerUsingPositiveValues = pow(getAbsoluteValue(base), getAbsoluteValue(exponent));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:602:12: note: FIX-IT applied suggested code changes
    double powerUsingPositiveValues = pow(getAbsoluteValue(base), getAbsoluteValue(exponent));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:619:5: warning: variable 'numeratorRaiseToExponent' of type 'double' can be declared 'const' [misc-const-correctness]
    double numeratorRaiseToExponent(pow(baseFractionData.numerator, getAbsoluteValue(exponent)));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:619:12: note: FIX-IT applied suggested code changes
    double numeratorRaiseToExponent(pow(baseFractionData.numerator, getAbsoluteValue(exponent)));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:620:5: warning: variable 'denominatorRaiseToExponent' of type 'double' can be declared 'const' [misc-const-correctness]
    double denominatorRaiseToExponent(pow(baseFractionData.denominator, getAbsoluteValue(exponent)));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:620:12: note: FIX-IT applied suggested code changes
    double denominatorRaiseToExponent(pow(baseFractionData.denominator, getAbsoluteValue(exponent)));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:640:9: warning: variable 'doubleValue' of type 'double' can be declared 'const' [misc-const-correctness]
        double doubleValue = number.m_data.doubleData;
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\AlbaNumber.cpp:640:16: note: FIX-IT applied suggested code changes
        double doubleValue = number.m_data.doubleData;
               ^
[15/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Number/Interval/AlbaNumberInterval.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\Interval\AlbaNumberInterval.cpp:25:5: warning: variable 'isInsideTheInterval' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isInsideTheInterval = lowerEndpointValue < value && value < higherEndpointValue;
    ^
         const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\Interval\AlbaNumberInterval.cpp:25:10: note: FIX-IT applied suggested code changes
    bool isInsideTheInterval = lowerEndpointValue < value && value < higherEndpointValue;
         ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\Interval\AlbaNumberInterval.cpp:26:5: warning: variable 'isEqualToLowerCloseEndpoint' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isEqualToLowerCloseEndpoint = m_lowerEndpoint.isClose() && lowerEndpointValue == value;
    ^
         const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\Interval\AlbaNumberInterval.cpp:26:10: note: FIX-IT applied suggested code changes
    bool isEqualToLowerCloseEndpoint = m_lowerEndpoint.isClose() && lowerEndpointValue == value;
         ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\Interval\AlbaNumberInterval.cpp:27:5: warning: variable 'isEqualToHigherCloseEndpoint' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isEqualToHigherCloseEndpoint = m_higherEndpoint.isClose() && higherEndpointValue == value;
    ^
         const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\Interval\AlbaNumberInterval.cpp:27:10: note: FIX-IT applied suggested code changes
    bool isEqualToHigherCloseEndpoint = m_higherEndpoint.isClose() && higherEndpointValue == value;
         ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\Interval\AlbaNumberInterval.cpp:71:5: warning: variable 'startPrefix' of type 'char' can be declared 'const' [misc-const-correctness]
    char startPrefix = interval.m_lowerEndpoint.isOpen() ? '(' : '[';
    ^
         const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\Interval\AlbaNumberInterval.cpp:71:10: note: FIX-IT applied suggested code changes
    char startPrefix = interval.m_lowerEndpoint.isOpen() ? '(' : '[';
         ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\Interval\AlbaNumberInterval.cpp:72:5: warning: variable 'endPostfix' of type 'char' can be declared 'const' [misc-const-correctness]
    char endPostfix = interval.m_higherEndpoint.isOpen() ? ')' : ']';
    ^
         const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Math\Number\Interval\AlbaNumberInterval.cpp:72:10: note: FIX-IT applied suggested code changes
    char endPostfix = interval.m_higherEndpoint.isOpen() ? ')' : ']';
         ^
[16/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Number/Interval/AlbaNumberIntervalEndpoint.cpp.obj
[17/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Number/Interval/AlbaNumberIntervalHelpers.cpp.obj
[18/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Math/Ratio/AlbaRatio.cpp.obj
[19/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Memory/AlbaMemoryBuffer.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:231:5: warning: variable 'delimeter' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    std::string delimeter = getDelimeterBasedOnFormat(StreamFormat::String);
    ^
                const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:231:17: note: FIX-IT applied suggested code changes
    std::string delimeter = getDelimeterBasedOnFormat(StreamFormat::String);
                ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:232:5: warning: variable 'outputIterator' of type 'std::ostream_iterator<unsigned long long>' can be declared 'const' [misc-const-correctness]
    std::ostream_iterator<DisplayType> outputIterator(outputStream, delimeter.c_str());
    ^
                                       const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:232:40: note: FIX-IT applied suggested code changes
    std::ostream_iterator<DisplayType> outputIterator(outputStream, delimeter.c_str());
                                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Memory\AlbaMemoryBuffer.cpp:36:5: warning: variable 'oldSize' of type 'int' can be declared 'const' [misc-const-correctness]
    int oldSize = static_cast<int>(m_buffer.size());
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Memory\AlbaMemoryBuffer.cpp:36:9: note: FIX-IT applied suggested code changes
    int oldSize = static_cast<int>(m_buffer.size());
        ^
[20/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/PathHandler/AlbaPathHandler.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:39:5: warning: variable 'indexOfSlashOrPeriod' of type 'int' can be declared 'const' [misc-const-correctness]
    int indexOfSlashOrPeriod = static_cast<int>(m_file.find_last_of('.'));
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:39:9: note: FIX-IT applied suggested code changes
    int indexOfSlashOrPeriod = static_cast<int>(m_file.find_last_of('.'));
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:63:5: warning: variable 'directoryWithoutSlash' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string directoryWithoutSlash(getStringWithoutCharAtTheEnd(m_directory, m_slashCharacterString[0]));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:63:12: note: FIX-IT applied suggested code changes
    string directoryWithoutSlash(getStringWithoutCharAtTheEnd(m_directory, m_slashCharacterString[0]));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:64:5: warning: variable 'indexOfSlash' of type 'int' can be declared 'const' [misc-const-correctness]
    int indexOfSlash = static_cast<int>(directoryWithoutSlash.find_last_of(m_slashCharacterString));
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:64:9: note: FIX-IT applied suggested code changes
    int indexOfSlash = static_cast<int>(directoryWithoutSlash.find_last_of(m_slashCharacterString));
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:73:5: warning: variable 'correctPath' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string correctPath(getCorrectPathWithReplacedSlashCharacters(path, m_slashCharacterString));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:73:12: note: FIX-IT applied suggested code changes
    string correctPath(getCorrectPathWithReplacedSlashCharacters(path, m_slashCharacterString));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:80:5: warning: variable 'indexOfSlashOrPeriod' of type 'int' can be declared 'const' [misc-const-correctness]
    int indexOfSlashOrPeriod = static_cast<int>(path.find_last_of(m_slashCharacterString + "."));
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:80:9: note: FIX-IT applied suggested code changes
    int indexOfSlashOrPeriod = static_cast<int>(path.find_last_of(m_slashCharacterString + "."));
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:87:5: warning: variable 'indexOfSlash' of type 'int' can be declared 'const' [misc-const-correctness]
    int indexOfSlash = static_cast<int>(path.find_last_of(m_slashCharacterString));
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaPathHandler.cpp:87:9: note: FIX-IT applied suggested code changes
    int indexOfSlash = static_cast<int>(path.find_last_of(m_slashCharacterString));
        ^
[21/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/PathHandler/AlbaWebPathHandler.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:17:5: warning: variable 'index' of type 'int' can be declared 'const' [misc-const-correctness]
    int index = static_cast<int>(m_protocolWithSymbols.find_first_of(R"(:/\)"));
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:17:9: note: FIX-IT applied suggested code changes
    int index = static_cast<int>(m_protocolWithSymbols.find_first_of(R"(:/\)"));
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:28:5: warning: variable 'newPathHandler' of type 'AlbaWebPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWebPathHandler newPathHandler(newPath);
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:28:24: note: FIX-IT applied suggested code changes
    AlbaWebPathHandler newPathHandler(newPath);
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:38:5: warning: variable 'index' of type 'int' can be declared 'const' [misc-const-correctness]
    int index = static_cast<int>(protocolWithSymbols.find_first_of(R"(:/\)"));
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:38:9: note: FIX-IT applied suggested code changes
    int index = static_cast<int>(protocolWithSymbols.find_first_of(R"(:/\)"));
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:50:5: warning: variable 'correctPathAfterProtocol' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string correctPathAfterProtocol(
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:50:12: note: FIX-IT applied suggested code changes
    string correctPathAfterProtocol(
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:52:5: warning: variable 'correctPathAfterProtocolWithoutUrlParameters' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string correctPathAfterProtocolWithoutUrlParameters(getCorrectPathWithoutUrlParameters(correctPathAfterProtocol));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:52:12: note: FIX-IT applied suggested code changes
    string correctPathAfterProtocolWithoutUrlParameters(getCorrectPathWithoutUrlParameters(correctPathAfterProtocol));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:62:5: warning: variable 'indexBeforeProtocol' of type 'int' can be declared 'const' [misc-const-correctness]
    int indexBeforeProtocol = static_cast<int>(path.find("://"));
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:62:9: note: FIX-IT applied suggested code changes
    int indexBeforeProtocol = static_cast<int>(path.find("://"));
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:63:5: warning: variable 'indexBeforeSlash' of type 'int' can be declared 'const' [misc-const-correctness]
    int indexBeforeSlash = static_cast<int>(path.find_first_of(m_slashCharacterString));
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\PathHandler\AlbaWebPathHandler.cpp:63:9: note: FIX-IT applied suggested code changes
    int indexBeforeSlash = static_cast<int>(path.find_first_of(m_slashCharacterString));
        ^
[22/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Print/AlbaPrintFunctions.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Print\AlbaPrintFunctions.cpp:32:5: warning: variable 'currentTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime currentTime(convertSystemTimeToAlbaDateTime(getSystemTimeNow()));
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Print\AlbaPrintFunctions.cpp:32:18: note: FIX-IT applied suggested code changes
    AlbaDateTime currentTime(convertSystemTimeToAlbaDateTime(getSystemTimeNow()));
                 ^
[23/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Randomizer/AlbaOldRandomizer.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:12:5: warning: variable 'lock' of type 'lock_guard<mutex>' can be declared 'const' [misc-const-correctness]
    lock_guard<mutex> lock(m_mutex);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:12:23: note: FIX-IT applied suggested code changes
    lock_guard<mutex> lock(m_mutex);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:17:5: warning: variable 'lock' of type 'lock_guard<mutex>' can be declared 'const' [misc-const-correctness]
    lock_guard<mutex> lock(m_mutex);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:17:23: note: FIX-IT applied suggested code changes
    lock_guard<mutex> lock(m_mutex);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:18:5: warning: variable 'delta' of type 'double' can be declared 'const' [misc-const-correctness]
    double delta = maximum - minimum;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:18:12: note: FIX-IT applied suggested code changes
    double delta = maximum - minimum;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:20:5: warning: variable 'randomValue' of type 'double' can be declared 'const' [misc-const-correctness]
    double randomValue = static_cast<double>(rand()) / static_cast<double>(RAND_MAX);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:20:12: note: FIX-IT applied suggested code changes
    double randomValue = static_cast<double>(rand()) / static_cast<double>(RAND_MAX);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:25:5: warning: variable 'lock' of type 'lock_guard<mutex>' can be declared 'const' [misc-const-correctness]
    lock_guard<mutex> lock(m_mutex);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:25:23: note: FIX-IT applied suggested code changes
    lock_guard<mutex> lock(m_mutex);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:26:5: warning: variable 'deltaInclusive' of type 'int' can be declared 'const' [misc-const-correctness]
    int deltaInclusive = maximum - minimum + 1;
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:26:9: note: FIX-IT applied suggested code changes
    int deltaInclusive = maximum - minimum + 1;
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:28:5: warning: variable 'randomValue' of type 'double' can be declared 'const' [misc-const-correctness]
    double randomValue = static_cast<double>(rand()) / (static_cast<double>(RAND_MAX) + 1);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Randomizer\AlbaOldRandomizer.cpp:28:12: note: FIX-IT applied suggested code changes
    double randomValue = static_cast<double>(rand()) / (static_cast<double>(RAND_MAX) + 1);
           ^
[24/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Randomizer/EntropySources/AlbaCombinedEntropySource.cpp.obj
[25/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Randomizer/EntropySources/AlbaEntropySourceBasedOnTime.cpp.obj
[26/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Stream/AlbaStreamBitReader.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Stream\AlbaStreamBitReader.cpp:16:9: warning: variable 'character' of type 'char' can be declared 'const' [misc-const-correctness]
        char character(readCharData());
        ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Stream\AlbaStreamBitReader.cpp:16:14: note: FIX-IT applied suggested code changes
        char character(readCharData());
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Stream\AlbaStreamBitReader.cpp:29:9: warning: variable 'character' of type 'char' can be declared 'const' [misc-const-correctness]
        char character(readCharData());
        ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Stream\AlbaStreamBitReader.cpp:29:14: note: FIX-IT applied suggested code changes
        char character(readCharData());
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Stream\AlbaStreamBitReader.cpp:43:5: warning: variable 'result' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool result(m_bitBuffer.front());
    ^
         const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Stream\AlbaStreamBitReader.cpp:43:10: note: FIX-IT applied suggested code changes
    bool result(m_bitBuffer.front());
         ^
[27/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Stream/AlbaStreamBitWriter.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Stream\AlbaStreamBitWriter.cpp:71:9: warning: variable 'remainder' of type 'int' can be declared 'const' [misc-const-correctness]
        int remainder(index % 8);
        ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Stream\AlbaStreamBitWriter.cpp:71:13: note: FIX-IT applied suggested code changes
        int remainder(index % 8);
            ^
[28/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Stream/AlbaStreamParameterReader.cpp.obj
[29/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Stream/AlbaStreamParameterWriter.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Stream\AlbaStreamParameterWriter.cpp:18:5: warning: variable 'isExisting' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isExisting(!data.empty());
    ^
         const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Stream\AlbaStreamParameterWriter.cpp:18:10: note: FIX-IT applied suggested code changes
    bool isExisting(!data.empty());
         ^
[30/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/String/AlbaStringHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:24:5: warning: variable 'firstIndexOfFirstString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t firstIndexOfFirstString = mainText.find(stringToSearch, indexToStartTheSearch);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:24:12: note: FIX-IT applied suggested code changes
    size_t firstIndexOfFirstString = mainText.find(stringToSearch, indexToStartTheSearch);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:26:9: warning: variable 'lastIndexOfFirstString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t lastIndexOfFirstString = firstIndexOfFirstString + stringToSearch.length();
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:26:16: note: FIX-IT applied suggested code changes
        size_t lastIndexOfFirstString = firstIndexOfFirstString + stringToSearch.length();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:41:5: warning: variable 'resultLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t resultLength = result.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:41:12: note: FIX-IT applied suggested code changes
    size_t resultLength = result.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:61:5: warning: variable 'length' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t length = str.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:61:12: note: FIX-IT applied suggested code changes
    size_t length = str.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:76:5: warning: variable 'firstIndexOfNotOfCharacters' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t firstIndexOfNotOfCharacters(str.find_first_not_of(WHITESPACE_STRING));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:76:12: note: FIX-IT applied suggested code changes
    size_t firstIndexOfNotOfCharacters(str.find_first_not_of(WHITESPACE_STRING));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:85:5: warning: variable 'firstIndexOfNotOfCharacters' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t firstIndexOfNotOfCharacters(result.find_first_not_of(characters));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:85:12: note: FIX-IT applied suggested code changes
    size_t firstIndexOfNotOfCharacters(result.find_first_not_of(characters));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:88:9: warning: variable 'lastIndexOfOfNotOfCharacters' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t lastIndexOfOfNotOfCharacters(result.find_last_not_of(characters));
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:88:16: note: FIX-IT applied suggested code changes
        size_t lastIndexOfOfNotOfCharacters(result.find_last_not_of(characters));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:105:5: warning: variable 'length' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t length = str.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:105:12: note: FIX-IT applied suggested code changes
    size_t length = str.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:118:5: warning: variable 'length' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t length = str.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:118:12: note: FIX-IT applied suggested code changes
    size_t length = str.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:120:9: warning: variable 'indexNotWhiteSpace' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t indexNotWhiteSpace = str.find_first_not_of(WHITESPACE_STRING, index);
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:120:16: note: FIX-IT applied suggested code changes
        size_t indexNotWhiteSpace = str.find_first_not_of(WHITESPACE_STRING, index);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:124:9: warning: variable 'indexWhiteSpace' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t indexWhiteSpace = str.find_first_of(WHITESPACE_STRING, indexNotWhiteSpace);
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:124:16: note: FIX-IT applied suggested code changes
        size_t indexWhiteSpace = str.find_first_of(WHITESPACE_STRING, indexNotWhiteSpace);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:133:5: warning: variable 'length' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t length = str.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:133:12: note: FIX-IT applied suggested code changes
    size_t length = str.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:145:5: warning: variable 'length' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t length = str.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:145:12: note: FIX-IT applied suggested code changes
    size_t length = str.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:146:5: warning: variable 'start' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t start = (str[0] == char1) ? 1 : 0;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:146:12: note: FIX-IT applied suggested code changes
    size_t start = (str[0] == char1) ? 1 : 0;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:151:5: warning: variable 'length' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t length = str.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:151:12: note: FIX-IT applied suggested code changes
    size_t length = str.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:152:5: warning: variable 'end' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t end = (length == 0) ? 0 : (str[length - 1] == char1) ? length - 1 : length;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:152:12: note: FIX-IT applied suggested code changes
    size_t end = (length == 0) ? 0 : (str[length - 1] == char1) ? length - 1 : length;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:158:5: warning: variable 'length' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t length = str.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:158:12: note: FIX-IT applied suggested code changes
    size_t length = str.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:159:5: warning: variable 'start' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t start = (str[0] == openingOperator) ? 1 : 0;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:159:12: note: FIX-IT applied suggested code changes
    size_t start = (str[0] == openingOperator) ? 1 : 0;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:160:5: warning: variable 'end' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t end = (length == 0) ? 0 : (str[length - 1] == closingOperator) ? length - 1 : length;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:160:12: note: FIX-IT applied suggested code changes
    size_t end = (length == 0) ? 0 : (str[length - 1] == closingOperator) ? length - 1 : length;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:177:5: warning: variable 'firstIndexOfFirstString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t firstIndexOfFirstString = mainText.find(stringToSearch, indexToStart);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:177:12: note: FIX-IT applied suggested code changes
    size_t firstIndexOfFirstString = mainText.find(stringToSearch, indexToStart);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:187:5: warning: variable 'firstIndexOfFirstString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t firstIndexOfFirstString = mainText.find(stringToSearch, indexToStart);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:187:12: note: FIX-IT applied suggested code changes
    size_t firstIndexOfFirstString = mainText.find(stringToSearch, indexToStart);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:189:9: warning: variable 'lastIndexOfFirstString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t lastIndexOfFirstString = firstIndexOfFirstString + stringToSearch.length();
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:189:16: note: FIX-IT applied suggested code changes
        size_t lastIndexOfFirstString = firstIndexOfFirstString + stringToSearch.length();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:199:5: warning: variable 'firstIndexOfFirstString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t firstIndexOfFirstString = mainText.find(firstString, indexToStart);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:199:12: note: FIX-IT applied suggested code changes
    size_t firstIndexOfFirstString = mainText.find(firstString, indexToStart);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:201:9: warning: variable 'lastIndexOfFirstString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t lastIndexOfFirstString = firstIndexOfFirstString + firstString.length();
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:201:16: note: FIX-IT applied suggested code changes
        size_t lastIndexOfFirstString = firstIndexOfFirstString + firstString.length();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:202:9: warning: variable 'firstIndexOfSecondString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t firstIndexOfSecondString = mainText.find(secondString, lastIndexOfFirstString);
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:202:16: note: FIX-IT applied suggested code changes
        size_t firstIndexOfSecondString = mainText.find(secondString, lastIndexOfFirstString);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:213:5: warning: variable 'firstIndexOfNotOfCharacters' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t firstIndexOfNotOfCharacters(mainText.find_first_of(characters, indexToStart));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:213:12: note: FIX-IT applied suggested code changes
    size_t firstIndexOfNotOfCharacters(mainText.find_first_of(characters, indexToStart));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:242:9: warning: variable 'stringToRepeatLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t stringToRepeatLength = stringToRepeat.length();
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:242:16: note: FIX-IT applied suggested code changes
        size_t stringToRepeatLength = stringToRepeat.length();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:253:5: warning: variable 'firstIndexOfFirstString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t firstIndexOfFirstString = mainText.find(stringToSearch);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:253:12: note: FIX-IT applied suggested code changes
    size_t firstIndexOfFirstString = mainText.find(stringToSearch);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:255:9: warning: variable 'lastIndexOfFirstString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t lastIndexOfFirstString = firstIndexOfFirstString + stringToSearch.length();
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:255:16: note: FIX-IT applied suggested code changes
        size_t lastIndexOfFirstString = firstIndexOfFirstString + stringToSearch.length();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:266:5: warning: variable 'firstIndexOfFirstString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t firstIndexOfFirstString = mainText.find(stringToSearch);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:266:12: note: FIX-IT applied suggested code changes
    size_t firstIndexOfFirstString = mainText.find(stringToSearch);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:268:9: warning: variable 'lastIndexOfFirstString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t lastIndexOfFirstString = firstIndexOfFirstString + stringToSearch.length();
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:268:16: note: FIX-IT applied suggested code changes
        size_t lastIndexOfFirstString = firstIndexOfFirstString + stringToSearch.length();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:382:13: warning: variable 'cost' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
            size_t cost = basisString[basisIndex - 1] == otherString[otherIndex - 1] ? 0 : 1;
            ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:382:20: note: FIX-IT applied suggested code changes
            size_t cost = basisString[basisIndex - 1] == otherString[otherIndex - 1] ? 0 : 1;
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:397:5: warning: variable 'commonLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t commonLength = min(string1.length(), string2.length());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:397:12: note: FIX-IT applied suggested code changes
    size_t commonLength = min(string1.length(), string2.length());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:408:5: warning: variable 'length' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t length = str.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:408:12: note: FIX-IT applied suggested code changes
    size_t length = str.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:436:9: warning: variable 'firstCharacter' of type 'char' can be declared 'const' [misc-const-correctness]
        char firstCharacter = str.front();
        ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:436:14: note: FIX-IT applied suggested code changes
        char firstCharacter = str.front();
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:533:5: warning: variable 'length1' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t length1 = str1.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:533:12: note: FIX-IT applied suggested code changes
    size_t length1 = str1.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:534:5: warning: variable 'length2' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t length2 = str2.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:534:12: note: FIX-IT applied suggested code changes
    size_t length2 = str2.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:535:5: warning: variable 'lowestLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t lowestLength = (length1 > length2) ? length2 : length1;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:535:12: note: FIX-IT applied suggested code changes
    size_t lowestLength = (length1 > length2) ? length2 : length1;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:544:5: warning: variable 'foundIndex' of type 'int' can be declared 'const' [misc-const-correctness]
    int foundIndex = static_cast<int>(mainText.find(stringToSearch, runningOffset));
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:544:9: note: FIX-IT applied suggested code changes
    int foundIndex = static_cast<int>(mainText.find(stringToSearch, runningOffset));
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:545:5: warning: variable 'isFound' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isFound = isNotNpos(foundIndex);
    ^
         const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:545:10: note: FIX-IT applied suggested code changes
    bool isFound = isNotNpos(foundIndex);
         ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:560:5: warning: variable 'isMainStringDone' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isMainStringDone = mainTextIndex >= mainText.size();
    ^
         const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:560:10: note: FIX-IT applied suggested code changes
    bool isMainStringDone = mainTextIndex >= mainText.size();
         ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:561:5: warning: variable 'isWildcardDone' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isWildcardDone = wildcardIndex >= wildcard.size();
    ^
         const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:561:10: note: FIX-IT applied suggested code changes
    bool isWildcardDone = wildcardIndex >= wildcard.size();
         ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:567:9: warning: variable 'isWildcardDoneOnNextIndex' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool isWildcardDoneOnNextIndex = wildcardIndex + 1 >= wildcard.size();
        ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:567:14: note: FIX-IT applied suggested code changes
        bool isWildcardDoneOnNextIndex = wildcardIndex + 1 >= wildcard.size();
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:626:5: warning: variable 'targetStrLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t targetStrLength = targetStr.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:626:12: note: FIX-IT applied suggested code changes
    size_t targetStrLength = targetStr.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:627:5: warning: variable 'replacementStrLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t replacementStrLength = replacementStr.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:627:12: note: FIX-IT applied suggested code changes
    size_t replacementStrLength = replacementStr.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:641:5: warning: variable 'delimeterLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t delimeterLength = 1;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:641:12: note: FIX-IT applied suggested code changes
    size_t delimeterLength = 1;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:642:5: warning: variable 'mainTextLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t mainTextLength = mainText.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:642:12: note: FIX-IT applied suggested code changes
    size_t mainTextLength = mainText.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:665:5: warning: variable 'mainTextLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t mainTextLength = mainText.length();
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:665:12: note: FIX-IT applied suggested code changes
    size_t mainTextLength = mainText.length();
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:669:9: warning: variable 'currentCharacter' of type 'char' can be declared 'const' [misc-const-correctness]
        char currentCharacter = mainText[index1];
        ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:669:14: note: FIX-IT applied suggested code changes
        char currentCharacter = mainText[index1];
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:681:9: warning: variable 'currentCharacter' of type 'char' can be declared 'const' [misc-const-correctness]
        char currentCharacter = mainText[splittingIndex];
        ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:681:14: note: FIX-IT applied suggested code changes
        char currentCharacter = mainText[splittingIndex];
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:687:13: warning: variable 'lowerDelta' of type 'int' can be declared 'const' [misc-const-correctness]
            int lowerDelta = static_cast<int>(splittingIndex - lowerTransitionIndex);
            ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:687:17: note: FIX-IT applied suggested code changes
            int lowerDelta = static_cast<int>(splittingIndex - lowerTransitionIndex);
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:688:13: warning: variable 'upperDelta' of type 'int' can be declared 'const' [misc-const-correctness]
            int upperDelta = static_cast<int>(upperTransitionIndex - splittingIndex);
            ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:688:17: note: FIX-IT applied suggested code changes
            int upperDelta = static_cast<int>(upperTransitionIndex - splittingIndex);
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:690:13: warning: variable 'isUpperValid' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool isUpperValid(upperDelta >= 0);
            ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:690:18: note: FIX-IT applied suggested code changes
            bool isUpperValid(upperDelta >= 0);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:691:13: warning: variable 'isLowerValid' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool isLowerValid(lowerDelta >= 0 && lowerTransitionIndex != previousSplittingIndex);
            ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:691:18: note: FIX-IT applied suggested code changes
            bool isLowerValid(lowerDelta >= 0 && lowerTransitionIndex != previousSplittingIndex);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:716:9: warning: variable 'mainTextLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t mainTextLength = mainText.length();
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:716:16: note: FIX-IT applied suggested code changes
        size_t mainTextLength = mainText.length();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:718:13: warning: variable 'delimiterIndex' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
            size_t delimiterIndex = mainText.find(delimeter, startingIndexOfFind);
            ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:718:20: note: FIX-IT applied suggested code changes
            size_t delimiterIndex = mainText.find(delimeter, startingIndexOfFind);
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:765:5: warning: variable 'noRedundantWhiteSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string noRedundantWhiteSpace(getStringWithoutRedundantWhiteSpace(mainText));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:765:12: note: FIX-IT applied suggested code changes
    string noRedundantWhiteSpace(getStringWithoutRedundantWhiteSpace(mainText));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:768:9: warning: variable 'gap' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string gap(targetLength, ' ');
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:768:16: note: FIX-IT applied suggested code changes
        string gap(targetLength, ' ');
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:773:9: warning: variable 'noWhiteSpaceLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t noWhiteSpaceLength = noWhiteSpace.length();
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:773:16: note: FIX-IT applied suggested code changes
        size_t noWhiteSpaceLength = noWhiteSpace.length();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:774:9: warning: variable 'numberOfSpaces' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t numberOfSpaces = targetLength - noWhiteSpaceLength;
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:774:16: note: FIX-IT applied suggested code changes
        size_t numberOfSpaces = targetLength - noWhiteSpaceLength;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:775:9: warning: variable 'gapLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t gapLength = (noWhiteSpaceLength <= 1)                    ? 0
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:775:16: note: FIX-IT applied suggested code changes
        size_t gapLength = (noWhiteSpaceLength <= 1)                    ? 0
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:778:9: warning: variable 'remainingLengthAtTheEnds' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t remainingLengthAtTheEnds = numberOfSpaces - (gapLength * (noWhiteSpaceLength - 1));
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:778:16: note: FIX-IT applied suggested code changes
        size_t remainingLengthAtTheEnds = numberOfSpaces - (gapLength * (noWhiteSpaceLength - 1));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:779:9: warning: variable 'gap' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string gap(gapLength, ' ');
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:779:16: note: FIX-IT applied suggested code changes
        string gap(gapLength, ' ');
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:790:9: warning: variable 'numberOfStrings' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t numberOfStrings = actualStrings.size();
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:790:16: note: FIX-IT applied suggested code changes
        size_t numberOfStrings = actualStrings.size();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:791:9: warning: variable 'noWhiteSpaceLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t noWhiteSpaceLength = noWhiteSpace.length();
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:791:16: note: FIX-IT applied suggested code changes
        size_t noWhiteSpaceLength = noWhiteSpace.length();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:792:9: warning: variable 'numberOfSpaces' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t numberOfSpaces = targetLength - noWhiteSpaceLength;
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:792:16: note: FIX-IT applied suggested code changes
        size_t numberOfSpaces = targetLength - noWhiteSpaceLength;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:793:9: warning: variable 'gapLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t gapLength = (numberOfStrings <= 1)                    ? 0
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:793:16: note: FIX-IT applied suggested code changes
        size_t gapLength = (numberOfStrings <= 1)                    ? 0
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:796:9: warning: variable 'remainingLengthAtTheEnds' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t remainingLengthAtTheEnds = numberOfSpaces - (gapLength * (numberOfStrings - 1));
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:796:16: note: FIX-IT applied suggested code changes
        size_t remainingLengthAtTheEnds = numberOfSpaces - (gapLength * (numberOfStrings - 1));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:797:9: warning: variable 'gap' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string gap(gapLength, ' ');
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:797:16: note: FIX-IT applied suggested code changes
        string gap(gapLength, ' ');
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:811:5: warning: variable 'noRedundantWhiteSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string noRedundantWhiteSpace(getStringWithoutRedundantWhiteSpace(mainText));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:811:12: note: FIX-IT applied suggested code changes
    string noRedundantWhiteSpace(getStringWithoutRedundantWhiteSpace(mainText));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:813:9: warning: variable 'gap' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string gap(targetLength, ' ');
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:813:16: note: FIX-IT applied suggested code changes
        string gap(targetLength, ' ');
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:818:9: warning: variable 'gapLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t gapLength = (targetLength - noRedundantWhiteSpace.length()) / 2;
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:818:16: note: FIX-IT applied suggested code changes
        size_t gapLength = (targetLength - noRedundantWhiteSpace.length()) / 2;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:828:5: warning: variable 'noRedundantWhiteSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string noRedundantWhiteSpace(getStringWithoutRedundantWhiteSpace(mainText));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:828:12: note: FIX-IT applied suggested code changes
    string noRedundantWhiteSpace(getStringWithoutRedundantWhiteSpace(mainText));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:830:9: warning: variable 'gap' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string gap(targetLength, ' ');
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:830:16: note: FIX-IT applied suggested code changes
        string gap(targetLength, ' ');
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:835:9: warning: variable 'gapLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t gapLength = (targetLength - noRedundantWhiteSpace.length());
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:835:16: note: FIX-IT applied suggested code changes
        size_t gapLength = (targetLength - noRedundantWhiteSpace.length());
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:844:5: warning: variable 'noRedundantWhiteSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string noRedundantWhiteSpace(getStringWithoutRedundantWhiteSpace(mainText));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:844:12: note: FIX-IT applied suggested code changes
    string noRedundantWhiteSpace(getStringWithoutRedundantWhiteSpace(mainText));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:846:9: warning: variable 'gap' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string gap(targetLength, ' ');
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:846:16: note: FIX-IT applied suggested code changes
        string gap(targetLength, ' ');
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:851:9: warning: variable 'gapLength' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t gapLength = (targetLength - noRedundantWhiteSpace.length());
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:851:16: note: FIX-IT applied suggested code changes
        size_t gapLength = (targetLength - noRedundantWhiteSpace.length());
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:860:5: warning: variable 'indexOfQuestionMark' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t indexOfQuestionMark = path.find_first_of('?');
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:860:12: note: FIX-IT applied suggested code changes
    size_t indexOfQuestionMark = path.find_first_of('?');
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:869:5: warning: variable 'indexOfQuestionMark' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t indexOfQuestionMark = path.find_first_of('?');
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:869:12: note: FIX-IT applied suggested code changes
    size_t indexOfQuestionMark = path.find_first_of('?');
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:903:9: warning: variable 'indexOfDoublePeriod' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t indexOfDoublePeriod = correctPath.find(stringToFind);
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:903:16: note: FIX-IT applied suggested code changes
        size_t indexOfDoublePeriod = correctPath.find(stringToFind);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:905:13: warning: variable 'indexOfNearestSlash' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
            size_t indexOfNearestSlash = correctPath.find_last_of(slashCharacterString, indexOfDoublePeriod - 1);
            ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:905:20: note: FIX-IT applied suggested code changes
            size_t indexOfNearestSlash = correctPath.find_last_of(slashCharacterString, indexOfDoublePeriod - 1);
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:916:5: warning: variable 'indexOfLastDoublePeriod' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t indexOfLastDoublePeriod = path.rfind(".."s + string(slashCharacterString));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:916:12: note: FIX-IT applied suggested code changes
    size_t indexOfLastDoublePeriod = path.rfind(".."s + string(slashCharacterString));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:927:9: warning: variable 'indexOfLastSlashString' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t indexOfLastSlashString = path.find_last_of(slashCharacterString, indexLastCharacterToSearch);
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:927:16: note: FIX-IT applied suggested code changes
        size_t indexOfLastSlashString = path.find_last_of(slashCharacterString, indexLastCharacterToSearch);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:970:5: warning: variable 'allCapital' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string allCapital(getStringWithCapitalLetters(stringToConvert));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\String\AlbaStringHelper.cpp:970:12: note: FIX-IT applied suggested code changes
    string allCapital(getStringWithCapitalLetters(stringToConvert));
           ^
[31/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Time/AlbaDateTime.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:41:5: warning: variable 'years' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t years(getAndRemoveYearsFromNumberOfDays(remainingDays));
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:41:14: note: FIX-IT applied suggested code changes
    uint32_t years(getAndRemoveYearsFromNumberOfDays(remainingDays));
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:42:5: warning: variable 'month' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t month(getAndRemoveMonthsFromNumberOfDays(remainingDays, years));
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:42:14: note: FIX-IT applied suggested code changes
    uint32_t month(getAndRemoveMonthsFromNumberOfDays(remainingDays, years));
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:84:5: warning: variable 'years' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t years(getAndRemoveYearsFromNumberOfDays(remainingDays));
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:84:14: note: FIX-IT applied suggested code changes
    uint32_t years(getAndRemoveYearsFromNumberOfDays(remainingDays));
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:85:5: warning: variable 'month' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t month(getAndRemoveMonthsFromNumberOfDays(remainingDays, years));
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:85:14: note: FIX-IT applied suggested code changes
    uint32_t month(getAndRemoveMonthsFromNumberOfDays(remainingDays, years));
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:119:5: warning: variable 'hours' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t hours(getAndRemoveHoursFromNumberOfSeconds(remainingSeconds));
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:119:14: note: FIX-IT applied suggested code changes
    uint32_t hours(getAndRemoveHoursFromNumberOfSeconds(remainingSeconds));
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:120:5: warning: variable 'minutes' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t minutes(getAndRemoveMinutesFromNumberOfSeconds(remainingSeconds));
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:120:14: note: FIX-IT applied suggested code changes
    uint32_t minutes(getAndRemoveMinutesFromNumberOfSeconds(remainingSeconds));
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:137:5: warning: variable 'hours' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t hours(getAndRemoveHoursFromNumberOfSeconds(remainingSeconds));
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:137:14: note: FIX-IT applied suggested code changes
    uint32_t hours(getAndRemoveHoursFromNumberOfSeconds(remainingSeconds));
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:138:5: warning: variable 'minutes' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t minutes(getAndRemoveMinutesFromNumberOfSeconds(remainingSeconds));
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTime.cpp:138:14: note: FIX-IT applied suggested code changes
    uint32_t minutes(getAndRemoveMinutesFromNumberOfSeconds(remainingSeconds));
             ^
[32/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Time/AlbaDateTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTimeHelper.cpp:34:9: warning: variable 'neededSeconds' of type 'int32_t' (aka 'int') can be declared 'const' [misc-const-correctness]
        int32_t neededSeconds = (static_cast<int32_t>(totalMicroSeconds) * -1 +
        ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTimeHelper.cpp:34:17: note: FIX-IT applied suggested code changes
        int32_t neededSeconds = (static_cast<int32_t>(totalMicroSeconds) * -1 +
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTimeHelper.cpp:42:9: warning: variable 'neededDays' of type 'int32_t' (aka 'int') can be declared 'const' [misc-const-correctness]
        int32_t neededDays = (totalSeconds * -1 + static_cast<int32_t>(NUMBER_OF_SECONDS_IN_A_DAY) - 1) /
        ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTimeHelper.cpp:42:17: note: FIX-IT applied suggested code changes
        int32_t neededDays = (totalSeconds * -1 + static_cast<int32_t>(NUMBER_OF_SECONDS_IN_A_DAY) - 1) /
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTimeHelper.cpp:230:5: warning: variable 'month' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t month(getMonthFromNumberOfDays(remainingDays, year));
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTimeHelper.cpp:230:14: note: FIX-IT applied suggested code changes
    uint32_t month(getMonthFromNumberOfDays(remainingDays, year));
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTimeHelper.cpp:236:5: warning: variable 'hours' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t hours = remainingSeconds / NUMBER_OF_SECONDS_IN_AN_HOUR;
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTimeHelper.cpp:236:14: note: FIX-IT applied suggested code changes
    uint32_t hours = remainingSeconds / NUMBER_OF_SECONDS_IN_AN_HOUR;
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTimeHelper.cpp:242:5: warning: variable 'minutes' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t minutes = remainingSeconds / NUMBER_OF_SECONDS_IN_A_MINUTE;
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaDateTimeHelper.cpp:242:14: note: FIX-IT applied suggested code changes
    uint32_t minutes = remainingSeconds / NUMBER_OF_SECONDS_IN_A_MINUTE;
             ^
[33/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Time/AlbaLocalTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:21:5: warning: variable 'currentTimeT' of type 'time_t' (aka 'long long') can be declared 'const' [misc-const-correctness]
    time_t currentTimeT = system_clock::to_time_t(inputTime);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:21:12: note: FIX-IT applied suggested code changes
    time_t currentTimeT = system_clock::to_time_t(inputTime);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:23:5: warning: variable 'localTime' of type 'struct tm' can be declared 'const' [misc-const-correctness]
    struct tm localTime = *localtime(&currentTimeT);
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:23:15: note: FIX-IT applied suggested code changes
    struct tm localTime = *localtime(&currentTimeT);
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:23:28: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
    struct tm localTime = *localtime(&currentTimeT);
                           ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:49:5: warning: variable 'timeWithoutMicroSeconds' of type 'time_t' (aka 'long long') can be declared 'const' [misc-const-correctness]
    time_t timeWithoutMicroSeconds = mktime(&timeInformation);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:49:12: note: FIX-IT applied suggested code changes
    time_t timeWithoutMicroSeconds = mktime(&timeInformation);
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
1 warning generated.
[34/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Time/AlbaLocalTimer.cpp.obj
[35/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/User/AlbaUserInterface.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\AlbaUserInterface.cpp:20:9: warning: variable 'pathString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string pathString(getUserInput());
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\AlbaUserInterface.cpp:20:16: note: FIX-IT applied suggested code changes
        string pathString(getUserInput());
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\AlbaUserInterface.cpp:21:9: warning: variable 'filePath' of type 'AlbaLocalPathHandler' can be declared 'const' [misc-const-correctness]
        AlbaLocalPathHandler filePath(pathString);
        ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\AlbaUserInterface.cpp:21:30: note: FIX-IT applied suggested code changes
        AlbaLocalPathHandler filePath(pathString);
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\AlbaUserInterface.cpp:36:5: warning: variable 'converter' of type 'StringConverterWithFormatting' can be declared 'const' [misc-const-correctness]
    StringConverterWithFormatting converter(5, ' ');
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\AlbaUserInterface.cpp:36:35: note: FIX-IT applied suggested code changes
    StringConverterWithFormatting converter(5, ' ');
                                  ^
[36/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/User/DisplayTable.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:103:5: warning: variable 'printer' of type 'DisplayTablePrinter' can be declared 'const' [misc-const-correctness]
    DisplayTablePrinter printer(displayTable);
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:103:25: note: FIX-IT applied suggested code changes
    DisplayTablePrinter printer(displayTable);
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:122:9: warning: variable 'numberOfLinesAtRow' of type 'int' can be declared 'const' [misc-const-correctness]
        int numberOfLinesAtRow = m_maxWidthAtRow[rowIndex];
        ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:122:13: note: FIX-IT applied suggested code changes
        int numberOfLinesAtRow = m_maxWidthAtRow[rowIndex];
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:128:17: warning: variable 'targetLength' of type 'int' can be declared 'const' [misc-const-correctness]
                int targetLength = m_maxLengthAtColumn[columnIndex];
                ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:128:21: note: FIX-IT applied suggested code changes
                int targetLength = m_maxLengthAtColumn[columnIndex];
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:129:17: warning: variable 'textOnVerticalAlignment' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
                string textOnVerticalAlignment =
                ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:129:24: note: FIX-IT applied suggested code changes
                string textOnVerticalAlignment =
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:131:17: warning: variable 'cellTextLine' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
                string cellTextLine =
                ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:131:24: note: FIX-IT applied suggested code changes
                string cellTextLine =
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:149:5: warning: variable 'numberOfLinesAtCell' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfLinesAtCell = static_cast<int>(linesAtCell.size());
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:149:9: note: FIX-IT applied suggested code changes
    int numberOfLinesAtCell = static_cast<int>(linesAtCell.size());
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:152:13: warning: variable 'numberOfEmptyLines' of type 'int' can be declared 'const' [misc-const-correctness]
            int numberOfEmptyLines = numberOfLinesAtRow - numberOfLinesAtCell;
            ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:152:17: note: FIX-IT applied suggested code changes
            int numberOfEmptyLines = numberOfLinesAtRow - numberOfLinesAtCell;
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:153:13: warning: variable 'numberOfGapLines' of type 'int' can be declared 'const' [misc-const-correctness]
            int numberOfGapLines = (numberOfLinesAtCell <= 1) ? 0
            ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:153:17: note: FIX-IT applied suggested code changes
            int numberOfGapLines = (numberOfLinesAtCell <= 1) ? 0
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:157:13: warning: variable 'remainingWidthAtTheEnds' of type 'int' can be declared 'const' [misc-const-correctness]
            int remainingWidthAtTheEnds = numberOfEmptyLines - (numberOfGapLines * (numberOfLinesAtCell - 1));
            ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:157:17: note: FIX-IT applied suggested code changes
            int remainingWidthAtTheEnds = numberOfEmptyLines - (numberOfGapLines * (numberOfLinesAtCell - 1));
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:158:13: warning: variable 'start' of type 'int' can be declared 'const' [misc-const-correctness]
            int start = remainingWidthAtTheEnds / 2;
            ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:158:17: note: FIX-IT applied suggested code changes
            int start = remainingWidthAtTheEnds / 2;
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:160:17: warning: variable 'indexAtStart' of type 'int' can be declared 'const' [misc-const-correctness]
                int indexAtStart = lineIndexAtRow - start;
                ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:160:21: note: FIX-IT applied suggested code changes
                int indexAtStart = lineIndexAtRow - start;
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:161:17: warning: variable 'interval' of type 'int' can be declared 'const' [misc-const-correctness]
                int interval = numberOfGapLines + 1;
                ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:161:21: note: FIX-IT applied suggested code changes
                int interval = numberOfGapLines + 1;
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:163:21: warning: variable 'indexAtLinesAtCell' of type 'int' can be declared 'const' [misc-const-correctness]
                    int indexAtLinesAtCell = indexAtStart / interval;
                    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:163:25: note: FIX-IT applied suggested code changes
                    int indexAtLinesAtCell = indexAtStart / interval;
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:172:13: warning: variable 'middleStart' of type 'int' can be declared 'const' [misc-const-correctness]
            int middleStart = (numberOfLinesAtRow - numberOfLinesAtCell) / 2;
            ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:172:17: note: FIX-IT applied suggested code changes
            int middleStart = (numberOfLinesAtRow - numberOfLinesAtCell) / 2;
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:173:13: warning: variable 'middleEnd' of type 'int' can be declared 'const' [misc-const-correctness]
            int middleEnd = middleStart + numberOfLinesAtCell;
            ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:173:17: note: FIX-IT applied suggested code changes
            int middleEnd = middleStart + numberOfLinesAtCell;
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:186:13: warning: variable 'bottomStart' of type 'int' can be declared 'const' [misc-const-correctness]
            int bottomStart = numberOfLinesAtRow - numberOfLinesAtCell;
            ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:186:17: note: FIX-IT applied suggested code changes
            int bottomStart = numberOfLinesAtRow - numberOfLinesAtCell;
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:205:67: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
int DisplayTablePrinter::getVerticalBorderLength() const { return m_verticalBorder.length(); }
                                                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:208:12: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return ((m_maxLengthAtColumn.size() + 1) * getVerticalBorderLength()) + m_totalColumnLength;
           ^
[37/126] Building CXX object CMakeFiles/AprgCommon.dir/src/Common/Utility/AlbaScopeGuard.cpp.obj
[38/126] Building CXX object CMakeFiles/AprgCommon.dir/tstUtilities/CommonTestsUtilities/File/BaseFileReaderTest.cpp.obj
[39/126] Building CXX object CMakeFiles/AprgCommon.dir/tstUtilities/CommonTestsUtilities/File/FileUtilities.cpp.obj
[40/126] Building CXX object CMakeFiles/AprgCommon.dir/srcWindows/Common/PathHandler/AlbaWindowsPathHandler.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:20:1: warning: constructor does not initialize these fields: m_foundInLocalSystem, m_relativePath [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
AlbaWindowsPathHandler::AlbaWindowsPathHandler(string_view const path) : AlbaPathHandler(R"(\)") { setPath(path); }
^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler/AlbaWindowsPathHandler.hpp:55:30: note: FIX-IT applied suggested code changes
    bool m_foundInLocalSystem;
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler/AlbaWindowsPathHandler.hpp:56:24: note: FIX-IT applied suggested code changes
    bool m_relativePath;
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:26:5: warning: variable 'fullPath' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string fullPath(getFullPath());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:26:12: note: FIX-IT applied suggested code changes
    string fullPath(getFullPath());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:27:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int index = 0, length = fullPath.length();
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:27:5: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:27:29: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int index = 0, length = fullPath.length();
                            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:29:9: warning: variable 'indexWithSlashCharacter' of type 'int' can be declared 'const' [misc-const-correctness]
        int indexWithSlashCharacter = fullPath.find_first_of(m_slashCharacterString, index);
        ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:29:13: note: FIX-IT applied suggested code changes
        int indexWithSlashCharacter = fullPath.find_first_of(m_slashCharacterString, index);
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:29:39: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int indexWithSlashCharacter = fullPath.find_first_of(m_slashCharacterString, index);
                                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:33:9: warning: variable 'partialDirectory' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string partialDirectory(fullPath.substr(0, indexWithSlashCharacter + 1));
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:33:16: note: FIX-IT applied suggested code changes
        string partialDirectory(fullPath.substr(0, indexWithSlashCharacter + 1));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:34:9: warning: variable 'partialDirectoryPathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
        AlbaWindowsPathHandler partialDirectoryPathHandler(partialDirectory);
        ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:34:32: note: FIX-IT applied suggested code changes
        AlbaWindowsPathHandler partialDirectoryPathHandler(partialDirectory);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:36:18: warning: implicit conversion 'BOOL' (aka 'int') -> bool [readability-implicit-bool-conversion]
            if (!CreateDirectoryW(
                ~^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:36:17: note: FIX-IT applied suggested code changes
            if (!CreateDirectoryW(
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:39:26: note: FIX-IT applied suggested code changes
                    NULL)) {
                         ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:39:21: warning: use nullptr [modernize-use-nullptr]
                    NULL)) {
                    ^~~~
                    nullptr
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:39:21: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:86:9: warning: implicit conversion 'BOOL' (aka 'int') -> bool [readability-implicit-bool-conversion]
    if (GetFileAttributesExW(
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:88:28: note: FIX-IT applied suggested code changes
            &attributeData)) {
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:103:9: warning: implicit conversion 'BOOL' (aka 'int') -> bool [readability-implicit-bool-conversion]
    if (GetFileAttributesExW(
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:105:28: note: FIX-IT applied suggested code changes
            &attributeData)) {
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:169:9: warning: variable 'newPath' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string newPath(m_directory + string(newFileName));
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:169:16: note: FIX-IT applied suggested code changes
        string newPath(m_directory + string(newFileName));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:210:9: warning: implicit conversion 'DWORD' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    if (GetModuleFileNameW(NULL, currentPathFromWindowsWideCharArray, MAX_PATH)) {
        ^
                                                                                != 0u
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:210:80: note: FIX-IT applied suggested code changes
    if (GetModuleFileNameW(NULL, currentPathFromWindowsWideCharArray, MAX_PATH)) {
                                                                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:210:28: warning: use nullptr [modernize-use-nullptr]
    if (GetModuleFileNameW(NULL, currentPathFromWindowsWideCharArray, MAX_PATH)) {
                           ^~~~
                           nullptr
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:210:28: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:219:30: warning: method 'canBeLocated' can be made static [readability-convert-member-functions-to-static]
bool AlbaWindowsPathHandler::canBeLocated(string_view const fullPath) const {
                             ^                                        ~~~~~~
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:219:71: note: FIX-IT applied suggested code changes
bool AlbaWindowsPathHandler::canBeLocated(string_view const fullPath) const {
                                                                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler/AlbaWindowsPathHandler.hpp:49:19: note: FIX-IT applied suggested code changes
    [[nodiscard]] bool canBeLocated(std::string_view const fullPath) const;
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler/AlbaWindowsPathHandler.hpp:49:70: note: FIX-IT applied suggested code changes
    [[nodiscard]] bool canBeLocated(std::string_view const fullPath) const;
                                                                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:220:5: warning: variable 'attributes' of type 'DWORD' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
    DWORD attributes = GetFileAttributesW(convertToAnotherBasicStringVariant<string_view, wstring>(fullPath).c_str());
    ^
          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:220:11: note: FIX-IT applied suggested code changes
    DWORD attributes = GetFileAttributesW(convertToAnotherBasicStringVariant<string_view, wstring>(fullPath).c_str());
          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:228:9: warning: variable 'isCorrectPathLastCharacterNotASlash' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool isCorrectPathLastCharacterNotASlash(
        ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:228:14: note: FIX-IT applied suggested code changes
        bool isCorrectPathLastCharacterNotASlash(
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:231:13: warning: variable 'attributes' of type 'DWORD' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
            DWORD attributes =
            ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:231:19: note: FIX-IT applied suggested code changes
            DWORD attributes =
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:233:13: warning: variable 'isFoundInWindows' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool isFoundInWindows(INVALID_FILE_ATTRIBUTES != attributes);
            ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:233:18: note: FIX-IT applied suggested code changes
            bool isFoundInWindows(INVALID_FILE_ATTRIBUTES != attributes);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:235:17: warning: variable 'isDirectoryInWindows' of type 'bool' can be declared 'const' [misc-const-correctness]
                bool isDirectoryInWindows(attributes & FILE_ATTRIBUTE_DIRECTORY);
                ^
                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:235:22: note: FIX-IT applied suggested code changes
                bool isDirectoryInWindows(attributes & FILE_ATTRIBUTE_DIRECTORY);
                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:235:43: warning: implicit conversion 'DWORD' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
                bool isDirectoryInWindows(attributes & FILE_ATTRIBUTE_DIRECTORY);
                                          ^
                                          (                                    ) != 0u
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:235:43: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:235:80: note: FIX-IT applied suggested code changes
                bool isDirectoryInWindows(attributes & FILE_ATTRIBUTE_DIRECTORY);
                                                                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:240:17: warning: variable 'isOriginalPathLastCharacterASlash' of type 'bool' can be declared 'const' [misc-const-correctness]
                bool isOriginalPathLastCharacterASlash(
                ^
                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:240:22: note: FIX-IT applied suggested code changes
                bool isOriginalPathLastCharacterASlash(
                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:268:5: warning: variable 'index' of type 'int' can be declared 'const' [misc-const-correctness]
    int index = m_directory.find_first_of(m_slashCharacterString + ":");
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:268:9: note: FIX-IT applied suggested code changes
    int index = m_directory.find_first_of(m_slashCharacterString + ":");
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:268:17: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int index = m_directory.find_first_of(m_slashCharacterString + ":");
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:299:5: warning: variable 'correctedDepth' of type 'int' can be declared 'const' [misc-const-correctness]
    int correctedDepth = (depth > 0) ? depth - 1 : depth;
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:299:9: note: FIX-IT applied suggested code changes
    int correctedDepth = (depth > 0) ? depth - 1 : depth;
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:301:5: warning: variable 'currentDirectoryString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string currentDirectoryString(currentDirectory);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:301:12: note: FIX-IT applied suggested code changes
    string currentDirectoryString(currentDirectory);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:302:5: warning: variable 'searchString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string searchString = currentDirectoryString + string(wildCardSearch);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:302:12: note: FIX-IT applied suggested code changes
    string searchString = currentDirectoryString + string(wildCardSearch);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:306:9: warning: variable 'fileOrDirectoryName' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string fileOrDirectoryName(convertToAnotherBasicStringVariant<wstring, string>(wstring(data.cFileName)));
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:306:16: note: FIX-IT applied suggested code changes
        string fileOrDirectoryName(convertToAnotherBasicStringVariant<wstring, string>(wstring(data.cFileName)));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:308:17: warning: implicit conversion 'DWORD' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
            if (data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {
                ^
                (                                               ) != 0u
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:308:17: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:308:65: note: FIX-IT applied suggested code changes
            if (data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) {
                                                                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:309:17: warning: variable 'newDirectory' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
                string newDirectory(currentDirectoryString + fileOrDirectoryName + '\\');
                ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:309:24: note: FIX-IT applied suggested code changes
                string newDirectory(currentDirectoryString + fileOrDirectoryName + '\\');
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:317:21: warning: implicit conversion 'BOOL' (aka 'int') -> bool [readability-implicit-bool-conversion]
        bContinue = FindNextFileW(hFind, &data);
                    ^
                    (                           != 0)
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:317:21: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:317:48: note: FIX-IT applied suggested code changes
        bContinue = FindNextFileW(hFind, &data);
                                               ^
[41/126] Building CXX object CMakeFiles/AprgCommon.dir/srcWindows/Common/Time/AlbaWindowsTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Time\AlbaWindowsTimeHelper.cpp:6:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return AlbaDateTime(
           ^
[42/126] Building CXX object CMakeFiles/AprgCommon.dir/srcWindows/Common/Time/AlbaWindowsTimer.cpp.obj
[43/126] Building CXX object CMakeFiles/AprgCommon.dir/srcWindows/Common/Windows/AlbaWindowsHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:19:9: warning: implicit conversion 'DWORD' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
    if (errorCode) {
        ^
                  != 0u
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:19:18: note: FIX-IT applied suggested code changes
    if (errorCode) {
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:20:16: warning: variable 'lpMessageBuffer' is not initialized [cppcoreguidelines-init-variables]
        LPVOID lpMessageBuffer;
               ^
                               = nullptr
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:20:31: note: FIX-IT applied suggested code changes
        LPVOID lpMessageBuffer;
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:21:9: warning: variable 'bufferLength' of type 'DWORD' (aka 'unsigned long') can be declared 'const' [misc-const-correctness]
        DWORD bufferLength = FormatMessage(
        ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:21:15: note: FIX-IT applied suggested code changes
        DWORD bufferLength = FormatMessage(
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:22:106: warning: use nullptr [modernize-use-nullptr]
            FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, NULL,
                                                                                                         ^~~~
                                                                                                         nullptr
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:22:106: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:23:67: warning: C-style casts are discouraged; use reinterpret_cast [google-readability-casting]
            errorCode, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), (LPTSTR)&lpMessageBuffer, 0, NULL);
                                                                  ^~~~~~~~
                                                                  reinterpret_cast<LPTSTR>( )
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:23:67: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:23:91: note: FIX-IT applied suggested code changes
            errorCode, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), (LPTSTR)&lpMessageBuffer, 0, NULL);
                                                                                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:23:96: warning: use nullptr [modernize-use-nullptr]
            errorCode, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), (LPTSTR)&lpMessageBuffer, 0, NULL);
                                                                                               ^~~~
                                                                                               nullptr
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:23:96: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:24:13: warning: implicit conversion 'DWORD' (aka 'unsigned long') -> bool [readability-implicit-bool-conversion]
        if (bufferLength) {
            ^
                         != 0u
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:24:25: note: FIX-IT applied suggested code changes
        if (bufferLength) {
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:25:13: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
            LPCSTR lpMessageString = (LPCSTR)lpMessageBuffer;
            ^~~~~~
            auto
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:25:13: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:25:38: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
            LPCSTR lpMessageString = (LPCSTR)lpMessageBuffer;
                                     ^~~~~~~~
                                     static_cast<LPCSTR>(   )
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:25:38: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:25:61: note: FIX-IT applied suggested code changes
            LPCSTR lpMessageString = (LPCSTR)lpMessageBuffer;
                                                            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:26:13: warning: variable 'errorMessageFromWindows' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
            string errorMessageFromWindows(
            ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Windows\AlbaWindowsHelper.cpp:26:20: note: FIX-IT applied suggested code changes
            string errorMessageFromWindows(
                   ^
[44/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Bit/AlbaBitField_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:8:5: warning: variable 'bitField0' of type 'AlbaSingleBitField<uint8_t, 1>' (aka 'AlbaSingleBitField<unsigned char, 1>') can be declared 'const' [misc-const-correctness]
    AlbaSingleBitField<uint8_t, 1> bitField0{0};
    ^
                                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:8:36: note: FIX-IT applied suggested code changes
    AlbaSingleBitField<uint8_t, 1> bitField0{0};
                                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:9:5: warning: variable 'bitField1' of type 'AlbaSingleBitField<uint8_t, 1>' (aka 'AlbaSingleBitField<unsigned char, 1>') can be declared 'const' [misc-const-correctness]
    AlbaSingleBitField<uint8_t, 1> bitField1{1};
    ^
                                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:9:36: note: FIX-IT applied suggested code changes
    AlbaSingleBitField<uint8_t, 1> bitField1{1};
                                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:17:5: warning: variable 'bitField0' of type 'AlbaSingleBitField<uint8_t, 2>' (aka 'AlbaSingleBitField<unsigned char, 2>') can be declared 'const' [misc-const-correctness]
    AlbaSingleBitField<uint8_t, 2> bitField0{0};
    ^
                                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:17:36: note: FIX-IT applied suggested code changes
    AlbaSingleBitField<uint8_t, 2> bitField0{0};
                                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:18:5: warning: variable 'bitField1' of type 'AlbaSingleBitField<uint8_t, 2>' (aka 'AlbaSingleBitField<unsigned char, 2>') can be declared 'const' [misc-const-correctness]
    AlbaSingleBitField<uint8_t, 2> bitField1{3};
    ^
                                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:18:36: note: FIX-IT applied suggested code changes
    AlbaSingleBitField<uint8_t, 2> bitField1{3};
                                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:26:5: warning: variable 'bitField0' of type 'AlbaSingleBitField<uint8_t, 3>' (aka 'AlbaSingleBitField<unsigned char, 3>') can be declared 'const' [misc-const-correctness]
    AlbaSingleBitField<uint8_t, 3> bitField0{0};
    ^
                                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:26:36: note: FIX-IT applied suggested code changes
    AlbaSingleBitField<uint8_t, 3> bitField0{0};
                                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:27:5: warning: variable 'bitField1' of type 'AlbaSingleBitField<uint8_t, 3>' (aka 'AlbaSingleBitField<unsigned char, 3>') can be declared 'const' [misc-const-correctness]
    AlbaSingleBitField<uint8_t, 3> bitField1{7};
    ^
                                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:27:36: note: FIX-IT applied suggested code changes
    AlbaSingleBitField<uint8_t, 3> bitField1{7};
                                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:35:5: warning: variable 'bitField0' of type 'AlbaSingleBitField<uint32_t, 28>' (aka 'AlbaSingleBitField<unsigned int, 28>') can be declared 'const' [misc-const-correctness]
    AlbaSingleBitField<uint32_t, 28> bitField0{0};
    ^
                                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:35:38: note: FIX-IT applied suggested code changes
    AlbaSingleBitField<uint32_t, 28> bitField0{0};
                                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:36:5: warning: variable 'bitField1' of type 'AlbaSingleBitField<uint32_t, 28>' (aka 'AlbaSingleBitField<unsigned int, 28>') can be declared 'const' [misc-const-correctness]
    AlbaSingleBitField<uint32_t, 28> bitField1{268435455};
    ^
                                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitField_unit.cpp:36:38: note: FIX-IT applied suggested code changes
    AlbaSingleBitField<uint32_t, 28> bitField1{268435455};
                                     ^
[45/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Bit/AlbaBitManipulation_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitManipulation_unit.cpp:93:5: warning: variable 'result' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t result = AlbaBitManipulation<uint32_t>::concatenateBytes(byte1, byte2);
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitManipulation_unit.cpp:93:14: note: FIX-IT applied suggested code changes
    uint32_t result = AlbaBitManipulation<uint32_t>::concatenateBytes(byte1, byte2);
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitManipulation_unit.cpp:105:5: warning: variable 'result' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t result = AlbaBitManipulation<uint32_t>::concatenateBytes(byte1, byte2, byte1, byte2);
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitManipulation_unit.cpp:105:14: note: FIX-IT applied suggested code changes
    uint32_t result = AlbaBitManipulation<uint32_t>::concatenateBytes(byte1, byte2, byte1, byte2);
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitManipulation_unit.cpp:117:5: warning: variable 'result' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t result = AlbaBitManipulation<uint32_t>::concatenateNibbles(byte1, byte2);
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitManipulation_unit.cpp:117:14: note: FIX-IT applied suggested code changes
    uint32_t result = AlbaBitManipulation<uint32_t>::concatenateNibbles(byte1, byte2);
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitManipulation_unit.cpp:129:5: warning: variable 'result' of type 'uint32_t' (aka 'unsigned int') can be declared 'const' [misc-const-correctness]
    uint32_t result =
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Bit\AlbaBitManipulation_unit.cpp:129:14: note: FIX-IT applied suggested code changes
    uint32_t result =
             ^
[46/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Bit/AlbaBitValueUtilities_unit.cpp.obj
[47/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Bit/Common/AlbaBitUtilitiesBuiltIn_unit.cpp.obj
[48/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Container/AlbaAny_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Memory/AlbaMemoryBuffer.hpp:39:9: warning: variable 'objectSize' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t objectSize = sizeof(object);
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Memory/AlbaMemoryBuffer.hpp:39:16: note: FIX-IT applied suggested code changes
        size_t objectSize = sizeof(object);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:10:5: warning: variable 'any' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny any;
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:10:13: note: FIX-IT applied suggested code changes
    AlbaAny any;
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:16:5: warning: variable 'originalAny' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny originalAny(1234);
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:16:13: note: FIX-IT applied suggested code changes
    AlbaAny originalAny(1234);
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:19:5: warning: variable 'copiedAny' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny copiedAny(originalAny);
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:19:13: note: FIX-IT applied suggested code changes
    AlbaAny copiedAny(originalAny);
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:26:5: warning: variable 'originalAny' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny originalAny(1234);
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:26:13: note: FIX-IT applied suggested code changes
    AlbaAny originalAny(1234);
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:29:5: warning: variable 'copiedAny' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny copiedAny = originalAny;
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:29:13: note: FIX-IT applied suggested code changes
    AlbaAny copiedAny = originalAny;
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:38:5: warning: variable 'movedAny' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny movedAny(std::move(originalAny));
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:38:13: note: FIX-IT applied suggested code changes
    AlbaAny movedAny(std::move(originalAny));
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:48:5: warning: variable 'assignedAny' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny assignedAny = std::move(originalAny);
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:48:13: note: FIX-IT applied suggested code changes
    AlbaAny assignedAny = std::move(originalAny);
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:56:5: warning: variable 'emptyAny' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny emptyAny;
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:56:13: note: FIX-IT applied suggested code changes
    AlbaAny emptyAny;
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:57:5: warning: variable 'nonEmptyAny' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny nonEmptyAny(1234);
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:57:13: note: FIX-IT applied suggested code changes
    AlbaAny nonEmptyAny(1234);
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:64:5: warning: variable 'emptyAny' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny emptyAny;
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:64:13: note: FIX-IT applied suggested code changes
    AlbaAny emptyAny;
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:65:5: warning: variable 'nonEmptyAny' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny nonEmptyAny(1234);
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:65:13: note: FIX-IT applied suggested code changes
    AlbaAny nonEmptyAny(1234);
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:72:5: warning: variable 'any' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny any(1234);
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:72:13: note: FIX-IT applied suggested code changes
    AlbaAny any(1234);
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:104:5: warning: variable 'any' of type 'AlbaAny' can be declared 'const' [misc-const-correctness]
    AlbaAny any(1234);
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaAny_unit.cpp:104:13: note: FIX-IT applied suggested code changes
    AlbaAny any(1234);
            ^
[49/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Container/AlbaConfigurationHolder_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaConfigurationHolder_unit.cpp:26:5: warning: variable 'configurationHolder1' of type 'SampleConfigurationHolder' (aka 'AlbaConfigurationHolder<SampleConfigurationDetails>') can be declared 'const' [misc-const-correctness]
    SampleConfigurationHolder configurationHolder1;
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaConfigurationHolder_unit.cpp:26:31: note: FIX-IT applied suggested code changes
    SampleConfigurationHolder configurationHolder1;
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaConfigurationHolder_unit.cpp:27:5: warning: variable 'configurationHolder2' of type 'SampleConfigurationHolder' (aka 'AlbaConfigurationHolder<SampleConfigurationDetails>') can be declared 'const' [misc-const-correctness]
    SampleConfigurationHolder configurationHolder2(SampleConfigurationDetails{75842});
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaConfigurationHolder_unit.cpp:27:31: note: FIX-IT applied suggested code changes
    SampleConfigurationHolder configurationHolder2(SampleConfigurationDetails{75842});
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaConfigurationHolder_unit.cpp:61:9: warning: variable 'scopeObject' of type 'SampleConfigurationScopeObject' (aka 'AlbaConfigurationScopeObject<SampleConfigurationDetails>') can be declared 'const' [misc-const-correctness]
        SampleConfigurationScopeObject scopeObject;
        ^
                                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaConfigurationHolder_unit.cpp:61:40: note: FIX-IT applied suggested code changes
        SampleConfigurationScopeObject scopeObject;
                                       ^
[50/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Container/AlbaContainerHelper_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:182:5: warning: variable 'delimeter' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    std::string delimeter(getDelimeterBasedOnFormat(streamFormat));
    ^
                const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:182:17: note: FIX-IT applied suggested code changes
    std::string delimeter(getDelimeterBasedOnFormat(streamFormat));
                ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:183:5: warning: variable 'outputIterator' of type 'std::ostream_iterator<int>' can be declared 'const' [misc-const-correctness]
    std::ostream_iterator<ValueType> outputIterator(outputStream, delimeter.c_str());
    ^
                                     const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:183:38: note: FIX-IT applied suggested code changes
    std::ostream_iterator<ValueType> outputIterator(outputStream, delimeter.c_str());
                                     ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:191:5: warning: variable 'delimeter' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    std::string delimeter(getDelimeterBasedOnFormat(streamFormat));
    ^
                const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:191:17: note: FIX-IT applied suggested code changes
    std::string delimeter(getDelimeterBasedOnFormat(streamFormat));
                ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:192:5: warning: variable 'outputIterator' of type 'std::ostream_iterator<int>' can be declared 'const' [misc-const-correctness]
    std::ostream_iterator<ValueType> outputIterator(outputStream, delimeter.c_str());
    ^
                                     const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:192:38: note: FIX-IT applied suggested code changes
    std::ostream_iterator<ValueType> outputIterator(outputStream, delimeter.c_str());
                                     ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:203:5: warning: variable 'delimeter' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    std::string delimeter(getDelimeterBasedOnFormat(streamFormat));
    ^
                const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:203:17: note: FIX-IT applied suggested code changes
    std::string delimeter(getDelimeterBasedOnFormat(streamFormat));
                ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:204:5: warning: variable 'outputIterator' of type 'std::ostream_iterator<int>' can be declared 'const' [misc-const-correctness]
    std::ostream_iterator<ValueType> outputIterator(outputStream, delimeter.c_str());
    ^
                                     const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:204:38: note: FIX-IT applied suggested code changes
    std::ostream_iterator<ValueType> outputIterator(outputStream, delimeter.c_str());
                                     ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:215:5: warning: variable 'delimeter' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    std::string delimeter(getDelimeterBasedOnFormat(streamFormat));
    ^
                const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:215:17: note: FIX-IT applied suggested code changes
    std::string delimeter(getDelimeterBasedOnFormat(streamFormat));
                ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:247:5: warning: variable 'inputIterator' of type 'std::istream_iterator<int>' can be declared 'const' [misc-const-correctness]
    std::istream_iterator<ValueType> inputIterator(inputStream);
    ^
                                     const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:247:38: note: FIX-IT applied suggested code changes
    std::istream_iterator<ValueType> inputIterator(inputStream);
                                     ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:248:5: warning: variable 'inputIteratorEnd' of type 'std::istream_iterator<int>' can be declared 'const' [misc-const-correctness]
    std::istream_iterator<ValueType> inputIteratorEnd;
    ^
                                     const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:248:38: note: FIX-IT applied suggested code changes
    std::istream_iterator<ValueType> inputIteratorEnd;
                                     ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:255:5: warning: variable 'inputIterator' of type 'std::istream_iterator<int>' can be declared 'const' [misc-const-correctness]
    std::istream_iterator<ValueType> inputIterator(inputStream);
    ^
                                     const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:255:38: note: FIX-IT applied suggested code changes
    std::istream_iterator<ValueType> inputIterator(inputStream);
                                     ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:256:5: warning: variable 'inputIteratorEnd' of type 'std::istream_iterator<int>' can be declared 'const' [misc-const-correctness]
    std::istream_iterator<ValueType> inputIteratorEnd;
    ^
                                     const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:256:38: note: FIX-IT applied suggested code changes
    std::istream_iterator<ValueType> inputIteratorEnd;
                                     ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:266:5: warning: variable 'inputIterator' of type 'std::istream_iterator<int>' can be declared 'const' [misc-const-correctness]
    std::istream_iterator<ValueType> inputIterator(inputStream);
    ^
                                     const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:266:38: note: FIX-IT applied suggested code changes
    std::istream_iterator<ValueType> inputIterator(inputStream);
                                     ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:267:5: warning: variable 'inputIteratorEnd' of type 'std::istream_iterator<int>' can be declared 'const' [misc-const-correctness]
    std::istream_iterator<ValueType> inputIteratorEnd;
    ^
                                     const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaContainerHelper.hpp:267:38: note: FIX-IT applied suggested code changes
    std::istream_iterator<ValueType> inputIteratorEnd;
                                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:29:5: warning: variable 'sortedVector' of type 'vector<int>' can be declared 'const' [misc-const-correctness]
    vector<int> sortedVector{-10, -5, 1, 2, 4, 5, 23, 50};
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:29:17: note: FIX-IT applied suggested code changes
    vector<int> sortedVector{-10, -5, 1, 2, 4, 5, 23, 50};
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:38:5: warning: variable 'sortedVector' of type 'vector<int>' can be declared 'const' [misc-const-correctness]
    vector<int> sortedVector{-10, -5, 1, 2, 4, 5, 23, 50};
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:38:17: note: FIX-IT applied suggested code changes
    vector<int> sortedVector{-10, -5, 1, 2, 4, 5, 23, 50};
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:49:5: warning: variable 'sortedVector' of type 'vector<char>' can be declared 'const' [misc-const-correctness]
    vector<char> sortedVector{'A', 'C', 'E', 'H', 'M', 'R', 'S', 'X'};
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:49:18: note: FIX-IT applied suggested code changes
    vector<char> sortedVector{'A', 'C', 'E', 'H', 'M', 'R', 'S', 'X'};
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:57:5: warning: variable 'sortedVector' of type 'vector<char>' can be declared 'const' [misc-const-correctness]
    vector<char> sortedVector{'A', 'C', 'E', 'H', 'M', 'R', 'S', 'X'};
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:57:18: note: FIX-IT applied suggested code changes
    vector<char> sortedVector{'A', 'C', 'E', 'H', 'M', 'R', 'S', 'X'};
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:59:5: warning: variable 'expectedVector1' of type 'vector<char>' can be declared 'const' [misc-const-correctness]
    vector<char> expectedVector1{'E', 'H', 'M', 'R', 'S'};
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:59:18: note: FIX-IT applied suggested code changes
    vector<char> expectedVector1{'E', 'H', 'M', 'R', 'S'};
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:60:5: warning: variable 'expectedVector2' of type 'vector<char>' can be declared 'const' [misc-const-correctness]
    vector<char> expectedVector2{'E', 'H', 'M', 'R', 'S'};
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:60:18: note: FIX-IT applied suggested code changes
    vector<char> expectedVector2{'E', 'H', 'M', 'R', 'S'};
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:61:5: warning: variable 'expectedVector3' of type 'vector<char>' can be declared 'const' [misc-const-correctness]
    vector<char> expectedVector3{'H', 'M', 'R', 'S'};
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:61:18: note: FIX-IT applied suggested code changes
    vector<char> expectedVector3{'H', 'M', 'R', 'S'};
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:68:5: warning: variable 'sampleSet' of type 'set<int>' can be declared 'const' [misc-const-correctness]
    set<int> sampleSet{-10, -5, 1, 2, 4, 5, 23, 50};
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:68:14: note: FIX-IT applied suggested code changes
    set<int> sampleSet{-10, -5, 1, 2, 4, 5, 23, 50};
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:77:5: warning: variable 'sampleSet' of type 'set<int>' can be declared 'const' [misc-const-correctness]
    set<int> sampleSet{-10, -5, 1, 2, 4, 5, 23, 50};
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:77:14: note: FIX-IT applied suggested code changes
    set<int> sampleSet{-10, -5, 1, 2, 4, 5, 23, 50};
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:88:5: warning: variable 'sampleSet' of type 'set<char>' can be declared 'const' [misc-const-correctness]
    set<char> sampleSet{'A', 'C', 'E', 'H', 'M', 'R', 'S', 'X'};
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:88:15: note: FIX-IT applied suggested code changes
    set<char> sampleSet{'A', 'C', 'E', 'H', 'M', 'R', 'S', 'X'};
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:96:5: warning: variable 'sampleSet' of type 'set<char>' can be declared 'const' [misc-const-correctness]
    set<char> sampleSet{'A', 'C', 'E', 'H', 'M', 'R', 'S', 'X'};
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:96:15: note: FIX-IT applied suggested code changes
    set<char> sampleSet{'A', 'C', 'E', 'H', 'M', 'R', 'S', 'X'};
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:98:5: warning: variable 'expectedSet1' of type 'set<char>' can be declared 'const' [misc-const-correctness]
    set<char> expectedSet1{'E', 'H', 'M', 'R', 'S'};
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:98:15: note: FIX-IT applied suggested code changes
    set<char> expectedSet1{'E', 'H', 'M', 'R', 'S'};
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:99:5: warning: variable 'expectedSet2' of type 'set<char>' can be declared 'const' [misc-const-correctness]
    set<char> expectedSet2{'E', 'H', 'M', 'R', 'S'};
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:99:15: note: FIX-IT applied suggested code changes
    set<char> expectedSet2{'E', 'H', 'M', 'R', 'S'};
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:100:5: warning: variable 'expectedSet3' of type 'set<char>' can be declared 'const' [misc-const-correctness]
    set<char> expectedSet3{'H', 'M', 'R', 'S'};
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:100:15: note: FIX-IT applied suggested code changes
    set<char> expectedSet3{'H', 'M', 'R', 'S'};
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:114:5: warning: variable 'iteratorsToVerify1' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify1(getLowerAndUpperConstIteratorsInMap(sampleMap, 0));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:114:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify1(getLowerAndUpperConstIteratorsInMap(sampleMap, 0));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:117:5: warning: variable 'iteratorsToVerify2' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify2(getLowerAndUpperConstIteratorsInMap(sampleMap, 6));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:117:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify2(getLowerAndUpperConstIteratorsInMap(sampleMap, 6));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:120:5: warning: variable 'iteratorsToVerify3' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify3(getLowerAndUpperConstIteratorsInMap(sampleMap, 1));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:120:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify3(getLowerAndUpperConstIteratorsInMap(sampleMap, 1));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:123:5: warning: variable 'iteratorsToVerify4' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify4(getLowerAndUpperConstIteratorsInMap(sampleMap, 5));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:123:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify4(getLowerAndUpperConstIteratorsInMap(sampleMap, 5));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:126:5: warning: variable 'iteratorsToVerify5' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify5(getLowerAndUpperConstIteratorsInMap(sampleMap, 4));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:126:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify5(getLowerAndUpperConstIteratorsInMap(sampleMap, 4));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:129:5: warning: variable 'iteratorsToVerify6' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify6(getLowerAndUpperConstIteratorsInMap(sampleMap, 3));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:129:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify6(getLowerAndUpperConstIteratorsInMap(sampleMap, 3));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:142:5: warning: variable 'iteratorsToVerify1' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify1(getLowerAndUpperIteratorsInMap(sampleMap, 0));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:142:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify1(getLowerAndUpperIteratorsInMap(sampleMap, 0));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:145:5: warning: variable 'iteratorsToVerify2' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify2(getLowerAndUpperIteratorsInMap(sampleMap, 6));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:145:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify2(getLowerAndUpperIteratorsInMap(sampleMap, 6));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:148:5: warning: variable 'iteratorsToVerify3' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify3(getLowerAndUpperIteratorsInMap(sampleMap, 1));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:148:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify3(getLowerAndUpperIteratorsInMap(sampleMap, 1));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:151:5: warning: variable 'iteratorsToVerify4' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify4(getLowerAndUpperIteratorsInMap(sampleMap, 5));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:151:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify4(getLowerAndUpperIteratorsInMap(sampleMap, 5));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:154:5: warning: variable 'iteratorsToVerify5' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify5(getLowerAndUpperIteratorsInMap(sampleMap, 4));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:154:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify5(getLowerAndUpperIteratorsInMap(sampleMap, 4));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:157:5: warning: variable 'iteratorsToVerify6' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify6(getLowerAndUpperIteratorsInMap(sampleMap, 3));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:157:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify6(getLowerAndUpperIteratorsInMap(sampleMap, 3));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:178:5: warning: variable 'iteratorsToVerify1' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify1(getLowerAndUpperConstIteratorsInMap(sampleMap, 0));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:178:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify1(getLowerAndUpperConstIteratorsInMap(sampleMap, 0));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:181:5: warning: variable 'iteratorsToVerify2' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify2(getLowerAndUpperConstIteratorsInMap(sampleMap, 6));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:181:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify2(getLowerAndUpperConstIteratorsInMap(sampleMap, 6));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:184:5: warning: variable 'iteratorsToVerify3' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify3(getLowerAndUpperConstIteratorsInMap(sampleMap, 1));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:184:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify3(getLowerAndUpperConstIteratorsInMap(sampleMap, 1));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:187:5: warning: variable 'iteratorsToVerify4' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify4(getLowerAndUpperConstIteratorsInMap(sampleMap, 5));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:187:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify4(getLowerAndUpperConstIteratorsInMap(sampleMap, 5));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:190:5: warning: variable 'iteratorsToVerify5' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify5(getLowerAndUpperConstIteratorsInMap(sampleMap, 4));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:190:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify5(getLowerAndUpperConstIteratorsInMap(sampleMap, 4));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:193:5: warning: variable 'iteratorsToVerify6' of type 'PairOfIterators' (aka 'pair<_Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, _Tree_const_iterator<_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify6(getLowerAndUpperConstIteratorsInMap(sampleMap, 3));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:193:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify6(getLowerAndUpperConstIteratorsInMap(sampleMap, 3));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:214:5: warning: variable 'iteratorsToVerify1' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify1(getLowerAndUpperIteratorsInMap(sampleMap, 0));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:214:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify1(getLowerAndUpperIteratorsInMap(sampleMap, 0));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:217:5: warning: variable 'iteratorsToVerify2' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify2(getLowerAndUpperIteratorsInMap(sampleMap, 6));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:217:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify2(getLowerAndUpperIteratorsInMap(sampleMap, 6));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:220:5: warning: variable 'iteratorsToVerify3' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify3(getLowerAndUpperIteratorsInMap(sampleMap, 1));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:220:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify3(getLowerAndUpperIteratorsInMap(sampleMap, 1));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:223:5: warning: variable 'iteratorsToVerify4' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify4(getLowerAndUpperIteratorsInMap(sampleMap, 5));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:223:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify4(getLowerAndUpperIteratorsInMap(sampleMap, 5));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:226:5: warning: variable 'iteratorsToVerify5' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify5(getLowerAndUpperIteratorsInMap(sampleMap, 4));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:226:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify5(getLowerAndUpperIteratorsInMap(sampleMap, 4));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:229:5: warning: variable 'iteratorsToVerify6' of type 'PairOfIterators' (aka 'pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>, std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<const int, int>>>>>') can be declared 'const' [misc-const-correctness]
    PairOfIterators iteratorsToVerify6(getLowerAndUpperIteratorsInMap(sampleMap, 3));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:229:21: note: FIX-IT applied suggested code changes
    PairOfIterators iteratorsToVerify6(getLowerAndUpperIteratorsInMap(sampleMap, 3));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:236:5: warning: variable 'adapter' of type 'Adapter' (aka 'stack<int>') can be declared 'const' [misc-const-correctness]
    Adapter adapter({1, 2, 3});
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:236:13: note: FIX-IT applied suggested code changes
    Adapter adapter({1, 2, 3});
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:240:5: warning: variable 'containerToExpect' of type 'Adapter::container_type' (aka 'std::deque<int>') can be declared 'const' [misc-const-correctness]
    Adapter::container_type containerToExpect{1, 2, 3};
    ^
                            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:240:29: note: FIX-IT applied suggested code changes
    Adapter::container_type containerToExpect{1, 2, 3};
                            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:264:5: warning: variable 'temporaryArray' of type 'array<int, 4>' can be declared 'const' [misc-const-correctness]
    array<int, 4> temporaryArray{23, -345, 5324, 1};
    ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:264:19: note: FIX-IT applied suggested code changes
    array<int, 4> temporaryArray{23, -345, 5324, 1};
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:269:5: warning: variable 'temporaryVector' of type 'vector<int>' can be declared 'const' [misc-const-correctness]
    vector<int> temporaryVector{23, -345, 5324, 1};
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:269:17: note: FIX-IT applied suggested code changes
    vector<int> temporaryVector{23, -345, 5324, 1};
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:274:5: warning: variable 'temporarySet' of type 'set<int>' can be declared 'const' [misc-const-correctness]
    set<int> temporarySet{23, -345, 5324, 1};
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:274:14: note: FIX-IT applied suggested code changes
    set<int> temporarySet{23, -345, 5324, 1};
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:287:5: warning: variable 'temporaryVector' of type 'vector<int>' can be declared 'const' [misc-const-correctness]
    vector<int> temporaryVector{23, -345, 5324, 1};
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:287:17: note: FIX-IT applied suggested code changes
    vector<int> temporaryVector{23, -345, 5324, 1};
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:294:5: warning: variable 'temporaryArray' of type 'array<int, 6>' can be declared 'const' [misc-const-correctness]
    array<int, 6> temporaryArray{0, -23, 4, 379, -482, 37};
    ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:294:19: note: FIX-IT applied suggested code changes
    array<int, 6> temporaryArray{0, -23, 4, 379, -482, 37};
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:316:5: warning: variable 'temporaryVector' of type 'vector<int>' can be declared 'const' [misc-const-correctness]
    vector<int> temporaryVector{0, -23, 4, 379, -482, 37};
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:316:17: note: FIX-IT applied suggested code changes
    vector<int> temporaryVector{0, -23, 4, 379, -482, 37};
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:338:5: warning: variable 'temporarySet' of type 'set<int>' can be declared 'const' [misc-const-correctness]
    set<int> temporarySet{0, -23, 4, 379, -482, 37};
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaContainerHelper_unit.cpp:338:14: note: FIX-IT applied suggested code changes
    set<int> temporarySet{0, -23, 4, 379, -482, 37};
             ^
[51/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Container/AlbaFakeCopyable_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaFakeCopyable_unit.cpp:23:5: warning: variable 'example1' of type 'AlbaFakeCopyableForTest' (aka 'AlbaFakeCopyable<FakeCopyableExample>') can be declared 'const' [misc-const-correctness]
    AlbaFakeCopyableForTest example1(FakeCopyableExample(176));
    ^
                            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaFakeCopyable_unit.cpp:23:29: note: FIX-IT applied suggested code changes
    AlbaFakeCopyableForTest example1(FakeCopyableExample(176));
                            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaFakeCopyable_unit.cpp:28:5: warning: variable 'example2' of type 'AlbaFakeCopyableForTest' (aka 'AlbaFakeCopyable<FakeCopyableExample>') can be declared 'const' [misc-const-correctness]
    AlbaFakeCopyableForTest example2(example1);
    ^
                            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaFakeCopyable_unit.cpp:28:29: note: FIX-IT applied suggested code changes
    AlbaFakeCopyableForTest example2(example1);
                            ^
[52/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Container/AlbaOptional_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:11:5: warning: variable 'integerOptional1' of type 'AlbaOptional<int>' can be declared 'const' [misc-const-correctness]
    AlbaOptional<int> integerOptional1(1111);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:11:23: note: FIX-IT applied suggested code changes
    AlbaOptional<int> integerOptional1(1111);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:48:5: warning: variable 'newValue1' of type 'int' can be declared 'const' [misc-const-correctness]
    int newValue1(2222);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:48:9: note: FIX-IT applied suggested code changes
    int newValue1(2222);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:57:5: warning: variable 'newValue2' of type 'int' can be declared 'const' [misc-const-correctness]
    int newValue2(222222);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:57:9: note: FIX-IT applied suggested code changes
    int newValue2(222222);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:138:5: warning: variable 'integerOptional1' of type 'AlbaOptional<int>' can be declared 'const' [misc-const-correctness]
    AlbaOptional<int> integerOptional1(1111);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:138:23: note: FIX-IT applied suggested code changes
    AlbaOptional<int> integerOptional1(1111);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:152:5: warning: variable 'integerOptional2' of type 'AlbaOptional<int &>' can be declared 'const' [misc-const-correctness]
    AlbaOptional<int&> integerOptional2(integerOptional1.getReference());
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:152:24: note: FIX-IT applied suggested code changes
    AlbaOptional<int&> integerOptional2(integerOptional1.getReference());
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:169:5: warning: variable 'integerOptional1' of type 'AlbaOptional<int>' can be declared 'const' [misc-const-correctness]
    AlbaOptional<int> integerOptional1(1111);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:169:23: note: FIX-IT applied suggested code changes
    AlbaOptional<int> integerOptional1(1111);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:198:5: warning: variable 'integerOptional2' of type 'AlbaOptional<int &>' can be declared 'const' [misc-const-correctness]
    AlbaOptional<int&> integerOptional2(integerOptional1.getReference());
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:198:24: note: FIX-IT applied suggested code changes
    AlbaOptional<int&> integerOptional2(integerOptional1.getReference());
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:253:5: warning: variable 'integerOptional2' of type 'AlbaOptional<int>' can be declared 'const' [misc-const-correctness]
    AlbaOptional<int> integerOptional2(std::move(integerOptional1));
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:253:23: note: FIX-IT applied suggested code changes
    AlbaOptional<int> integerOptional2(std::move(integerOptional1));
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:264:5: warning: variable 'integerOptional' of type 'AlbaOptional<int>' can be declared 'const' [misc-const-correctness]
    AlbaOptional<int> integerOptional(1111);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaOptional_unit.cpp:264:23: note: FIX-IT applied suggested code changes
    AlbaOptional<int> integerOptional(1111);
                      ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/tst/CommonTests/Container/AlbaOptional_unit.cpp:188:22: warning: explicitly assigning value of variable of type 'AlbaOptional<int>' to itself [-Wself-assign-overloaded]
    integerOptional1 = integerOptional1;
    ~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~
1 warning generated.
[53/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Container/AlbaSingleton_unit.cpp.obj
[54/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Container/AlbaUniqueVariant_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaUniqueVariant_unit.cpp:96:5: warning: variable 'baseRef' of type 'Base &' can be declared 'const' [misc-const-correctness]
    Base& baseRef = variant.acquire<Derived>();
    ^
         const
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaUniqueVariant_unit.cpp:96:9: note: FIX-IT applied suggested code changes
    Base& baseRef = variant.acquire<Derived>();
        ^
[55/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Container/AlbaValueRange_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaValueRange.hpp:63:17: warning: variable 'terminationCondition' of type 'TerminationCondition' (aka 'function<bool (int, int)>') can be declared 'const' [misc-const-correctness]
                TerminationCondition terminationCondition(getTerminationCondition());
                ^
                                     const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Container/AlbaValueRange.hpp:63:38: note: FIX-IT applied suggested code changes
                TerminationCondition terminationCondition(getTerminationCondition());
                                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaValueRange_unit.cpp:12:5: warning: variable 'range' of type 'AlbaValueRange<int>' can be declared 'const' [misc-const-correctness]
    AlbaValueRange<int> range;
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaValueRange_unit.cpp:12:25: note: FIX-IT applied suggested code changes
    AlbaValueRange<int> range;
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaValueRange_unit.cpp:31:5: warning: variable 'range' of type 'AlbaValueRange<int>' can be declared 'const' [misc-const-correctness]
    AlbaValueRange<int> range(3, 3, -1);
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaValueRange_unit.cpp:31:25: note: FIX-IT applied suggested code changes
    AlbaValueRange<int> range(3, 3, -1);
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaValueRange_unit.cpp:52:5: warning: variable 'range' of type 'AlbaValueRange<int>' can be declared 'const' [misc-const-correctness]
    AlbaValueRange<int> range(1, 10, -1);
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaValueRange_unit.cpp:52:25: note: FIX-IT applied suggested code changes
    AlbaValueRange<int> range(1, 10, -1);
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaValueRange_unit.cpp:82:5: warning: variable 'range' of type 'AlbaValueRange<int>' can be declared 'const' [misc-const-correctness]
    AlbaValueRange<int> range(5, -5, -1);
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaValueRange_unit.cpp:82:25: note: FIX-IT applied suggested code changes
    AlbaValueRange<int> range(5, -5, -1);
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaValueRange_unit.cpp:146:5: warning: variable 'range' of type 'AlbaValueRange<int>' can be declared 'const' [misc-const-correctness]
    AlbaValueRange<int> range(0, 10, 1);
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaValueRange_unit.cpp:146:25: note: FIX-IT applied suggested code changes
    AlbaValueRange<int> range(0, 10, 1);
                        ^
[56/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Container/AlbaXYZ_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:14:5: warning: variable 'xyz' of type 'IntXYZ' (aka 'AlbaXYZ<int>') can be declared 'const' [misc-const-correctness]
    IntXYZ xyz;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:14:12: note: FIX-IT applied suggested code changes
    IntXYZ xyz;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:22:5: warning: variable 'xyz' of type 'IntXYZ' (aka 'AlbaXYZ<int>') can be declared 'const' [misc-const-correctness]
    IntXYZ xyz(-5, 5, 10);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:22:12: note: FIX-IT applied suggested code changes
    IntXYZ xyz(-5, 5, 10);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:30:5: warning: variable 'xyz' of type 'IntXYZ' (aka 'AlbaXYZ<int>') can be declared 'const' [misc-const-correctness]
    IntXYZ xyz(-5, 5, 10);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:30:12: note: FIX-IT applied suggested code changes
    IntXYZ xyz(-5, 5, 10);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:40:5: warning: variable 'xyz' of type 'IntXYZ' (aka 'AlbaXYZ<int>') can be declared 'const' [misc-const-correctness]
    IntXYZ xyz(-5, 5, 10);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:40:12: note: FIX-IT applied suggested code changes
    IntXYZ xyz(-5, 5, 10);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:50:5: warning: variable 'xyz' of type 'IntXYZ' (aka 'AlbaXYZ<int>') can be declared 'const' [misc-const-correctness]
    IntXYZ xyz(-5, 5, 10);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:50:12: note: FIX-IT applied suggested code changes
    IntXYZ xyz(-5, 5, 10);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:90:5: warning: variable 'xyz' of type 'IntXYZ' (aka 'AlbaXYZ<int>') can be declared 'const' [misc-const-correctness]
    IntXYZ xyz(-5, 5, 10);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:90:12: note: FIX-IT applied suggested code changes
    IntXYZ xyz(-5, 5, 10);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:96:5: warning: variable 'xyz' of type 'IntXYZ' (aka 'AlbaXYZ<int>') can be declared 'const' [misc-const-correctness]
    IntXYZ xyz(-5, 5, 10);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:96:12: note: FIX-IT applied suggested code changes
    IntXYZ xyz(-5, 5, 10);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:102:5: warning: variable 'xyz' of type 'IntXYZ' (aka 'AlbaXYZ<int>') can be declared 'const' [misc-const-correctness]
    IntXYZ xyz(-5, 5, 10);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:102:12: note: FIX-IT applied suggested code changes
    IntXYZ xyz(-5, 5, 10);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:108:5: warning: variable 'xyz' of type 'IntXYZ' (aka 'AlbaXYZ<int>') can be declared 'const' [misc-const-correctness]
    IntXYZ xyz(-5, 5, 10);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:108:12: note: FIX-IT applied suggested code changes
    IntXYZ xyz(-5, 5, 10);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:169:5: warning: variable 'xyz' of type 'IntXYZ' (aka 'AlbaXYZ<int>') can be declared 'const' [misc-const-correctness]
    IntXYZ xyz(-5, 5, 10);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXYZ_unit.cpp:169:12: note: FIX-IT applied suggested code changes
    IntXYZ xyz(-5, 5, 10);
           ^
[57/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Container/AlbaXY_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:14:5: warning: variable 'xyValues' of type 'IntXY' (aka 'AlbaXY<int>') can be declared 'const' [misc-const-correctness]
    IntXY xyValues;
    ^
          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:14:11: note: FIX-IT applied suggested code changes
    IntXY xyValues;
          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:20:5: warning: variable 'xyValues' of type 'IntXY' (aka 'AlbaXY<int>') can be declared 'const' [misc-const-correctness]
    IntXY xyValues(-5, 5);
    ^
          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:20:11: note: FIX-IT applied suggested code changes
    IntXY xyValues(-5, 5);
          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:26:5: warning: variable 'xyValues' of type 'IntXY' (aka 'AlbaXY<int>') can be declared 'const' [misc-const-correctness]
    IntXY xyValues(-5, 5);
    ^
          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:26:11: note: FIX-IT applied suggested code changes
    IntXY xyValues(-5, 5);
          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:35:5: warning: variable 'xyValues' of type 'IntXY' (aka 'AlbaXY<int>') can be declared 'const' [misc-const-correctness]
    IntXY xyValues(-5, 5);
    ^
          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:35:11: note: FIX-IT applied suggested code changes
    IntXY xyValues(-5, 5);
          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:44:5: warning: variable 'xyValues' of type 'IntXY' (aka 'AlbaXY<int>') can be declared 'const' [misc-const-correctness]
    IntXY xyValues(-5, 5);
    ^
          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:44:11: note: FIX-IT applied suggested code changes
    IntXY xyValues(-5, 5);
          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:82:5: warning: variable 'xyValues' of type 'IntXY' (aka 'AlbaXY<int>') can be declared 'const' [misc-const-correctness]
    IntXY xyValues(-5, 5);
    ^
          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:82:11: note: FIX-IT applied suggested code changes
    IntXY xyValues(-5, 5);
          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:88:5: warning: variable 'xyValues' of type 'IntXY' (aka 'AlbaXY<int>') can be declared 'const' [misc-const-correctness]
    IntXY xyValues(-5, 5);
    ^
          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:88:11: note: FIX-IT applied suggested code changes
    IntXY xyValues(-5, 5);
          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:94:5: warning: variable 'xyValues' of type 'IntXY' (aka 'AlbaXY<int>') can be declared 'const' [misc-const-correctness]
    IntXY xyValues(-5, 5);
    ^
          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:94:11: note: FIX-IT applied suggested code changes
    IntXY xyValues(-5, 5);
          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:147:5: warning: variable 'xyValues' of type 'IntXY' (aka 'AlbaXY<int>') can be declared 'const' [misc-const-correctness]
    IntXY xyValues(-5, 5);
    ^
          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Container\AlbaXY_unit.cpp:147:11: note: FIX-IT applied suggested code changes
    IntXY xyValues(-5, 5);
          ^
[58/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Debug/AlbaDebug_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Debug/AlbaDebug.hpp:13:2: warning: ("The class AlbaDebug is used. Please remove after your done debugging.") // GCC extension [clang-diagnostic-#warnings]
#warning("The class AlbaDebug is used. Please remove after your done debugging.") // GCC extension
 ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Debug/AlbaDebug.hpp:13:2: warning: #warning is a C++2b extension [clang-diagnostic-pedantic]
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:38:5: warning: variable 'singleParameter1' of type 'int' can be declared 'const' [misc-const-correctness]
    int singleParameter1 = 12;
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:38:9: note: FIX-IT applied suggested code changes
    int singleParameter1 = 12;
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:39:5: warning: variable 'singleParameter2' of type 'int' can be declared 'const' [misc-const-correctness]
    int singleParameter2 = 345;
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:39:9: note: FIX-IT applied suggested code changes
    int singleParameter2 = 345;
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:40:5: warning: variable 'singleParameter3' of type 'int' can be declared 'const' [misc-const-correctness]
    int singleParameter3 = 6789;
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:40:9: note: FIX-IT applied suggested code changes
    int singleParameter3 = 6789;
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:47:5: warning: variable 'actualPrintString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string actualPrintString(s_debugStringStream.str());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:47:12: note: FIX-IT applied suggested code changes
    string actualPrintString(s_debugStringStream.str());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:80:5: warning: variable 'object' of type 'SampleClass' can be declared 'const' [misc-const-correctness]
    SampleClass object(1234, 7777);
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:80:17: note: FIX-IT applied suggested code changes
    SampleClass object(1234, 7777);
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:84:5: warning: variable 'actualPrintString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string actualPrintString(s_debugStringStream.str());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaDebug_unit.cpp:84:12: note: FIX-IT applied suggested code changes
    string actualPrintString(s_debugStringStream.str());
           ^
In file included from D:/a/aprg/aprg/AprgCommon/AprgCommon/tst/CommonTests/Debug/AlbaDebug_unit.cpp:13:
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Debug/AlbaDebug.hpp:13:2: warning: #warning is a C++2b extension [-Wpedantic]
#warning("The class AlbaDebug is used. Please remove after your done debugging.") // GCC extension
 ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Debug/AlbaDebug.hpp:13:2: warning: ("The class AlbaDebug is used. Please remove after your done debugging.") // GCC extension [-W#warnings]
2 warnings generated.
[59/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Debug/AlbaExit_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaExit_unit.cpp:12:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_EXIT(ALBA_SUCCESSFUL_EXIT, ::testing::ExitedWithCode(0), string());
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaExit_unit.cpp:15:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(ALBA_FAILURE_EXIT, string());
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaExit_unit.cpp:20:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(ALBA_ABORT, string());
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaExit_unit.cpp:23:5: warning: variable 'gtest_dt_ptr' of type 'std::unique_ptr< ::testing::internal::DeathTest>' can be declared 'const' [misc-const-correctness]
    EXPECT_DEATH(ALBA_TERMINATE, string());
    ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:190:3: note: expanded from macro 'EXPECT_DEATH'
  EXPECT_EXIT(statement, ::testing::internal::ExitedUnsuccessfully, matcher)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/gtest-death-test.h:179:3: note: expanded from macro 'EXPECT_EXIT'
  GTEST_DEATH_TEST_(statement, predicate, matcher, GTEST_NONFATAL_FAILURE_)
  ^
D:/a/aprg/aprg/gtest/gtest/googletest/include\gtest/internal/gtest-death-test-internal.h:233:7: note: expanded from macro 'GTEST_DEATH_TEST_'
      std::unique_ptr< ::testing::internal::DeathTest> gtest_dt_ptr(gtest_dt); \
      ^
[60/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Debug/AlbaFundamentalOperationsCounter_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:57:5: warning: variable 'object' of type 'SampleClass' (aka 'AlbaFundamentalOperationsCounter<original::SampleClass>') can be declared 'const' [misc-const-correctness]
    SampleClass object(1234);
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:57:17: note: FIX-IT applied suggested code changes
    SampleClass object(1234);
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:68:5: warning: variable 'object' of type 'SampleClass' (aka 'AlbaFundamentalOperationsCounter<original::SampleClass>') can be declared 'const' [misc-const-correctness]
    SampleClass object;
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:68:17: note: FIX-IT applied suggested code changes
    SampleClass object;
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:79:7: warning: variable 'object' of type 'SampleClass' (aka 'AlbaFundamentalOperationsCounter<original::SampleClass>') can be declared 'const' [misc-const-correctness]
    { SampleClass object; }
      ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:79:19: note: FIX-IT applied suggested code changes
    { SampleClass object; }
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:88:5: warning: variable 'originalObject' of type 'SampleClass' (aka 'AlbaFundamentalOperationsCounter<original::SampleClass>') can be declared 'const' [misc-const-correctness]
    SampleClass originalObject(1234);
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:88:17: note: FIX-IT applied suggested code changes
    SampleClass originalObject(1234);
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:91:5: warning: variable 'object' of type 'SampleClass' (aka 'AlbaFundamentalOperationsCounter<original::SampleClass>') can be declared 'const' [misc-const-correctness]
    SampleClass object(originalObject);
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:91:17: note: FIX-IT applied suggested code changes
    SampleClass object(originalObject);
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:100:5: warning: variable 'originalObject' of type 'SampleClass' (aka 'AlbaFundamentalOperationsCounter<original::SampleClass>') can be declared 'const' [misc-const-correctness]
    SampleClass originalObject(1234);
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:100:17: note: FIX-IT applied suggested code changes
    SampleClass originalObject(1234);
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:115:5: warning: variable 'object' of type 'SampleClass' (aka 'AlbaFundamentalOperationsCounter<original::SampleClass>') can be declared 'const' [misc-const-correctness]
    SampleClass object(getRValue());
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:115:17: note: FIX-IT applied suggested code changes
    SampleClass object(getRValue());
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:124:5: warning: variable 'originalObject' of type 'SampleClass' (aka 'AlbaFundamentalOperationsCounter<original::SampleClass>') can be declared 'const' [misc-const-correctness]
    SampleClass originalObject(1234);
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:124:17: note: FIX-IT applied suggested code changes
    SampleClass originalObject(1234);
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:139:5: warning: variable 'object' of type 'SampleClass' (aka 'AlbaFundamentalOperationsCounter<original::SampleClass>') can be declared 'const' [misc-const-correctness]
    SampleClass object(getRValue());
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Debug\AlbaFundamentalOperationsCounter_unit.cpp:139:17: note: FIX-IT applied suggested code changes
    SampleClass object(getRValue());
                ^
[61/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Debug/AlbaTypeDisplayerInCompilation_unit.cpp.obj
[62/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/File/AlbaFileReader_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\File\AlbaFileReader_unit.cpp:46:5: warning: variable 'fileReader1' of type 'AlbaFileReader' can be declared 'const' [misc-const-correctness]
    AlbaFileReader fileReader1(testFileReadStream);
    ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\File\AlbaFileReader_unit.cpp:46:20: note: FIX-IT applied suggested code changes
    AlbaFileReader fileReader1(testFileReadStream);
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\File\AlbaFileReader_unit.cpp:48:5: warning: variable 'fileReader2' of type 'AlbaFileReader' can be declared 'const' [misc-const-correctness]
    AlbaFileReader fileReader2(testFileReadStream, 200);
    ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\File\AlbaFileReader_unit.cpp:48:20: note: FIX-IT applied suggested code changes
    AlbaFileReader fileReader2(testFileReadStream, 200);
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\File\AlbaFileReader_unit.cpp:144:5: warning: variable 'commonSizeTestFileToRead' of type 'AlbaLocalPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaLocalPathHandler commonSizeTestFileToRead(ALBA_COMMON_SIZE_TEST_FILE);
    ^
                         const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\File\AlbaFileReader_unit.cpp:144:26: note: FIX-IT applied suggested code changes
    AlbaLocalPathHandler commonSizeTestFileToRead(ALBA_COMMON_SIZE_TEST_FILE);
                         ^
[63/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Macros/AlbaMacrosForEach_unit.cpp.obj
[64/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Macros/AlbaMacros_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:25:5: warning: variable 'actualPrettyFunction' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string actualPrettyFunction(static_cast<const char*>(ALBA_MACROS_GET_PRETTY_FUNCTION));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:25:12: note: FIX-IT applied suggested code changes
    string actualPrettyFunction(static_cast<const char*>(ALBA_MACROS_GET_PRETTY_FUNCTION));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:40:9: warning: ALBA_MACROS_TEST_SAMPLE_MACRO1=10000 [clang-diagnostic-#pragma-messages]
#pragma message(ALBA_MACROS_PARAMETER_FOR_PRAGMA_MESSAGE(ALBA_MACROS_TEST_SAMPLE_MACRO1))
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:63:5: warning: variable 'enumValue1' of type 'SampleEnumClass' can be declared 'const' [misc-const-correctness]
    SampleEnumClass enumValue1 = SampleEnumClass::Type1;
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:63:21: note: FIX-IT applied suggested code changes
    SampleEnumClass enumValue1 = SampleEnumClass::Type1;
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:64:5: warning: variable 'enumValue2' of type 'SampleEnumClass' can be declared 'const' [misc-const-correctness]
    SampleEnumClass enumValue2 = SampleEnumClass::Type2;
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:64:21: note: FIX-IT applied suggested code changes
    SampleEnumClass enumValue2 = SampleEnumClass::Type2;
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:66:5: warning: variable 'sampleObject' of type 'SampleClass' can be declared 'const' [misc-const-correctness]
    SampleClass sampleObject;
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:66:17: note: FIX-IT applied suggested code changes
    SampleClass sampleObject;
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:83:5: warning: variable 'enumValue1' of type 'SampleEnumClass' can be declared 'const' [misc-const-correctness]
    SampleEnumClass enumValue1 = SampleEnumClass::Type1;
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:83:21: note: FIX-IT applied suggested code changes
    SampleEnumClass enumValue1 = SampleEnumClass::Type1;
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:84:5: warning: variable 'enumValue2' of type 'SampleEnumClass' can be declared 'const' [misc-const-correctness]
    SampleEnumClass enumValue2 = SampleEnumClass::Type2;
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:84:21: note: FIX-IT applied suggested code changes
    SampleEnumClass enumValue2 = SampleEnumClass::Type2;
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:86:5: warning: variable 'sampleObject' of type 'SampleClass' can be declared 'const' [misc-const-correctness]
    SampleClass sampleObject;
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:86:17: note: FIX-IT applied suggested code changes
    SampleClass sampleObject;
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaMacros_unit.cpp:100:5: warning: variable 'VariablePrefix4' of type 'int' can be declared 'const' [misc-const-correctness]
    int ALBA_MACROS_GET_NAME_WITH_COUNT(VariablePrefix) = 0xA1BA;
    ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/tst/CommonTests/Macros/AlbaMacros_unit.cpp:40:9: warning: ALBA_MACROS_TEST_SAMPLE_MACRO1=10000 [-W#pragma-messages]
#pragma message(ALBA_MACROS_PARAMETER_FOR_PRAGMA_MESSAGE(ALBA_MACROS_TEST_SAMPLE_MACRO1))
        ^
1 warning generated.
[65/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Macros/AlbaXMacros_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaXMacros_unit.cpp:15:5: warning: variable 'parameter1InList' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    ALBA_XMACROS_SAMPLE_LIST_WITH_ONE_PARAMETER
    ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Macros/AlbaXMacros.hpp:4:5: note: expanded from macro 'ALBA_XMACROS_SAMPLE_LIST_WITH_ONE_PARAMETER'
    ALBA_XMACROS_SAMPLE_FUNCTION_WITH_ONE_PARAMETER(parameter1InList) \
    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaXMacros_unit.cpp:14:68: note: expanded from macro 'ALBA_XMACROS_SAMPLE_FUNCTION_WITH_ONE_PARAMETER'
#define ALBA_XMACROS_SAMPLE_FUNCTION_WITH_ONE_PARAMETER(parameter) string parameter(#parameter);
                                                                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaXMacros_unit.cpp:15:5: warning: variable 'parameter2InList' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    ALBA_XMACROS_SAMPLE_LIST_WITH_ONE_PARAMETER
    ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Macros/AlbaXMacros.hpp:5:5: note: expanded from macro 'ALBA_XMACROS_SAMPLE_LIST_WITH_ONE_PARAMETER'
    ALBA_XMACROS_SAMPLE_FUNCTION_WITH_ONE_PARAMETER(parameter2InList) \
    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaXMacros_unit.cpp:14:68: note: expanded from macro 'ALBA_XMACROS_SAMPLE_FUNCTION_WITH_ONE_PARAMETER'
#define ALBA_XMACROS_SAMPLE_FUNCTION_WITH_ONE_PARAMETER(parameter) string parameter(#parameter);
                                                                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaXMacros_unit.cpp:15:5: warning: variable 'parameter3InList' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    ALBA_XMACROS_SAMPLE_LIST_WITH_ONE_PARAMETER
    ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Macros/AlbaXMacros.hpp:6:5: note: expanded from macro 'ALBA_XMACROS_SAMPLE_LIST_WITH_ONE_PARAMETER'
    ALBA_XMACROS_SAMPLE_FUNCTION_WITH_ONE_PARAMETER(parameter3InList)
    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Macros\AlbaXMacros_unit.cpp:14:68: note: expanded from macro 'ALBA_XMACROS_SAMPLE_FUNCTION_WITH_ONE_PARAMETER'
#define ALBA_XMACROS_SAMPLE_FUNCTION_WITH_ONE_PARAMETER(parameter) string parameter(#parameter);
                                                                   ^
[66/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Angle/AlbaAngle_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Angle\AlbaAngle_unit.cpp:14:5: warning: variable 'angle' of type 'AlbaAngle' can be declared 'const' [misc-const-correctness]
    AlbaAngle angle;
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Angle\AlbaAngle_unit.cpp:14:15: note: FIX-IT applied suggested code changes
    AlbaAngle angle;
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Angle\AlbaAngle_unit.cpp:20:5: warning: variable 'angle' of type 'AlbaAngle' can be declared 'const' [misc-const-correctness]
    AlbaAngle angle(AngleUnitType::Degrees, 45);
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Angle\AlbaAngle_unit.cpp:20:15: note: FIX-IT applied suggested code changes
    AlbaAngle angle(AngleUnitType::Degrees, 45);
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Angle\AlbaAngle_unit.cpp:26:5: warning: variable 'angle' of type 'AlbaAngle' can be declared 'const' [misc-const-correctness]
    AlbaAngle angle(AngleUnitType::Radians, getPi() / 4);
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Angle\AlbaAngle_unit.cpp:26:15: note: FIX-IT applied suggested code changes
    AlbaAngle angle(AngleUnitType::Radians, getPi() / 4);
              ^
[67/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/CombinatoricsHelpers_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Helpers/CombinatoricsHelpers.hpp:135:9: warning: variable 'sign' of type 'SignedType' (aka 'int') can be declared 'const' [misc-const-correctness]
        SignedType sign = isDivisibleByTwo ? 1 : -1;
        ^
                   const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Helpers/CombinatoricsHelpers.hpp:135:20: note: FIX-IT applied suggested code changes
        SignedType sign = isDivisibleByTwo ? 1 : -1;
                   ^
[68/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/ComplexNumberHelpers_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\ComplexNumberHelpers_unit.cpp:10:5: warning: variable 'complexNumberWithDouble' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complexNumberWithDouble(3.5, 4.5);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\ComplexNumberHelpers_unit.cpp:10:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complexNumberWithDouble(3.5, 4.5);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\ComplexNumberHelpers_unit.cpp:12:5: warning: variable 'expectedNumber' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber expectedNumber(AlbaNumber::createComplexNumber(3.5, 4.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\ComplexNumberHelpers_unit.cpp:12:16: note: FIX-IT applied suggested code changes
    AlbaNumber expectedNumber(AlbaNumber::createComplexNumber(3.5, 4.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\ComplexNumberHelpers_unit.cpp:17:5: warning: variable 'complexNumber' of type 'AlbaComplexNumber<float>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<float> complexNumber(3.5, 4.5);
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\ComplexNumberHelpers_unit.cpp:17:30: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<float> complexNumber(3.5, 4.5);
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\ComplexNumberHelpers_unit.cpp:22:5: warning: variable 'expectedComplexData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData expectedComplexData{3.5, 4.5};
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\ComplexNumberHelpers_unit.cpp:22:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData expectedComplexData{3.5, 4.5};
                                  ^
[69/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/ComputationHelpers_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\ComputationHelpers_unit.cpp:81:5: warning: variable 'quadraticRoots' of type 'AlbaNumbers' (aka 'vector<AlbaNumber>') can be declared 'const' [misc-const-correctness]
    AlbaNumbers quadraticRoots(getQuadraticRoots(RootType::RealRootsOnly, 1, 0, 4));
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\ComputationHelpers_unit.cpp:81:17: note: FIX-IT applied suggested code changes
    AlbaNumbers quadraticRoots(getQuadraticRoots(RootType::RealRootsOnly, 1, 0, 4));
                ^
[70/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/ConstantHelpers_unit.cpp.obj
[71/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/ConversionHelpers_unit.cpp.obj
[72/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/DigitRelatedHelpers_unit.cpp.obj
[73/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/DivisibilityHelpers_unit.cpp.obj
[74/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/FactorAndMultiplesHelpers_unit.cpp.obj
[75/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/FractionHelpers_unit.cpp.obj
[76/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/LogarithmHelpers_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:87:5: warning: variable 'minValue' of type 'int' can be declared 'const' [misc-const-correctness]
    int minValue(2);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:87:9: note: FIX-IT applied suggested code changes
    int minValue(2);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:88:5: warning: variable 'maxValue' of type 'int' can be declared 'const' [misc-const-correctness]
    int maxValue(2000);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:88:9: note: FIX-IT applied suggested code changes
    int maxValue(2000);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:91:9: warning: variable 'base' of type 'int' can be declared 'const' [misc-const-correctness]
        int base = randomizer.getRandomValue();
        ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:91:13: note: FIX-IT applied suggested code changes
        int base = randomizer.getRandomValue();
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:92:9: warning: variable 'exponent' of type 'int' can be declared 'const' [misc-const-correctness]
        int exponent = randomizer.getRandomValue();
        ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:92:13: note: FIX-IT applied suggested code changes
        int exponent = randomizer.getRandomValue();
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:101:5: warning: variable 'minValue' of type 'int' can be declared 'const' [misc-const-correctness]
    int minValue(2);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:101:9: note: FIX-IT applied suggested code changes
    int minValue(2);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:102:5: warning: variable 'maxValue' of type 'int' can be declared 'const' [misc-const-correctness]
    int maxValue(2000);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:102:9: note: FIX-IT applied suggested code changes
    int maxValue(2000);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:105:9: warning: variable 'base' of type 'int' can be declared 'const' [misc-const-correctness]
        int base = randomizer.getRandomValue();
        ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:105:13: note: FIX-IT applied suggested code changes
        int base = randomizer.getRandomValue();
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:106:9: warning: variable 'exponent' of type 'int' can be declared 'const' [misc-const-correctness]
        int exponent = randomizer.getRandomValue();
        ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\LogarithmHelpers_unit.cpp:106:13: note: FIX-IT applied suggested code changes
        int exponent = randomizer.getRandomValue();
            ^
[77/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/PowerHelpers_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:224:5: warning: variable 'minValue' of type 'int' can be declared 'const' [misc-const-correctness]
    int minValue(1);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:224:9: note: FIX-IT applied suggested code changes
    int minValue(1);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:225:5: warning: variable 'maxValue' of type 'int' can be declared 'const' [misc-const-correctness]
    int maxValue(2000);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:225:9: note: FIX-IT applied suggested code changes
    int maxValue(2000);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:228:9: warning: variable 'base' of type 'long long' can be declared 'const' [misc-const-correctness]
        long long base = randomizer.getRandomValue();
        ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:228:19: note: FIX-IT applied suggested code changes
        long long base = randomizer.getRandomValue();
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:229:9: warning: variable 'exponent' of type 'long long' can be declared 'const' [misc-const-correctness]
        long long exponent = randomizer.getRandomValue();
        ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:229:19: note: FIX-IT applied suggested code changes
        long long exponent = randomizer.getRandomValue();
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:238:5: warning: variable 'minValue' of type 'int' can be declared 'const' [misc-const-correctness]
    int minValue(1);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:238:9: note: FIX-IT applied suggested code changes
    int minValue(1);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:239:5: warning: variable 'maxValue' of type 'int' can be declared 'const' [misc-const-correctness]
    int maxValue(2000);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:239:9: note: FIX-IT applied suggested code changes
    int maxValue(2000);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:242:9: warning: variable 'base' of type 'long long' can be declared 'const' [misc-const-correctness]
        long long base = randomizer.getRandomValue();
        ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:242:19: note: FIX-IT applied suggested code changes
        long long base = randomizer.getRandomValue();
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:243:9: warning: variable 'exponent' of type 'long long' can be declared 'const' [misc-const-correctness]
        long long exponent = randomizer.getRandomValue();
        ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Helpers\PowerHelpers_unit.cpp:243:19: note: FIX-IT applied suggested code changes
        long long exponent = randomizer.getRandomValue();
                  ^
[78/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/PrecisionHelpers_unit.cpp.obj
[79/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/SignRelatedHelpers_unit.cpp.obj
[80/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Helpers/StatisticsHelpers_unit.cpp.obj
[81/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Matrix/AlbaMatrix_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:79:9: warning: variable 'scalarMultiplication' of type 'UnaryFunction<int>' (aka 'function<int (const int &)>') can be declared 'const' [misc-const-correctness]
        UnaryFunction<DataType> scalarMultiplication = [&scalarMultiplier](DataType const& value) {
        ^
                                const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:79:33: note: FIX-IT applied suggested code changes
        UnaryFunction<DataType> scalarMultiplication = [&scalarMultiplier](DataType const& value) {
                                ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:125:9: warning: variable 'scalarMultiplication' of type 'UnaryFunction<int>' (aka 'function<int (const int &)>') can be declared 'const' [misc-const-correctness]
        UnaryFunction<DataType> scalarMultiplication = [&scalarMultiplier](DataType const& value) {
        ^
                                const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:125:33: note: FIX-IT applied suggested code changes
        UnaryFunction<DataType> scalarMultiplication = [&scalarMultiplier](DataType const& value) {
                                ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:222:9: warning: variable 'limit' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t limit = std::min(m_matrixData.size(), dataSampleValues.size());
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:222:16: note: FIX-IT applied suggested code changes
        size_t limit = std::min(m_matrixData.size(), dataSampleValues.size());
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:227:9: warning: variable 'limit' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t limit = std::min(m_numberOfRows, static_cast<size_t>(dataSampleValues.size()));
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:227:16: note: FIX-IT applied suggested code changes
        size_t limit = std::min(m_numberOfRows, static_cast<size_t>(dataSampleValues.size()));
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:234:9: warning: variable 'limit' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t limit = std::min(m_numberOfColumns, static_cast<size_t>(dataSampleValues.size()));
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:234:16: note: FIX-IT applied suggested code changes
        size_t limit = std::min(m_numberOfColumns, static_cast<size_t>(dataSampleValues.size()));
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:256:9: warning: variable 'oldRows' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t oldRows(m_numberOfRows);
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:256:16: note: FIX-IT applied suggested code changes
        size_t oldRows(m_numberOfRows);
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:259:9: warning: variable 'yRange' of type 'MatrixIndexRange' (aka 'AlbaValueRange<unsigned long long>') can be declared 'const' [misc-const-correctness]
        MatrixIndexRange yRange(0, oldRows - 1, 1);
        ^
                         const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:259:26: note: FIX-IT applied suggested code changes
        MatrixIndexRange yRange(0, oldRows - 1, 1);
                         ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:260:9: warning: variable 'xRange' of type 'MatrixIndexRange' (aka 'AlbaValueRange<unsigned long long>') can be declared 'const' [misc-const-correctness]
        MatrixIndexRange xRange(0, oldColumns - 1, 1);
        ^
                         const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:260:26: note: FIX-IT applied suggested code changes
        MatrixIndexRange xRange(0, oldColumns - 1, 1);
                         ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:278:9: warning: variable 'diagonalLimit' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t diagonalLimit = std::min(m_numberOfColumns, m_numberOfRows);
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:278:16: note: FIX-IT applied suggested code changes
        size_t diagonalLimit = std::min(m_numberOfColumns, m_numberOfRows);
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:304:9: warning: variable 'targetSize' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t targetSize = numberOfColumns * numberOfRows;
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:304:16: note: FIX-IT applied suggested code changes
        size_t targetSize = numberOfColumns * numberOfRows;
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:306:13: warning: variable 'originalSize' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
            size_t originalSize = m_matrixData.size();
            ^
                   const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaMatrix.hpp:306:20: note: FIX-IT applied suggested code changes
            size_t originalSize = m_matrixData.size();
                   ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/AlbaMatrixUtilities.hpp:184:5: warning: variable 'minSize' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t minSize = std::min(first.size(), second.size());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/AlbaMatrixUtilities.hpp:184:12: note: FIX-IT applied suggested code changes
    size_t minSize = std::min(first.size(), second.size());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:80:5: warning: variable 'numberOfRows' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfRows(matrix.getNumberOfRows());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:80:12: note: FIX-IT applied suggested code changes
    size_t numberOfRows(matrix.getNumberOfRows());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:81:5: warning: variable 'numberOfColumns' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfColumns(matrix.getNumberOfColumns());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:81:12: note: FIX-IT applied suggested code changes
    size_t numberOfColumns(matrix.getNumberOfColumns());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:12:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix;
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:12:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix;
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:21:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:21:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:36:5: warning: variable 'matrix' of type 'AlbaMatrix<unique_ptr<int>>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<unique_ptr<int>> matrix(2, 3);
    ^
                                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:36:33: note: FIX-IT applied suggested code changes
    AlbaMatrix<unique_ptr<int>> matrix(2, 3);
                                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:51:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, 55);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:51:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, 55);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:66:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:66:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:81:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:81:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:96:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6, 7});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:96:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6, 7});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:111:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:111:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:116:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:116:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:121:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:121:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:126:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:126:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:131:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:131:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:133:5: warning: variable 'matrix3' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix3(3, 3);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:133:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix3(3, 3);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:134:5: warning: variable 'matrix4' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix4(2, 4);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:134:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix4(2, 4);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:147:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:147:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:149:5: warning: variable 'matrixToVerify' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrixToVerify(matrix + matrix);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:149:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrixToVerify(matrix + matrix);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:151:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:151:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:156:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(2, 3, {100, 200, 300, 400, 500, 600});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:156:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(2, 3, {100, 200, 300, 400, 500, 600});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:157:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:157:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:159:5: warning: variable 'matrixToVerify' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrixToVerify(matrix1 - matrix2);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:159:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrixToVerify(matrix1 - matrix2);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:161:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {99, 198, 297, 396, 495, 594});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:161:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {99, 198, 297, 396, 495, 594});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:166:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:166:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:168:5: warning: variable 'matrixToVerify' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrixToVerify(matrix * 2);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:168:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrixToVerify(matrix * 2);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:170:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:170:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:175:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(3, 2, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:175:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(3, 2, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:176:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(4, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:176:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(4, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:178:5: warning: variable 'matrixToVerify' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrixToVerify(matrix1 * matrix2);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:178:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrixToVerify(matrix1 * matrix2);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:180:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(4, 2, {38, 44, 50, 56, 83, 98, 113, 128});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:180:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(4, 2, {38, 44, 50, 56, 83, 98, 113, 128});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:189:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:189:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:195:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:195:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:199:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {99, 198, 297, 396, 495, 594});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:199:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {99, 198, 297, 396, 495, 594});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:208:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:208:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:214:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(4, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:214:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(4, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:218:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(4, 2, {38, 44, 50, 56, 83, 98, 113, 128});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:218:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(4, 2, {38, 44, 50, 56, 83, 98, 113, 128});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:223:5: warning: variable 'emptyMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> emptyMatrix;
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:223:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> emptyMatrix;
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:224:5: warning: variable 'nonEmptyMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> nonEmptyMatrix(14, 6);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:224:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> nonEmptyMatrix(14, 6);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:231:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(14, 6);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:231:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(14, 6);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:240:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(14, 6);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:240:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(14, 6);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:246:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(14, 6);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:246:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(14, 6);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:252:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(14, 6);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:252:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(14, 6);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:258:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(14, 6);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:258:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(14, 6);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:267:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:267:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:278:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:278:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:289:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:289:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:303:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:303:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:315:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:315:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:326:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:326:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:343:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:343:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:361:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(14, 6);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:361:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(14, 6);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:381:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:381:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:390:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:390:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:399:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {9, 8, 7, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:399:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {9, 8, 7, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:408:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 9, 3, 8, 5, 7});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:408:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 9, 3, 8, 5, 7});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:417:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 9, 8, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:417:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 9, 8, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:426:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(3, 2, {0, 0, 0, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:426:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(3, 2, {0, 0, 0, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:435:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(3, 2, {55, 55, 55, 55, 55, 55});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:435:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(3, 2, {55, 55, 55, 55, 55, 55});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:444:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {-1, -2, -3, -4, -5, -6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:444:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {-1, -2, -3, -4, -5, -6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:453:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(3, 2, {1, 3, 5, 2, 4, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:453:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(3, 2, {1, 3, 5, 2, 4, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:462:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> expectedMatrix(3, 3, {1.625, -0.5, -0.125, -1.875, 0.5, 0.375, 1.25, 0.0, -0.25});
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:462:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> expectedMatrix(3, 3, {1.625, -0.5, -0.125, -1.875, 0.5, 0.375, 1.25, 0.0, -0.25});
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:467:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(3, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:467:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(3, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:487:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(3, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:487:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(3, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:488:5: warning: variable 'xRange' of type 'AlbaMatrix<int>::MatrixIndexRange' (aka 'AlbaValueRange<unsigned long long>') can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int>::MatrixIndexRange xRange(0, 1, 1);
    ^
                                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:488:39: note: FIX-IT applied suggested code changes
    AlbaMatrix<int>::MatrixIndexRange xRange(0, 1, 1);
                                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:489:5: warning: variable 'yRange' of type 'AlbaMatrix<int>::MatrixIndexRange' (aka 'AlbaValueRange<unsigned long long>') can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int>::MatrixIndexRange yRange(1, 2, 1);
    ^
                                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:489:39: note: FIX-IT applied suggested code changes
    AlbaMatrix<int>::MatrixIndexRange yRange(1, 2, 1);
                                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:504:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(3, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:504:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(3, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:505:5: warning: variable 'xRange' of type 'AlbaMatrix<int>::MatrixIndexRange' (aka 'AlbaValueRange<unsigned long long>') can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int>::MatrixIndexRange xRange(0, 1, 1);
    ^
                                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:505:39: note: FIX-IT applied suggested code changes
    AlbaMatrix<int>::MatrixIndexRange xRange(0, 1, 1);
                                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:506:5: warning: variable 'yRange' of type 'AlbaMatrix<int>::MatrixIndexRange' (aka 'AlbaValueRange<unsigned long long>') can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int>::MatrixIndexRange yRange(1, 2, 1);
    ^
                                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:506:39: note: FIX-IT applied suggested code changes
    AlbaMatrix<int>::MatrixIndexRange yRange(1, 2, 1);
                                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:521:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaMatrix_unit.cpp:521:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
[82/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Matrix/AlbaSparseMatrix_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:52:9: warning: variable 'size' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t size(std::min(m_numberOfColumns, secondMatrix.m_numberOfRows));
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:52:16: note: FIX-IT applied suggested code changes
        size_t size(std::min(m_numberOfColumns, secondMatrix.m_numberOfRows));
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:72:13: warning: variable 'allIndexes' of type 'UniqueIndexes' (aka 'set<unsigned long long>') can be declared 'const' [misc-const-correctness]
            UniqueIndexes allIndexes(getAllIndexes(m_matrixData, secondMatrix.m_matrixData));
            ^
                          const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:72:27: note: FIX-IT applied suggested code changes
            UniqueIndexes allIndexes(getAllIndexes(m_matrixData, secondMatrix.m_matrixData));
                          ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:91:5: warning: function 'getEntry' should be marked [[nodiscard]] [modernize-use-nodiscard]
    DataType getEntry(size_t const xPosition, size_t const yPosition) const {
    ^
    [[nodiscard]] 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:91:5: note: FIX-IT applied suggested code changes
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:96:5: warning: function 'getMatrixData' should be marked [[nodiscard]] [modernize-use-nodiscard]
    MatrixData const& getMatrixData() const { return m_matrixData; }
    ^
    [[nodiscard]] 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:96:5: note: FIX-IT applied suggested code changes
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:104:9: warning: variable 'limit' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t limit = std::min<size_t>(dataSampleValues.size(), m_numberOfColumns * m_numberOfRows);
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:104:16: note: FIX-IT applied suggested code changes
        size_t limit = std::min<size_t>(dataSampleValues.size(), m_numberOfColumns * m_numberOfRows);
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:148:5: warning: function 'doUnaryOperation' should be marked [[nodiscard]] [modernize-use-nodiscard]
    AlbaSparseMatrix doUnaryOperation(AlbaSparseMatrix const& inputMatrix, UnaryFunction const& unaryFunction) const {
    ^
    [[nodiscard]] 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:148:5: note: FIX-IT applied suggested code changes
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:156:5: warning: function 'doBinaryOperation' should be marked [[nodiscard]] [modernize-use-nodiscard]
    AlbaSparseMatrix doBinaryOperation(
    ^
    [[nodiscard]] 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:156:5: note: FIX-IT applied suggested code changes
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:163:9: warning: variable 'allIndexes' of type 'UniqueIndexes' (aka 'set<unsigned long long>') can be declared 'const' [misc-const-correctness]
        UniqueIndexes allIndexes(getAllIndexes(m_matrixData, secondMatrix.m_matrixData));
        ^
                      const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:163:23: note: FIX-IT applied suggested code changes
        UniqueIndexes allIndexes(getAllIndexes(m_matrixData, secondMatrix.m_matrixData));
                      ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:171:5: warning: function 'getEntry' should be marked [[nodiscard]] [modernize-use-nodiscard]
    DataType getEntry(size_t const index) const {
    ^
    [[nodiscard]] 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:171:5: note: FIX-IT applied suggested code changes
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:180:5: warning: function 'getAllIndexes' should be marked [[nodiscard]] [modernize-use-nodiscard]
    UniqueIndexes getAllIndexes(MatrixData const& data1, MatrixData const& data2) const {
    ^
    [[nodiscard]] 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/AlbaSparseMatrix.hpp:180:5: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:12:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix;
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:12:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix;
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:21:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(2, 3);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:21:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(2, 3);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:30:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:30:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:45:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:45:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:59:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6, 7});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:59:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6, 7});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:74:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:74:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:79:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:79:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:84:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:84:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:89:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:89:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:94:5: warning: variable 'matrix1' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix1(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:94:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix1(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:96:5: warning: variable 'matrix3' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix3(3, 3);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:96:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix3(3, 3);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:97:5: warning: variable 'matrix4' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix4(2, 4);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:97:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix4(2, 4);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:110:5: warning: variable 'matrix1' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix1(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:110:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix1(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:112:5: warning: variable 'matrixToVerify' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrixToVerify(matrix1 + matrix1);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:112:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrixToVerify(matrix1 + matrix1);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:114:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:114:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:119:5: warning: variable 'matrix1' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix1(2, 3, {100, 200, 300, 400, 500, 600});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:119:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix1(2, 3, {100, 200, 300, 400, 500, 600});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:120:5: warning: variable 'matrix2' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix2(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:120:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix2(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:122:5: warning: variable 'matrixToVerify' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrixToVerify(matrix1 - matrix2);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:122:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrixToVerify(matrix1 - matrix2);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:124:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {99, 198, 297, 396, 495, 594});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:124:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {99, 198, 297, 396, 495, 594});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:129:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:129:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:131:5: warning: variable 'matrixToVerify' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrixToVerify(matrix * 2);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:131:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrixToVerify(matrix * 2);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:133:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:133:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {2, 4, 6, 8, 10, 12});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:138:5: warning: variable 'matrix1' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix1(3, 2, {1, 2, -1, 3, 1, 4});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:138:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix1(3, 2, {1, 2, -1, 3, 1, 4});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:139:5: warning: variable 'matrix2' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix2(2, 3, {-2, 5, 4, -3, 2, 1});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:139:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix2(2, 3, {-2, 5, 4, -3, 2, 1});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:141:5: warning: variable 'matrixToVerify' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrixToVerify(matrix1 * matrix2);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:141:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrixToVerify(matrix1 * matrix2);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:143:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(2, 2, {4, -2, 6, 16});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:143:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(2, 2, {4, -2, 6, 16});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:148:5: warning: variable 'matrix1' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix1(2, 2, {2, 3, 4, 5});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:148:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix1(2, 2, {2, 3, 4, 5});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:149:5: warning: variable 'matrix2' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix2(2, 2, {1, 2, 7, 0});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:149:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix2(2, 2, {1, 2, 7, 0});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:151:5: warning: variable 'matrixToVerify' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrixToVerify(matrix1 * matrix2);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:151:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrixToVerify(matrix1 * matrix2);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:153:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(2, 2, {23, 4, 39, 8});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:153:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(2, 2, {23, 4, 39, 8});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:158:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(14, 6);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:158:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(14, 6);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:164:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(14, 6);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:164:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(14, 6);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:170:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(14, 6);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:170:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(14, 6);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:179:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(2, 3);
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:179:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(2, 3);
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:190:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:190:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:201:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:201:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:215:5: warning: variable 'matrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:215:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:230:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:230:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:239:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:239:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:248:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {9, 8, 7, 4, 5, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:248:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {9, 8, 7, 4, 5, 6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:257:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(3, 2, {0, 0, 0, 0, 0, 0});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:257:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(3, 2, {0, 0, 0, 0, 0, 0});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:266:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {-1, -2, -3, -4, -5, -6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:266:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(2, 3, {-1, -2, -3, -4, -5, -6});
                          ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:275:5: warning: variable 'expectedMatrix' of type 'AlbaSparseMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaSparseMatrix<int> expectedMatrix(3, 2, {1, 3, 5, 2, 4, 6});
    ^
                          const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\AlbaSparseMatrix_unit.cpp:275:27: note: FIX-IT applied suggested code changes
    AlbaSparseMatrix<int> expectedMatrix(3, 2, {1, 3, 5, 2, 4, 6});
                          ^
[83/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Matrix/Utilities/AlbaMatrixUtilities_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/AlbaMatrixUtilities.hpp:35:5: warning: variable 'numberOfRows' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfRows(matrix.getNumberOfRows());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/AlbaMatrixUtilities.hpp:35:12: note: FIX-IT applied suggested code changes
    size_t numberOfRows(matrix.getNumberOfRows());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/AlbaMatrixUtilities.hpp:36:5: warning: variable 'numberOfColumns' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfColumns(matrix.getNumberOfColumns());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/AlbaMatrixUtilities.hpp:36:12: note: FIX-IT applied suggested code changes
    size_t numberOfColumns(matrix.getNumberOfColumns());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/AlbaMatrixUtilities.hpp:175:5: warning: variable 'numberOfRows' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfRows(matrix.getNumberOfRows());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/AlbaMatrixUtilities.hpp:175:12: note: FIX-IT applied suggested code changes
    size_t numberOfRows(matrix.getNumberOfRows());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/AlbaMatrixUtilities.hpp:198:9: warning: variable 'count' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t count = std::count_if(rowOrColumn.cbegin(), rowOrColumn.cend(), condition);
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/AlbaMatrixUtilities.hpp:198:16: note: FIX-IT applied suggested code changes
        size_t count = std::count_if(rowOrColumn.cbegin(), rowOrColumn.cend(), condition);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:10:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(3, 3, {0, 0, 0, 0, 0, 0, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:10:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(3, 3, {0, 0, 0, 0, 0, 0, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:11:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(3, 2, {0, 0, 0, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:11:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(3, 2, {0, 0, 0, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:18:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(3, 3, {0, 0, 0, 0, 0, 0, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:18:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(3, 3, {0, 0, 0, 0, 0, 0, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:19:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(2, 2, {0, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:19:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(2, 2, {0, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:20:5: warning: variable 'matrix3' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix3(3, 3, {0, 0, 0, 0, 1, 0, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:20:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix3(3, 3, {0, 0, 0, 0, 1, 0, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:28:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(3, 3, {1, 0, 0, 0, 1, 0, 0, 0, 1});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:28:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(3, 3, {1, 0, 0, 0, 1, 0, 0, 0, 1});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:29:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(3, 3, {1, 0, 2, 0, 1, 1, 0, 0, 1});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:29:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(3, 3, {1, 0, 2, 0, 1, 1, 0, 0, 1});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:30:5: warning: variable 'matrix3' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix3(4, 3, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:30:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix3(4, 3, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:38:5: warning: variable 'matrix1' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> matrix1(3, 3, {1.0, 1.0, 1.0, 0.0, 2.0, 3.0, 5.0, 5.0, 1.0});
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:38:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> matrix1(3, 3, {1.0, 1.0, 1.0, 0.0, 2.0, 3.0, 5.0, 5.0, 1.0});
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:39:5: warning: variable 'matrix2' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> matrix2(3, 3, {1.0, 2.0, -3.0, 1.0, -2.0, 1.0, 5.0, -2.0, -3.0});
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:39:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> matrix2(3, 3, {1.0, 2.0, -3.0, 1.0, -2.0, 1.0, 5.0, -2.0, -3.0});
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:45:5: warning: variable 'matrixToVerify' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> matrixToVerify(getIdentityMatrix<double>(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:45:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> matrixToVerify(getIdentityMatrix<double>(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:47:5: warning: variable 'matrixToExpect' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> matrixToExpect(5, 5, {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:47:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> matrixToExpect(5, 5, {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:53:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:53:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:55:5: warning: variable 'resultMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> resultMatrix(
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:55:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> resultMatrix(
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:58:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {101, 204, 309, 416, 525, 636});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:58:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {101, 204, 309, 416, 525, 636});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:63:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:63:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:64:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(2, 3, {11, 12, 13, 14, 15, 16});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:64:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(2, 3, {11, 12, 13, 14, 15, 16});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:66:5: warning: variable 'resultMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> resultMatrix(doBinaryOperationWithSameDimensions(
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:66:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> resultMatrix(doBinaryOperationWithSameDimensions(
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:70:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {132, 168, 208, 252, 300, 352});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:70:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {132, 168, 208, 252, 300, 352});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:79:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {101, 204, 309, 416, 525, 636});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:79:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {101, 204, 309, 416, 525, 636});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:85:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(2, 3, {11, 12, 13, 14, 15, 16});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:85:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(2, 3, {11, 12, 13, 14, 15, 16});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:91:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {132, 168, 208, 252, 300, 352});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:91:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {132, 168, 208, 252, 300, 352});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:96:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(3, 2, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:96:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(3, 2, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:97:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(4, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:97:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(4, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:99:5: warning: variable 'matrixToVerify' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrixToVerify = multiplyMatrices(matrix1, matrix2);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:99:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrixToVerify = multiplyMatrices(matrix1, matrix2);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:101:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(4, 2, {38, 44, 50, 56, 83, 98, 113, 128});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:101:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(4, 2, {38, 44, 50, 56, 83, 98, 113, 128});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:106:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(3, 2, {1, 2, -1, 3, 1, 4});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:106:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(3, 2, {1, 2, -1, 3, 1, 4});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:107:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(2, 3, {-2, 5, 4, -3, 2, 1});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:107:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(2, 3, {-2, 5, 4, -3, 2, 1});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:109:5: warning: variable 'matrixToVerify' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrixToVerify = multiplyMatrices(matrix1, matrix2);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:109:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrixToVerify = multiplyMatrices(matrix1, matrix2);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:111:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 2, {4, -2, 6, 16});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:111:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 2, {4, -2, 6, 16});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:116:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(2, 3, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:116:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(2, 3, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:117:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(2, 2, {1, 2, 3, 4});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:117:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(2, 2, {1, 2, 3, 4});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:119:5: warning: variable 'matrixToVerify' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrixToVerify = multiplyMatrices(matrix1, matrix2);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:119:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrixToVerify = multiplyMatrices(matrix1, matrix2);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:121:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {7, 10, 15, 22, 23, 34});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:121:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {7, 10, 15, 22, 23, 34});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:126:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(2, 2, {1, 2, 3, 4});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:126:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(2, 2, {1, 2, 3, 4});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:127:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(3, 2, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:127:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(3, 2, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:129:5: warning: variable 'matrixToVerify' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrixToVerify = multiplyMatrices(matrix1, matrix2);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:129:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrixToVerify = multiplyMatrices(matrix1, matrix2);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:131:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(3, 2, {9, 12, 15, 19, 26, 33});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:131:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(3, 2, {9, 12, 15, 19, 26, 33});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:136:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(3, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:136:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(3, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:138:5: warning: variable 'matrixToVerify' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrixToVerify = getMatrixRaiseToScalarPower(matrix, 3);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:138:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrixToVerify = getMatrixRaiseToScalarPower(matrix, 3);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:140:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(3, 3, {468, 576, 684, 1062, 1305, 1548, 1656, 2034, 2412});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:140:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(3, 3, {468, 576, 684, 1062, 1305, 1548, 1656, 2034, 2412});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:149:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {5, 6, 3, 4, 1, 2});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:149:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {5, 6, 3, 4, 1, 2});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:158:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 6, 8});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:158:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 6, 8});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:163:5: warning: variable 'value' of type 'int' can be declared 'const' [misc-const-correctness]
    int value = multiplyEachItemAndGetSum(AlbaMatrixData<int>{1, 2, 3}, AlbaMatrixData<int>{4, 5, 6});
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:163:9: note: FIX-IT applied suggested code changes
    int value = multiplyEachItemAndGetSum(AlbaMatrixData<int>{1, 2, 3}, AlbaMatrixData<int>{4, 5, 6});
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:169:5: warning: variable 'listOfMatrixData' of type 'ListOfAlbaMatrixData<int>' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    ListOfAlbaMatrixData<int> listOfMatrixData{{1, 1, 1}, {2, 2, 2}, {3, 3, 3}, {1, 2, 3}};
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:169:31: note: FIX-IT applied suggested code changes
    ListOfAlbaMatrixData<int> listOfMatrixData{{1, 1, 1}, {2, 2, 2}, {3, 3, 3}, {1, 2, 3}};
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:170:5: warning: variable 'conditionFor1' of type 'BoolUnaryFunction<int>' (aka 'function<bool (const int &)>') can be declared 'const' [misc-const-correctness]
    BoolUnaryFunction<int> conditionFor1 = [](int const& entry) { return entry == 1; };
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:170:28: note: FIX-IT applied suggested code changes
    BoolUnaryFunction<int> conditionFor1 = [](int const& entry) { return entry == 1; };
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:171:5: warning: variable 'conditionFor2' of type 'BoolUnaryFunction<int>' (aka 'function<bool (const int &)>') can be declared 'const' [misc-const-correctness]
    BoolUnaryFunction<int> conditionFor2 = [](int const& entry) { return entry == 2; };
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:171:28: note: FIX-IT applied suggested code changes
    BoolUnaryFunction<int> conditionFor2 = [](int const& entry) { return entry == 2; };
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:172:5: warning: variable 'conditionFor3' of type 'BoolUnaryFunction<int>' (aka 'function<bool (const int &)>') can be declared 'const' [misc-const-correctness]
    BoolUnaryFunction<int> conditionFor3 = [](int const& entry) { return entry == 3; };
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:172:28: note: FIX-IT applied suggested code changes
    BoolUnaryFunction<int> conditionFor3 = [](int const& entry) { return entry == 3; };
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:189:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 101, 204, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:189:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 101, 204, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:200:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 12, 24});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\AlbaMatrixUtilities_unit.cpp:200:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {1, 2, 3, 4, 12, 24});
                    ^
[84/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Matrix/Utilities/Determinant_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:11:5: warning: variable 'equalCondition' of type 'BoolUnaryFunction<int>' (aka 'function<bool (const int &)>') can be declared 'const' [misc-const-correctness]
    BoolUnaryFunction<DataType> equalCondition = [](DataType const& entry) {
    ^
                                const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:11:33: note: FIX-IT applied suggested code changes
    BoolUnaryFunction<DataType> equalCondition = [](DataType const& entry) {
                                ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:19:5: warning: variable 'nonEqualCondition' of type 'BoolUnaryFunction<int>' (aka 'function<bool (const int &)>') can be declared 'const' [misc-const-correctness]
    BoolUnaryFunction<DataType> nonEqualCondition = [](DataType const& entry) {
    ^
                                const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:19:33: note: FIX-IT applied suggested code changes
    BoolUnaryFunction<DataType> nonEqualCondition = [](DataType const& entry) {
                                ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:27:5: warning: variable 'numberOfRows' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfRows(matrix.getNumberOfRows());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:27:12: note: FIX-IT applied suggested code changes
    size_t numberOfRows(matrix.getNumberOfRows());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:28:5: warning: variable 'numberOfColumns' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfColumns(matrix.getNumberOfColumns());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:28:12: note: FIX-IT applied suggested code changes
    size_t numberOfColumns(matrix.getNumberOfColumns());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:44:5: warning: variable 'numberOfRows' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfRows(matrix.getNumberOfRows());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:44:12: note: FIX-IT applied suggested code changes
    size_t numberOfRows(matrix.getNumberOfRows());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:45:5: warning: variable 'numberOfColumns' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfColumns(matrix.getNumberOfColumns());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:45:12: note: FIX-IT applied suggested code changes
    size_t numberOfColumns(matrix.getNumberOfColumns());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:58:9: warning: variable 'sign' of type 'int' can be declared 'const' [misc-const-correctness]
        int sign = mathHelper::isEven(xPosition + yPosition) ? 1 : -1;
        ^
            const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:58:13: note: FIX-IT applied suggested code changes
        int sign = mathHelper::isEven(xPosition + yPosition) ? 1 : -1;
            ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:73:5: warning: variable 'numberOfRows' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfRows(matrix.getNumberOfRows());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:73:12: note: FIX-IT applied suggested code changes
    size_t numberOfRows(matrix.getNumberOfRows());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:74:5: warning: variable 'numberOfColumns' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfColumns(matrix.getNumberOfColumns());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:74:12: note: FIX-IT applied suggested code changes
    size_t numberOfColumns(matrix.getNumberOfColumns());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:75:5: warning: variable 'bestIndex' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t bestIndex = getIndexWithHighestNumberOfZeros(rowsAndColumns);
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:75:12: note: FIX-IT applied suggested code changes
    size_t bestIndex = getIndexWithHighestNumberOfZeros(rowsAndColumns);
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:77:9: warning: variable 'yPosition' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t yPosition = bestIndex;
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:77:16: note: FIX-IT applied suggested code changes
        size_t yPosition = bestIndex;
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:82:9: warning: variable 'xPosition' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t xPosition = bestIndex - numberOfRows;
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:82:16: note: FIX-IT applied suggested code changes
        size_t xPosition = bestIndex - numberOfRows;
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:93:5: warning: variable 'numberOfRows' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfRows(matrix.getNumberOfRows());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:93:12: note: FIX-IT applied suggested code changes
    size_t numberOfRows(matrix.getNumberOfRows());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:94:5: warning: variable 'numberOfColumns' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfColumns(matrix.getNumberOfColumns());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:94:12: note: FIX-IT applied suggested code changes
    size_t numberOfColumns(matrix.getNumberOfColumns());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:99:13: warning: variable 'newX' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
            size_t newX = (xPosition >= columnIndex) ? xPosition - 1 : xPosition;
            ^
                   const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:99:20: note: FIX-IT applied suggested code changes
            size_t newX = (xPosition >= columnIndex) ? xPosition - 1 : xPosition;
                   ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:100:13: warning: variable 'newY' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
            size_t newY = (yPosition >= rowIndex) ? yPosition - 1 : yPosition;
            ^
                   const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Determinant.hpp:100:20: note: FIX-IT applied suggested code changes
            size_t newY = (yPosition >= rowIndex) ? yPosition - 1 : yPosition;
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:10:5: warning: variable 'rowsAndColumns' of type 'ListOfAlbaMatrixData<int>' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    ListOfAlbaMatrixData<int> rowsAndColumns{{1, 2, 3}, {0, 5, 0}, {7, 0, 9}};
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:10:31: note: FIX-IT applied suggested code changes
    ListOfAlbaMatrixData<int> rowsAndColumns{{1, 2, 3}, {0, 5, 0}, {7, 0, 9}};
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:16:5: warning: variable 'rowsAndColumns' of type 'ListOfAlbaMatrixData<int>' (aka 'vector<vector<int>>') can be declared 'const' [misc-const-correctness]
    ListOfAlbaMatrixData<int> rowsAndColumns{{1, 2, 3}, {0, 5, 0}, {7, 0, 9}};
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:16:31: note: FIX-IT applied suggested code changes
    ListOfAlbaMatrixData<int> rowsAndColumns{{1, 2, 3}, {0, 5, 0}, {7, 0, 9}};
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:22:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(1, 1, 5);
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:22:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(1, 1, 5);
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:23:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(2, 2, {2, -1, 3, 2});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:23:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(2, 2, {2, -1, 3, 2});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:24:5: warning: variable 'matrix3' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix3(3, 3, {1, 2, 3, 2, 1, 3, 3, 1, 2});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:24:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix3(3, 3, {1, 2, 3, 2, 1, 3, 3, 1, 2});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:25:5: warning: variable 'matrix4' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix4(4, 4, {1, 2, -3, 4, -4, 2, 1, 3, 3, 0, 0, -3, 2, 0, -2, 3});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:25:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix4(4, 4, {1, 2, -3, 4, -4, 2, 1, 3, 3, 0, 0, -3, 2, 0, -2, 3});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:26:5: warning: variable 'matrix5' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix5(4, 4, {4, 3, 2, 2, 0, 1, -3, 3, 0, -1, 3, 3, 0, 3, 1, 1});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:26:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix5(4, 4, {4, 3, 2, 2, 0, 1, -3, 3, 0, -1, 3, 3, 0, 3, 1, 1});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:27:5: warning: variable 'matrix6' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix6(4, 4, {1, 2, 3, 4, 2, 5, 7, 3, 4, 10, 14, 6, 3, 4, 2, 7});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:27:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix6(4, 4, {1, 2, 3, 4, 2, 5, 7, 3, 4, 10, 14, 6, 3, 4, 2, 7});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:38:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(3, 3, {3, 0, -1, -3, 1, 1, -5, 0, 2});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:38:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(3, 3, {3, 0, -1, -3, 1, 1, -5, 0, 2});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:39:5: warning: variable 'newColumn' of type 'AlbaMatrix<int>::MatrixData' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int>::MatrixData newColumn{3, 2, 4};
    ^
                                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:39:33: note: FIX-IT applied suggested code changes
    AlbaMatrix<int>::MatrixData newColumn{3, 2, 4};
                                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:47:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(4, 4, {1, 2, -3, 4, -4, 2, 1, 3, 3, 0, 0, -3, 2, 0, -2, 3});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:47:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(4, 4, {1, 2, -3, 4, -4, 2, 1, 3, 3, 0, 0, -3, 2, 0, -2, 3});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:56:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(4, 4, {1, 2, -3, 4, -4, 2, 1, 3, 3, 0, 0, -3, 2, 0, -2, 3});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:56:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(4, 4, {1, 2, -3, 4, -4, 2, 1, 3, 3, 0, 0, -3, 2, 0, -2, 3});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:62:5: warning: variable 'matrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix(3, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:62:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix(3, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:64:5: warning: variable 'resultMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> resultMatrix(getMatrixWithOneColumnAndOneRowRemoved(matrix, 1, 2));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:64:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> resultMatrix(getMatrixWithOneColumnAndOneRowRemoved(matrix, 1, 2));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:66:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 2, {1, 3, 4, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Determinant_unit.cpp:66:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 2, {1, 3, 4, 6});
                    ^
[85/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Matrix/Utilities/GaussJordanReduction_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:13:5: warning: variable 'numberOfRows' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfRows(matrix.getNumberOfRows());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:13:12: note: FIX-IT applied suggested code changes
    size_t numberOfRows(matrix.getNumberOfRows());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:14:5: warning: variable 'numberOfColumns' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfColumns(matrix.getNumberOfColumns());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:14:12: note: FIX-IT applied suggested code changes
    size_t numberOfColumns(matrix.getNumberOfColumns());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:17:9: warning: variable 'yPosition' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t yPosition(yPlusOne - 1);
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:17:16: note: FIX-IT applied suggested code changes
        size_t yPosition(yPlusOne - 1);
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:39:5: warning: variable 'numberOfRows' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfRows(matrix.getNumberOfRows());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:39:12: note: FIX-IT applied suggested code changes
    size_t numberOfRows(matrix.getNumberOfRows());
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:40:5: warning: variable 'numberOfColumns' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfColumns(matrix.getNumberOfColumns());
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/GaussJordanReduction.hpp:40:12: note: FIX-IT applied suggested code changes
    size_t numberOfColumns(matrix.getNumberOfColumns());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:10:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(3, 3, {1, 2, 3, 0, 0, 0, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:10:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(3, 3, {1, 2, 3, 0, 0, 0, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:11:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(3, 3, {1, 2, 3, 4, 5, 6, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:11:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(3, 3, {1, 2, 3, 4, 5, 6, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:12:5: warning: variable 'matrix3' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix3(3, 3, {1, 2, 3, 4, 5, 6, 0, 1, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:12:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix3(3, 3, {1, 2, 3, 4, 5, 6, 0, 1, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:13:5: warning: variable 'matrix4' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix4(3, 3, {0, 0, 0, 4, 5, 6, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:13:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix4(3, 3, {0, 0, 0, 4, 5, 6, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:14:5: warning: variable 'matrix5' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix5(3, 3, {0, 0, 0, 4, 5, 6, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:14:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix5(3, 3, {0, 0, 0, 4, 5, 6, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:24:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(3, 3, {1, 0, 0, 0, 1, 0, 0, 0, 1});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:24:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(3, 3, {1, 0, 0, 0, 1, 0, 0, 0, 1});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:26:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(3, 3, {1, 0, 0, 0, 2, 0, 0, 0, 1});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:26:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(3, 3, {1, 0, 0, 0, 2, 0, 0, 0, 1});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:28:5: warning: variable 'matrix3' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix3(3, 3, {0, 1, 0, 1, 0, 0, 0, 0, 1});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:28:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix3(3, 3, {0, 1, 0, 1, 0, 0, 0, 0, 1});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:30:5: warning: variable 'matrix4' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix4(3, 3, {1, 1, 0, 0, 1, 0, 0, 0, 1});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:30:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix4(3, 3, {1, 1, 0, 0, 1, 0, 0, 0, 1});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:39:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(4, 3, {1, 0, 0, 4, 0, 1, 0, 5, 0, 0, 1, 2});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:39:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(4, 3, {1, 0, 0, 4, 0, 1, 0, 5, 0, 0, 1, 2});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:40:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(5, 3, {1, 2, 0, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:40:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(5, 3, {1, 2, 0, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:41:5: warning: variable 'matrix3' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix3(5, 5, {1, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:41:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix3(5, 5, {1, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:49:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(4, 3, {1, 2, 0, 4, 0, 0, 0, 0, 0, 0, 1, -3});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:49:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(4, 3, {1, 2, 0, 4, 0, 0, 0, 0, 0, 0, 1, -3});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:50:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(4, 3, {1, 0, 3, 4, 0, 2, -2, 5, 0, 0, 1, 2});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:50:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(4, 3, {1, 0, 3, 4, 0, 2, -2, 5, 0, 0, 1, 2});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:51:5: warning: variable 'matrix3' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix3(4, 4, {1, 0, 3, 4, 0, 1, -2, 5, 0, 1, 2, 2, 0, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:51:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix3(4, 4, {1, 0, 3, 4, 0, 1, -2, 5, 0, 1, 2, 2, 0, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:52:5: warning: variable 'matrix4' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix4(4, 4, {1, 2, 3, 4, 0, 1, -2, 5, 0, 0, 1, 2, 0, 0, 0, 0});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:52:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix4(4, 4, {1, 2, 3, 4, 0, 1, -2, 5, 0, 0, 1, 2, 0, 0, 0, 0});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:66:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> expectedMatrix(
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:66:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> expectedMatrix(
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:72:5: warning: variable 'matrix' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> matrix(3, 3, {1.0, 1.0, 1.0, 0.0, 2.0, 3.0, 5.0, 5.0, 1.0});
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:72:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> matrix(3, 3, {1.0, 1.0, 1.0, 0.0, 2.0, 3.0, 5.0, 5.0, 1.0});
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:89:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> expectedMatrix(2, 3, {2, 4, 9, 12, 20, 24});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:89:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> expectedMatrix(2, 3, {2, 4, 9, 12, 20, 24});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:99:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> expectedMatrix(2, 3, {1.0, 2.0, 0.0, -2.0, 0.0, -4.0});
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\GaussJordanReduction_unit.cpp:99:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> expectedMatrix(2, 3, {1.0, 2.0, 0.0, -2.0, 0.0, -4.0});
                       ^
[86/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Matrix/Utilities/Simplex_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:24:5: warning: variable 'numberOfColumns' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfColumns =
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:24:12: note: FIX-IT applied suggested code changes
    size_t numberOfColumns =
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:26:5: warning: variable 'numberOfRows' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t numberOfRows = constraintsCoefficients.getNumberOfRows() + 1;
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:26:12: note: FIX-IT applied suggested code changes
    size_t numberOfRows = constraintsCoefficients.getNumberOfRows() + 1;
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:46:9: warning: variable 'pivotingColumn' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t pivotingColumn(getPivotingColumnUsingBlandsRule(simplexTable));
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:46:16: note: FIX-IT applied suggested code changes
        size_t pivotingColumn(getPivotingColumnUsingBlandsRule(simplexTable));
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:48:13: warning: variable 'pivotingRow' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
            size_t pivotingRow(getPivotingRowUsingMinRatioRule(simplexTable, pivotingColumn));
            ^
                   const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:48:20: note: FIX-IT applied suggested code changes
            size_t pivotingRow(getPivotingRowUsingMinRatioRule(simplexTable, pivotingColumn));
                   ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:61:5: warning: variable 'lastY' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t lastY(simplexTable.getNumberOfRows() - 1);
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:61:12: note: FIX-IT applied suggested code changes
    size_t lastY(simplexTable.getNumberOfRows() - 1);
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:74:5: warning: variable 'lastY' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t lastY(simplexTable.getNumberOfRows() - 1);
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:74:12: note: FIX-IT applied suggested code changes
    size_t lastY(simplexTable.getNumberOfRows() - 1);
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:89:5: warning: variable 'lastX' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t lastX(simplexTable.getNumberOfColumns() - 1);
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Matrix/Utilities/Simplex.hpp:89:12: note: FIX-IT applied suggested code changes
    size_t lastX(simplexTable.getNumberOfColumns() - 1);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:10:5: warning: variable 'constraintsCoefficients' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> constraintsCoefficients(4, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:10:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> constraintsCoefficients(4, 3, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:11:5: warning: variable 'constraintsValues' of type 'AlbaMatrixData<double>' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    AlbaMatrixData<double> constraintsValues{10, 20, 40};
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:11:28: note: FIX-IT applied suggested code changes
    AlbaMatrixData<double> constraintsValues{10, 20, 40};
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:12:5: warning: variable 'objectiveFunctionCoefficients' of type 'AlbaMatrixData<double>' (aka 'vector<double>') can be declared 'const' [misc-const-correctness]
    AlbaMatrixData<double> objectiveFunctionCoefficients{13, 14, 15, 16};
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:12:28: note: FIX-IT applied suggested code changes
    AlbaMatrixData<double> objectiveFunctionCoefficients{13, 14, 15, 16};
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:14:5: warning: variable 'simplexTable' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> simplexTable(constructSimplexTableWithLessThanConstraints(
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:14:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> simplexTable(constructSimplexTableWithLessThanConstraints(
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:17:5: warning: variable 'expectedSimplexTable' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> expectedSimplexTable(8, 4, {1, 2,  3,  4,  1, 0, 0, 10, 5,  6,  7,  8,  0, 1, 0, 20,
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:17:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> expectedSimplexTable(8, 4, {1, 2,  3,  4,  1, 0, 0, 10, 5,  6,  7,  8,  0, 1, 0, 20,
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:28:5: warning: variable 'expectedSimplexTable' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> expectedSimplexTable(
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:28:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> expectedSimplexTable(
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:40:5: warning: variable 'expectedSimplexTable' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> expectedSimplexTable(
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:40:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> expectedSimplexTable(
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:51:5: warning: variable 'expectedSimplexTable' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> expectedSimplexTable(
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:51:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> expectedSimplexTable(
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:63:5: warning: variable 'expectedSimplexTable' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> expectedSimplexTable(
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:63:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> expectedSimplexTable(
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:70:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(3, 2, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:70:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(3, 2, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:71:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(3, 2, {1, 2, 3, 4, -5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:71:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(3, 2, {1, 2, 3, 4, -5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:72:5: warning: variable 'matrix3' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix3(3, 2, {1, 2, 3, -4, -5, -6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:72:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix3(3, 2, {1, 2, 3, -4, -5, -6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:80:5: warning: variable 'matrix1' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix1(3, 2, {1, 2, 3, 4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:80:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix1(3, 2, {1, 2, 3, 4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:81:5: warning: variable 'matrix2' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix2(3, 2, {1, 2, 3, -4, 5, 6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:81:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix2(3, 2, {1, 2, 3, -4, 5, 6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:82:5: warning: variable 'matrix3' of type 'AlbaMatrix<int>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<int> matrix3(3, 2, {1, 2, 3, -4, -5, -6});
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:82:21: note: FIX-IT applied suggested code changes
    AlbaMatrix<int> matrix3(3, 2, {1, 2, 3, -4, -5, -6});
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:90:5: warning: variable 'matrix1' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> matrix1(3, 3, {1, 1, 1, 1, 2, 1, 1, 3, 1});
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:90:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> matrix1(3, 3, {1, 1, 1, 1, 2, 1, 1, 3, 1});
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:91:5: warning: variable 'matrix2' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> matrix2(3, 3, {1, 3, 1, 1, 2, 1, 1, 1, 1});
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:91:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> matrix2(3, 3, {1, 3, 1, 1, 2, 1, 1, 1, 1});
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:92:5: warning: variable 'matrix3' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> matrix3(3, 3, {1, -1, 1, 1, -2, 1, 1, -3, 1});
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:92:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> matrix3(3, 3, {1, -1, 1, 1, -2, 1, 1, -3, 1});
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:104:5: warning: variable 'expectedMatrix' of type 'AlbaMatrix<double>' can be declared 'const' [misc-const-correctness]
    AlbaMatrix<double> expectedMatrix(3, 3, {-0.25, 0.5, 0, 0.5, 1, 0, 0.125, 0.15, 1});
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Matrix\Utilities\Simplex_unit.cpp:104:24: note: FIX-IT applied suggested code changes
    AlbaMatrix<double> expectedMatrix(3, 3, {-0.25, 0.5, 0, 0.5, 1, 0, 0.125, 0.15, 1});
                       ^
[87/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Number/AlbaComplexNumber_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:12:5: warning: variable 'complex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex1;
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:12:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex1;
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:13:5: warning: variable 'complex2' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex2(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:13:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex2(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:22:5: warning: variable 'complex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex1(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:22:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex1(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:23:5: warning: variable 'complex2' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex2(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:23:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex2(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:24:5: warning: variable 'complex3' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex3(3, 3);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:24:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex3(3, 3);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:25:5: warning: variable 'complex4' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex4(4, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:25:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex4(4, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:26:5: warning: variable 'complex5' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex5(5, 5);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:26:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex5(5, 5);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:27:5: warning: variable 'complex6' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex6(static_cast<double>(1) / 3, static_cast<double>(4) / 3);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:27:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex6(static_cast<double>(1) / 3, static_cast<double>(4) / 3);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:38:5: warning: variable 'complex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex1(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:38:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex1(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:39:5: warning: variable 'complex2' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex2(5, 6);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:39:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex2(5, 6);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:41:5: warning: variable 'actualComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex(complex1 + complex2);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:41:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex(complex1 + complex2);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:43:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(8, 10);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:43:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(8, 10);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:48:5: warning: variable 'complex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex1(7, 9);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:48:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex1(7, 9);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:49:5: warning: variable 'complex2' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex2(5, 6);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:49:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex2(5, 6);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:51:5: warning: variable 'actualComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex(complex1 - complex2);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:51:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex(complex1 - complex2);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:53:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(2, 3);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:53:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(2, 3);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:58:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:58:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:60:5: warning: variable 'actualComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex(+complex);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:60:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex(+complex);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:62:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:62:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:67:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(7, 9);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:67:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(7, 9);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:69:5: warning: variable 'actualComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex(-complex);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:69:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex(-complex);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:71:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(-7, -9);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:71:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(-7, -9);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:76:5: warning: variable 'complex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex1(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:76:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex1(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:77:5: warning: variable 'complex2' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex2(5, 6);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:77:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex2(5, 6);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:79:5: warning: variable 'actualComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex(complex1 * complex2);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:79:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex(complex1 * complex2);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:81:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(-9, 38);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:81:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(-9, 38);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:86:5: warning: variable 'complex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex1(5, 6);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:86:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex1(5, 6);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:87:5: warning: variable 'complex2' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex2(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:87:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex2(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:89:5: warning: variable 'actualComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex(complex1 / complex2);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:89:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex(complex1 / complex2);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:91:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(1.56, -0.08);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:91:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(1.56, -0.08);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:96:5: warning: variable 'complex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex1(5, 6);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:96:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex1(5, 6);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:97:5: warning: variable 'complex2' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex2(0, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:97:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex2(0, 0);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:99:5: warning: variable 'actualComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex(complex1 / complex2);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:99:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex(complex1 / complex2);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:106:5: warning: variable 'actualComplex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex1(AlbaComplexNumber<double>(-0.5, sqrt(3) / 2) ^ 3);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:106:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex1(AlbaComplexNumber<double>(-0.5, sqrt(3) / 2) ^ 3);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:107:5: warning: variable 'actualComplex2' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex2(AlbaComplexNumber<double>(-8, 0) ^ (static_cast<double>(1) / 3));
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:107:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex2(AlbaComplexNumber<double>(-8, 0) ^ (static_cast<double>(1) / 3));
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:109:5: warning: variable 'expectedComplex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex1(1, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:109:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex1(1, 0);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:110:5: warning: variable 'expectedComplex2' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex2(-2, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:110:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex2(-2, 0);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:116:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(-1, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:116:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(-1, 0);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:118:5: warning: variable 'actualComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex(complex ^ 0.5);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:118:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex(complex ^ 0.5);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:120:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(0, 1);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:120:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(0, 1);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:126:5: warning: variable 'anotherComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> anotherComplex(5, 6);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:126:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> anotherComplex(5, 6);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:130:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(8, 10);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:130:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(8, 10);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:136:5: warning: variable 'anotherComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> anotherComplex(5, 6);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:136:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> anotherComplex(5, 6);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:140:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(2, 3);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:140:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(2, 3);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:146:5: warning: variable 'anotherComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> anotherComplex(5, 6);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:146:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> anotherComplex(5, 6);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:150:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(-9, 38);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:150:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(-9, 38);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:156:5: warning: variable 'anotherComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> anotherComplex(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:156:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> anotherComplex(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:160:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(1.56, -0.08);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:160:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(1.56, -0.08);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:165:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(3.5, 4.5);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:165:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(3.5, 4.5);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:171:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(3.5, 4.5);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:171:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(3.5, 4.5);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:177:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:177:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:183:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(-3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:183:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(-3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:189:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:189:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:195:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:195:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:201:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(-8, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:201:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(-8, 0);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:207:5: warning: variable 'complex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex1(3, 4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:207:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex1(3, 4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:209:5: warning: variable 'actualComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex(complex1.getConjugate());
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:209:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex(complex1.getConjugate());
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:211:5: warning: variable 'expectedComplex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex(3, -4);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:211:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex(3, -4);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:216:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(1, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:216:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(1, 0);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:218:5: warning: variable 'actualComplex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex1(complex.getNthRoot(0U, 4U));
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:218:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex1(complex.getNthRoot(0U, 4U));
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:219:5: warning: variable 'actualComplex2' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex2(complex.getNthRoot(1U, 4U));
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:219:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex2(complex.getNthRoot(1U, 4U));
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:220:5: warning: variable 'actualComplex3' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex3(complex.getNthRoot(2U, 4U));
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:220:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex3(complex.getNthRoot(2U, 4U));
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:221:5: warning: variable 'actualComplex4' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> actualComplex4(complex.getNthRoot(3U, 4U));
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:221:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> actualComplex4(complex.getNthRoot(3U, 4U));
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:223:5: warning: variable 'expectedComplex1' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex1(1, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:223:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex1(1, 0);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:224:5: warning: variable 'expectedComplex2' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex2(0, 1);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:224:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex2(0, 1);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:225:5: warning: variable 'expectedComplex3' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex3(-1, 0);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:225:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex3(-1, 0);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:226:5: warning: variable 'expectedComplex4' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> expectedComplex4(0, -1);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:226:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> expectedComplex4(0, -1);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:235:5: warning: variable 'complex' of type 'AlbaComplexNumber<double>' can be declared 'const' [misc-const-correctness]
    AlbaComplexNumber<double> complex(3.5, 4.5);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaComplexNumber_unit.cpp:235:31: note: FIX-IT applied suggested code changes
    AlbaComplexNumber<double> complex(3.5, 4.5);
                              ^
[88/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Number/AlbaNumber_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:17:5: warning: variable 'configurationDetails' of type 'AlbaNumber::ConfigurationDetails' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ConfigurationDetails configurationDetails(
    ^
                                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:17:38: note: FIX-IT applied suggested code changes
    AlbaNumber::ConfigurationDetails configurationDetails(
                                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:45:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:45:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:46:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:46:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:55:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:55:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:56:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:56:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:64:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:64:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:65:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:65:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:73:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:73:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:74:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:74:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:81:9: warning: variable 'scopeConfigurationObject' of type 'AlbaNumber::ScopeConfigurationObject' can be declared 'const' [misc-const-correctness]
        AlbaNumber::ScopeConfigurationObject scopeConfigurationObject;
        ^
                                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:81:46: note: FIX-IT applied suggested code changes
        AlbaNumber::ScopeConfigurationObject scopeConfigurationObject;
                                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:84:9: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber number3(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
        ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:84:20: note: FIX-IT applied suggested code changes
        AlbaNumber number3(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:85:9: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber number4(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
        ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:85:20: note: FIX-IT applied suggested code changes
        AlbaNumber number4(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:92:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:92:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:93:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:93:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:101:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:101:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:102:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:102:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:109:9: warning: variable 'scopeConfigurationObject' of type 'AlbaNumber::ScopeConfigurationObject' can be declared 'const' [misc-const-correctness]
        AlbaNumber::ScopeConfigurationObject scopeConfigurationObject;
        ^
                                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:109:46: note: FIX-IT applied suggested code changes
        AlbaNumber::ScopeConfigurationObject scopeConfigurationObject;
                                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:112:9: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber number3(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
        ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:112:20: note: FIX-IT applied suggested code changes
        AlbaNumber number3(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:113:9: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber number4(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
        ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:113:20: note: FIX-IT applied suggested code changes
        AlbaNumber number4(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:120:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:120:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:121:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:121:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:134:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:134:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:135:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:135:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:142:9: warning: variable 'scopeConfigurationObject' of type 'AlbaNumber::ScopeConfigurationObject' can be declared 'const' [misc-const-correctness]
        AlbaNumber::ScopeConfigurationObject scopeConfigurationObject;
        ^
                                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:142:46: note: FIX-IT applied suggested code changes
        AlbaNumber::ScopeConfigurationObject scopeConfigurationObject;
                                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:145:9: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber number3(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
        ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:145:20: note: FIX-IT applied suggested code changes
        AlbaNumber number3(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:146:9: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber number4(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
        ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:146:20: note: FIX-IT applied suggested code changes
        AlbaNumber number4(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:153:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:153:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:154:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:154:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:165:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:165:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:172:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:172:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:173:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:173:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:174:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:174:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:175:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(ALBA_NUMBER_NOT_A_NUMBER);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:175:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(ALBA_NUMBER_NOT_A_NUMBER);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:176:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(ALBA_NUMBER_PI);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:176:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(ALBA_NUMBER_PI);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:177:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_E);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:177:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_E);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:194:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:194:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.01));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:195:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:195:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(3.0000000000001));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:196:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(POSITIVE_INFINITY_DOUBLE_VALUE));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:196:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(POSITIVE_INFINITY_DOUBLE_VALUE));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:197:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(NEGATIVE_INFINITY_DOUBLE_VALUE));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:197:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(NEGATIVE_INFINITY_DOUBLE_VALUE));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:198:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(NAN_DOUBLE_VALUE));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:198:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(AlbaNumber::createNumberFromDoubleAndRoundIfNeeded(NAN_DOUBLE_VALUE));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:213:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:213:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:214:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:214:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:215:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(AlbaNumber::createFraction(-100, -10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:215:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(AlbaNumber::createFraction(-100, -10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:218:5: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData(number1.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:218:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData(number1.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:228:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1(AlbaNumber::createComplexNumber(-4, 3));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:228:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1(AlbaNumber::createComplexNumber(-4, 3));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:229:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:229:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:230:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(AlbaNumber::createComplexNumber(-4.0, 0.0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:230:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(AlbaNumber::createComplexNumber(-4.0, 0.0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:231:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(AlbaNumber::createComplexNumber(-4.5, 0.0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:231:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(AlbaNumber::createComplexNumber(-4.5, 0.0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:234:5: warning: variable 'complexNumberData1' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:234:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:238:5: warning: variable 'complexNumberData2' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:238:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:248:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:248:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:249:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:249:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:250:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(ALBA_NUMBER_NOT_A_NUMBER);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:250:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(ALBA_NUMBER_NOT_A_NUMBER);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:251:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:251:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:252:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:252:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:253:5: warning: variable 'number11' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number11(AlbaNumber::createFraction(-100, -10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:253:16: note: FIX-IT applied suggested code changes
    AlbaNumber number11(AlbaNumber::createFraction(-100, -10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:254:5: warning: variable 'number12' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number12(AlbaNumber::createComplexNumber(-4, 3));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:254:16: note: FIX-IT applied suggested code changes
    AlbaNumber number12(AlbaNumber::createComplexNumber(-4, 3));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:255:5: warning: variable 'number13' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number13(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:255:16: note: FIX-IT applied suggested code changes
    AlbaNumber number13(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:256:5: warning: variable 'number14' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number14(AlbaNumber::createComplexNumber(-4.0, 0.0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:256:16: note: FIX-IT applied suggested code changes
    AlbaNumber number14(AlbaNumber::createComplexNumber(-4.0, 0.0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:257:5: warning: variable 'number15' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number15(AlbaNumber::createComplexNumber(-4.5, 0.0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:257:16: note: FIX-IT applied suggested code changes
    AlbaNumber number15(AlbaNumber::createComplexNumber(-4.5, 0.0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:266:5: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData(number9.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:266:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData(number9.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:274:5: warning: variable 'complexNumberData1' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData1(number12.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:274:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData1(number12.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:278:5: warning: variable 'complexNumberData2' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData2(number13.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:278:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData2(number13.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:288:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:288:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:289:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:289:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:290:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:290:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:291:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(static_cast<double>(1) / 3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:291:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(static_cast<double>(1) / 3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:292:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:292:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:293:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:293:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:294:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(1, 3));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:294:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(1, 3));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:295:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createComplexNumber(static_cast<double>(1) / 3, 0.0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:295:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createComplexNumber(static_cast<double>(1) / 3, 0.0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:296:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createComplexNumber(-81237, -81237));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:296:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createComplexNumber(-81237, -81237));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:321:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:321:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:322:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:322:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:323:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:323:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:324:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(static_cast<double>(1) / 3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:324:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(static_cast<double>(1) / 3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:325:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:325:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:326:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:326:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:327:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(1, 3));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:327:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(1, 3));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:328:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createComplexNumber(static_cast<double>(1) / 3, 0.0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:328:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createComplexNumber(static_cast<double>(1) / 3, 0.0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:329:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createComplexNumber(-81237, -81237));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:329:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createComplexNumber(-81237, -81237));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:354:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:354:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:355:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(AlbaNumber::createFraction(1, 3));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:355:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(AlbaNumber::createFraction(1, 3));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:356:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(AlbaNumber::createComplexNumber(0.25, 0.25));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:356:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(AlbaNumber::createComplexNumber(0.25, 0.25));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:357:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(0.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:357:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(0.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:358:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:358:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:359:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:359:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:381:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:381:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:382:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(AlbaNumber::createFraction(1, 3));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:382:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(AlbaNumber::createFraction(1, 3));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:383:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(AlbaNumber::createComplexNumber(0.25, 0.25));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:383:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(AlbaNumber::createComplexNumber(0.25, 0.25));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:384:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(0.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:384:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(0.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:385:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:385:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:386:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:386:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:408:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:408:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:409:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(AlbaNumber::createFraction(1, 3));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:409:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(AlbaNumber::createFraction(1, 3));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:410:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(AlbaNumber::createComplexNumber(0.25, 0.25));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:410:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(AlbaNumber::createComplexNumber(0.25, 0.25));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:411:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(0.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:411:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(0.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:412:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:412:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:413:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:413:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:435:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:435:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:436:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(AlbaNumber::createFraction(1, 3));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:436:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(AlbaNumber::createFraction(1, 3));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:437:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(AlbaNumber::createComplexNumber(0.25, 0.25));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:437:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(AlbaNumber::createComplexNumber(0.25, 0.25));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:438:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(0.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:438:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(0.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:439:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:439:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:440:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:440:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:462:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = +AlbaNumber();
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:462:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = +AlbaNumber();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:463:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = +AlbaNumber(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:463:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = +AlbaNumber(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:464:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = +AlbaNumber(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:464:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = +AlbaNumber(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:465:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = +AlbaNumber(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:465:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = +AlbaNumber(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:466:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = +AlbaNumber::createFraction(-87408, -9802);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:466:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = +AlbaNumber::createFraction(-87408, -9802);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:467:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = +AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:467:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = +AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:478:5: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData(number5.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:478:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData(number5.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:482:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number6.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:482:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number6.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:488:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = -AlbaNumber();
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:488:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = -AlbaNumber();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:489:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = -AlbaNumber(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:489:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = -AlbaNumber(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:490:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = -AlbaNumber(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:490:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = -AlbaNumber(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:491:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = -AlbaNumber(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:491:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = -AlbaNumber(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:492:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = -AlbaNumber::createFraction(-87408, -9802);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:492:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = -AlbaNumber::createFraction(-87408, -9802);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:493:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = -AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:493:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = -AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:504:5: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData(number5.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:504:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData(number5.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:508:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number6.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:508:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number6.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:514:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber() + AlbaNumber();
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:514:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber() + AlbaNumber();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:515:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber(100) + 10;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:515:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber(100) + 10;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:516:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber(100) + 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:516:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber(100) + 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:517:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber(1234567891) + AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:517:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber(1234567891) + AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:518:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber(9223372036854775807LL) + AlbaNumber(9223372036854775807LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:518:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber(9223372036854775807LL) + AlbaNumber(9223372036854775807LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:519:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber(100) + AlbaNumber::createFraction(10, 3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:519:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber(100) + AlbaNumber::createFraction(10, 3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:520:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(100) + AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:520:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(100) + AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:533:5: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData(number6.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:533:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData(number6.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:537:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number7.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:537:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number7.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:543:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber(0.1) + AlbaNumber(0);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:543:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber(0.1) + AlbaNumber(0);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:544:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber(10.5) + 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:544:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber(10.5) + 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:545:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber(10.5) + 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:545:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber(10.5) + 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:546:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber(1234567891.1) + AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:546:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber(1234567891.1) + AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:547:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber(10.5) + AlbaNumber::createFraction(10, 7);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:547:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber(10.5) + AlbaNumber::createFraction(10, 7);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:548:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber(10.5) + AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:548:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber(10.5) + AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:561:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number6.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:561:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number6.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:567:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber::createFraction(0, 1) + AlbaNumber::createFraction(0, 1);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:567:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber::createFraction(0, 1) + AlbaNumber::createFraction(0, 1);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:568:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber::createFraction(100, 6) + 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:568:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber::createFraction(100, 6) + 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:569:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber::createFraction(100, 6) + AlbaNumber::createFraction(10, 7);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:569:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber::createFraction(100, 6) + AlbaNumber::createFraction(10, 7);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:570:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber::createFraction(100, 6) + AlbaNumber::createFraction(10, 3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:570:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber::createFraction(100, 6) + AlbaNumber::createFraction(10, 3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:571:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber::createFraction(100, 6) + 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:571:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber::createFraction(100, 6) + 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:572:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber::createFraction(1234567890, 1234567891) + AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:572:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber::createFraction(1234567890, 1234567891) + AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:573:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(1234567891) + AlbaNumber::createFraction(1234567890, 1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:573:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(1234567891) + AlbaNumber::createFraction(1234567890, 1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:574:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8 =
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:574:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8 =
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:576:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9 = AlbaNumber::createFraction(23, 4) + AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:576:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9 = AlbaNumber::createFraction(23, 4) + AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:581:5: warning: variable 'fractionData2' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:581:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:585:5: warning: variable 'fractionData3' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:585:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:599:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number9.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:599:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number9.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:605:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber::createComplexNumber(8.5, 9.5) + 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:605:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber::createComplexNumber(8.5, 9.5) + 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:606:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber::createComplexNumber(8.5, 9.5) + 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:606:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber::createComplexNumber(8.5, 9.5) + 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:607:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber::createComplexNumber(8.5, 9.5) + AlbaNumber::createFraction(63, 4);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:607:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber::createComplexNumber(8.5, 9.5) + AlbaNumber::createFraction(63, 4);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:608:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber::createComplexNumber(8.5, 9.5) + AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:608:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber::createComplexNumber(8.5, 9.5) + AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:611:5: warning: variable 'complexNumberData1' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:611:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:615:5: warning: variable 'complexNumberData2' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:615:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:619:5: warning: variable 'complexNumberData3' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:619:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:623:5: warning: variable 'complexNumberData4' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:623:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:629:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber() - AlbaNumber();
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:629:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber() - AlbaNumber();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:630:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber(100) - 10;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:630:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber(100) - 10;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:631:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber(100) - 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:631:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber(100) - 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:632:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber(1234567891) - AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:632:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber(1234567891) - AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:633:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber(9223372036854775807LL) - AlbaNumber(9223372036854775807LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:633:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber(9223372036854775807LL) - AlbaNumber(9223372036854775807LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:634:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber(100) - AlbaNumber::createFraction(10, 3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:634:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber(100) - AlbaNumber::createFraction(10, 3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:635:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(100) - AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:635:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(100) - AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:648:5: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData(number6.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:648:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData(number6.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:652:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number7.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:652:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number7.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:658:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber(0.1) - AlbaNumber(0);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:658:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber(0.1) - AlbaNumber(0);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:659:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber(10.5) - 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:659:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber(10.5) - 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:660:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber(10.5) - 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:660:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber(10.5) - 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:661:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber(1234567891.1) - AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:661:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber(1234567891.1) - AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:662:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber(10.5) - AlbaNumber::createFraction(10, 7);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:662:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber(10.5) - AlbaNumber::createFraction(10, 7);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:663:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber(10.5) - AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:663:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber(10.5) - AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:676:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number6.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:676:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number6.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:682:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber::createFraction(0, 1) - AlbaNumber::createFraction(0, 1);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:682:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber::createFraction(0, 1) - AlbaNumber::createFraction(0, 1);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:683:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber::createFraction(100, 6) - 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:683:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber::createFraction(100, 6) - 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:684:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber::createFraction(100, 6) - AlbaNumber::createFraction(10, 7);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:684:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber::createFraction(100, 6) - AlbaNumber::createFraction(10, 7);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:685:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber::createFraction(100, 6) - AlbaNumber::createFraction(10, 3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:685:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber::createFraction(100, 6) - AlbaNumber::createFraction(10, 3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:686:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber::createFraction(100, 6) - 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:686:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber::createFraction(100, 6) - 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:687:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber::createFraction(1234567890, 1234567891) - AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:687:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber::createFraction(1234567890, 1234567891) - AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:688:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(1234567891) - AlbaNumber::createFraction(1234567890, 1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:688:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(1234567891) - AlbaNumber::createFraction(1234567890, 1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:689:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8 =
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:689:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8 =
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:691:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9 = AlbaNumber::createFraction(169, 65536) - AlbaNumber::createFraction(1, 262144);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:691:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9 = AlbaNumber::createFraction(169, 65536) - AlbaNumber::createFraction(1, 262144);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:692:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10 = AlbaNumber::createFraction(23, 4) - AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:692:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10 = AlbaNumber::createFraction(23, 4) - AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:697:5: warning: variable 'fractionData2' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:697:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:701:5: warning: variable 'fractionData3' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:701:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:705:5: warning: variable 'fractionData4' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData4(number4.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:705:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData4(number4.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:717:5: warning: variable 'fractionData9' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData9(number9.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:717:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData9(number9.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:721:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number10.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:721:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number10.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:727:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber::createComplexNumber(8.5, 9.5) - 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:727:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber::createComplexNumber(8.5, 9.5) - 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:728:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber::createComplexNumber(8.5, 9.5) - 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:728:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber::createComplexNumber(8.5, 9.5) - 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:729:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber::createComplexNumber(8.5, 9.5) - AlbaNumber::createFraction(63, 4);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:729:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber::createComplexNumber(8.5, 9.5) - AlbaNumber::createFraction(63, 4);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:730:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber::createComplexNumber(8.5, 9.5) - AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:730:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber::createComplexNumber(8.5, 9.5) - AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:733:5: warning: variable 'complexNumberData1' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:733:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:737:5: warning: variable 'complexNumberData2' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:737:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:741:5: warning: variable 'complexNumberData3' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:741:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:745:5: warning: variable 'complexNumberData4' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:745:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:751:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber() * AlbaNumber();
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:751:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber() * AlbaNumber();
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:752:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber(100) * 10;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:752:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber(100) * 10;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:753:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber(100) * 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:753:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber(100) * 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:754:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber(1234567891) * AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:754:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber(1234567891) * AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:755:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber(9223372036854775807LL) * AlbaNumber(9223372036854775807LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:755:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber(9223372036854775807LL) * AlbaNumber(9223372036854775807LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:756:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber(100) * AlbaNumber::createFraction(10, 3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:756:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber(100) * AlbaNumber::createFraction(10, 3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:757:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(100) * AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:757:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(100) * AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:770:5: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData(number6.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:770:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData(number6.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:774:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number7.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:774:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number7.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:780:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber(0.1) * AlbaNumber(0);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:780:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber(0.1) * AlbaNumber(0);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:781:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber(10.5) * 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:781:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber(10.5) * 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:782:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber(10.5) * AlbaNumber::createFraction(10, 7);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:782:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber(10.5) * AlbaNumber::createFraction(10, 7);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:783:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber(10.5) * 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:783:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber(10.5) * 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:784:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber(1234567891.1) * AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:784:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber(1234567891.1) * AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:785:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber(-5878) * AlbaNumber(16769025);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:785:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber(-5878) * AlbaNumber(16769025);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:786:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(10.5) * AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:786:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(10.5) * AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:801:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number7.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:801:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number7.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:807:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber::createFraction(0, 1) * AlbaNumber::createFraction(0, 1);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:807:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber::createFraction(0, 1) * AlbaNumber::createFraction(0, 1);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:808:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber::createFraction(100, 6) * 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:808:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber::createFraction(100, 6) * 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:809:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber::createFraction(100, 6) * AlbaNumber::createFraction(10, 7);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:809:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber::createFraction(100, 6) * AlbaNumber::createFraction(10, 7);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:810:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber::createFraction(100, 6) * 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:810:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber::createFraction(100, 6) * 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:811:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber::createFraction(-2005875, -79507) * AlbaNumber::createFraction(-688, -27);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:811:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber::createFraction(-2005875, -79507) * AlbaNumber::createFraction(-688, -27);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:812:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber::createFraction(1234567890, 1234567891) * AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:812:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber::createFraction(1234567890, 1234567891) * AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:813:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(1234567891) * AlbaNumber::createFraction(1234567890, 1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:813:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(1234567891) * AlbaNumber::createFraction(1234567890, 1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:814:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8 =
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:814:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8 =
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:816:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9 = AlbaNumber::createFraction(23, 4) * AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:816:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9 = AlbaNumber::createFraction(23, 4) * AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:821:5: warning: variable 'fractionData2' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:821:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:825:5: warning: variable 'fractionData3' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:825:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:830:5: warning: variable 'fractionData5' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData5(number5.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:830:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData5(number5.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:840:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number9.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:840:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number9.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:846:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber::createComplexNumber(8.5, 9.5) * 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:846:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber::createComplexNumber(8.5, 9.5) * 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:847:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber::createComplexNumber(8.5, 9.5) * 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:847:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber::createComplexNumber(8.5, 9.5) * 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:848:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber::createComplexNumber(8.5, 9.5) * AlbaNumber::createFraction(63, 4);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:848:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber::createComplexNumber(8.5, 9.5) * AlbaNumber::createFraction(63, 4);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:849:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber::createComplexNumber(8.5, 9.5) * AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:849:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber::createComplexNumber(8.5, 9.5) * AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:852:5: warning: variable 'complexNumberData1' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:852:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:856:5: warning: variable 'complexNumberData2' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:856:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:860:5: warning: variable 'complexNumberData3' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:860:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:864:5: warning: variable 'complexNumberData4' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:864:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:870:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber() / AlbaNumber(1);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:870:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber() / AlbaNumber(1);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:871:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber(100) / 10;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:871:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber(100) / 10;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:872:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber(100) / 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:872:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber(100) / 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:873:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber(1234567893) / AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:873:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber(1234567893) / AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:874:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber(-40) / AlbaNumber(800);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:874:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber(-40) / AlbaNumber(800);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:875:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber(9223372036854775807LL) / AlbaNumber(9223372036854775807LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:875:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber(9223372036854775807LL) / AlbaNumber(9223372036854775807LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:876:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(100) / AlbaNumber::createFraction(11, 3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:876:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(100) / AlbaNumber::createFraction(11, 3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:877:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8 = AlbaNumber(100) / AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:877:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8 = AlbaNumber(100) / AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:886:5: warning: variable 'fractionData1' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData1(number4.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:886:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData1(number4.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:889:5: warning: variable 'fractionData2' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData2(number5.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:889:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData2(number5.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:895:5: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData(number7.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:895:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData(number7.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:899:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number8.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:899:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number8.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:905:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber(0.1) / AlbaNumber(1);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:905:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber(0.1) / AlbaNumber(1);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:906:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber(10.5) / 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:906:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber(10.5) / 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:907:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber(10.5) / 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:907:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber(10.5) / 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:908:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber(1234567891.1) / AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:908:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber(1234567891.1) / AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:909:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber(10.5) / AlbaNumber::createFraction(10, 7);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:909:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber(10.5) / AlbaNumber::createFraction(10, 7);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:910:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber(10.5) / AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:910:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber(10.5) / AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:923:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number6.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:923:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number6.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:929:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber::createFraction(0, 1) / AlbaNumber::createFraction(1, 1);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:929:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber::createFraction(0, 1) / AlbaNumber::createFraction(1, 1);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:930:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber::createFraction(100, 6) / 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:930:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber::createFraction(100, 6) / 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:931:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber::createFraction(100, 6) / AlbaNumber::createFraction(10, 7);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:931:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber::createFraction(100, 6) / AlbaNumber::createFraction(10, 7);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:932:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber::createFraction(100, 6) / 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:932:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber::createFraction(100, 6) / 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:933:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber::createFraction(-946400, -2146689) / AlbaNumber::createFraction(-3566000, -5547);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:933:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber::createFraction(-946400, -2146689) / AlbaNumber::createFraction(-3566000, -5547);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:934:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber::createFraction(1234567890, 1234567891) / AlbaNumber(1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:934:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber::createFraction(1234567890, 1234567891) / AlbaNumber(1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:935:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(1234567891) / AlbaNumber::createFraction(1234567890, 1234567893);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:935:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(1234567891) / AlbaNumber::createFraction(1234567890, 1234567893);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:936:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8 =
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:936:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8 =
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:938:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9 =
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:938:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9 =
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:940:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10 = AlbaNumber::createFraction(23, 4) / AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:940:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10 = AlbaNumber::createFraction(23, 4) / AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:945:5: warning: variable 'fractionData2' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:945:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:949:5: warning: variable 'fractionData3' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:949:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:955:5: warning: variable 'fractionData5' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData5(number5.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:955:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData5(number5.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:963:5: warning: variable 'fractionData8' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData8(number8.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:963:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData8(number8.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:969:5: warning: variable 'complexNumberData' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData(number10.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:969:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData(number10.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:975:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber::createComplexNumber(8.5, 9.5) / 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:975:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber::createComplexNumber(8.5, 9.5) / 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:976:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber::createComplexNumber(8.5, 9.5) / 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:976:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber::createComplexNumber(8.5, 9.5) / 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:977:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber::createComplexNumber(8.5, 9.5) / AlbaNumber::createFraction(63, 4);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:977:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber::createComplexNumber(8.5, 9.5) / AlbaNumber::createFraction(63, 4);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:978:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber::createComplexNumber(8.5, 9.5) / AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:978:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber::createComplexNumber(8.5, 9.5) / AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:981:5: warning: variable 'complexNumberData1' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:981:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:985:5: warning: variable 'complexNumberData2' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:985:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:989:5: warning: variable 'complexNumberData3' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:989:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:993:5: warning: variable 'complexNumberData4' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:993:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:999:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber() ^ AlbaNumber(1);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:999:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber() ^ AlbaNumber(1);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1000:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber(-10) ^ 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1000:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber(-10) ^ 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1001:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber(10) ^ 2.324897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1001:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber(10) ^ 2.324897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1002:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber(1234567891) ^ AlbaNumber(3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1002:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber(1234567891) ^ AlbaNumber(3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1003:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber(9223372036854775807LL) ^ AlbaNumber(5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1003:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber(9223372036854775807LL) ^ AlbaNumber(5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1004:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber(-256) ^ AlbaNumber(-256);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1004:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber(-256) ^ AlbaNumber(-256);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1005:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(10) ^ AlbaNumber::createFraction(11, 3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1005:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(10) ^ AlbaNumber::createFraction(11, 3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1006:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8 = AlbaNumber(10) ^ AlbaNumber::createComplexNumber(-4.5, -3.5);  // This is wrong
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1006:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8 = AlbaNumber(10) ^ AlbaNumber::createComplexNumber(-4.5, -3.5);  // This is wrong
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1007:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9 = AlbaNumber(-1) ^ ALBA_NUMBER_POSITIVE_INFINITY;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1007:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9 = AlbaNumber(-1) ^ ALBA_NUMBER_POSITIVE_INFINITY;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1030:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber(0.1) ^ AlbaNumber(1);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1030:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber(0.1) ^ AlbaNumber(1);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1031:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber(10.5) ^ 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1031:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber(10.5) ^ 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1032:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber(10.5) ^ 2.324897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1032:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber(10.5) ^ 2.324897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1033:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber(1234567891.1) ^ AlbaNumber(3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1033:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber(1234567891.1) ^ AlbaNumber(3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1034:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber(256.000001) ^ AlbaNumber(256.000001);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1034:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber(256.000001) ^ AlbaNumber(256.000001);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1035:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber(-256.000001) ^ AlbaNumber(-256.000001);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1035:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber(-256.000001) ^ AlbaNumber(-256.000001);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1036:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(10.5) ^ AlbaNumber::createFraction(10, 7);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1036:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(10.5) ^ AlbaNumber::createFraction(10, 7);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1037:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8 = AlbaNumber(100.5) ^ AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1037:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8 = AlbaNumber(100.5) ^ AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1038:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9 = AlbaNumber(-100.5) ^ ALBA_NUMBER_POSITIVE_INFINITY;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1038:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9 = AlbaNumber(-100.5) ^ ALBA_NUMBER_POSITIVE_INFINITY;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1061:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber::createFraction(0, 1) ^ AlbaNumber::createFraction(1, 1);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1061:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber::createFraction(0, 1) ^ AlbaNumber::createFraction(1, 1);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1062:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber::createFraction(10, 6) ^ 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1062:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber::createFraction(10, 6) ^ 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1063:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber::createFraction(10, 6) ^ AlbaNumber::createFraction(10, 7);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1063:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber::createFraction(10, 6) ^ AlbaNumber::createFraction(10, 7);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1064:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber::createFraction(10, 6) ^ 2.324897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1064:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber::createFraction(10, 6) ^ 2.324897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1065:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber::createFraction(12345, 12346) ^ AlbaNumber(1234);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1065:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber::createFraction(12345, 12346) ^ AlbaNumber(1234);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1066:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6 = AlbaNumber::createFraction(1234567890, 1234567891) ^ AlbaNumber(3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1066:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6 = AlbaNumber::createFraction(1234567890, 1234567891) ^ AlbaNumber(3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1067:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7 = AlbaNumber(1234567891) ^ AlbaNumber::createFraction(1234567890, 1234567891);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1067:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7 = AlbaNumber(1234567891) ^ AlbaNumber::createFraction(1234567890, 1234567891);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1068:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8 =
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1068:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8 =
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1070:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9 = AlbaNumber::createFraction(23, 4) ^ AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1070:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9 = AlbaNumber::createFraction(23, 4) ^ AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1071:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10 = AlbaNumber::createFraction(23, 4) ^ ALBA_NUMBER_POSITIVE_INFINITY;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1071:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10 = AlbaNumber::createFraction(23, 4) ^ ALBA_NUMBER_POSITIVE_INFINITY;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1076:5: warning: variable 'fractionData2' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1076:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1098:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber::createComplexNumber(8.5, 9.5) ^ 5;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1098:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber::createComplexNumber(8.5, 9.5) ^ 5;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1099:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber::createComplexNumber(8.5, 9.5) ^ 23.24897;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1099:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber::createComplexNumber(8.5, 9.5) ^ 23.24897;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1100:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3 = AlbaNumber::createComplexNumber(8.5, 9.5) ^ AlbaNumber::createFraction(63, 4);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1100:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3 = AlbaNumber::createComplexNumber(8.5, 9.5) ^ AlbaNumber::createFraction(63, 4);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1101:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4 = AlbaNumber::createComplexNumber(8.5, 9.5) ^ AlbaNumber::createComplexNumber(-4.5, -3.5);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1101:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4 = AlbaNumber::createComplexNumber(8.5, 9.5) ^ AlbaNumber::createComplexNumber(-4.5, -3.5);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1102:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5 = AlbaNumber::createComplexNumber(8.5, 9.5) ^ ALBA_NUMBER_POSITIVE_INFINITY;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1102:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5 = AlbaNumber::createComplexNumber(8.5, 9.5) ^ ALBA_NUMBER_POSITIVE_INFINITY;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1105:5: warning: variable 'complexNumberData1' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1105:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1109:5: warning: variable 'complexNumberData2' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1109:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1113:5: warning: variable 'complexNumberData3' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1113:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1117:5: warning: variable 'complexNumberData4' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1117:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1219:5: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData(number4.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1219:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData(number4.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1227:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1227:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1228:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1228:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1229:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1229:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1230:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1230:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1231:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1231:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1232:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1232:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1233:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1233:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1234:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1234:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1235:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1235:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1249:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1249:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1250:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1250:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1251:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1251:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1252:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1252:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1253:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1253:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1254:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1254:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1255:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1255:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1256:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1256:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1257:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1257:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1271:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1271:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1272:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1272:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1273:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1273:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1274:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1274:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1275:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1275:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1276:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1276:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1277:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1277:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1278:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1278:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1279:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1279:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1293:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1293:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1294:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1294:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1295:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1295:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1296:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1296:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1297:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1297:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1298:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1298:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1299:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1299:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1300:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1300:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1301:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1301:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1315:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1315:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1316:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1316:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1317:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1317:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1318:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1318:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1319:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1319:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1320:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1320:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1321:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1321:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1322:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1322:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1323:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1323:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1337:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1337:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1338:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1338:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1339:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1339:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1340:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1340:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1341:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1341:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1342:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1342:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1343:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1343:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1344:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1344:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1345:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1345:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1346:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1346:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1347:5: warning: variable 'number11' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number11(AlbaNumber::createFraction(100, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1347:16: note: FIX-IT applied suggested code changes
    AlbaNumber number11(AlbaNumber::createFraction(100, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1348:5: warning: variable 'number12' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number12(AlbaNumber::createFraction(-100, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1348:16: note: FIX-IT applied suggested code changes
    AlbaNumber number12(AlbaNumber::createFraction(-100, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1349:5: warning: variable 'number13' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number13(ALBA_NUMBER_NOT_A_NUMBER);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1349:16: note: FIX-IT applied suggested code changes
    AlbaNumber number13(ALBA_NUMBER_NOT_A_NUMBER);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1367:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1367:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1368:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1368:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1369:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1369:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1370:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1370:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1371:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1371:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1372:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1372:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1373:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1373:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1374:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1374:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1375:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1375:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1376:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1376:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1377:5: warning: variable 'number11' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number11(AlbaNumber::createFraction(100, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1377:16: note: FIX-IT applied suggested code changes
    AlbaNumber number11(AlbaNumber::createFraction(100, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1378:5: warning: variable 'number12' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number12(AlbaNumber::createFraction(-100, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1378:16: note: FIX-IT applied suggested code changes
    AlbaNumber number12(AlbaNumber::createFraction(-100, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1379:5: warning: variable 'number13' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number13(ALBA_NUMBER_NOT_A_NUMBER);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1379:16: note: FIX-IT applied suggested code changes
    AlbaNumber number13(ALBA_NUMBER_NOT_A_NUMBER);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1397:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1397:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1398:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1398:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1399:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1399:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1400:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1400:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1401:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1401:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1402:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1402:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1403:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1403:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1404:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1404:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1405:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1405:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1406:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1406:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1407:5: warning: variable 'number11' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number11(AlbaNumber::createFraction(100, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1407:16: note: FIX-IT applied suggested code changes
    AlbaNumber number11(AlbaNumber::createFraction(100, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1408:5: warning: variable 'number12' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number12(AlbaNumber::createFraction(-100, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1408:16: note: FIX-IT applied suggested code changes
    AlbaNumber number12(AlbaNumber::createFraction(-100, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1409:5: warning: variable 'number13' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number13(ALBA_NUMBER_NOT_A_NUMBER);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1409:16: note: FIX-IT applied suggested code changes
    AlbaNumber number13(ALBA_NUMBER_NOT_A_NUMBER);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1427:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1427:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1428:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1428:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1429:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1429:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1430:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1430:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1431:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1431:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1432:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1432:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1433:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1433:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1434:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1434:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1435:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1435:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1436:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1436:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1437:5: warning: variable 'number11' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number11(AlbaNumber::createFraction(100, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1437:16: note: FIX-IT applied suggested code changes
    AlbaNumber number11(AlbaNumber::createFraction(100, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1438:5: warning: variable 'number12' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number12(AlbaNumber::createFraction(-100, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1438:16: note: FIX-IT applied suggested code changes
    AlbaNumber number12(AlbaNumber::createFraction(-100, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1439:5: warning: variable 'number13' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number13(ALBA_NUMBER_NOT_A_NUMBER);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1439:16: note: FIX-IT applied suggested code changes
    AlbaNumber number13(ALBA_NUMBER_NOT_A_NUMBER);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1457:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1457:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1458:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1458:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1459:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1459:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1460:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1460:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1461:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1461:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1462:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1462:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1463:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(-100, 10));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1463:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(-100, 10));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1464:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1464:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1465:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1465:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1466:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1466:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1467:5: warning: variable 'number11' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number11(AlbaNumber::createFraction(100, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1467:16: note: FIX-IT applied suggested code changes
    AlbaNumber number11(AlbaNumber::createFraction(100, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1468:5: warning: variable 'number12' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number12(AlbaNumber::createFraction(-100, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1468:16: note: FIX-IT applied suggested code changes
    AlbaNumber number12(AlbaNumber::createFraction(-100, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1469:5: warning: variable 'number13' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number13(ALBA_NUMBER_NOT_A_NUMBER);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1469:16: note: FIX-IT applied suggested code changes
    AlbaNumber number13(ALBA_NUMBER_NOT_A_NUMBER);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1487:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1487:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1488:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1488:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1489:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1489:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1490:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1490:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1491:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1491:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1492:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1492:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1493:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1493:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1494:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(ALBA_NUMBER_NOT_A_NUMBER);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1494:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(ALBA_NUMBER_NOT_A_NUMBER);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1495:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1495:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1496:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1496:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1511:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1511:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1512:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1512:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1513:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1513:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1514:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1514:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1515:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1515:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1516:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1516:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1517:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1517:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1518:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(ALBA_NUMBER_NOT_A_NUMBER);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1518:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(ALBA_NUMBER_NOT_A_NUMBER);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1519:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1519:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1520:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1520:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1535:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1535:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1536:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1536:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1537:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1537:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1538:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1538:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1539:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1539:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1540:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1540:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1541:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1541:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1542:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(ALBA_NUMBER_NOT_A_NUMBER);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1542:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(ALBA_NUMBER_NOT_A_NUMBER);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1543:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1543:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1544:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1544:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1546:5: warning: variable 'fractionData1' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData1(number1.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1546:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData1(number1.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1549:5: warning: variable 'fractionData2' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1549:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1552:5: warning: variable 'fractionData3' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1552:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1555:5: warning: variable 'fractionData4' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData4(number4.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1555:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData4(number4.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1558:5: warning: variable 'fractionData5' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData5(number5.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1558:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData5(number5.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1561:5: warning: variable 'fractionData6' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData6(number6.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1561:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData6(number6.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1564:5: warning: variable 'fractionData7' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData7(number7.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1564:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData7(number7.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1567:5: warning: variable 'fractionData8' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData8(number8.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1567:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData8(number8.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1570:5: warning: variable 'fractionData9' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData9(number9.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1570:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData9(number9.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1573:5: warning: variable 'fractionData10' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData10(number10.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1573:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData10(number10.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1579:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1579:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1580:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(-81237);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1580:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(-81237);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1581:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(34095093U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1581:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(34095093U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1582:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(1000000000000000000LL);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1582:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(1000000000000000000LL);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1583:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(4564.38794);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1583:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(4564.38794);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1584:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1584:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_POSITIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1585:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(ALBA_NUMBER_NEGATIVE_INFINITY);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1585:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(ALBA_NUMBER_NEGATIVE_INFINITY);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1586:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(ALBA_NUMBER_NOT_A_NUMBER);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1586:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(ALBA_NUMBER_NOT_A_NUMBER);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1587:5: warning: variable 'number9' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number9(AlbaNumber::createFraction(-87408, -9802));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1587:16: note: FIX-IT applied suggested code changes
    AlbaNumber number9(AlbaNumber::createFraction(-87408, -9802));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1588:5: warning: variable 'number10' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number10(AlbaNumber::createComplexNumber(-4.5, 3.5));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1588:16: note: FIX-IT applied suggested code changes
    AlbaNumber number10(AlbaNumber::createComplexNumber(-4.5, 3.5));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1590:5: warning: variable 'complexNumberData1' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1590:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData1(number1.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1593:5: warning: variable 'complexNumberData2' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1593:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData2(number2.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1596:5: warning: variable 'complexNumberData3' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1596:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData3(number3.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1599:5: warning: variable 'complexNumberData4' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1599:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData4(number4.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1602:5: warning: variable 'complexNumberData5' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData5(number5.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1602:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData5(number5.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1605:5: warning: variable 'complexNumberData6' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData6(number6.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1605:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData6(number6.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1608:5: warning: variable 'complexNumberData7' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData7(number7.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1608:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData7(number7.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1611:5: warning: variable 'complexNumberData8' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData8(number8.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1611:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData8(number8.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1614:5: warning: variable 'complexNumberData9' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData9(number9.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1614:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData9(number9.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1617:5: warning: variable 'complexNumberData10' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData10(number10.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1617:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData10(number10.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1665:5: warning: variable 'fractionData2' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1665:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData2(number2.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1669:5: warning: variable 'fractionData3' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1669:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData3(number3.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1673:5: warning: variable 'fractionData4' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData fractionData4(number4.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1673:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData fractionData4(number4.getFractionData());
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1681:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(AlbaNumber::createFraction(5, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1681:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(AlbaNumber::createFraction(5, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1701:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(AlbaNumber::createFraction(0, 0));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1701:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(AlbaNumber::createFraction(0, 0));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1719:5: warning: variable 'numberToVerify1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber numberToVerify1 = AlbaNumber(-8) ^ AlbaNumber::createFraction(1, 3);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1719:16: note: FIX-IT applied suggested code changes
    AlbaNumber numberToVerify1 = AlbaNumber(-8) ^ AlbaNumber::createFraction(1, 3);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1720:5: warning: variable 'numberToVerify2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber numberToVerify2 = AlbaNumber(-1) ^ AlbaNumber::createFraction(1, 2);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1720:16: note: FIX-IT applied suggested code changes
    AlbaNumber numberToVerify2 = AlbaNumber(-1) ^ AlbaNumber::createFraction(1, 2);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1721:5: warning: variable 'numberToVerify3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber numberToVerify3 = AlbaNumber(-5) ^ AlbaNumber::createFraction(1, 2);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1721:16: note: FIX-IT applied suggested code changes
    AlbaNumber numberToVerify3 = AlbaNumber(-5) ^ AlbaNumber::createFraction(1, 2);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1726:5: warning: variable 'complexNumberData2' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData2(numberToVerify2.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1726:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData2(numberToVerify2.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1730:5: warning: variable 'complexNumberData3' of type 'AlbaNumber::ComplexNumberData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ComplexNumberData complexNumberData3(numberToVerify3.getComplexNumberData());
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1730:35: note: FIX-IT applied suggested code changes
    AlbaNumber::ComplexNumberData complexNumberData3(numberToVerify3.getComplexNumberData());
                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1736:5: warning: variable 'valueToTest' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber valueToTest(3.99999999999636202119290828705);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1736:16: note: FIX-IT applied suggested code changes
    AlbaNumber valueToTest(3.99999999999636202119290828705);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1738:5: warning: variable 'numerator' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber numerator = (valueToTest ^ AlbaNumber::createFraction(1, 2)) - 2;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1738:16: note: FIX-IT applied suggested code changes
    AlbaNumber numerator = (valueToTest ^ AlbaNumber::createFraction(1, 2)) - 2;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1739:5: warning: variable 'denominator' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber denominator = valueToTest - 4;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1739:16: note: FIX-IT applied suggested code changes
    AlbaNumber denominator = valueToTest - 4;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1740:5: warning: variable 'numberToVerify' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber numberToVerify = numerator / denominator;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1740:16: note: FIX-IT applied suggested code changes
    AlbaNumber numberToVerify = numerator / denominator;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1751:5: warning: variable 'testStream' of type 'stringstream' (aka 'basic_stringstream<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    stringstream testStream;
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1751:18: note: FIX-IT applied suggested code changes
    stringstream testStream;
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1752:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = 3484_AS_ALBA_NUMBER;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1752:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = 3484_AS_ALBA_NUMBER;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1753:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = -85.45631_AS_ALBA_NUMBER;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1753:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = -85.45631_AS_ALBA_NUMBER;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1762:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1 = AlbaNumber::createFraction(2140452409, 32000U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1762:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1 = AlbaNumber::createFraction(2140452409, 32000U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1763:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2 = AlbaNumber::createFraction(63710026, 64000U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1763:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2 = AlbaNumber::createFraction(63710026, 64000U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1764:5: warning: variable 'sum' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber sum = number1 + number2;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1764:16: note: FIX-IT applied suggested code changes
    AlbaNumber sum = number1 + number2;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1771:5: warning: variable 'number' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number = AlbaNumber::createFraction(-1807971431, 3538944000U);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1771:16: note: FIX-IT applied suggested code changes
    AlbaNumber number = AlbaNumber::createFraction(-1807971431, 3538944000U);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1772:5: warning: variable 'product' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber product = number * number;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1772:16: note: FIX-IT applied suggested code changes
    AlbaNumber product = number * number;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1780:5: warning: variable 'number1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number1;
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1780:16: note: FIX-IT applied suggested code changes
    AlbaNumber number1;
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1781:5: warning: variable 'number2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number2(3484);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1781:16: note: FIX-IT applied suggested code changes
    AlbaNumber number2(3484);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1782:5: warning: variable 'number3' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number3(-1561);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1782:16: note: FIX-IT applied suggested code changes
    AlbaNumber number3(-1561);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1783:5: warning: variable 'number4' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number4(-85.45631);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1783:16: note: FIX-IT applied suggested code changes
    AlbaNumber number4(-85.45631);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1784:5: warning: variable 'number5' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number5(ALBA_NUMBER_PI);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1784:16: note: FIX-IT applied suggested code changes
    AlbaNumber number5(ALBA_NUMBER_PI);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1785:5: warning: variable 'number6' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number6(ALBA_NUMBER_E);
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1785:16: note: FIX-IT applied suggested code changes
    AlbaNumber number6(ALBA_NUMBER_E);
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1786:5: warning: variable 'number7' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number7(AlbaNumber::createFraction(-415, 41745));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1786:16: note: FIX-IT applied suggested code changes
    AlbaNumber number7(AlbaNumber::createFraction(-415, 41745));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1787:5: warning: variable 'number8' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber number8(AlbaNumber::createComplexNumber(8.9, 7.8));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\AlbaNumber_unit.cpp:1787:16: note: FIX-IT applied suggested code changes
    AlbaNumber number8(AlbaNumber::createComplexNumber(8.9, 7.8));
               ^
[89/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Number/Interval/AlbaNumberIntervalEndpoint_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:10:5: warning: variable 'endpoint1' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:10:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:11:5: warning: variable 'endpoint2' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:11:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:20:5: warning: variable 'endpoint1' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:20:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:21:5: warning: variable 'endpoint2' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Open, 645);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:21:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Open, 645);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:22:5: warning: variable 'endpoint3' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint3(AlbaNumberIntervalEndpoint::Type::Open, 784);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:22:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint3(AlbaNumberIntervalEndpoint::Type::Open, 784);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:23:5: warning: variable 'endpoint4' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint4(AlbaNumberIntervalEndpoint::Type::Close, 645);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:23:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint4(AlbaNumberIntervalEndpoint::Type::Close, 645);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:24:5: warning: variable 'endpoint5' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint5(AlbaNumberIntervalEndpoint::Type::Close, 784);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:24:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint5(AlbaNumberIntervalEndpoint::Type::Close, 784);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:33:5: warning: variable 'endpoint1' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:33:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:34:5: warning: variable 'endpoint2' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:34:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:41:5: warning: variable 'endpoint1' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:41:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:42:5: warning: variable 'endpoint2' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:42:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:49:5: warning: variable 'endpoint1' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:49:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:50:5: warning: variable 'endpoint2' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:50:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:57:5: warning: variable 'endpoint1' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:57:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:58:5: warning: variable 'endpoint2' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:58:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:65:5: warning: variable 'endpoint1' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:65:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:66:5: warning: variable 'endpoint2' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:66:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:83:5: warning: variable 'endpoint1' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:83:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint1(AlbaNumberIntervalEndpoint::Type::Open, 645);
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:84:5: warning: variable 'endpoint2' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalEndpoint_unit.cpp:84:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint2(AlbaNumberIntervalEndpoint::Type::Close, 784);
                               ^
[90/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Number/Interval/AlbaNumberIntervalHelpers_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:10:5: warning: variable 'intervals' of type 'AlbaNumberIntervals' (aka 'vector<AlbaNumberInterval>') can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervals intervals{
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:10:25: note: FIX-IT applied suggested code changes
    AlbaNumberIntervals intervals{
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:26:5: warning: variable 'intervals' of type 'AlbaNumberIntervals' (aka 'vector<AlbaNumberInterval>') can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervals intervals{
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:26:25: note: FIX-IT applied suggested code changes
    AlbaNumberIntervals intervals{
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:49:5: warning: variable 'intervals' of type 'AlbaNumberIntervals' (aka 'vector<AlbaNumberInterval>') can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervals intervals{
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:49:25: note: FIX-IT applied suggested code changes
    AlbaNumberIntervals intervals{
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:67:5: warning: variable 'endpoint' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint(createOpenEndpoint(645));
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:67:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint(createOpenEndpoint(645));
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:74:5: warning: variable 'endpoint' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint(createCloseEndpoint(784));
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:74:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint(createCloseEndpoint(784));
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:81:5: warning: variable 'closeEndpoint' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint closeEndpoint(createEndpoint(true, 6541));
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:81:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint closeEndpoint(createEndpoint(true, 6541));
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:82:5: warning: variable 'openEndpoint' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint openEndpoint(createEndpoint(false, 5416));
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:82:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint openEndpoint(createEndpoint(false, 5416));
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:91:5: warning: variable 'endpoint' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint(createPositiveInfinityOpenEndpoint());
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:91:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint(createPositiveInfinityOpenEndpoint());
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:98:5: warning: variable 'endpoint' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint endpoint(createNegativeInfinityOpenEndpoint());
    ^
                               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:98:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint endpoint(createNegativeInfinityOpenEndpoint());
                               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:105:5: warning: variable 'interval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval(createAllRealValuesInterval());
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:105:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval(createAllRealValuesInterval());
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:112:5: warning: variable 'numbers' of type 'AlbaNumbers' (aka 'vector<AlbaNumber>') can be declared 'const' [misc-const-correctness]
    AlbaNumbers numbers{1, 2, 3, 4, 5};
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:112:17: note: FIX-IT applied suggested code changes
    AlbaNumbers numbers{1, 2, 3, 4, 5};
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:113:5: warning: variable 'interval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval(createCloseEndpoint(2), createCloseEndpoint(4));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberIntervalHelpers_unit.cpp:113:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval(createCloseEndpoint(2), createCloseEndpoint(4));
                       ^
[91/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Number/Interval/AlbaNumberInterval_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:11:5: warning: variable 'interval1' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval1(createOpenEndpoint(645), createCloseEndpoint(784));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:11:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval1(createOpenEndpoint(645), createCloseEndpoint(784));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:12:5: warning: variable 'interval2' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval2(createCloseEndpoint(784), createOpenEndpoint(645));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:12:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval2(createCloseEndpoint(784), createOpenEndpoint(645));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:21:5: warning: variable 'interval1' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval1(createOpenEndpoint(451), createOpenEndpoint(658));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:21:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval1(createOpenEndpoint(451), createOpenEndpoint(658));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:22:5: warning: variable 'interval2' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval2(createOpenEndpoint(451), createOpenEndpoint(658));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:22:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval2(createOpenEndpoint(451), createOpenEndpoint(658));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:23:5: warning: variable 'interval3' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval3(createOpenEndpoint(999), createOpenEndpoint(658));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:23:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval3(createOpenEndpoint(999), createOpenEndpoint(658));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:24:5: warning: variable 'interval4' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval4(createOpenEndpoint(451), createOpenEndpoint(999));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:24:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval4(createOpenEndpoint(451), createOpenEndpoint(999));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:25:5: warning: variable 'interval5' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval5(createOpenEndpoint(999), createOpenEndpoint(999));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:25:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval5(createOpenEndpoint(999), createOpenEndpoint(999));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:34:5: warning: variable 'openInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval openInterval(createOpenEndpoint(3), createOpenEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:34:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval openInterval(createOpenEndpoint(3), createOpenEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:35:5: warning: variable 'closeInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval closeInterval(createCloseEndpoint(3), createCloseEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:35:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval closeInterval(createCloseEndpoint(3), createCloseEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:50:5: warning: variable 'openInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval openInterval(createOpenEndpoint(3), createOpenEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:50:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval openInterval(createOpenEndpoint(3), createOpenEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:51:5: warning: variable 'closeInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval closeInterval(createCloseEndpoint(3), createCloseEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:51:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval closeInterval(createCloseEndpoint(3), createCloseEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:66:5: warning: variable 'openInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval openInterval(createOpenEndpoint(3), createOpenEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:66:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval openInterval(createOpenEndpoint(3), createOpenEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:67:5: warning: variable 'closeInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval closeInterval(createCloseEndpoint(3), createCloseEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:67:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval closeInterval(createCloseEndpoint(3), createCloseEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:92:5: warning: variable 'openInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval openInterval(createOpenEndpoint(3), createOpenEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:92:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval openInterval(createOpenEndpoint(3), createOpenEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:93:5: warning: variable 'closeInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval closeInterval(createCloseEndpoint(3), createCloseEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:93:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval closeInterval(createCloseEndpoint(3), createCloseEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:94:5: warning: variable 'intervalToTest1' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval intervalToTest1(createOpenEndpoint(3), createOpenEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:94:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval intervalToTest1(createOpenEndpoint(3), createOpenEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:95:5: warning: variable 'intervalToTest2' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval intervalToTest2(createCloseEndpoint(3), createCloseEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:95:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval intervalToTest2(createCloseEndpoint(3), createCloseEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:96:5: warning: variable 'intervalToTest3' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval intervalToTest3(createOpenEndpoint(3), createOpenEndpoint(4));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:96:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval intervalToTest3(createOpenEndpoint(3), createOpenEndpoint(4));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:97:5: warning: variable 'intervalToTest4' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval intervalToTest4(createCloseEndpoint(3), createCloseEndpoint(4));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:97:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval intervalToTest4(createCloseEndpoint(3), createCloseEndpoint(4));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:98:5: warning: variable 'intervalToTest5' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval intervalToTest5(createOpenEndpoint(4), createOpenEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:98:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval intervalToTest5(createOpenEndpoint(4), createOpenEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:99:5: warning: variable 'intervalToTest6' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval intervalToTest6(createCloseEndpoint(4), createCloseEndpoint(5));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:99:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval intervalToTest6(createCloseEndpoint(4), createCloseEndpoint(5));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:100:5: warning: variable 'intervalToTest7' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval intervalToTest7(createOpenEndpoint(2), createOpenEndpoint(4));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:100:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval intervalToTest7(createOpenEndpoint(2), createOpenEndpoint(4));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:101:5: warning: variable 'intervalToTest8' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval intervalToTest8(createOpenEndpoint(4), createOpenEndpoint(6));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:101:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval intervalToTest8(createOpenEndpoint(4), createOpenEndpoint(6));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:122:5: warning: variable 'interval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval(createOpenEndpoint(645), createCloseEndpoint(784));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:122:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval(createOpenEndpoint(645), createCloseEndpoint(784));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:129:5: warning: variable 'interval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval(createOpenEndpoint(645), createCloseEndpoint(784));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:129:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval(createOpenEndpoint(645), createCloseEndpoint(784));
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:158:5: warning: variable 'interval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval interval(createOpenEndpoint(645), createCloseEndpoint(784));
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Number\Interval\AlbaNumberInterval_unit.cpp:158:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval interval(createOpenEndpoint(645), createCloseEndpoint(784));
                       ^
[92/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Ratio/AlbaRatio_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Ratio\AlbaRatio_unit.cpp:8:5: warning: variable 'actualRatio' of type 'AlbaRatio' can be declared 'const' [misc-const-correctness]
    AlbaRatio actualRatio(0, 0);
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Ratio\AlbaRatio_unit.cpp:8:15: note: FIX-IT applied suggested code changes
    AlbaRatio actualRatio(0, 0);
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Ratio\AlbaRatio_unit.cpp:18:5: warning: variable 'actualRatio' of type 'AlbaRatio' can be declared 'const' [misc-const-correctness]
    AlbaRatio actualRatio(0, 2983);
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Ratio\AlbaRatio_unit.cpp:18:15: note: FIX-IT applied suggested code changes
    AlbaRatio actualRatio(0, 2983);
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Ratio\AlbaRatio_unit.cpp:28:5: warning: variable 'actualRatio' of type 'AlbaRatio' can be declared 'const' [misc-const-correctness]
    AlbaRatio actualRatio(98, 0);
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Ratio\AlbaRatio_unit.cpp:28:15: note: FIX-IT applied suggested code changes
    AlbaRatio actualRatio(98, 0);
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Ratio\AlbaRatio_unit.cpp:38:5: warning: variable 'actualRatio' of type 'AlbaRatio' can be declared 'const' [misc-const-correctness]
    AlbaRatio actualRatio(16, 2);
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Ratio\AlbaRatio_unit.cpp:38:15: note: FIX-IT applied suggested code changes
    AlbaRatio actualRatio(16, 2);
              ^
[93/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Vector/AlbaMathVectorUtilities_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Vector/AlbaMathVector.hpp:26:9: warning: variable 'limit' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
        size_t limit = std::min(SIZE, static_cast<size_t>(values.size()));
        ^
               const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Vector/AlbaMathVector.hpp:26:16: note: FIX-IT applied suggested code changes
        size_t limit = std::min(SIZE, static_cast<size_t>(values.size()));
               ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Vector/AlbaMathVectorUtilities.hpp:134:5: warning: variable 'magnitude' of type 'double' can be declared 'const' [misc-const-correctness]
    double magnitude = vectorToBeRotated.getMagnitude();
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Vector/AlbaMathVectorUtilities.hpp:134:12: note: FIX-IT applied suggested code changes
    double magnitude = vectorToBeRotated.getMagnitude();
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Vector/AlbaMathVectorUtilities.hpp:135:5: warning: variable 'newAngleInRadians' of type 'double' can be declared 'const' [misc-const-correctness]
    double newAngleInRadians = angle.getRadians() + acos(vectorToBeRotated.getValueAt(0) / magnitude);
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Math/Vector/AlbaMathVectorUtilities.hpp:135:12: note: FIX-IT applied suggested code changes
    double newAngleInRadians = angle.getRadians() + acos(vectorToBeRotated.getValueAt(0) / magnitude);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:60:5: warning: variable 'squareRootOf2Over2' of type 'double' can be declared 'const' [misc-const-correctness]
    double squareRootOf2Over2 = sqrt(static_cast<double>(2)) / 2;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:60:12: note: FIX-IT applied suggested code changes
    double squareRootOf2Over2 = sqrt(static_cast<double>(2)) / 2;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:65:5: warning: variable 'vectorToProjectTo' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements vectorToProjectTo{10, 10};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:65:23: note: FIX-IT applied suggested code changes
    VectorTwoElements vectorToProjectTo{10, 10};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:66:5: warning: variable 'vectorToProjectFrom' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements vectorToProjectFrom{0, 5};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:66:23: note: FIX-IT applied suggested code changes
    VectorTwoElements vectorToProjectFrom{0, 5};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:68:5: warning: variable 'vectorToExpect' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements vectorToExpect{2.5, 2.5};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:68:23: note: FIX-IT applied suggested code changes
    VectorTwoElements vectorToExpect{2.5, 2.5};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:73:5: warning: variable 'vectorToProjectTo' of type 'VectorThreeElements' (aka 'AlbaMathVector<double, 3>') can be declared 'const' [misc-const-correctness]
    VectorThreeElements vectorToProjectTo{6, -3, 2};
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:73:25: note: FIX-IT applied suggested code changes
    VectorThreeElements vectorToProjectTo{6, -3, 2};
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:74:5: warning: variable 'vectorToProjectFrom' of type 'VectorThreeElements' (aka 'AlbaMathVector<double, 3>') can be declared 'const' [misc-const-correctness]
    VectorThreeElements vectorToProjectFrom{2, 1, -3};
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:74:25: note: FIX-IT applied suggested code changes
    VectorThreeElements vectorToProjectFrom{2, 1, -3};
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:76:5: warning: variable 'vectorToExpect' of type 'VectorThreeElements' (aka 'AlbaMathVector<double, 3>') can be declared 'const' [misc-const-correctness]
    VectorThreeElements vectorToExpect{
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:76:25: note: FIX-IT applied suggested code changes
    VectorThreeElements vectorToExpect{
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:82:5: warning: variable 'mathVector1' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector1{2, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:82:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector1{2, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:83:5: warning: variable 'mathVector2' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector2{-1, 2};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:83:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector2{-1, 2};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:89:5: warning: variable 'mathVector1' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector1{2, 1};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:89:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector1{2, 1};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:90:5: warning: variable 'mathVector2' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector2{3, -1};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:90:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector2{3, -1};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:96:5: warning: variable 'mathVector1' of type 'VectorThreeElements' (aka 'AlbaMathVector<double, 3>') can be declared 'const' [misc-const-correctness]
    VectorThreeElements mathVector1{2, 1, -3};
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:96:25: note: FIX-IT applied suggested code changes
    VectorThreeElements mathVector1{2, 1, -3};
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:97:5: warning: variable 'mathVector2' of type 'VectorThreeElements' (aka 'AlbaMathVector<double, 3>') can be declared 'const' [misc-const-correctness]
    VectorThreeElements mathVector2{3, -1, 4};
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:97:25: note: FIX-IT applied suggested code changes
    VectorThreeElements mathVector2{3, -1, 4};
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:99:5: warning: variable 'vectorToExpect' of type 'VectorThreeElements' (aka 'AlbaMathVector<double, 3>') can be declared 'const' [misc-const-correctness]
    VectorThreeElements vectorToExpect{1, -17, -5};
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:99:25: note: FIX-IT applied suggested code changes
    VectorThreeElements vectorToExpect{1, -17, -5};
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:104:5: warning: variable 'mathVector1' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector1{0, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:104:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector1{0, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:105:5: warning: variable 'mathVector2' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector2{10, 0};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:105:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector2{10, 0};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:107:5: warning: variable 'expectedAngle' of type 'AlbaAngle' can be declared 'const' [misc-const-correctness]
    AlbaAngle expectedAngle(AngleUnitType::Radians, getPi() / 2);
    ^
              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:107:15: note: FIX-IT applied suggested code changes
    AlbaAngle expectedAngle(AngleUnitType::Radians, getPi() / 2);
              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:112:5: warning: variable 'vectorToProjectTo' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements vectorToProjectTo{0, 5};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:112:23: note: FIX-IT applied suggested code changes
    VectorTwoElements vectorToProjectTo{0, 5};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:113:5: warning: variable 'vectorToProjectFrom' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements vectorToProjectFrom{10, 10};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:113:23: note: FIX-IT applied suggested code changes
    VectorTwoElements vectorToProjectFrom{10, 10};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:119:5: warning: variable 'vectorToProjectTo' of type 'VectorThreeElements' (aka 'AlbaMathVector<double, 3>') can be declared 'const' [misc-const-correctness]
    VectorThreeElements vectorToProjectTo{6, -3, 2};
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:119:25: note: FIX-IT applied suggested code changes
    VectorThreeElements vectorToProjectTo{6, -3, 2};
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:120:5: warning: variable 'vectorToProjectFrom' of type 'VectorThreeElements' (aka 'AlbaMathVector<double, 3>') can be declared 'const' [misc-const-correctness]
    VectorThreeElements vectorToProjectFrom{2, 1, -3};
    ^
                        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:120:25: note: FIX-IT applied suggested code changes
    VectorThreeElements vectorToProjectFrom{2, 1, -3};
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:126:5: warning: variable 'mathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:126:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:128:5: warning: variable 'expectedMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements expectedMathVector{-4, 3};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVectorUtilities_unit.cpp:128:23: note: FIX-IT applied suggested code changes
    VectorTwoElements expectedMathVector{-4, 3};
                      ^
[94/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Math/Vector/AlbaMathVector_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:14:5: warning: variable 'mathVector1' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector1;
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:14:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector1;
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:15:5: warning: variable 'values' of type 'VectorTwoElements::ValuesInArray' (aka 'array<double, 2ULL>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements::ValuesInArray values{6, 7};
    ^
                                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:15:38: note: FIX-IT applied suggested code changes
    VectorTwoElements::ValuesInArray values{6, 7};
                                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:16:5: warning: variable 'mathVector2' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector2(values);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:16:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector2(values);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:17:5: warning: variable 'mathVector3' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector3{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:17:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector3{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:31:5: warning: variable 'mathVector1' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector1{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:31:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector1{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:32:5: warning: variable 'mathVector2' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector2{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:32:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector2{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:33:5: warning: variable 'mathVector3' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector3{3, 3};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:33:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector3{3, 3};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:34:5: warning: variable 'mathVector4' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector4{4, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:34:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector4{4, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:35:5: warning: variable 'mathVector5' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector5{5, 5};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:35:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector5{5, 5};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:36:5: warning: variable 'mathVector6' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector6{static_cast<double>(1) / 3, static_cast<double>(4) / 3};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:36:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector6{static_cast<double>(1) / 3, static_cast<double>(4) / 3};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:47:5: warning: variable 'mathVector1' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector1{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:47:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector1{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:48:5: warning: variable 'mathVector2' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector2{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:48:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector2{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:49:5: warning: variable 'mathVector3' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector3{3, 3};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:49:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector3{3, 3};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:50:5: warning: variable 'mathVector4' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector4{4, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:50:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector4{4, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:51:5: warning: variable 'mathVector5' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector5{5, 5};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:51:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector5{5, 5};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:52:5: warning: variable 'mathVector6' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector6{static_cast<double>(1) / 3, static_cast<double>(4) / 3};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:52:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector6{static_cast<double>(1) / 3, static_cast<double>(4) / 3};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:63:5: warning: variable 'mathVector1' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector1{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:63:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector1{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:64:5: warning: variable 'mathVector2' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector2{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:64:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector2{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:65:5: warning: variable 'mathVector3' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector3{3, 3};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:65:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector3{3, 3};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:66:5: warning: variable 'mathVector4' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector4{4, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:66:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector4{4, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:67:5: warning: variable 'mathVector5' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector5{5, 5};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:67:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector5{5, 5};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:68:5: warning: variable 'mathVector6' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector6{static_cast<double>(1) / 3, static_cast<double>(4) / 3};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:68:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector6{static_cast<double>(1) / 3, static_cast<double>(4) / 3};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:82:5: warning: variable 'mathVector1' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector1{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:82:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector1{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:83:5: warning: variable 'mathVector2' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector2{5, 6};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:83:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector2{5, 6};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:85:5: warning: variable 'actualMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements actualMathVector(mathVector1 + mathVector2);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:85:23: note: FIX-IT applied suggested code changes
    VectorTwoElements actualMathVector(mathVector1 + mathVector2);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:87:5: warning: variable 'expectedMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements expectedMathVector{8, 10};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:87:23: note: FIX-IT applied suggested code changes
    VectorTwoElements expectedMathVector{8, 10};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:92:5: warning: variable 'mathVector1' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector1{7, 9};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:92:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector1{7, 9};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:93:5: warning: variable 'mathVector2' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector2{5, 6};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:93:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector2{5, 6};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:95:5: warning: variable 'actualMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements actualMathVector(mathVector1 - mathVector2);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:95:23: note: FIX-IT applied suggested code changes
    VectorTwoElements actualMathVector(mathVector1 - mathVector2);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:97:5: warning: variable 'expectedMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements expectedMathVector{2, 3};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:97:23: note: FIX-IT applied suggested code changes
    VectorTwoElements expectedMathVector{2, 3};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:102:5: warning: variable 'mathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:102:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:104:5: warning: variable 'actualMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements actualMathVector(+mathVector);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:104:23: note: FIX-IT applied suggested code changes
    VectorTwoElements actualMathVector(+mathVector);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:106:5: warning: variable 'expectedMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements expectedMathVector{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:106:23: note: FIX-IT applied suggested code changes
    VectorTwoElements expectedMathVector{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:111:5: warning: variable 'mathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector{7, 9};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:111:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector{7, 9};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:113:5: warning: variable 'actualMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements actualMathVector(-mathVector);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:113:23: note: FIX-IT applied suggested code changes
    VectorTwoElements actualMathVector(-mathVector);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:115:5: warning: variable 'expectedMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements expectedMathVector{-7, -9};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:115:23: note: FIX-IT applied suggested code changes
    VectorTwoElements expectedMathVector{-7, -9};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:120:5: warning: variable 'mathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:120:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:122:5: warning: variable 'actualMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements actualMathVector(mathVector * 2);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:122:23: note: FIX-IT applied suggested code changes
    VectorTwoElements actualMathVector(mathVector * 2);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:124:5: warning: variable 'expectedMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements expectedMathVector{6, 8};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:124:23: note: FIX-IT applied suggested code changes
    VectorTwoElements expectedMathVector{6, 8};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:129:5: warning: variable 'mathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector{7, 9};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:129:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector{7, 9};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:131:5: warning: variable 'actualMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements actualMathVector(mathVector / 2);
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:131:23: note: FIX-IT applied suggested code changes
    VectorTwoElements actualMathVector(mathVector / 2);
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:133:5: warning: variable 'expectedMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements expectedMathVector{3.5, 4.5};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:133:23: note: FIX-IT applied suggested code changes
    VectorTwoElements expectedMathVector{3.5, 4.5};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:139:5: warning: variable 'anotherMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements anotherMathVector{5, 6};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:139:23: note: FIX-IT applied suggested code changes
    VectorTwoElements anotherMathVector{5, 6};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:143:5: warning: variable 'expectedMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements expectedMathVector{8, 10};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:143:23: note: FIX-IT applied suggested code changes
    VectorTwoElements expectedMathVector{8, 10};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:149:5: warning: variable 'anotherMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements anotherMathVector{5, 6};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:149:23: note: FIX-IT applied suggested code changes
    VectorTwoElements anotherMathVector{5, 6};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:153:5: warning: variable 'expectedMathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements expectedMathVector{2, 3};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:153:23: note: FIX-IT applied suggested code changes
    VectorTwoElements expectedMathVector{2, 3};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:158:5: warning: variable 'mathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector{3.5, 4.5};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:158:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector{3.5, 4.5};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:164:5: warning: variable 'mathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector{3.5, 4.5};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:164:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector{3.5, 4.5};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:172:5: warning: variable 'mathVector1' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector1{3, 4};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:172:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector1{3, 4};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:173:5: warning: variable 'mathVector2' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector2{6, 7};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:173:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector2{6, 7};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:180:5: warning: variable 'mathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector{3.5, 4.5};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:180:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector{3.5, 4.5};
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:191:5: warning: variable 'mathVector' of type 'VectorTwoElements' (aka 'AlbaMathVector<double, 2>') can be declared 'const' [misc-const-correctness]
    VectorTwoElements mathVector{3.5, 4.5};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Math\Vector\AlbaMathVector_unit.cpp:191:23: note: FIX-IT applied suggested code changes
    VectorTwoElements mathVector{3.5, 4.5};
                      ^
[95/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Memory/AlbaCast_unit.cpp.obj
[96/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Memory/AlbaMemoryBuffer_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:12:5: warning: variable 'buffer' of type 'AlbaMemoryBuffer' can be declared 'const' [misc-const-correctness]
    AlbaMemoryBuffer buffer;
    ^
                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:12:22: note: FIX-IT applied suggested code changes
    AlbaMemoryBuffer buffer;
                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:23:5: warning: variable 'output' of type 'int' can be declared 'const' [misc-const-correctness]
    int output = *reinterpret_cast<int*>(buffer.getBufferPointer());
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:23:9: note: FIX-IT applied suggested code changes
    int output = *reinterpret_cast<int*>(buffer.getBufferPointer());
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:31:5: warning: variable 'buffer1' of type 'AlbaMemoryBuffer' can be declared 'const' [misc-const-correctness]
    AlbaMemoryBuffer buffer1(static_cast<void*>(&input), sizeof(input));
    ^
                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:31:22: note: FIX-IT applied suggested code changes
    AlbaMemoryBuffer buffer1(static_cast<void*>(&input), sizeof(input));
                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:35:5: warning: variable 'output' of type 'int' can be declared 'const' [misc-const-correctness]
    int output = *reinterpret_cast<int*>(buffer2.getBufferPointer());
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:35:9: note: FIX-IT applied suggested code changes
    int output = *reinterpret_cast<int*>(buffer2.getBufferPointer());
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:43:5: warning: variable 'buffer1' of type 'AlbaMemoryBuffer' can be declared 'const' [misc-const-correctness]
    AlbaMemoryBuffer buffer1(static_cast<void*>(&input), sizeof(input));
    ^
                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:43:22: note: FIX-IT applied suggested code changes
    AlbaMemoryBuffer buffer1(static_cast<void*>(&input), sizeof(input));
                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:48:5: warning: variable 'output' of type 'int' can be declared 'const' [misc-const-correctness]
    int output = *reinterpret_cast<int*>(buffer2.getBufferPointer());
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:48:9: note: FIX-IT applied suggested code changes
    int output = *reinterpret_cast<int*>(buffer2.getBufferPointer());
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:62:5: warning: variable 'output2' of type 'int' can be declared 'const' [misc-const-correctness]
    int output2 = *reinterpret_cast<int*>(buffer2.getBufferPointer());
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:62:9: note: FIX-IT applied suggested code changes
    int output2 = *reinterpret_cast<int*>(buffer2.getBufferPointer());
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:77:5: warning: variable 'output2' of type 'int' can be declared 'const' [misc-const-correctness]
    int output2 = *reinterpret_cast<int*>(buffer2.getBufferPointer());
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:77:9: note: FIX-IT applied suggested code changes
    int output2 = *reinterpret_cast<int*>(buffer2.getBufferPointer());
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:85:5: warning: variable 'buffer1' of type 'AlbaMemoryBuffer' can be declared 'const' [misc-const-correctness]
    AlbaMemoryBuffer buffer1(static_cast<void*>(&input), sizeof(input));
    ^
                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:85:22: note: FIX-IT applied suggested code changes
    AlbaMemoryBuffer buffer1(static_cast<void*>(&input), sizeof(input));
                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:86:5: warning: variable 'buffer2' of type 'AlbaMemoryBuffer' can be declared 'const' [misc-const-correctness]
    AlbaMemoryBuffer buffer2;
    ^
                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:86:22: note: FIX-IT applied suggested code changes
    AlbaMemoryBuffer buffer2;
                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:122:5: warning: variable 'output' of type 'int' can be declared 'const' [misc-const-correctness]
    int output = *reinterpret_cast<int*>(buffer.getBufferPointer());
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:122:9: note: FIX-IT applied suggested code changes
    int output = *reinterpret_cast<int*>(buffer.getBufferPointer());
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:149:5: warning: variable 'output' of type 'int' can be declared 'const' [misc-const-correctness]
    int output = *reinterpret_cast<int*>(buffer.getBufferPointer());
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:149:9: note: FIX-IT applied suggested code changes
    int output = *reinterpret_cast<int*>(buffer.getBufferPointer());
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:181:5: warning: variable 'output' of type 'int' can be declared 'const' [misc-const-correctness]
    int output = *reinterpret_cast<int*>(buffer.getBufferPointer());
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:181:9: note: FIX-IT applied suggested code changes
    int output = *reinterpret_cast<int*>(buffer.getBufferPointer());
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:201:5: warning: variable 'output' of type 'Sample' can be declared 'const' [misc-const-correctness]
    Sample output = *reinterpret_cast<Sample*>(buffer.getBufferPointer());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:201:12: note: FIX-IT applied suggested code changes
    Sample output = *reinterpret_cast<Sample*>(buffer.getBufferPointer());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:211:5: warning: variable 'input' of type 'int' can be declared 'const' [misc-const-correctness]
    int input = 0x12345678;
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:211:9: note: FIX-IT applied suggested code changes
    int input = 0x12345678;
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:215:5: warning: variable 'output' of type 'int &' can be declared 'const' [misc-const-correctness]
    int& output(buffer.retrieveObjectAsReference<int>());
    ^
        const
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:215:8: note: FIX-IT applied suggested code changes
    int& output(buffer.retrieveObjectAsReference<int>());
       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:242:5: warning: variable 'buffer' of type 'AlbaMemoryBuffer' can be declared 'const' [misc-const-correctness]
    AlbaMemoryBuffer buffer(static_cast<void*>(&input), sizeof(input));
    ^
                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Memory\AlbaMemoryBuffer_unit.cpp:242:22: note: FIX-IT applied suggested code changes
    AlbaMemoryBuffer buffer(static_cast<void*>(&input), sizeof(input));
                     ^
[97/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Memory/AlbaRaiiafPointer_unit.cpp.obj
[98/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/PathHandler/AlbaPathHandler_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaPathHandler_unit.cpp:13:5: warning: variable 'pathHandler' of type 'AlbaPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaPathHandler pathHandler("");
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaPathHandler_unit.cpp:13:21: note: FIX-IT applied suggested code changes
    AlbaPathHandler pathHandler("");
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaPathHandler_unit.cpp:22:5: warning: variable 'pathHandler' of type 'AlbaPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaPathHandler pathHandler(R"(APRG_DRIVE:\APRG12345\Aprg!@#$%Common\Aprg1111Common\tst\76543.txt)", R"(\)");
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaPathHandler_unit.cpp:22:21: note: FIX-IT applied suggested code changes
    AlbaPathHandler pathHandler(R"(APRG_DRIVE:\APRG12345\Aprg!@#$%Common\Aprg1111Common\tst\76543.txt)", R"(\)");
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaPathHandler_unit.cpp:32:5: warning: variable 'pathHandler' of type 'AlbaPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaPathHandler pathHandler("src", R"(\)");
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaPathHandler_unit.cpp:32:21: note: FIX-IT applied suggested code changes
    AlbaPathHandler pathHandler("src", R"(\)");
                    ^
[99/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/PathHandler/AlbaWebPathHandler_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaWebPathHandler_unit.cpp:13:5: warning: variable 'pathHandler' of type 'AlbaWebPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWebPathHandler pathHandler("");
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaWebPathHandler_unit.cpp:13:24: note: FIX-IT applied suggested code changes
    AlbaWebPathHandler pathHandler("");
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaWebPathHandler_unit.cpp:25:5: warning: variable 'pathHandler' of type 'AlbaWebPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWebPathHandler pathHandler(R"(\\::://directory!@#$%12345\\\\/\\\\/file.txt)");
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaWebPathHandler_unit.cpp:25:24: note: FIX-IT applied suggested code changes
    AlbaWebPathHandler pathHandler(R"(\\::://directory!@#$%12345\\\\/\\\\/file.txt)");
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaWebPathHandler_unit.cpp:37:5: warning: variable 'pathHandler' of type 'AlbaWebPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWebPathHandler pathHandler(R"(hTTp://www.google.com\\\\/\\\\/!@#$%12345\\///)");
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaWebPathHandler_unit.cpp:37:24: note: FIX-IT applied suggested code changes
    AlbaWebPathHandler pathHandler(R"(hTTp://www.google.com\\\\/\\\\/!@#$%12345\\///)");
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaWebPathHandler_unit.cpp:49:5: warning: variable 'pathHandler' of type 'AlbaWebPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWebPathHandler pathHandler("http://a.mhcdn.net/store/manga/12114/001.0/compressed/r049.jpg?v=1354256522");
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\PathHandler\AlbaWebPathHandler_unit.cpp:49:24: note: FIX-IT applied suggested code changes
    AlbaWebPathHandler pathHandler("http://a.mhcdn.net/store/manga/12114/001.0/compressed/r049.jpg?v=1354256522");
                       ^
[100/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Print/AlbaLogPrints_unit.cpp.obj
[101/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Print/AlbaPrintFunctions_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:52:5: warning: variable 'integerToTest' of type 'int' can be declared 'const' [misc-const-correctness]
    int integerToTest = 500;
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:52:9: note: FIX-IT applied suggested code changes
    int integerToTest = 500;
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:61:5: warning: variable 'stringToTest' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string stringToTest = "std::string to test";
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:61:12: note: FIX-IT applied suggested code changes
    string stringToTest = "std::string to test";
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:88:5: warning: variable 'pointerToTest' of type 'unique_ptr<int>' can be declared 'const' [misc-const-correctness]
    unique_ptr<int> pointerToTest(make_unique<int>(500));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:88:21: note: FIX-IT applied suggested code changes
    unique_ptr<int> pointerToTest(make_unique<int>(500));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:97:5: warning: variable 'pointerToTest' of type 'shared_ptr<int>' can be declared 'const' [misc-const-correctness]
    shared_ptr<int> pointerToTest(make_shared<int>(500));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:97:21: note: FIX-IT applied suggested code changes
    shared_ptr<int> pointerToTest(make_shared<int>(500));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:106:5: warning: variable 'sharedPointer' of type 'shared_ptr<int>' can be declared 'const' [misc-const-correctness]
    shared_ptr<int> sharedPointer(make_shared<int>(500));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:106:21: note: FIX-IT applied suggested code changes
    shared_ptr<int> sharedPointer(make_shared<int>(500));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:107:5: warning: variable 'pointerToTest' of type 'weak_ptr<int>' can be declared 'const' [misc-const-correctness]
    weak_ptr<int> pointerToTest(sharedPointer);
    ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:107:19: note: FIX-IT applied suggested code changes
    weak_ptr<int> pointerToTest(sharedPointer);
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:116:5: warning: variable 'emptyOptional' of type 'optional<int>' can be declared 'const' [misc-const-correctness]
    optional<int> emptyOptional;
    ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:116:19: note: FIX-IT applied suggested code changes
    optional<int> emptyOptional;
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:117:5: warning: variable 'nonEmptyOptional' of type 'optional<int>' can be declared 'const' [misc-const-correctness]
    optional<int> nonEmptyOptional(300);
    ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:117:19: note: FIX-IT applied suggested code changes
    optional<int> nonEmptyOptional(300);
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:128:5: warning: variable 'pairToTest' of type 'pair<int, char>' can be declared 'const' [misc-const-correctness]
    pair<int, char> pairToTest{300, 'A'};
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:128:21: note: FIX-IT applied suggested code changes
    pair<int, char> pairToTest{300, 'A'};
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:137:5: warning: variable 'pairToTest' of type 'tuple<int, string, char>' (aka 'tuple<int, basic_string<char, char_traits<char>, allocator<char>>, char>') can be declared 'const' [misc-const-correctness]
    tuple<int, string, char> pairToTest{300, "hello", 'A'};
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:137:30: note: FIX-IT applied suggested code changes
    tuple<int, string, char> pairToTest{300, "hello", 'A'};
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:146:5: warning: variable 'arrayToTest' of type 'array<int, 5>' can be declared 'const' [misc-const-correctness]
    array<int, 5> arrayToTest{500, 501, 502, 503, 504};
    ^
                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:146:19: note: FIX-IT applied suggested code changes
    array<int, 5> arrayToTest{500, 501, 502, 503, 504};
                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:155:5: warning: variable 'vectorToTest' of type 'vector<int>' can be declared 'const' [misc-const-correctness]
    vector<int> vectorToTest{500, 501, 502, 503, 504};
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:155:17: note: FIX-IT applied suggested code changes
    vector<int> vectorToTest{500, 501, 502, 503, 504};
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:164:5: warning: variable 'vectorToTest' of type 'deque<int>' can be declared 'const' [misc-const-correctness]
    deque<int> vectorToTest{500, 501, 502, 503, 504};
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:164:16: note: FIX-IT applied suggested code changes
    deque<int> vectorToTest{500, 501, 502, 503, 504};
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:173:5: warning: variable 'vectorToTest' of type 'set<int>' can be declared 'const' [misc-const-correctness]
    set<int> vectorToTest{500, 501, 502, 503, 504};
    ^
             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:173:14: note: FIX-IT applied suggested code changes
    set<int> vectorToTest{500, 501, 502, 503, 504};
             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:182:5: warning: variable 'vectorToTest' of type 'map<int, char>' can be declared 'const' [misc-const-correctness]
    map<int, char> vectorToTest{{500, 'A'}, {501, 'B'}, {502, 'C'}, {503, 'D'}, {504, 'E'}};
    ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:182:20: note: FIX-IT applied suggested code changes
    map<int, char> vectorToTest{{500, 'A'}, {501, 'B'}, {502, 'C'}, {503, 'D'}, {504, 'E'}};
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:191:5: warning: variable 'vectorToTest' of type 'unordered_set<int>' can be declared 'const' [misc-const-correctness]
    unordered_set<int> vectorToTest{500, 501, 502, 503, 504};
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:191:24: note: FIX-IT applied suggested code changes
    unordered_set<int> vectorToTest{500, 501, 502, 503, 504};
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:195:5: warning: variable 'actualPrintString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string actualPrintString(ssToVerify.str());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:195:12: note: FIX-IT applied suggested code changes
    string actualPrintString(ssToVerify.str());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:206:5: warning: variable 'vectorToTest' of type 'unordered_map<int, char>' can be declared 'const' [misc-const-correctness]
    unordered_map<int, char> vectorToTest{{500, 'A'}, {501, 'B'}, {502, 'C'}, {503, 'D'}, {504, 'E'}};
    ^
                             const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:206:30: note: FIX-IT applied suggested code changes
    unordered_map<int, char> vectorToTest{{500, 'A'}, {501, 'B'}, {502, 'C'}, {503, 'D'}, {504, 'E'}};
                             ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:210:5: warning: variable 'actualPrintString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string actualPrintString(ssToVerify.str());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:210:12: note: FIX-IT applied suggested code changes
    string actualPrintString(ssToVerify.str());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:221:5: warning: variable 'adapter' of type 'stack<int>' can be declared 'const' [misc-const-correctness]
    stack<int> adapter({1, 2, 3});
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:221:16: note: FIX-IT applied suggested code changes
    stack<int> adapter({1, 2, 3});
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:230:5: warning: variable 'adapter' of type 'queue<int>' can be declared 'const' [misc-const-correctness]
    queue<int> adapter({1, 2, 3});
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:230:16: note: FIX-IT applied suggested code changes
    queue<int> adapter({1, 2, 3});
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:251:5: warning: variable 'vectorToTest' of type 'forward_list<int>' can be declared 'const' [misc-const-correctness]
    forward_list<int> vectorToTest{500, 501, 502, 503, 504};
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintFunctions_unit.cpp:251:23: note: FIX-IT applied suggested code changes
    forward_list<int> vectorToTest{500, 501, 502, 503, 504};
                      ^
[102/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Print/AlbaPrintMacros_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:27:5: warning: variable 'stringToTest' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string stringToTest = "std::string to test";
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:27:12: note: FIX-IT applied suggested code changes
    string stringToTest = "std::string to test";
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:31:5: warning: variable 'actualPrintString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string actualPrintString(ssToVerify.str());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:31:12: note: FIX-IT applied suggested code changes
    string actualPrintString(ssToVerify.str());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:40:5: warning: variable 'uniquePointer' of type 'unique_ptr<int>' can be declared 'const' [misc-const-correctness]
    unique_ptr<int> uniquePointer(make_unique<int>(695));
    ^
                    const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:40:21: note: FIX-IT applied suggested code changes
    unique_ptr<int> uniquePointer(make_unique<int>(695));
                    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:46:5: warning: variable 'actualPrintString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string actualPrintString(ssToVerify.str());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:46:12: note: FIX-IT applied suggested code changes
    string actualPrintString(ssToVerify.str());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:58:5: warning: variable 'container1' of type 'vector<int>' can be declared 'const' [misc-const-correctness]
    vector<int> container1{454, 6, 512, 315};
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:58:17: note: FIX-IT applied suggested code changes
    vector<int> container1{454, 6, 512, 315};
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:59:5: warning: variable 'container2' of type 'map<int, char>' can be declared 'const' [misc-const-correctness]
    map<int, char> container2{{1, 'A'}, {5, 'E'}, {7, 'G'}};
    ^
                   const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:59:20: note: FIX-IT applied suggested code changes
    map<int, char> container2{{1, 'A'}, {5, 'E'}, {7, 'G'}};
                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:63:5: warning: variable 'actualPrintString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string actualPrintString(ssToVerify.str());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\AlbaPrintMacros_unit.cpp:63:12: note: FIX-IT applied suggested code changes
    string actualPrintString(ssToVerify.str());
           ^
[103/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Print/PrintUtilities.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\PrintUtilities.cpp:14:5: warning: variable 'singleParameter1' of type 'int' can be declared 'const' [misc-const-correctness]
    int singleParameter1 = 12;
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\PrintUtilities.cpp:14:9: note: FIX-IT applied suggested code changes
    int singleParameter1 = 12;
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\PrintUtilities.cpp:15:5: warning: variable 'singleParameter2' of type 'int' can be declared 'const' [misc-const-correctness]
    int singleParameter2 = 345;
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\PrintUtilities.cpp:15:9: note: FIX-IT applied suggested code changes
    int singleParameter2 = 345;
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\PrintUtilities.cpp:16:5: warning: variable 'singleParameter3' of type 'int' can be declared 'const' [misc-const-correctness]
    int singleParameter3 = 6789;
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\PrintUtilities.cpp:16:9: note: FIX-IT applied suggested code changes
    int singleParameter3 = 6789;
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\PrintUtilities.cpp:20:5: warning: variable 'actualPrintString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string actualPrintString(ssToVerify.str());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Print\PrintUtilities.cpp:20:12: note: FIX-IT applied suggested code changes
    string actualPrintString(ssToVerify.str());
           ^
[104/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Randomizer/AlbaOldRandomizer_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:13:5: warning: variable 'randomizer' of type 'AlbaOldRandomizer' can be declared 'const' [misc-const-correctness]
    AlbaOldRandomizer randomizer;
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:13:23: note: FIX-IT applied suggested code changes
    AlbaOldRandomizer randomizer;
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:17:9: warning: variable 'random' of type 'int' can be declared 'const' [misc-const-correctness]
        int random(AlbaOldRandomizer::getRandomIntegerInUniformDistribution(minimumValue, maximumValue));
        ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:17:13: note: FIX-IT applied suggested code changes
        int random(AlbaOldRandomizer::getRandomIntegerInUniformDistribution(minimumValue, maximumValue));
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:24:5: warning: variable 'randomizer' of type 'AlbaOldRandomizer' can be declared 'const' [misc-const-correctness]
    AlbaOldRandomizer randomizer;
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:24:23: note: FIX-IT applied suggested code changes
    AlbaOldRandomizer randomizer;
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:27:5: warning: variable 'numberOfRandomValues' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfRandomValues(maximumValue - minimumValue + 1);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:27:9: note: FIX-IT applied suggested code changes
    int numberOfRandomValues(maximumValue - minimumValue + 1);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:33:9: warning: variable 'random' of type 'int' can be declared 'const' [misc-const-correctness]
        int random(AlbaOldRandomizer::getRandomIntegerInUniformDistribution(minimumValue, maximumValue));
        ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:33:13: note: FIX-IT applied suggested code changes
        int random(AlbaOldRandomizer::getRandomIntegerInUniformDistribution(minimumValue, maximumValue));
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:39:5: warning: variable 'deviation' of type 'int' can be declared 'const' [misc-const-correctness]
    int deviation(*maxIterator - *minIterator);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:39:9: note: FIX-IT applied suggested code changes
    int deviation(*maxIterator - *minIterator);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:44:5: warning: variable 'randomizer' of type 'AlbaOldRandomizer' can be declared 'const' [misc-const-correctness]
    AlbaOldRandomizer randomizer;
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:44:23: note: FIX-IT applied suggested code changes
    AlbaOldRandomizer randomizer;
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:48:9: warning: variable 'random' of type 'double' can be declared 'const' [misc-const-correctness]
        double random(AlbaOldRandomizer::getRandomFloatingValueInUniformDistribution(minimumValue, maximumValue));
        ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaOldRandomizer_unit.cpp:48:16: note: FIX-IT applied suggested code changes
        double random(AlbaOldRandomizer::getRandomFloatingValueInUniformDistribution(minimumValue, maximumValue));
               ^
[105/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Randomizer/AlbaUniformDeterministicAllBitsRandomizer_unit.cpp.obj
[106/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Randomizer/AlbaUniformDeterministicRandomizer_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformDeterministicRandomizer_unit.cpp:83:5: warning: variable 'numberOfRandomValues' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfRandomValues(maximumValue - minimumValue + 1);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformDeterministicRandomizer_unit.cpp:83:9: note: FIX-IT applied suggested code changes
    int numberOfRandomValues(maximumValue - minimumValue + 1);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformDeterministicRandomizer_unit.cpp:95:5: warning: variable 'deviationCount' of type 'int' can be declared 'const' [misc-const-correctness]
    int deviationCount(*maxIterator - *minIterator);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformDeterministicRandomizer_unit.cpp:95:9: note: FIX-IT applied suggested code changes
    int deviationCount(*maxIterator - *minIterator);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformDeterministicRandomizer_unit.cpp:130:5: warning: variable 'numberOfRandomValues' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfRandomValues(maximumValue - minimumValue);  // number of integer values for floating point
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformDeterministicRandomizer_unit.cpp:130:9: note: FIX-IT applied suggested code changes
    int numberOfRandomValues(maximumValue - minimumValue);  // number of integer values for floating point
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformDeterministicRandomizer_unit.cpp:141:5: warning: variable 'deviationCount' of type 'int' can be declared 'const' [misc-const-correctness]
    int deviationCount(*maxIterator - *minIterator);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformDeterministicRandomizer_unit.cpp:141:9: note: FIX-IT applied suggested code changes
    int deviationCount(*maxIterator - *minIterator);
        ^
[107/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Randomizer/AlbaUniformNonDeterministicRandomizer_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformNonDeterministicRandomizer_unit.cpp:86:5: warning: variable 'numberOfRandomValues' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfRandomValues(maximumValue - minimumValue + 1);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformNonDeterministicRandomizer_unit.cpp:86:9: note: FIX-IT applied suggested code changes
    int numberOfRandomValues(maximumValue - minimumValue + 1);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformNonDeterministicRandomizer_unit.cpp:98:5: warning: variable 'deviationCount' of type 'int' can be declared 'const' [misc-const-correctness]
    int deviationCount(*maxIterator - *minIterator);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformNonDeterministicRandomizer_unit.cpp:98:9: note: FIX-IT applied suggested code changes
    int deviationCount(*maxIterator - *minIterator);
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformNonDeterministicRandomizer_unit.cpp:135:5: warning: variable 'numberOfRandomValues' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfRandomValues(maximumValue - minimumValue);  // number of integer values for floating point
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformNonDeterministicRandomizer_unit.cpp:135:9: note: FIX-IT applied suggested code changes
    int numberOfRandomValues(maximumValue - minimumValue);  // number of integer values for floating point
        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformNonDeterministicRandomizer_unit.cpp:146:5: warning: variable 'deviationCount' of type 'int' can be declared 'const' [misc-const-correctness]
    int deviationCount(*maxIterator - *minIterator);
    ^
        const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\AlbaUniformNonDeterministicRandomizer_unit.cpp:146:9: note: FIX-IT applied suggested code changes
    int deviationCount(*maxIterator - *minIterator);
        ^
[108/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Randomizer/EntropySources/AlbaCombinedEntropySource_unit.cpp.obj
[109/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Randomizer/EntropySources/AlbaEntropySourceBasedOnTime_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\EntropySources\AlbaEntropySourceBasedOnTime_unit.cpp:13:5: warning: variable 'source1' of type 'AlbaEntropySourceBasedOnTime' can be declared 'const' [misc-const-correctness]
    AlbaEntropySourceBasedOnTime source1;
    ^
                                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\EntropySources\AlbaEntropySourceBasedOnTime_unit.cpp:13:34: note: FIX-IT applied suggested code changes
    AlbaEntropySourceBasedOnTime source1;
                                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\EntropySources\AlbaEntropySourceBasedOnTime_unit.cpp:14:5: warning: variable 'source2' of type 'AlbaEntropySourceBasedOnTime' can be declared 'const' [misc-const-correctness]
    AlbaEntropySourceBasedOnTime source2;
    ^
                                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\EntropySources\AlbaEntropySourceBasedOnTime_unit.cpp:14:34: note: FIX-IT applied suggested code changes
    AlbaEntropySourceBasedOnTime source2;
                                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\EntropySources\AlbaEntropySourceBasedOnTime_unit.cpp:27:5: warning: variable 'source' of type 'AlbaEntropySourceBasedOnTime' can be declared 'const' [misc-const-correctness]
    AlbaEntropySourceBasedOnTime source;
    ^
                                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Randomizer\EntropySources\AlbaEntropySourceBasedOnTime_unit.cpp:27:34: note: FIX-IT applied suggested code changes
    AlbaEntropySourceBasedOnTime source;
                                 ^
[110/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/State/AlbaDfaUsingMatrix_unit.cpp.obj
[111/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/State/SampleStateMachine.cpp.obj
[112/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/State/SampleStateMachine_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\State\SampleStateMachine_unit.cpp:17:5: warning: variable 'stateMachine' of type 'SampleStateMachine' can be declared 'const' [misc-const-correctness]
    SampleStateMachine stateMachine(State::StateWithNoValue);
    ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\State\SampleStateMachine_unit.cpp:17:24: note: FIX-IT applied suggested code changes
    SampleStateMachine stateMachine(State::StateWithNoValue);
                       ^
[113/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Stream/AlbaStreamBitReader_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Stream/AlbaStreamBitReader.hpp:73:5: warning: variable 'byteSize' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t byteSize = round(static_cast<double>(numberOfBits) / AlbaBitConstants::BYTE_SIZE_IN_BITS);
    ^
           const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Stream/AlbaStreamBitReader.hpp:73:12: note: FIX-IT applied suggested code changes
    size_t byteSize = round(static_cast<double>(numberOfBits) / AlbaBitConstants::BYTE_SIZE_IN_BITS);
           ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Stream/AlbaStreamBitReader.hpp:90:5: warning: variable 'bitsetRange' of type 'AlbaValueRange<int>' can be declared 'const' [misc-const-correctness]
    AlbaValueRange<int> bitsetRange(static_cast<int>(startBitsetIndex), static_cast<int>(endBitsetIndex), 1U);
    ^
                        const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Stream/AlbaStreamBitReader.hpp:90:25: note: FIX-IT applied suggested code changes
    AlbaValueRange<int> bitsetRange(static_cast<int>(startBitsetIndex), static_cast<int>(endBitsetIndex), 1U);
                        ^
[114/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Stream/AlbaStreamBitWriter_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Stream/AlbaStreamBitWriter.hpp:80:5: warning: variable 'bitsetRange' of type 'AlbaValueRange<int>' can be declared 'const' [misc-const-correctness]
    AlbaValueRange<int> bitsetRange(static_cast<int>(startBitsetIndex), static_cast<int>(endBitsetIndex), 1U);
    ^
                        const 
D:/a/aprg/aprg/AprgCommon/AprgCommon/src\Common/Stream/AlbaStreamBitWriter.hpp:80:25: note: FIX-IT applied suggested code changes
    AlbaValueRange<int> bitsetRange(static_cast<int>(startBitsetIndex), static_cast<int>(endBitsetIndex), 1U);
                        ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamBitWriter_unit.cpp:89:5: warning: variable 'bitsetToWrite' of type 'bitset<32U>' can be declared 'const' [misc-const-correctness]
    bitset<32U> bitsetToWrite(0x1234'5678);
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamBitWriter_unit.cpp:89:17: note: FIX-IT applied suggested code changes
    bitset<32U> bitsetToWrite(0x1234'5678);
                ^
[115/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Stream/AlbaStreamParameterReaderWriter_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:24:5: warning: variable 'reader' of type 'AlbaStreamParameterReader' can be declared 'const' [misc-const-correctness]
    AlbaStreamParameterReader reader(testFileReadStream);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:24:31: note: FIX-IT applied suggested code changes
    AlbaStreamParameterReader reader(testFileReadStream);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:45:5: warning: variable 'reader' of type 'AlbaStreamParameterReader' can be declared 'const' [misc-const-correctness]
    AlbaStreamParameterReader reader(testFileReadStream);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:45:31: note: FIX-IT applied suggested code changes
    AlbaStreamParameterReader reader(testFileReadStream);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:56:5: warning: variable 'sampleVector' of type 'vector<int>' can be declared 'const' [misc-const-correctness]
    vector<int> sampleVector{1, 2, 3, 4, 5};
    ^
                const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:56:17: note: FIX-IT applied suggested code changes
    vector<int> sampleVector{1, 2, 3, 4, 5};
                ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:64:5: warning: variable 'reader' of type 'AlbaStreamParameterReader' can be declared 'const' [misc-const-correctness]
    AlbaStreamParameterReader reader(testFileReadStream);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:64:31: note: FIX-IT applied suggested code changes
    AlbaStreamParameterReader reader(testFileReadStream);
                              ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:74:5: warning: variable 'sampleMap' of type 'map<int, string>' (aka 'map<int, basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    map<int, string> sampleMap{{1, "one"}, {2, "two"}, {3, "three"}};
    ^
                     const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:74:22: note: FIX-IT applied suggested code changes
    map<int, string> sampleMap{{1, "one"}, {2, "two"}, {3, "three"}};
                     ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:82:5: warning: variable 'reader' of type 'AlbaStreamParameterReader' can be declared 'const' [misc-const-correctness]
    AlbaStreamParameterReader reader(testFileReadStream);
    ^
                              const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Stream\AlbaStreamParameterReaderWriter_unit.cpp:82:31: note: FIX-IT applied suggested code changes
    AlbaStreamParameterReader reader(testFileReadStream);
                              ^
[116/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/String/AlbaStringHelper_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:247:5: warning: variable 'string1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string string1("Mark is the no#1 guy in the world. Mark is also the nicest guy.");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:247:12: note: FIX-IT applied suggested code changes
    string string1("Mark is the no#1 guy in the world. Mark is also the nicest guy.");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:248:5: warning: variable 'string2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string string2("MARK is the no#1 programmer in the world. MARK is also the nicest programmer.");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:248:12: note: FIX-IT applied suggested code changes
    string string2("MARK is the no#1 programmer in the world. MARK is also the nicest programmer.");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:249:5: warning: variable 'uniqueId1' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t uniqueId1 = generateUniqueId(string1);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:249:12: note: FIX-IT applied suggested code changes
    size_t uniqueId1 = generateUniqueId(string1);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:250:5: warning: variable 'uniqueId2' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t uniqueId2 = generateUniqueId(string2);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:250:12: note: FIX-IT applied suggested code changes
    size_t uniqueId2 = generateUniqueId(string2);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:302:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:302:12: note: FIX-IT applied suggested code changes
    string testString("AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:303:5: warning: variable 'capitalLetters' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string capitalLetters("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:303:12: note: FIX-IT applied suggested code changes
    string capitalLetters("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:309:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:309:12: note: FIX-IT applied suggested code changes
    string testString("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:310:5: warning: variable 'capitalLetters' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string capitalLetters("1234567890!@#$%^&*( )ABCDEFGHIJKLMNOPQRSTUVWXYZ");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:310:12: note: FIX-IT applied suggested code changes
    string capitalLetters("1234567890!@#$%^&*( )ABCDEFGHIJKLMNOPQRSTUVWXYZ");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:316:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("abCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:316:12: note: FIX-IT applied suggested code changes
    string testString("abCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:317:5: warning: variable 'capitalLetters' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string capitalLetters("AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:317:12: note: FIX-IT applied suggested code changes
    string capitalLetters("AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:323:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("     abCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:323:12: note: FIX-IT applied suggested code changes
    string testString("     abCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:324:5: warning: variable 'capitalLetters' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string capitalLetters("     AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:324:12: note: FIX-IT applied suggested code changes
    string capitalLetters("     AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:330:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("1abCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:330:12: note: FIX-IT applied suggested code changes
    string testString("1abCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:331:5: warning: variable 'capitalLetters' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string capitalLetters("1abCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:331:12: note: FIX-IT applied suggested code changes
    string capitalLetters("1abCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:337:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:337:12: note: FIX-IT applied suggested code changes
    string testString("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:338:5: warning: variable 'lowerCaseLetters' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string lowerCaseLetters("1234567890!@#$%^&*( )abcdefghijklmnopqrstuvwxyz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:338:12: note: FIX-IT applied suggested code changes
    string lowerCaseLetters("1234567890!@#$%^&*( )abcdefghijklmnopqrstuvwxyz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:344:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("https%3A%2F%2Fmywebsite%2Fdocs%2Fenglish%2Fsite%2Fmybook.do%3Frequest_type");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:344:12: note: FIX-IT applied suggested code changes
    string testString("https%3A%2F%2Fmywebsite%2Fdocs%2Fenglish%2Fsite%2Fmybook.do%3Frequest_type");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:345:5: warning: variable 'decodedUrl' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string decodedUrl("https://mywebsite/docs/english/site/mybook.do?request_type");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:345:12: note: FIX-IT applied suggested code changes
    string decodedUrl("https://mywebsite/docs/english/site/mybook.do?request_type");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:351:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("Last+Week+Tonight+with+John+Oliver-+The+IRS+%28HBO%29");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:351:12: note: FIX-IT applied suggested code changes
    string testString("Last+Week+Tonight+with+John+Oliver-+The+IRS+%28HBO%29");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:352:5: warning: variable 'decodedUrl' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string decodedUrl("Last+Week+Tonight+with+John+Oliver-+The+IRS+(HBO)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:352:12: note: FIX-IT applied suggested code changes
    string decodedUrl("Last+Week+Tonight+with+John+Oliver-+The+IRS+(HBO)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:358:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:358:12: note: FIX-IT applied suggested code changes
    string testString(
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:361:5: warning: variable 'whiteSpaceIndention' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string whiteSpaceIndention("     \n\n");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:361:12: note: FIX-IT applied suggested code changes
    string whiteSpaceIndention("     \n\n");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:367:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("     \n\n    \t\t\t   ");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:367:12: note: FIX-IT applied suggested code changes
    string testString("     \n\n    \t\t\t   ");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:372:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:372:12: note: FIX-IT applied suggested code changes
    string testString(
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:375:5: warning: variable 'withoutStartingAndTrailingWhiteSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withoutStartingAndTrailingWhiteSpace(
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:375:12: note: FIX-IT applied suggested code changes
    string withoutStartingAndTrailingWhiteSpace(
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:382:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:382:12: note: FIX-IT applied suggested code changes
    string testString(
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:385:5: warning: variable 'withoutRedundantWhiteSpace' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withoutRedundantWhiteSpace(
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:385:12: note: FIX-IT applied suggested code changes
    string withoutRedundantWhiteSpace(
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:392:5: warning: variable 'correctOutput' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string correctOutput("Mark is the no#1 guy in the world");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:392:12: note: FIX-IT applied suggested code changes
    string correctOutput("Mark is the no#1 guy in the world");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:400:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:400:12: note: FIX-IT applied suggested code changes
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:401:5: warning: variable 'withoutQuotations' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withoutQuotations("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:401:12: note: FIX-IT applied suggested code changes
    string withoutQuotations("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:407:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("_AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:407:12: note: FIX-IT applied suggested code changes
    string testString("_AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:408:5: warning: variable 'withoutUnderscore' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withoutUnderscore("AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:408:12: note: FIX-IT applied suggested code changes
    string withoutUnderscore("AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:414:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("AbCDEFghIjKlMnopQRstUvWxYz_");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:414:12: note: FIX-IT applied suggested code changes
    string testString("AbCDEFghIjKlMnopQRstUvWxYz_");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:415:5: warning: variable 'withoutUnderscore' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withoutUnderscore("AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:415:12: note: FIX-IT applied suggested code changes
    string withoutUnderscore("AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:421:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("_AbCDEFghIjKlMnopQRstUvWxYz_");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:421:12: note: FIX-IT applied suggested code changes
    string testString("_AbCDEFghIjKlMnopQRstUvWxYz_");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:422:5: warning: variable 'withoutUnderscore' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withoutUnderscore("AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:422:12: note: FIX-IT applied suggested code changes
    string withoutUnderscore("AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:428:5: warning: variable 'testString1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString1("adjustedforever");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:428:12: note: FIX-IT applied suggested code changes
    string testString1("adjustedforever");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:429:5: warning: variable 'testString2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString2("adjustedforevah");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:429:12: note: FIX-IT applied suggested code changes
    string testString2("adjustedforevah");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:435:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:435:12: note: FIX-IT applied suggested code changes
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:436:5: warning: variable 'expectedBeforeString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string expectedBeforeString(R"("1234567890!@#$%^&*( ))");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:436:12: note: FIX-IT applied suggested code changes
    string expectedBeforeString(R"("1234567890!@#$%^&*( ))");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:437:5: warning: variable 'expectedAfterString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string expectedAfterString(R"(EFghIjKlMnopQRstUvWxYz")");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:437:12: note: FIX-IT applied suggested code changes
    string expectedAfterString(R"(EFghIjKlMnopQRstUvWxYz")");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:447:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:447:12: note: FIX-IT applied suggested code changes
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:457:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("http://a.mhcdn.net/store/manga/12114/001.0/compressed/r049.jpg?v=1354256522");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:457:12: note: FIX-IT applied suggested code changes
    string testString("http://a.mhcdn.net/store/manga/12114/001.0/compressed/r049.jpg?v=1354256522");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:458:5: warning: variable 'withCharactersAfterQuestionMarkRemoved' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withCharactersAfterQuestionMarkRemoved("http://a.mhcdn.net/store/manga/12114/001.0/compressed/r049.jpg");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:458:12: note: FIX-IT applied suggested code changes
    string withCharactersAfterQuestionMarkRemoved("http://a.mhcdn.net/store/manga/12114/001.0/compressed/r049.jpg");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:459:5: warning: variable 'withIndexStart' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withIndexStart("tore/manga/12114/001.0/compressed/r049.jpg");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:459:12: note: FIX-IT applied suggested code changes
    string withIndexStart("tore/manga/12114/001.0/compressed/r049.jpg");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:460:5: warning: variable 'questionMarkString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string questionMarkString("?");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:460:12: note: FIX-IT applied suggested code changes
    string questionMarkString("?");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:467:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:467:12: note: FIX-IT applied suggested code changes
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:468:5: warning: variable 'stringInBetweenAtTheStart' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string stringInBetweenAtTheStart(R"(567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:468:12: note: FIX-IT applied suggested code changes
    string stringInBetweenAtTheStart(R"(567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:469:5: warning: variable 'stringInBetweenInTheMiddle' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string stringInBetweenInTheMiddle(R"(^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:469:12: note: FIX-IT applied suggested code changes
    string stringInBetweenInTheMiddle(R"(^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:477:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:477:12: note: FIX-IT applied suggested code changes
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:478:5: warning: variable 'firstString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string firstString("1234567890");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:478:12: note: FIX-IT applied suggested code changes
    string firstString("1234567890");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:479:5: warning: variable 'secondString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string secondString("AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:479:12: note: FIX-IT applied suggested code changes
    string secondString("AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:480:5: warning: variable 'stringInBetween' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string stringInBetween("!@#$%^&*( )");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:480:12: note: FIX-IT applied suggested code changes
    string stringInBetween("!@#$%^&*( )");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:488:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:488:12: note: FIX-IT applied suggested code changes
    string testString("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:496:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:496:12: note: FIX-IT applied suggested code changes
    string testString(R"("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz")");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:497:5: warning: variable 'withoutSpecialCharacters' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withoutSpecialCharacters("_1234567890_AbCDEFghIjKlMnopQRstUvWxYz_");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:497:12: note: FIX-IT applied suggested code changes
    string withoutSpecialCharacters("_1234567890_AbCDEFghIjKlMnopQRstUvWxYz_");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:510:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"( Mark Earvin Alba 1234567890 ")");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:510:12: note: FIX-IT applied suggested code changes
    string testString(R"( Mark Earvin Alba 1234567890 ")");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:511:5: warning: variable 'withoutSpecialCharacters' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withoutSpecialCharacters("_Mark_Earvin_Alba_1234567890_");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:511:12: note: FIX-IT applied suggested code changes
    string withoutSpecialCharacters("_Mark_Earvin_Alba_1234567890_");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:545:5: warning: variable 'length' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t length(100);
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:545:12: note: FIX-IT applied suggested code changes
    size_t length(100);
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:576:5: warning: variable 'string1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string string1("   Mark is the no#1      guy in the  world.    Mark is also the nicest guy.    ");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:576:12: note: FIX-IT applied suggested code changes
    string string1("   Mark is the no#1      guy in the  world.    Mark is also the nicest guy.    ");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:583:5: warning: variable 'size' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t size = min(expectedStrings.size(), actualStrings.size());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:583:12: note: FIX-IT applied suggested code changes
    size_t size = min(expectedStrings.size(), actualStrings.size());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:590:5: warning: variable 'string1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string string1("   Mark is the no#1      guy in the  world.   ");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:590:12: note: FIX-IT applied suggested code changes
    string string1("   Mark is the no#1      guy in the  world.   ");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:597:5: warning: variable 'size' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t size = min(expectedStrings.size(), actualStrings.size());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:597:12: note: FIX-IT applied suggested code changes
    size_t size = min(expectedStrings.size(), actualStrings.size());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:604:5: warning: variable 'string1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string string1("   Mark is the no#1      guy in the  world.   ThisIsALongString");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:604:12: note: FIX-IT applied suggested code changes
    string string1("   Mark is the no#1      guy in the  world.   ThisIsALongString");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:612:5: warning: variable 'size' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t size = min(expectedStrings.size(), actualStrings.size());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:612:12: note: FIX-IT applied suggested code changes
    size_t size = min(expectedStrings.size(), actualStrings.size());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:619:5: warning: variable 'string1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string string1("TupcIlm starts when its deployed on board 0x1011 (same with legacy Aalman)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:619:12: note: FIX-IT applied suggested code changes
    string string1("TupcIlm starts when its deployed on board 0x1011 (same with legacy Aalman)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:627:5: warning: variable 'size' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t size = min(expectedStrings.size(), actualStrings.size());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:627:12: note: FIX-IT applied suggested code changes
    size_t size = min(expectedStrings.size(), actualStrings.size());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:634:5: warning: variable 'string1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string string1("   Mark is the no#1      ");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:634:12: note: FIX-IT applied suggested code changes
    string string1("   Mark is the no#1      ");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:642:5: warning: variable 'size' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t size = min(expectedStrings.size(), actualStrings.size());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:642:12: note: FIX-IT applied suggested code changes
    size_t size = min(expectedStrings.size(), actualStrings.size());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:649:5: warning: variable 'string1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string string1(R"(TLH_DEBUG_PRINT("Creating new licence entry in DB for featureCode: %d.", featureCode);)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:649:12: note: FIX-IT applied suggested code changes
    string string1(R"(TLH_DEBUG_PRINT("Creating new licence entry in DB for featureCode: %d.", featureCode);)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:650:5: warning: variable 'delimeters' of type 'strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    strings delimeters{R"((")", R"(",)", ");"};
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:650:13: note: FIX-IT applied suggested code changes
    strings delimeters{R"((")", R"(",)", ");"};
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:657:5: warning: variable 'size' of type 'size_t' (aka 'unsigned long long') can be declared 'const' [misc-const-correctness]
    size_t size = min(expectedStrings.size(), actualStrings.size());
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:657:12: note: FIX-IT applied suggested code changes
    size_t size = min(expectedStrings.size(), actualStrings.size());
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:702:5: warning: variable 'stringsToCombine' of type 'strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    strings stringsToCombine{"Mark",   "is",   "the", "no#1", "guy", "in",     "the",
    ^
            const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:702:13: note: FIX-IT applied suggested code changes
    strings stringsToCombine{"Mark",   "is",   "the", "no#1", "guy", "in",     "the",
            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:704:5: warning: variable 'expectedString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string expectedString("Mark,is,the,no#1,guy,in,the,world.,Mark,is,also,the,nicest,guy.");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:704:12: note: FIX-IT applied suggested code changes
    string expectedString("Mark,is,the,no#1,guy,in,the,world.,Mark,is,also,the,nicest,guy.");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:705:5: warning: variable 'actualString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string actualString(combineStrings(stringsToCombine, ","));
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:705:12: note: FIX-IT applied suggested code changes
    string actualString(combineStrings(stringsToCombine, ","));
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:770:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"(////DIR1\\/\\/\\/DIR2\\\\DIR3///DIR4\\\\//DIR5////\\\\)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:770:12: note: FIX-IT applied suggested code changes
    string testString(R"(////DIR1\\/\\/\\/DIR2\\\\DIR3///DIR4\\\\//DIR5////\\\\)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:771:5: warning: variable 'withoutRedundantSlashes' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withoutRedundantSlashes(R"(\DIR1\DIR2\DIR3\DIR4\DIR5\)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:771:12: note: FIX-IT applied suggested code changes
    string withoutRedundantSlashes(R"(\DIR1\DIR2\DIR3\DIR4\DIR5\)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:777:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"(\DIR1\DIR2\..\DIR3\DIR4\..\..\DIR5\)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:777:12: note: FIX-IT applied suggested code changes
    string testString(R"(\DIR1\DIR2\..\DIR3\DIR4\..\..\DIR5\)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:778:5: warning: variable 'withoutRedundantPeriodInPath' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string withoutRedundantPeriodInPath(R"(\DIR1\DIR5\)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:778:12: note: FIX-IT applied suggested code changes
    string withoutRedundantPeriodInPath(R"(\DIR1\DIR5\)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:784:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"(\DIR1\DIR2\..\DIR3\DIR4\..\..\DIR5\)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:784:12: note: FIX-IT applied suggested code changes
    string testString(R"(\DIR1\DIR2\..\DIR3\DIR4\..\..\DIR5\)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:785:5: warning: variable 'beforeDoublePeriod' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string beforeDoublePeriod(R"(DIR5\)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:785:12: note: FIX-IT applied suggested code changes
    string beforeDoublePeriod(R"(DIR5\)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:791:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"(\DIR1\DIR2\DIR3\DIR4\DIR5\)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:791:12: note: FIX-IT applied suggested code changes
    string testString(R"(\DIR1\DIR2\DIR3\DIR4\DIR5\)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:792:5: warning: variable 'beforeDoublePeriod' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string beforeDoublePeriod(R"(\DIR1\DIR2\DIR3\DIR4\DIR5\)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:792:12: note: FIX-IT applied suggested code changes
    string beforeDoublePeriod(R"(\DIR1\DIR2\DIR3\DIR4\DIR5\)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:798:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"(\DIR1\DIR2\DIR3\DIR4\DIR5\)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:798:12: note: FIX-IT applied suggested code changes
    string testString(R"(\DIR1\DIR2\DIR3\DIR4\DIR5\)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:799:5: warning: variable 'immediateDirectoryName' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string immediateDirectoryName("DIR5");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:799:12: note: FIX-IT applied suggested code changes
    string immediateDirectoryName("DIR5");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:805:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString(R"(\DIR1\DIR2\DIR3\DIR4\DIR5)");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:805:12: note: FIX-IT applied suggested code changes
    string testString(R"(\DIR1\DIR2\DIR3\DIR4\DIR5)");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:806:5: warning: variable 'immediateDirectoryName' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string immediateDirectoryName("DIR5");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:806:12: note: FIX-IT applied suggested code changes
    string immediateDirectoryName("DIR5");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:812:5: warning: variable 'testString1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString1("AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:812:12: note: FIX-IT applied suggested code changes
    string testString1("AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:813:5: warning: variable 'testString2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString2("AbCD1234567890!@#$%^&*( )");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:813:12: note: FIX-IT applied suggested code changes
    string testString2("AbCD1234567890!@#$%^&*( )");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:814:5: warning: variable 'testString3' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString3("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:814:12: note: FIX-IT applied suggested code changes
    string testString3("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:822:5: warning: variable 'testString1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString1("   AbCDEFghIjKlMnopQRstUvWxYz  ");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:822:12: note: FIX-IT applied suggested code changes
    string testString1("   AbCDEFghIjKlMnopQRstUvWxYz  ");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:823:5: warning: variable 'testString2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString2("       ");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:823:12: note: FIX-IT applied suggested code changes
    string testString2("       ");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:824:5: warning: variable 'testString3' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString3("   \n\n    \t\t\t\t");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:824:12: note: FIX-IT applied suggested code changes
    string testString3("   \n\n    \t\t\t\t");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:832:5: warning: variable 'testString1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString1("   AbCDEFghIjKlMnopQRstUvWxYz  ");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:832:12: note: FIX-IT applied suggested code changes
    string testString1("   AbCDEFghIjKlMnopQRstUvWxYz  ");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:833:5: warning: variable 'testString2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString2("   \n\n    \t\t\t\t");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:833:12: note: FIX-IT applied suggested code changes
    string testString2("   \n\n    \t\t\t\t");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:834:5: warning: variable 'testString3' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString3("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:834:12: note: FIX-IT applied suggested code changes
    string testString3("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:835:5: warning: variable 'testString4' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString4("abc1234");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:835:12: note: FIX-IT applied suggested code changes
    string testString4("abc1234");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:836:5: warning: variable 'testString5' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString5("_abc1234");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:836:12: note: FIX-IT applied suggested code changes
    string testString5("_abc1234");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:846:5: warning: variable 'testString1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString1("   AbCDEFghIjKlMnopQRstUvWxYz  ");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:846:12: note: FIX-IT applied suggested code changes
    string testString1("   AbCDEFghIjKlMnopQRstUvWxYz  ");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:847:5: warning: variable 'testString2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString2("   \n\n    \t\t\t\t");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:847:12: note: FIX-IT applied suggested code changes
    string testString2("   \n\n    \t\t\t\t");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:848:5: warning: variable 'testString3' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString3("AbCDE FghIj KlM nopQR stU vWx Yz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:848:12: note: FIX-IT applied suggested code changes
    string testString3("AbCDE FghIj KlM nopQR stU vWx Yz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:849:5: warning: variable 'testString4' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString4("AbCDEFghIjKlMnopQRstUvWxYz1234567890!@#$%^&*()");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:849:12: note: FIX-IT applied suggested code changes
    string testString4("AbCDEFghIjKlMnopQRstUvWxYz1234567890!@#$%^&*()");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:850:5: warning: variable 'testString5' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString5;
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:850:12: note: FIX-IT applied suggested code changes
    string testString5;
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:957:5: warning: variable 'testString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:957:12: note: FIX-IT applied suggested code changes
    string testString("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:958:5: warning: variable 'capitalLetters' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string capitalLetters("1234567890!@#$%^&*( )abcdEFghijklMnOPQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:958:12: note: FIX-IT applied suggested code changes
    string capitalLetters("1234567890!@#$%^&*( )abcdEFghijklMnOPQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:964:5: warning: variable 'testString1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString1("1234567890!@#$%^&*( )AbCD");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:964:12: note: FIX-IT applied suggested code changes
    string testString1("1234567890!@#$%^&*( )AbCD");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:965:5: warning: variable 'testString2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString2("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:965:12: note: FIX-IT applied suggested code changes
    string testString2("1234567890!@#$%^&*( )AbCDEFghIjKlMnopQRstUvWxYz");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:972:5: warning: variable 'longString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string longString("Mark is the no#1 guy in the world");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:972:12: note: FIX-IT applied suggested code changes
    string longString("Mark is the no#1 guy in the world");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:979:5: warning: variable 'longString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string longString("Mark is the no#1 guy in the world");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:979:12: note: FIX-IT applied suggested code changes
    string longString("Mark is the no#1 guy in the world");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:986:5: warning: variable 'longString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string longString("Attribute = ");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:986:12: note: FIX-IT applied suggested code changes
    string longString("Attribute = ");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:993:5: warning: variable 'longString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string longString("Mark is the no#1 guy in the world");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:993:12: note: FIX-IT applied suggested code changes
    string longString("Mark is the no#1 guy in the world");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1006:5: warning: variable 'longString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string longString("Mark is the no#1 guy in the world");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1006:12: note: FIX-IT applied suggested code changes
    string longString("Mark is the no#1 guy in the world");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1013:5: warning: variable 'longString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string longString("Mark is the no#1 guy in the world");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1013:12: note: FIX-IT applied suggested code changes
    string longString("Mark is the no#1 guy in the world");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1031:5: warning: variable 'testString1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString1("calculateTotalAmount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1031:12: note: FIX-IT applied suggested code changes
    string testString1("calculateTotalAmount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1032:5: warning: variable 'testString2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString2("CalculateTotalAmount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1032:12: note: FIX-IT applied suggested code changes
    string testString2("CalculateTotalAmount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1033:5: warning: variable 'testString3' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString3("calculate_total_amount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1033:12: note: FIX-IT applied suggested code changes
    string testString3("calculate_total_amount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1034:5: warning: variable 'testString4' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString4("calculate-total-amount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1034:12: note: FIX-IT applied suggested code changes
    string testString4("calculate-total-amount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1035:5: warning: variable 'testString5' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString5("MAX_VALUE");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1035:12: note: FIX-IT applied suggested code changes
    string testString5("MAX_VALUE");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1045:5: warning: variable 'testString1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString1("calculateTotalAmount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1045:12: note: FIX-IT applied suggested code changes
    string testString1("calculateTotalAmount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1046:5: warning: variable 'testString2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString2("CalculateTotalAmount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1046:12: note: FIX-IT applied suggested code changes
    string testString2("CalculateTotalAmount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1047:5: warning: variable 'testString3' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString3("calculate_total_amount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1047:12: note: FIX-IT applied suggested code changes
    string testString3("calculate_total_amount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1048:5: warning: variable 'testString4' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString4("calculate-total-amount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1048:12: note: FIX-IT applied suggested code changes
    string testString4("calculate-total-amount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1049:5: warning: variable 'testString5' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString5("MAX_VALUE");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1049:12: note: FIX-IT applied suggested code changes
    string testString5("MAX_VALUE");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1059:5: warning: variable 'testString1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString1("calculateTotalAmount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1059:12: note: FIX-IT applied suggested code changes
    string testString1("calculateTotalAmount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1060:5: warning: variable 'testString2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString2("CalculateTotalAmount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1060:12: note: FIX-IT applied suggested code changes
    string testString2("CalculateTotalAmount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1061:5: warning: variable 'testString3' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString3("calculate_total_amount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1061:12: note: FIX-IT applied suggested code changes
    string testString3("calculate_total_amount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1062:5: warning: variable 'testString4' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString4("calculate-total-amount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1062:12: note: FIX-IT applied suggested code changes
    string testString4("calculate-total-amount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1063:5: warning: variable 'testString5' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString5("MAX_VALUE");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1063:12: note: FIX-IT applied suggested code changes
    string testString5("MAX_VALUE");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1073:5: warning: variable 'testString1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString1("calculateTotalAmount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1073:12: note: FIX-IT applied suggested code changes
    string testString1("calculateTotalAmount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1074:5: warning: variable 'testString2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString2("CalculateTotalAmount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1074:12: note: FIX-IT applied suggested code changes
    string testString2("CalculateTotalAmount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1075:5: warning: variable 'testString3' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString3("calculate_total_amount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1075:12: note: FIX-IT applied suggested code changes
    string testString3("calculate_total_amount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1076:5: warning: variable 'testString4' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString4("calculate-total-amount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1076:12: note: FIX-IT applied suggested code changes
    string testString4("calculate-total-amount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1077:5: warning: variable 'testString5' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString5("MAX_VALUE");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1077:12: note: FIX-IT applied suggested code changes
    string testString5("MAX_VALUE");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1087:5: warning: variable 'testString1' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString1("calculateTotalAmount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1087:12: note: FIX-IT applied suggested code changes
    string testString1("calculateTotalAmount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1088:5: warning: variable 'testString2' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString2("CalculateTotalAmount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1088:12: note: FIX-IT applied suggested code changes
    string testString2("CalculateTotalAmount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1089:5: warning: variable 'testString3' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString3("calculate_total_amount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1089:12: note: FIX-IT applied suggested code changes
    string testString3("calculate_total_amount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1090:5: warning: variable 'testString4' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString4("calculate-total-amount");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1090:12: note: FIX-IT applied suggested code changes
    string testString4("calculate-total-amount");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1091:5: warning: variable 'testString5' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string testString5("MAX_VALUE");
    ^
           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1091:12: note: FIX-IT applied suggested code changes
    string testString5("MAX_VALUE");
           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1154:5: warning: variable 'numberToVerify1' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber numberToVerify1(convertStringToAlbaNumber("12345"));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1154:16: note: FIX-IT applied suggested code changes
    AlbaNumber numberToVerify1(convertStringToAlbaNumber("12345"));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1155:5: warning: variable 'numberToVerify2' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber numberToVerify2(convertStringToAlbaNumber("12345.6789"));
    ^
               const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1155:16: note: FIX-IT applied suggested code changes
    AlbaNumber numberToVerify2(convertStringToAlbaNumber("12345.6789"));
               ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1176:5: warning: variable 'converter' of type 'StringConverterWithFormatting' can be declared 'const' [misc-const-correctness]
    StringConverterWithFormatting converter;
    ^
                                  const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\String\AlbaStringHelper_unit.cpp:1176:35: note: FIX-IT applied suggested code changes
    StringConverterWithFormatting converter;
                                  ^
[117/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Time/AlbaDateTimeHelper_unit.cpp.obj
[118/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Time/AlbaDateTime_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:13:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime;
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:13:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime;
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:26:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(AlbaYearMonthDay(2017, 10, 6), AlbaHourMinuteSecond(4, 59, 44), 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:26:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(AlbaYearMonthDay(2017, 10, 6), AlbaHourMinuteSecond(4, 59, 44), 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:39:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:39:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:52:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(AlbaDateTime::createFromTotalDaysAndSecondsAndMicroSeconds(736974U, 17984U, 32487U));
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:52:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(AlbaDateTime::createFromTotalDaysAndSecondsAndMicroSeconds(736974U, 17984U, 32487U));
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:65:5: warning: variable 'dateTime1' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime1(2015, 8, 20, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:65:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime1(2015, 8, 20, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:66:5: warning: variable 'dateTime2' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime2(2015, 8, 20, 18, 14, 51, 565173);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:66:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime2(2015, 8, 20, 18, 14, 51, 565173);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:67:5: warning: variable 'dateTime3' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime3(2015, 8, 20, 18, 14, 52, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:67:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime3(2015, 8, 20, 18, 14, 52, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:68:5: warning: variable 'dateTime4' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime4(2015, 8, 20, 18, 15, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:68:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime4(2015, 8, 20, 18, 15, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:69:5: warning: variable 'dateTime5' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime5(2015, 8, 20, 19, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:69:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime5(2015, 8, 20, 19, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:70:5: warning: variable 'dateTime6' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime6(2015, 8, 21, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:70:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime6(2015, 8, 21, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:71:5: warning: variable 'dateTime7' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime7(2015, 9, 20, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:71:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime7(2015, 9, 20, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:72:5: warning: variable 'dateTime8' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime8(2016, 8, 20, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:72:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime8(2016, 8, 20, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:95:5: warning: variable 'dateTime1' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime1(2015, 8, 20, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:95:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime1(2015, 8, 20, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:96:5: warning: variable 'dateTime2' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime2(2015, 8, 20, 18, 14, 51, 565173);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:96:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime2(2015, 8, 20, 18, 14, 51, 565173);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:97:5: warning: variable 'dateTime3' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime3(2015, 8, 20, 18, 14, 52, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:97:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime3(2015, 8, 20, 18, 14, 52, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:98:5: warning: variable 'dateTime4' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime4(2015, 8, 20, 18, 15, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:98:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime4(2015, 8, 20, 18, 15, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:99:5: warning: variable 'dateTime5' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime5(2015, 8, 20, 19, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:99:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime5(2015, 8, 20, 19, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:100:5: warning: variable 'dateTime6' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime6(2015, 8, 21, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:100:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime6(2015, 8, 21, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:101:5: warning: variable 'dateTime7' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime7(2015, 9, 20, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:101:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime7(2015, 9, 20, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:102:5: warning: variable 'dateTime8' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime8(2016, 8, 20, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:102:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime8(2016, 8, 20, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:125:5: warning: variable 'dateTime1' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime1(2015, 8, 20, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:125:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime1(2015, 8, 20, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:126:5: warning: variable 'dateTime2' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime2(2015, 8, 20, 18, 14, 51, 565173);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:126:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime2(2015, 8, 20, 18, 14, 51, 565173);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:127:5: warning: variable 'dateTime3' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime3(2015, 8, 20, 18, 14, 52, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:127:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime3(2015, 8, 20, 18, 14, 52, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:128:5: warning: variable 'dateTime4' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime4(2015, 8, 20, 18, 15, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:128:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime4(2015, 8, 20, 18, 15, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:129:5: warning: variable 'dateTime5' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime5(2015, 8, 20, 19, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:129:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime5(2015, 8, 20, 19, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:130:5: warning: variable 'dateTime6' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime6(2015, 8, 21, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:130:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime6(2015, 8, 21, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:131:5: warning: variable 'dateTime7' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime7(2015, 9, 20, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:131:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime7(2015, 9, 20, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:132:5: warning: variable 'dateTime8' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime8(2016, 8, 20, 18, 14, 51, 565172);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:132:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime8(2016, 8, 20, 18, 14, 51, 565172);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:153:5: warning: variable 'dateTime1' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime1(0000, 00, 01, 01, 01, 01, 000001);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:153:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime1(0000, 00, 01, 01, 01, 01, 000001);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:154:5: warning: variable 'dateTime2' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime2(2000, 01, 02, 02, 02, 02, 000002);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:154:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime2(2000, 01, 02, 02, 02, 02, 000002);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:155:5: warning: variable 'expectedAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime expectedAnswer(2000, 01, 03, 03, 03, 03, 000003);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:155:18: note: FIX-IT applied suggested code changes
    AlbaDateTime expectedAnswer(2000, 01, 03, 03, 03, 03, 000003);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:157:5: warning: variable 'actualAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime actualAnswer = dateTime1 + dateTime2;
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:157:18: note: FIX-IT applied suggested code changes
    AlbaDateTime actualAnswer = dateTime1 + dateTime2;
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:162:5: warning: variable 'dateTime1' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime1(0000, 00, 00, 00, 00, 00, 000001);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:162:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime1(0000, 00, 00, 00, 00, 00, 000001);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:163:5: warning: variable 'dateTime2' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime2(1970, 12, 31, 23, 59, 59, 999999);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:163:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime2(1970, 12, 31, 23, 59, 59, 999999);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:164:5: warning: variable 'expectedAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime expectedAnswer(1971, 01, 01, 00, 00, 00, 000000);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:164:18: note: FIX-IT applied suggested code changes
    AlbaDateTime expectedAnswer(1971, 01, 01, 00, 00, 00, 000000);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:166:5: warning: variable 'actualAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime actualAnswer = dateTime1 + dateTime2;
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:166:18: note: FIX-IT applied suggested code changes
    AlbaDateTime actualAnswer = dateTime1 + dateTime2;
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:171:5: warning: variable 'dateTime1' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime1(0000, 00, 00, 00, 00, 00, 000001);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:171:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime1(0000, 00, 00, 00, 00, 00, 000001);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:172:5: warning: variable 'dateTime2' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime2(1969, 12, 31, 23, 59, 59, 999999);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:172:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime2(1969, 12, 31, 23, 59, 59, 999999);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:173:5: warning: variable 'expectedAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime expectedAnswer(1970, 01, 01, 00, 00, 00, 000000);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:173:18: note: FIX-IT applied suggested code changes
    AlbaDateTime expectedAnswer(1970, 01, 01, 00, 00, 00, 000000);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:175:5: warning: variable 'actualAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime actualAnswer = dateTime1 + dateTime2;
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:175:18: note: FIX-IT applied suggested code changes
    AlbaDateTime actualAnswer = dateTime1 + dateTime2;
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:180:5: warning: variable 'dateTime1' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime1(2000, 12, 31, 00, 00, 00, 000000);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:180:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime1(2000, 12, 31, 00, 00, 00, 000000);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:181:5: warning: variable 'dateTime2' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime2(2000, 12, 31, 00, 00, 0, 000000);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:181:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime2(2000, 12, 31, 00, 00, 0, 000000);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:182:5: warning: variable 'expectedAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime expectedAnswer(4002, 01, 01, 00, 00, 00, 000000);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:182:18: note: FIX-IT applied suggested code changes
    AlbaDateTime expectedAnswer(4002, 01, 01, 00, 00, 00, 000000);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:184:5: warning: variable 'actualAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime actualAnswer = dateTime1 + dateTime2;
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:184:18: note: FIX-IT applied suggested code changes
    AlbaDateTime actualAnswer = dateTime1 + dateTime2;
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:189:5: warning: variable 'dateTime1' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime1(0000, 00, 01, 01, 01, 01, 000001);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:189:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime1(0000, 00, 01, 01, 01, 01, 000001);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:190:5: warning: variable 'dateTime2' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime2(2000, 01, 02, 02, 02, 02, 000002);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:190:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime2(2000, 01, 02, 02, 02, 02, 000002);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:191:5: warning: variable 'expectedAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime expectedAnswer(2000, 01, 01, 01, 01, 01, 000001);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:191:18: note: FIX-IT applied suggested code changes
    AlbaDateTime expectedAnswer(2000, 01, 01, 01, 01, 01, 000001);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:193:5: warning: variable 'actualAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime actualAnswer = dateTime2 - dateTime1;
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:193:18: note: FIX-IT applied suggested code changes
    AlbaDateTime actualAnswer = dateTime2 - dateTime1;
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:198:5: warning: variable 'dateTime1' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime1(0000, 00, 00, 00, 00, 00, 000001);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:198:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime1(0000, 00, 00, 00, 00, 00, 000001);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:199:5: warning: variable 'dateTime2' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime2(2000, 01, 01, 00, 00, 00, 000000);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:199:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime2(2000, 01, 01, 00, 00, 00, 000000);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:200:5: warning: variable 'expectedAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime expectedAnswer(1999, 12, 31, 23, 59, 59, 999999);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:200:18: note: FIX-IT applied suggested code changes
    AlbaDateTime expectedAnswer(1999, 12, 31, 23, 59, 59, 999999);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:202:5: warning: variable 'actualAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime actualAnswer = dateTime2 - dateTime1;
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:202:18: note: FIX-IT applied suggested code changes
    AlbaDateTime actualAnswer = dateTime2 - dateTime1;
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:207:5: warning: variable 'dateTime1' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime1(0000, 00, 00, 00, 00, 00, 000001);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:207:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime1(0000, 00, 00, 00, 00, 00, 000001);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:208:5: warning: variable 'dateTime2' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime2(2000, 01, 01, 00, 00, 00, 000000);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:208:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime2(2000, 01, 01, 00, 00, 00, 000000);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:212:5: warning: variable 'actualAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime actualAnswer = dateTime1 - dateTime2;
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:212:18: note: FIX-IT applied suggested code changes
    AlbaDateTime actualAnswer = dateTime1 - dateTime2;
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:217:5: warning: variable 'dateTime1' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime1(2018, 9, 30, 9, 55, 50, 110000);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:217:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime1(2018, 9, 30, 9, 55, 50, 110000);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:218:5: warning: variable 'dateTime2' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime2(2018, 9, 30, 9, 55, 42, 91000);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:218:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime2(2018, 9, 30, 9, 55, 42, 91000);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:219:5: warning: variable 'expectedAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime expectedAnswer(0000, 0, 0, 00, 00, 8, 19000);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:219:18: note: FIX-IT applied suggested code changes
    AlbaDateTime expectedAnswer(0000, 0, 0, 00, 00, 8, 19000);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:221:5: warning: variable 'actualAnswer' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime actualAnswer = dateTime1 - dateTime2;
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:221:18: note: FIX-IT applied suggested code changes
    AlbaDateTime actualAnswer = dateTime1 - dateTime2;
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:226:5: warning: variable 'emptyDateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime emptyDateTime;
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:226:18: note: FIX-IT applied suggested code changes
    AlbaDateTime emptyDateTime;
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:227:5: warning: variable 'nonEmptyDateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime nonEmptyDateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:227:18: note: FIX-IT applied suggested code changes
    AlbaDateTime nonEmptyDateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:234:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:234:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:240:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:240:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:246:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:246:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:252:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:252:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:258:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:258:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:264:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:264:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:270:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:270:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:276:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:276:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:282:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:282:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:288:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:288:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:294:5: warning: variable 'dateTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaDateTime_unit.cpp:294:18: note: FIX-IT applied suggested code changes
    AlbaDateTime dateTime(2017, 10, 6, 4, 59, 44, 32487);
                 ^
[119/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Time/AlbaLocalTimeHelper_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:23:5: warning: variable 'inputTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime inputTime(2021, 9, 13, 3, 17, 0, 0);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:23:18: note: FIX-IT applied suggested code changes
    AlbaDateTime inputTime(2021, 9, 13, 3, 17, 0, 0);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:34:5: warning: variable 'currentTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime currentTime(convertSystemTimeToAlbaDateTime(getSystemTimeNow()));
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:34:18: note: FIX-IT applied suggested code changes
    AlbaDateTime currentTime(convertSystemTimeToAlbaDateTime(getSystemTimeNow()));
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:41:5: warning: variable 'currentTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime currentTime(convertSinceEpochTimeToAlbaDateTime(getSystemTimeNow()));
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:41:18: note: FIX-IT applied suggested code changes
    AlbaDateTime currentTime(convertSinceEpochTimeToAlbaDateTime(getSystemTimeNow()));
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:48:5: warning: variable 'currentTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime currentTime(convertSinceEpochTimeToAlbaDateTime(getSteadyTimeNow()));
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:48:18: note: FIX-IT applied suggested code changes
    AlbaDateTime currentTime(convertSinceEpochTimeToAlbaDateTime(getSteadyTimeNow()));
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:54:5: warning: variable 'inputTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime inputTime(1990, 4, 13, 7, 7, 7, 7);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:54:18: note: FIX-IT applied suggested code changes
    AlbaDateTime inputTime(1990, 4, 13, 7, 7, 7, 7);
                 ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:56:5: warning: variable 'systemTime' of type 'LibrarySystemTime' (aka 'time_point<std::chrono::system_clock>') can be declared 'const' [misc-const-correctness]
    LibrarySystemTime systemTime(convertAlbaDateTimeToSystemTime(inputTime));
    ^
                      const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:56:23: note: FIX-IT applied suggested code changes
    LibrarySystemTime systemTime(convertAlbaDateTimeToSystemTime(inputTime));
                      ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:58:5: warning: variable 'timeConvertedBack' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime timeConvertedBack(convertSystemTimeToAlbaDateTime(systemTime));
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimeHelper_unit.cpp:58:18: note: FIX-IT applied suggested code changes
    AlbaDateTime timeConvertedBack(convertSystemTimeToAlbaDateTime(systemTime));
                 ^
[120/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Time/AlbaLocalTimer_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimer_unit.cpp:68:5: warning: variable 'expectedTime' of type 'AlbaDateTime' can be declared 'const' [misc-const-correctness]
    AlbaDateTime expectedTime(0U, 0U, 0U, 0U, 0U, 4U, 320919U);
    ^
                 const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Time\AlbaLocalTimer_unit.cpp:68:18: note: FIX-IT applied suggested code changes
    AlbaDateTime expectedTime(0U, 0U, 0U, 0U, 0U, 4U, 320919U);
                 ^
[121/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/User/DisplayTable_unit.cpp.obj
[122/126] Building CXX object CMakeFiles/AprgCommon.dir/tst/CommonTests/Utility/AlbaScopeGuard_unit.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Utility\AlbaScopeGuard_unit.cpp:12:9: warning: variable 'scopeGuard' of type 'AlbaScopeGuard' can be declared 'const' [misc-const-correctness]
        AlbaScopeGuard scopeGuard([&valueToTest]() { valueToTest = 2; });
        ^
                       const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tst\CommonTests\Utility\AlbaScopeGuard_unit.cpp:12:24: note: FIX-IT applied suggested code changes
        AlbaScopeGuard scopeGuard([&valueToTest]() { valueToTest = 2; });
                       ^
[123/126] Building CXX object CMakeFiles/AprgCommon.dir/tstWindows/CommonTests/PathHandler/AlbaWindowsPathHandlerTest.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandlerTest.cpp:12:36: warning: method 'convertToSimplestPath' can be made static [readability-convert-member-functions-to-static]
string AlbaWindowsPathHandlerTest::convertToSimplestPath(string_view const path) {
                                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler/AlbaWindowsPathHandlerTest.hpp:9:5: note: FIX-IT applied suggested code changes
    std::string convertToSimplestPath(std::string_view const path);
    ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandlerTest.cpp:16:36: warning: method 'getDriveOfAprgDir' can be made const [readability-make-member-function-const]
string AlbaWindowsPathHandlerTest::getDriveOfAprgDir() { return getStringBeforeThisString(pathOfAprgDirectory, ":"); }
                                   ^
                                                       const
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler/AlbaWindowsPathHandlerTest.hpp:10:36: note: FIX-IT applied suggested code changes
    std::string getDriveOfAprgDir();
                                   ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandlerTest.cpp:16:55: note: FIX-IT applied suggested code changes
string AlbaWindowsPathHandlerTest::getDriveOfAprgDir() { return getStringBeforeThisString(pathOfAprgDirectory, ":"); }
                                                      ^
[124/126] Building CXX object CMakeFiles/AprgCommon.dir/tstWindows/CommonTests/PathHandler/AlbaWindowsPathHandler_unit.cpp.obj
D:/a/aprg/aprg/AprgCommon/AprgCommon/tstWindows\CommonTests/PathHandler/AlbaWindowsPathHandlerTest.hpp:10:5: warning: function 'getDriveOfAprgDir' should be marked [[nodiscard]] [modernize-use-nodiscard]
    std::string getDriveOfAprgDir() const;
    ^
    [[nodiscard]] 
D:/a/aprg/aprg/AprgCommon/AprgCommon/tstWindows\CommonTests/PathHandler/AlbaWindowsPathHandlerTest.hpp:10:5: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:15:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler("");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:15:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler("");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:25:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(AprgCommon\FilesForTests\)");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:25:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(AprgCommon\FilesForTests\)");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:35:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(////AprgCommon\\\\\FilesForTests\)");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:35:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(////AprgCommon\\\\\FilesForTests\)");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:45:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(APRG_DIR R"(\////AprgCommon\\\\/AprgCommon/tst\DirectoryDoesNotExists\)");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:45:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(APRG_DIR R"(\////AprgCommon\\\\/AprgCommon/tst\DirectoryDoesNotExists\)");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:57:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(R"(APRG_DRIVE:\APRG12345\Aprg!@#$%Common\AprgCommon\tst\)");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:57:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(R"(APRG_DRIVE:\APRG12345\Aprg!@#$%Common\AprgCommon\tst\)");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:67:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(R"(APRG_DRIVE:\APRG12345\Aprg!@#$%Common\AprgCommon\tst\zxcvbnm12345.txt)");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:67:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(R"(APRG_DRIVE:\APRG12345\Aprg!@#$%Common\AprgCommon\tst\zxcvbnm12345.txt)");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:77:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(R"(APRG_DRIVE:\APRG12345\Aprg!@#$%Common\AprgCommon\tst\zxcvbnm12345.)");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:77:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(R"(APRG_DRIVE:\APRG12345\Aprg!@#$%Common\AprgCommon\tst\zxcvbnm12345.)");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:87:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(R"(APRG_DRIVE:\APRG12345\Aprg!@#$%Common\AprgCommon\tst\.zxcvbnm12345)");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:87:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(R"(APRG_DRIVE:\APRG12345\Aprg!@#$%Common\AprgCommon\tst\.zxcvbnm12345)");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:319:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(AprgCommon\FilesForTests\DirectoryTest\)");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:319:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(AprgCommon\FilesForTests\DirectoryTest\)");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:365:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(AprgCommon\FilesForTests\DirectoryTest\)");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:365:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(AprgCommon\FilesForTests\DirectoryTest\)");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:429:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(AprgCommon\FilesForTests\DirectoryTest\)");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:429:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(AprgCommon\FilesForTests\DirectoryTest\)");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:496:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(AprgCommon\FilesForTests\DirectoryTest\)");
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:496:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(pathOfAprgDirectory + R"(AprgCommon\FilesForTests\DirectoryTest\)");
                           ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:528:5: warning: variable 'pathHandler' of type 'AlbaWindowsPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaWindowsPathHandler pathHandler(AlbaWindowsPathHandler::createPathHandlerForDetectedPath());
    ^
                           const 
D:\a\aprg\aprg\AprgCommon\AprgCommon\tstWindows\CommonTests\PathHandler\AlbaWindowsPathHandler_unit.cpp:528:28: note: FIX-IT applied suggested code changes
    AlbaWindowsPathHandler pathHandler(AlbaWindowsPathHandler::createPathHandlerForDetectedPath());
                           ^
[125/126] Building CXX object CMakeFiles/AprgCommon.dir/tstWindows/CommonTests/Time/AlbaWindowsTimer_unit.cpp.obj
[126/126] Linking CXX executable AprgCommon.exe
[35m2023-09-10T16:37:32[0m | [33mBuildAndRun.sh:218[0m | The script [BuildAndRun.sh] for [buildOnOneCore] is finished.
DONE!
