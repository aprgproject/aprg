StaticAnalysisJobIdentifier: [011]
2023-09-11T01:19:44
[35m2023-09-11T01:20:52[0m | [33mBuildAndRun.sh:28[0m | The current path is [/d/a/aprg/aprg/AprgAudio/AprgAudio].
[35m2023-09-11T01:20:52[0m | [33mBuildAndRun.sh:29[0m | The scriptPath is [/d/a/aprg/aprg/AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh].
[35m2023-09-11T01:20:52[0m | [33mBuildAndRun.sh:30[0m | The scriptOption is [buildOnOneCore].
[35m2023-09-11T01:20:53[0m | [33mBuildAndRun.sh:31[0m | The buildDirectoryName is [StaticAnalyzersBuild].
[35m2023-09-11T01:20:53[0m | [33mBuildAndRun.sh:32[0m | The argument1 is [Debug] and argument2 is [].
[35m2023-09-11T01:20:53[0m | [33mBuildAndRun.sh:33[0m | The immediateDirectoryName is [AprgAudio].
[35m2023-09-11T01:20:53[0m | [33mBuildAndRun.sh:84[0m | The buildType is [Debug].
[35m2023-09-11T01:20:53[0m | [33mBuildAndRun.sh:85[0m | The numberOfCores is [2].
[35m2023-09-11T01:20:53[0m | [33mBuildAndRun.sh:68[0m | The build path is [/d/a/aprg/aprg/AprgAudio/StaticAnalyzersBuild] and the output of [ls -la --color=auto]:
total 149
drwxr-xr-x 1 runneradmin 197121      0 Sep 11 01:20 .
drwxr-xr-x 1 runneradmin 197121      0 Sep 11 01:19 ..
-rw-r--r-- 1 runneradmin 197121  18043 Sep 11 01:20 CMakeCache.txt
drwxr-xr-x 1 runneradmin 197121      0 Sep 11 01:20 CMakeFiles
-rw-r--r-- 1 runneradmin 197121    512 Sep 11 01:20 CTestTestfile.cmake
-rw-r--r-- 1 runneradmin 197121 111146 Sep 11 01:20 build.ninja
-rw-r--r-- 1 runneradmin 197121   2247 Sep 11 01:20 cmake_install.cmake
[1/47] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc.obj
In file included from D:/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc:49:
D:/a/aprg/aprg/gtest/gtest/googletest\src/gtest.cc:2604:3: warning: extension used [-Wlanguage-extension-token]
  __try {
  ^
1 warning generated.
[2/47] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest_main.cc.obj
[3/47] Linking CXX static library gtest.lib
[4/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Container/AlbaContainerHelper.cpp.obj
[5/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/File/AlbaFileReader.cpp.obj
[6/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Angle/AlbaAngle.cpp.obj
[7/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComplexNumberHelpers.cpp.obj
[8/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComputationHelpers.cpp.obj
[9/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/FactorAndMulitplesHelpers.cpp.obj
[10/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PowerHelpers.cpp.obj
[11/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PrecisionHelpers.cpp.obj
[12/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/StatisticsHelpers.cpp.obj
[13/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaComplexNumber.cpp.obj
[14/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaNumber.cpp.obj
[15/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberInterval.cpp.obj
[16/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalEndpoint.cpp.obj
[17/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalHelpers.cpp.obj
[18/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Ratio/AlbaRatio.cpp.obj
[19/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Memory/AlbaMemoryBuffer.cpp.obj
[20/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaPathHandler.cpp.obj
[21/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaWebPathHandler.cpp.obj
[22/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Print/AlbaPrintFunctions.cpp.obj
[23/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/AlbaOldRandomizer.cpp.obj
[24/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaCombinedEntropySource.cpp.obj
[25/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaEntropySourceBasedOnTime.cpp.obj
[26/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitReader.cpp.obj
[27/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitWriter.cpp.obj
[28/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterReader.cpp.obj
[29/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterWriter.cpp.obj
[30/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/String/AlbaStringHelper.cpp.obj
[31/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTime.cpp.obj
[32/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTimeHelper.cpp.obj
[33/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
1 warning generated.
[34/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimer.cpp.obj
[35/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/AlbaUserInterface.cpp.obj
[36/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/DisplayTable.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:205:67: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
int DisplayTablePrinter::getVerticalBorderLength() const { return m_verticalBorder.length(); }
                                                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:208:12: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return ((m_maxLengthAtColumn.size() + 1) * getVerticalBorderLength()) + m_totalColumnLength;
           ^
[37/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Utility/AlbaScopeGuard.cpp.obj
[38/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/BaseFileReaderTest.cpp.obj
[39/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/FileUtilities.cpp.obj
[40/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/PathHandler/AlbaWindowsPathHandler.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:28:24: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const length = fullPath.length();
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:30:45: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int const indexWithSlashCharacter = fullPath.find_first_of(m_slashCharacterString, index);
                                            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:270:23: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const index = m_directory.find_first_of(m_slashCharacterString + ":");
                      ^
[41/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Time\AlbaWindowsTimeHelper.cpp:6:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return AlbaDateTime(
           ^
[42/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimer.cpp.obj
[43/47] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Windows/AlbaWindowsHelper.cpp.obj
[44/47] Linking CXX static library APRG_COMMON.lib
[45/47] Building CXX object CMakeFiles/AprgAudio.dir/src/Audio/Audio.cpp.obj
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:92:5: warning: variable 'numberOfChannels' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfChannels = static_cast<int>(newBuffer.size());
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:92:9: note: FIX-IT applied suggested code changes
    int numberOfChannels = static_cast<int>(newBuffer.size());
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:99:5: warning: variable 'numberOfSamples' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfSamples = newBuffer[0].size();
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:99:9: note: FIX-IT applied suggested code changes
    int numberOfSamples = newBuffer[0].size();
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:125:5: warning: variable 'originalSize' of type 'int' can be declared 'const' [misc-const-correctness]
    int originalSize = getNumberOfSamplesPerChannel();
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:125:9: note: FIX-IT applied suggested code changes
    int originalSize = getNumberOfSamplesPerChannel();
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:139:5: warning: variable 'originalNumberOfChannels' of type 'int' can be declared 'const' [misc-const-correctness]
    int originalNumberOfChannels = static_cast<int>(getNumberOfChannels());
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:139:9: note: FIX-IT applied suggested code changes
    int originalNumberOfChannels = static_cast<int>(getNumberOfChannels());
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:140:5: warning: variable 'originalNumSamplesPerChannel' of type 'int' can be declared 'const' [misc-const-correctness]
    int originalNumSamplesPerChannel = static_cast<int>(getNumberOfSamplesPerChannel());
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:140:9: note: FIX-IT applied suggested code changes
    int originalNumSamplesPerChannel = static_cast<int>(getNumberOfSamplesPerChannel());
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:176:5: warning: variable 'begin' of type 'istream_iterator<uint8_t>' (aka 'istream_iterator<unsigned char>') can be declared 'const' [misc-const-correctness]
    istream_iterator<uint8_t> begin(file);
    ^
                              const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:176:31: note: FIX-IT applied suggested code changes
    istream_iterator<uint8_t> begin(file);
                              ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:177:5: warning: variable 'end' of type 'istream_iterator<uint8_t>' (aka 'istream_iterator<unsigned char>') can be declared 'const' [misc-const-correctness]
    istream_iterator<uint8_t> end;
    ^
                              const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:177:31: note: FIX-IT applied suggested code changes
    istream_iterator<uint8_t> end;
                              ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:197:5: warning: variable 'headerChunkID' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string headerChunkID(dataBuffer.begin(), dataBuffer.begin() + 4);
    ^
           const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:197:12: note: FIX-IT applied suggested code changes
    string headerChunkID(dataBuffer.begin(), dataBuffer.begin() + 4);
           ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:199:5: warning: variable 'format' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string format(dataBuffer.begin() + 8, dataBuffer.begin() + 12);
    ^
           const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:199:12: note: FIX-IT applied suggested code changes
    string format(dataBuffer.begin() + 8, dataBuffer.begin() + 12);
           ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:203:5: warning: variable 'indexOfDataChunk' of type 'int' can be declared 'const' [misc-const-correctness]
    int indexOfDataChunk = getIndexOfString(dataBuffer, "data");
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:203:9: note: FIX-IT applied suggested code changes
    int indexOfDataChunk = getIndexOfString(dataBuffer, "data");
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:204:5: warning: variable 'indexOfFormatChunk' of type 'int' can be declared 'const' [misc-const-correctness]
    int indexOfFormatChunk = getIndexOfString(dataBuffer, "fmt");
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:204:9: note: FIX-IT applied suggested code changes
    int indexOfFormatChunk = getIndexOfString(dataBuffer, "fmt");
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:215:5: warning: variable 'f' of type 'int' can be declared 'const' [misc-const-correctness]
    int f = indexOfFormatChunk;
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:215:9: note: FIX-IT applied suggested code changes
    int f = indexOfFormatChunk;
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:218:5: warning: variable 'audioFormat' of type 'int16_t' (aka 'short') can be declared 'const' [misc-const-correctness]
    int16_t audioFormat = twoBytesToInt(dataBuffer, f + 8);
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:218:13: note: FIX-IT applied suggested code changes
    int16_t audioFormat = twoBytesToInt(dataBuffer, f + 8);
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:219:5: warning: variable 'numberOfChannels' of type 'int16_t' (aka 'short') can be declared 'const' [misc-const-correctness]
    int16_t numberOfChannels = twoBytesToInt(dataBuffer, f + 10);
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:219:13: note: FIX-IT applied suggested code changes
    int16_t numberOfChannels = twoBytesToInt(dataBuffer, f + 10);
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:221:5: warning: variable 'numberBytesPerSecond' of type 'int32_t' (aka 'int') can be declared 'const' [misc-const-correctness]
    int32_t numberBytesPerSecond = fourBytesToInt(dataBuffer, f + 16);
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:221:13: note: FIX-IT applied suggested code changes
    int32_t numberBytesPerSecond = fourBytesToInt(dataBuffer, f + 16);
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:222:5: warning: variable 'numberBytesPerBlock' of type 'int16_t' (aka 'short') can be declared 'const' [misc-const-correctness]
    int16_t numberBytesPerBlock = twoBytesToInt(dataBuffer, f + 20);
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:222:13: note: FIX-IT applied suggested code changes
    int16_t numberBytesPerBlock = twoBytesToInt(dataBuffer, f + 20);
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:225:5: warning: variable 'numberBytesPerSample' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberBytesPerSample = bitDepth / 8;
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:225:9: note: FIX-IT applied suggested code changes
    int numberBytesPerSample = bitDepth / 8;
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:254:5: warning: variable 'd' of type 'int' can be declared 'const' [misc-const-correctness]
    int d = indexOfDataChunk;
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:254:9: note: FIX-IT applied suggested code changes
    int d = indexOfDataChunk;
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:256:5: warning: variable 'dataChunkSize' of type 'int32_t' (aka 'int') can be declared 'const' [misc-const-correctness]
    int32_t dataChunkSize = fourBytesToInt(dataBuffer, d + 4);
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:256:13: note: FIX-IT applied suggested code changes
    int32_t dataChunkSize = fourBytesToInt(dataBuffer, d + 4);
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:258:5: warning: variable 'numberOfSamples' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfSamples = dataChunkSize / (numberOfChannels * bitDepth / 8);
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:258:9: note: FIX-IT applied suggested code changes
    int numberOfSamples = dataChunkSize / (numberOfChannels * bitDepth / 8);
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:259:5: warning: variable 'samplesStartIndex' of type 'int' can be declared 'const' [misc-const-correctness]
    int samplesStartIndex = indexOfDataChunk + 8;
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:259:9: note: FIX-IT applied suggested code changes
    int samplesStartIndex = indexOfDataChunk + 8;
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:266:13: warning: variable 'sampleIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int sampleIndex = samplesStartIndex + (numberBytesPerBlock * i) + channel * numberBytesPerSample;
            ^
                const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:266:17: note: FIX-IT applied suggested code changes
            int sampleIndex = samplesStartIndex + (numberBytesPerBlock * i) + channel * numberBytesPerSample;
                ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:272:17: warning: variable 'sampleAsInt' of type 'int16_t' (aka 'short') can be declared 'const' [misc-const-correctness]
                int16_t sampleAsInt = twoBytesToInt(dataBuffer, sampleIndex);
                ^
                        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:272:25: note: FIX-IT applied suggested code changes
                int16_t sampleAsInt = twoBytesToInt(dataBuffer, sampleIndex);
                        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:300:5: warning: variable 'headerChunkID' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string headerChunkID(dataBuffer.begin(), dataBuffer.begin() + 4);
    ^
           const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:300:12: note: FIX-IT applied suggested code changes
    string headerChunkID(dataBuffer.begin(), dataBuffer.begin() + 4);
           ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:302:5: warning: variable 'format' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string format(dataBuffer.begin() + 8, dataBuffer.begin() + 12);
    ^
           const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:302:12: note: FIX-IT applied suggested code changes
    string format(dataBuffer.begin() + 8, dataBuffer.begin() + 12);
           ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:306:5: warning: variable 'indexOfCommChunk' of type 'int' can be declared 'const' [misc-const-correctness]
    int indexOfCommChunk = getIndexOfString(dataBuffer, "COMM");
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:306:9: note: FIX-IT applied suggested code changes
    int indexOfCommChunk = getIndexOfString(dataBuffer, "COMM");
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:307:5: warning: variable 'indexOfSoundDataChunk' of type 'int' can be declared 'const' [misc-const-correctness]
    int indexOfSoundDataChunk = getIndexOfString(dataBuffer, "SSND");
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:307:9: note: FIX-IT applied suggested code changes
    int indexOfSoundDataChunk = getIndexOfString(dataBuffer, "SSND");
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:318:5: warning: variable 'p' of type 'int' can be declared 'const' [misc-const-correctness]
    int p = indexOfCommChunk;
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:318:9: note: FIX-IT applied suggested code changes
    int p = indexOfCommChunk;
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:321:5: warning: variable 'numberOfChannels' of type 'int16_t' (aka 'short') can be declared 'const' [misc-const-correctness]
    int16_t numberOfChannels = twoBytesToInt(dataBuffer, p + 8, Endianness::BigEndian);
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:321:13: note: FIX-IT applied suggested code changes
    int16_t numberOfChannels = twoBytesToInt(dataBuffer, p + 8, Endianness::BigEndian);
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:322:5: warning: variable 'numberOfSamplesPerChannel' of type 'int32_t' (aka 'int') can be declared 'const' [misc-const-correctness]
    int32_t numberOfSamplesPerChannel = fourBytesToInt(dataBuffer, p + 10, Endianness::BigEndian);
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:322:13: note: FIX-IT applied suggested code changes
    int32_t numberOfSamplesPerChannel = fourBytesToInt(dataBuffer, p + 10, Endianness::BigEndian);
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:346:5: warning: variable 's' of type 'int' can be declared 'const' [misc-const-correctness]
    int s = indexOfSoundDataChunk;
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:346:9: note: FIX-IT applied suggested code changes
    int s = indexOfSoundDataChunk;
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:348:5: warning: variable 'soundDataChunkSize' of type 'int32_t' (aka 'int') can be declared 'const' [misc-const-correctness]
    int32_t soundDataChunkSize = fourBytesToInt(dataBuffer, s + 4, Endianness::BigEndian);
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:348:13: note: FIX-IT applied suggested code changes
    int32_t soundDataChunkSize = fourBytesToInt(dataBuffer, s + 4, Endianness::BigEndian);
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:349:5: warning: variable 'offset' of type 'int32_t' (aka 'int') can be declared 'const' [misc-const-correctness]
    int32_t offset = fourBytesToInt(dataBuffer, s + 8, Endianness::BigEndian);
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:349:13: note: FIX-IT applied suggested code changes
    int32_t offset = fourBytesToInt(dataBuffer, s + 8, Endianness::BigEndian);
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:351:5: warning: variable 'numberBytesPerSample' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberBytesPerSample = bitDepth / 8;
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:351:9: note: FIX-IT applied suggested code changes
    int numberBytesPerSample = bitDepth / 8;
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:352:5: warning: variable 'numberBytesPerFrame' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberBytesPerFrame = numberBytesPerSample * numberOfChannels;
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:352:9: note: FIX-IT applied suggested code changes
    int numberBytesPerFrame = numberBytesPerSample * numberOfChannels;
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:353:5: warning: variable 'totalNumAudioSampleBytes' of type 'int' can be declared 'const' [misc-const-correctness]
    int totalNumAudioSampleBytes = numberOfSamplesPerChannel * numberBytesPerFrame;
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:353:9: note: FIX-IT applied suggested code changes
    int totalNumAudioSampleBytes = numberOfSamplesPerChannel * numberBytesPerFrame;
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:354:5: warning: variable 'samplesStartIndex' of type 'int' can be declared 'const' [misc-const-correctness]
    int samplesStartIndex = s + 16 + static_cast<int>(offset);
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:354:9: note: FIX-IT applied suggested code changes
    int samplesStartIndex = s + 16 + static_cast<int>(offset);
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:368:13: warning: variable 'sampleIndex' of type 'int' can be declared 'const' [misc-const-correctness]
            int sampleIndex = samplesStartIndex + (numberBytesPerFrame * i) + channel * numberBytesPerSample;
            ^
                const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:368:17: note: FIX-IT applied suggested code changes
            int sampleIndex = samplesStartIndex + (numberBytesPerFrame * i) + channel * numberBytesPerSample;
                ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:375:17: warning: variable 'sampleAsInt' of type 'int16_t' (aka 'short') can be declared 'const' [misc-const-correctness]
                int16_t sampleAsInt = twoBytesToInt(dataBuffer, sampleIndex, Endianness::BigEndian);
                ^
                        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:375:25: note: FIX-IT applied suggested code changes
                int16_t sampleAsInt = twoBytesToInt(dataBuffer, sampleIndex, Endianness::BigEndian);
                        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:433:5: warning: variable 'filePathHandler' of type 'AlbaLocalPathHandler' can be declared 'const' [misc-const-correctness]
    AlbaLocalPathHandler filePathHandler(filePath);
    ^
                         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:433:26: note: FIX-IT applied suggested code changes
    AlbaLocalPathHandler filePathHandler(filePath);
                         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:456:5: warning: variable 'fileSizeInBytes' of type 'int32_t' (aka 'int') can be declared 'const' [misc-const-correctness]
    int32_t fileSizeInBytes = 4 + 24 + 8 + dataChunkSize;
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:456:13: note: FIX-IT applied suggested code changes
    int32_t fileSizeInBytes = 4 + 24 + 8 + dataChunkSize;
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:484:17: warning: variable 'byte' of type 'uint8_t' (aka 'unsigned char') can be declared 'const' [misc-const-correctness]
                uint8_t byte = sampleToSingleByte(samples[channel][i]);
                ^
                        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:484:25: note: FIX-IT applied suggested code changes
                uint8_t byte = sampleToSingleByte(samples[channel][i]);
                        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:487:17: warning: variable 'sampleAsInt' of type 'int16_t' (aka 'short') can be declared 'const' [misc-const-correctness]
                int16_t sampleAsInt = sampleToSixteenBitInt(samples[channel][i]);
                ^
                        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:487:25: note: FIX-IT applied suggested code changes
                int16_t sampleAsInt = sampleToSixteenBitInt(samples[channel][i]);
                        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:518:5: warning: variable 'numberBytesPerSample' of type 'int32_t' (aka 'int') can be declared 'const' [misc-const-correctness]
    int32_t numberBytesPerSample = bitDepth / 8;
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:518:13: note: FIX-IT applied suggested code changes
    int32_t numberBytesPerSample = bitDepth / 8;
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:521:5: warning: variable 'soundDataChunkSize' of type 'int32_t' (aka 'int') can be declared 'const' [misc-const-correctness]
    int32_t soundDataChunkSize = totalNumAudioSampleBytes + 8;
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:521:13: note: FIX-IT applied suggested code changes
    int32_t soundDataChunkSize = totalNumAudioSampleBytes + 8;
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:529:5: warning: variable 'fileSizeInBytes' of type 'int32_t' (aka 'int') can be declared 'const' [misc-const-correctness]
    int32_t fileSizeInBytes = 4 + 26 + 16 + totalNumAudioSampleBytes;
    ^
            const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:529:13: note: FIX-IT applied suggested code changes
    int32_t fileSizeInBytes = 4 + 26 + 16 + totalNumAudioSampleBytes;
            ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:554:17: warning: variable 'byte' of type 'uint8_t' (aka 'unsigned char') can be declared 'const' [misc-const-correctness]
                uint8_t byte = sampleToSingleByte(samples[channel][i]);
                ^
                        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:554:25: note: FIX-IT applied suggested code changes
                uint8_t byte = sampleToSingleByte(samples[channel][i]);
                        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:557:17: warning: variable 'sampleAsInt' of type 'int16_t' (aka 'short') can be declared 'const' [misc-const-correctness]
                int16_t sampleAsInt = sampleToSixteenBitInt(samples[channel][i]);
                ^
                        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:557:25: note: FIX-IT applied suggested code changes
                int16_t sampleAsInt = sampleToSixteenBitInt(samples[channel][i]);
                        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:589:13: warning: variable 'value' of type 'char' can be declared 'const' [misc-const-correctness]
            char value = static_cast<char>(fileDataBytesByte);
            ^
                 const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:589:18: note: FIX-IT applied suggested code changes
            char value = static_cast<char>(fileDataBytesByte);
                 ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:653:5: warning: variable 'header' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string header(dataBuffer.begin(), dataBuffer.begin() + 4);
    ^
           const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:653:12: note: FIX-IT applied suggested code changes
    string header(dataBuffer.begin(), dataBuffer.begin() + 4);
           ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:697:5: warning: variable 'stringLength' of type 'int' can be declared 'const' [misc-const-correctness]
    int stringLength = static_cast<int>(stringToSearchFor.length());
    ^
        const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:697:9: note: FIX-IT applied suggested code changes
    int stringLength = static_cast<int>(stringToSearchFor.length());
        ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:700:9: warning: variable 'section' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string section(source.cbegin() + i, source.cbegin() + i + stringLength);
        ^
               const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\src\Audio\Audio.cpp:700:16: note: FIX-IT applied suggested code changes
        string section(source.cbegin() + i, source.cbegin() + i + stringLength);
               ^
[46/47] Building CXX object CMakeFiles/AprgAudio.dir/tst/AudioTests/Audio_unit.cpp.obj
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:46:5: warning: variable 'numberOfChannelsAsString' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    std::string numberOfChannelsAsString = numberOfChannels == 1 ? "mono" : "stereo";
    ^
                const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:46:17: note: FIX-IT applied suggested code changes
    std::string numberOfChannelsAsString = numberOfChannels == 1 ? "mono" : "stereo";
                ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:47:5: warning: variable 'bitDepthAsString' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    std::string bitDepthAsString = std::to_string(bitDepth);
    ^
                const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:47:17: note: FIX-IT applied suggested code changes
    std::string bitDepthAsString = std::to_string(bitDepth);
                ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:48:5: warning: variable 'sampleRateAsString' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    std::string sampleRateAsString = std::to_string(sampleRate);
    ^
                const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:48:17: note: FIX-IT applied suggested code changes
    std::string sampleRateAsString = std::to_string(sampleRate);
                ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:66:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:66:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:87:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:87:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:108:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:108:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:129:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:129:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:150:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:150:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:171:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:171:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:194:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:194:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:204:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:204:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:225:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:225:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:246:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:246:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:267:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:267:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:286:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:286:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:307:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:307:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:328:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:328:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:349:5: warning: variable 'isLoadingSuccessful' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isLoadingSuccessful =
    ^
         const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:349:10: note: FIX-IT applied suggested code changes
    bool isLoadingSuccessful =
         ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:367:5: warning: variable 'sampleRates' of type 'std::vector<int>' can be declared 'const' [misc-const-correctness]
    std::vector<int> sampleRates = {22050, 44100, 48000, 96000};
    ^
                     const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:367:22: note: FIX-IT applied suggested code changes
    std::vector<int> sampleRates = {22050, 44100, 48000, 96000};
                     ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:368:5: warning: variable 'bitDepths' of type 'std::vector<int>' can be declared 'const' [misc-const-correctness]
    std::vector<int> bitDepths = {8, 16, 24};
    ^
                     const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:368:22: note: FIX-IT applied suggested code changes
    std::vector<int> bitDepths = {8, 16, 24};
                     ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:369:5: warning: variable 'numberOfChannels' of type 'std::vector<int>' can be declared 'const' [misc-const-correctness]
    std::vector<int> numberOfChannels = {1, 2};
    ^
                     const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:369:22: note: FIX-IT applied suggested code changes
    std::vector<int> numberOfChannels = {1, 2};
                     ^
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:370:5: warning: variable 'audioFormats' of type 'std::vector<AudioFormat>' can be declared 'const' [misc-const-correctness]
    std::vector<AudioFormat> audioFormats = {AudioFormat::Wave, AudioFormat::Aiff};
    ^
                             const 
D:\a\aprg\aprg\AprgAudio\AprgAudio\tst\AudioTests\Audio_unit.cpp:370:30: note: FIX-IT applied suggested code changes
    std::vector<AudioFormat> audioFormats = {AudioFormat::Wave, AudioFormat::Aiff};
                             ^
[47/47] Linking CXX executable AprgAudio.exe
[35m2023-09-11T01:35:51[0m | [33mBuildAndRun.sh:218[0m | The script [BuildAndRun.sh] for [buildOnOneCore] is finished.
DONE!
