StaticAnalysisJobIdentifier: [10]
2023-09-10T19:56:22
[35m2023-09-10T19:57:29[0m | [33mBuildAndRun.sh:28[0m | The current path is [/d/a/aprg/aprg/AprgAlgebra/AprgAlgebra].
[35m2023-09-10T19:57:29[0m | [33mBuildAndRun.sh:29[0m | The scriptPath is [/d/a/aprg/aprg/AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh].
[35m2023-09-10T19:57:29[0m | [33mBuildAndRun.sh:30[0m | The scriptOption is [buildOnOneCore].
[35m2023-09-10T19:57:29[0m | [33mBuildAndRun.sh:31[0m | The buildDirectoryName is [StaticAnalyzersBuild].
[35m2023-09-10T19:57:29[0m | [33mBuildAndRun.sh:32[0m | The argument1 is [Debug] and argument2 is [].
[35m2023-09-10T19:57:29[0m | [33mBuildAndRun.sh:33[0m | The immediateDirectoryName is [AprgAlgebra].
[35m2023-09-10T19:57:29[0m | [33mBuildAndRun.sh:84[0m | The buildType is [Debug].
[35m2023-09-10T19:57:29[0m | [33mBuildAndRun.sh:85[0m | The numberOfCores is [2].
[35m2023-09-10T19:57:29[0m | [33mBuildAndRun.sh:68[0m | The build path is [/d/a/aprg/aprg/AprgAlgebra/StaticAnalyzersBuild] and the output of [ls -la --color=auto]:
total 593
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 19:57 .
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 19:56 ..
-rw-r--r-- 1 runneradmin 197121  18069 Sep 10 19:57 CMakeCache.txt
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 19:57 CMakeFiles
-rw-r--r-- 1 runneradmin 197121    532 Sep 10 19:57 CTestTestfile.cmake
-rw-r--r-- 1 runneradmin 197121 567519 Sep 10 19:57 build.ninja
-rw-r--r-- 1 runneradmin 197121   2265 Sep 10 19:57 cmake_install.cmake
[1/311] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc.obj
In file included from D:/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc:49:
D:/a/aprg/aprg/gtest/gtest/googletest\src/gtest.cc:2604:3: warning: extension used [-Wlanguage-extension-token]
  __try {
  ^
1 warning generated.
[2/311] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest_main.cc.obj
[3/311] Linking CXX static library gtest.lib
[4/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Container/AlbaContainerHelper.cpp.obj
[5/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/File/AlbaFileReader.cpp.obj
[6/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Angle/AlbaAngle.cpp.obj
[7/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComplexNumberHelpers.cpp.obj
[8/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComputationHelpers.cpp.obj
[9/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/FactorAndMulitplesHelpers.cpp.obj
[10/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PowerHelpers.cpp.obj
[11/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PrecisionHelpers.cpp.obj
[12/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/StatisticsHelpers.cpp.obj
[13/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaComplexNumber.cpp.obj
[14/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaNumber.cpp.obj
[15/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberInterval.cpp.obj
[16/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalEndpoint.cpp.obj
[17/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalHelpers.cpp.obj
[18/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Ratio/AlbaRatio.cpp.obj
[19/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Memory/AlbaMemoryBuffer.cpp.obj
[20/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaPathHandler.cpp.obj
[21/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaWebPathHandler.cpp.obj
[22/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Print/AlbaPrintFunctions.cpp.obj
[23/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/AlbaOldRandomizer.cpp.obj
[24/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaCombinedEntropySource.cpp.obj
[25/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaEntropySourceBasedOnTime.cpp.obj
[26/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitReader.cpp.obj
[27/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitWriter.cpp.obj
[28/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterReader.cpp.obj
[29/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterWriter.cpp.obj
[30/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/String/AlbaStringHelper.cpp.obj
[31/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTime.cpp.obj
[32/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTimeHelper.cpp.obj
[33/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
1 warning generated.
[34/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimer.cpp.obj
[35/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/AlbaUserInterface.cpp.obj
[36/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/DisplayTable.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:205:67: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
int DisplayTablePrinter::getVerticalBorderLength() const { return m_verticalBorder.length(); }
                                                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:208:12: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return ((m_maxLengthAtColumn.size() + 1) * getVerticalBorderLength()) + m_totalColumnLength;
           ^
[37/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Utility/AlbaScopeGuard.cpp.obj
[38/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/BaseFileReaderTest.cpp.obj
[39/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/FileUtilities.cpp.obj
[40/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/PathHandler/AlbaWindowsPathHandler.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:28:24: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const length = fullPath.length();
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:30:45: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int const indexWithSlashCharacter = fullPath.find_first_of(m_slashCharacterString, index);
                                            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:270:23: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const index = m_directory.find_first_of(m_slashCharacterString + ":");
                      ^
[41/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Time\AlbaWindowsTimeHelper.cpp:6:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return AlbaDateTime(
           ^
[42/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimer.cpp.obj
[43/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Windows/AlbaWindowsHelper.cpp.obj
[44/311] Linking CXX static library APRG_COMMON.lib
[45/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/AdditionAndSubtractionOfExpressions.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:40:5: warning: variable 'size' of type 'int' can be declared 'const' [misc-const-correctness]
    int size = getSize();
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:40:9: note: FIX-IT applied suggested code changes
    int size = getSize();
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:47:67: warning: narrowing conversion from 'unsigned long long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
int AdditionAndSubtractionOfExpressions::getSize() const { return min(m_expressions.size(), m_associations.size()); }
                                                                  ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:100:9: warning: variable 'termsToBeMerged' of type 'TermsWithDetails' (aka 'vector<TermWithDetails>') can be declared 'const' [misc-const-correctness]
        TermsWithDetails termsToBeMerged = retrieveTermsWithDetailsThatSatisfiesCondition(
        ^
                         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:100:26: note: FIX-IT applied suggested code changes
        TermsWithDetails termsToBeMerged = retrieveTermsWithDetailsThatSatisfiesCondition(
                         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:112:9: warning: variable 'termsToBeMerged' of type 'TermsWithDetails' (aka 'vector<TermWithDetails>') can be declared 'const' [misc-const-correctness]
        TermsWithDetails termsToBeMerged = retrieveTermsWithDetailsThatSatisfiesCondition(
        ^
                         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:112:26: note: FIX-IT applied suggested code changes
        TermsWithDetails termsToBeMerged = retrieveTermsWithDetailsThatSatisfiesCondition(
                         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:144:16: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int size = mergeParts.size();
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:149:17: warning: variable 'mergedTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
                Term mergedTerm(mergeTerms(mergeParts[i], mergeParts[j], m_associations[i], m_associations[j]));
                ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:149:22: note: FIX-IT applied suggested code changes
                Term mergedTerm(mergeTerms(mergeParts[i], mergeParts[j], m_associations[i], m_associations[j]));
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:160:24: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                size = mergeParts.size();
                       ^
[46/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/AdditionAndSubtractionOfTermsOverTerms.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:14:5: warning: variable 'lcmDenominatorTerms' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
    Terms lcmDenominatorTerms(getLcmOfDenominatorTerms());
    ^
          const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:14:11: note: FIX-IT applied suggested code changes
    Terms lcmDenominatorTerms(getLcmOfDenominatorTerms());
          ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:15:5: warning: variable 'combinedNumerator' of type 'Expression' can be declared 'const' [misc-const-correctness]
    Expression combinedNumerator = getCombinedNumeratorExpression(lcmDenominatorTerms);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:15:16: note: FIX-IT applied suggested code changes
    Expression combinedNumerator = getCombinedNumeratorExpression(lcmDenominatorTerms);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:16:5: warning: variable 'combinedDenominator' of type 'Expression' can be declared 'const' [misc-const-correctness]
    Expression combinedDenominator = getCombinedDenominatorExpression(lcmDenominatorTerms);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:16:16: note: FIX-IT applied suggested code changes
    Expression combinedDenominator = getCombinedDenominatorExpression(lcmDenominatorTerms);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:40:5: warning: variable 'lcmMonomial' of type 'Monomial' can be declared 'const' [misc-const-correctness]
    Monomial lcmMonomial(getLcmMonomialInMonomials(lcmMonomials));
    ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:40:14: note: FIX-IT applied suggested code changes
    Monomial lcmMonomial(getLcmMonomialInMonomials(lcmMonomials));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:96:37: warning: unnecessary temporary object created while calling emplace_back [hicpp-use-emplace,modernize-use-emplace]
        numeratorTerms.emplace_back(Term(monomialMultiplier));
                                    ^~~~~                  ~
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:96:37: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:96:60: note: FIX-IT applied suggested code changes
        numeratorTerms.emplace_back(Term(monomialMultiplier));
                                                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:145:5: warning: variable 'numberOfItems' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfItems = m_items.size();
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:145:9: note: FIX-IT applied suggested code changes
    int numberOfItems = m_items.size();
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:145:25: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int numberOfItems = m_items.size();
                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:147:9: warning: variable 'combinedNumeratorOnIndex' of type 'Expression' can be declared 'const' [misc-const-correctness]
        Expression combinedNumeratorOnIndex(
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:147:20: note: FIX-IT applied suggested code changes
        Expression combinedNumeratorOnIndex(
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:157:5: warning: variable 'numeratorTermsOnIndex' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
    Terms numeratorTermsOnIndex(getRevisedNumeratorTermsBasedOnLcmOnIndex(numeratorIndex, lcmDenominatorTerms));
    ^
          const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:157:11: note: FIX-IT applied suggested code changes
    Terms numeratorTermsOnIndex(getRevisedNumeratorTermsBasedOnLcmOnIndex(numeratorIndex, lcmDenominatorTerms));
          ^
[47/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/ConstructUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:104:5: warning: variable 'originalTermsRaiseToTerms' of type 'TermsRaiseToTerms' can be declared 'const' [misc-const-correctness]
    TermsRaiseToTerms originalTermsRaiseToTerms(originalTot.getTermsRaiseToTerms());
    ^
                      const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:104:23: note: FIX-IT applied suggested code changes
    TermsRaiseToTerms originalTermsRaiseToTerms(originalTot.getTermsRaiseToTerms());
                      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:118:5: warning: variable 'areAllConstantFactorsNegative' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool areAllConstantFactorsNegative(all_of(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:118:10: note: FIX-IT applied suggested code changes
    bool areAllConstantFactorsNegative(all_of(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:135:9: warning: variable 'newConstantBase' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber newConstantBase(originalConstant ^ (AlbaNumber(1) / constantGcf));
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:135:20: note: FIX-IT applied suggested code changes
        AlbaNumber newConstantBase(originalConstant ^ (AlbaNumber(1) / constantGcf));
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:148:13: warning: variable 'uniqueConstantExponent' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
            AlbaNumber uniqueConstantExponent(constantFactorsOfExponents[i] / constantGcf);
            ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:148:24: note: FIX-IT applied suggested code changes
            AlbaNumber uniqueConstantExponent(constantFactorsOfExponents[i] / constantGcf);
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:154:13: warning: variable 'originalBaseToUniqueExponent' of type 'TermRaiseToTerms' can be declared 'const' [misc-const-correctness]
            TermRaiseToTerms originalBaseToUniqueExponent(originalBases[i], uniqueExponent);
            ^
                             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:154:30: note: FIX-IT applied suggested code changes
            TermRaiseToTerms originalBaseToUniqueExponent(originalBases[i], uniqueExponent);
                             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:222:5: warning: variable 'exponent' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber exponent = (variablesToExponentsMap.size() == 1) ? (variablesToExponentsMap.cbegin())->second
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:222:16: note: FIX-IT applied suggested code changes
    AlbaNumber exponent = (variablesToExponentsMap.size() == 1) ? (variablesToExponentsMap.cbegin())->second
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:229:5: warning: variable 'polynomialRaiseToAnUnsignedInt' of type 'PolynomialRaiseToAnUnsignedInt' can be declared 'const' [misc-const-correctness]
    PolynomialRaiseToAnUnsignedInt polynomialRaiseToAnUnsignedInt(polynomial);
    ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:229:36: note: FIX-IT applied suggested code changes
    PolynomialRaiseToAnUnsignedInt polynomialRaiseToAnUnsignedInt(polynomial);
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:249:9: warning: variable 'termRaiseToANumber' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
        TermRaiseToANumber termRaiseToANumber(createTermRaiseToANumberFromMonomial(term.getAsMonomial()));
        ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:249:28: note: FIX-IT applied suggested code changes
        TermRaiseToANumber termRaiseToANumber(createTermRaiseToANumberFromMonomial(term.getAsMonomial()));
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:252:9: warning: variable 'termRaiseToANumber' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
        TermRaiseToANumber termRaiseToANumber(createTermRaiseToANumberFromPolynomial(term.getAsPolynomial()));
        ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\ConstructUtilities.cpp:252:28: note: FIX-IT applied suggested code changes
        TermRaiseToANumber termRaiseToANumber(createTermRaiseToANumberFromPolynomial(term.getAsPolynomial()));
                           ^
[48/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/MultiplicationAndDivisionOfRadicals.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:25:5: warning: variable 'scopeObject' of type 'SimplificationOfExpression::ScopeObject' can be declared 'const' [misc-const-correctness]
    SimplificationOfExpression::ScopeObject scopeObject;
    ^
                                            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:25:45: note: FIX-IT applied suggested code changes
    SimplificationOfExpression::ScopeObject scopeObject;
                                            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:43:5: warning: variable 'scopeObject' of type 'SimplificationOfExpression::ScopeObject' can be declared 'const' [misc-const-correctness]
    SimplificationOfExpression::ScopeObject scopeObject;
    ^
                                            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:43:45: note: FIX-IT applied suggested code changes
    SimplificationOfExpression::ScopeObject scopeObject;
                                            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:51:5: warning: variable 'gcfOfExponents' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber gcfOfExponents(getGcfOfExponents(radicalDetails));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:51:16: note: FIX-IT applied suggested code changes
    AlbaNumber gcfOfExponents(getGcfOfExponents(radicalDetails));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:81:9: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
        AlbaNumber::FractionData fractionData(gcfOfExponents.getFractionData());
        ^
                                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:81:34: note: FIX-IT applied suggested code changes
        AlbaNumber::FractionData fractionData(gcfOfExponents.getFractionData());
                                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:82:59: warning: narrowing conversion from 'DenominatorDataType' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        if (isEven(static_cast<int>(getAbsoluteValue<int>(fractionData.denominator)))) {
                                                          ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:93:9: warning: variable 'termRaiseToANumber' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
        TermRaiseToANumber termRaiseToANumber(createTermRaiseToANumberFromTerm(term));
        ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:93:28: note: FIX-IT applied suggested code changes
        TermRaiseToANumber termRaiseToANumber(createTermRaiseToANumberFromTerm(term));
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:98:13: warning: variable 'monomial' of type 'Monomial' can be declared 'const' [misc-const-correctness]
            Monomial monomial(createMonomialIfPossible(term));
            ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:98:22: note: FIX-IT applied suggested code changes
            Monomial monomial(createMonomialIfPossible(term));
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:118:9: warning: variable 'newRadical' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term newRadical(newRadicalBaseAndExponent.getCombinedTerm());
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:118:14: note: FIX-IT applied suggested code changes
        Term newRadical(newRadicalBaseAndExponent.getCombinedTerm());
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:120:13: warning: variable 'newRadicalMonomial' of type 'Monomial' can be declared 'const' [misc-const-correctness]
            Monomial newRadicalMonomial(createMonomialIfPossible(newRadical));
            ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:120:22: note: FIX-IT applied suggested code changes
            Monomial newRadicalMonomial(createMonomialIfPossible(newRadical));
                     ^
[49/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/PolynomialOverPolynomial.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:95:17: warning: variable 'newPositiveExponent' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
                AlbaNumber newPositiveExponent(exponent * -1);
                ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:95:28: note: FIX-IT applied suggested code changes
                AlbaNumber newPositiveExponent(exponent * -1);
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:119:13: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
            AlbaNumber::FractionData fractionData(coefficient.getFractionData());
            ^
                                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:119:38: note: FIX-IT applied suggested code changes
            AlbaNumber::FractionData fractionData(coefficient.getFractionData());
                                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:161:5: warning: variable 'numeratorMultiplier' of type 'int' can be declared 'const' [misc-const-correctness]
    int numeratorMultiplier(getLcmForDenominatorCoefficients(m_numerator));
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:161:9: note: FIX-IT applied suggested code changes
    int numeratorMultiplier(getLcmForDenominatorCoefficients(m_numerator));
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:164:5: warning: variable 'denominatorMultiplier' of type 'int' can be declared 'const' [misc-const-correctness]
    int denominatorMultiplier(getLcmForDenominatorCoefficients(m_denominator));
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:164:9: note: FIX-IT applied suggested code changes
    int denominatorMultiplier(getLcmForDenominatorCoefficients(m_denominator));
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:170:5: warning: variable 'monomialExponentNumerator' of type 'Monomial' can be declared 'const' [misc-const-correctness]
    Monomial monomialExponentNumerator(getMonomialWithMaxNegativeExponentsAndConvertItToPositive(m_numerator));
    ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:170:14: note: FIX-IT applied suggested code changes
    Monomial monomialExponentNumerator(getMonomialWithMaxNegativeExponentsAndConvertItToPositive(m_numerator));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:171:5: warning: variable 'monomialExponentDenominator' of type 'Monomial' can be declared 'const' [misc-const-correctness]
    Monomial monomialExponentDenominator(getMonomialWithMaxNegativeExponentsAndConvertItToPositive(m_denominator));
    ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:171:14: note: FIX-IT applied suggested code changes
    Monomial monomialExponentDenominator(getMonomialWithMaxNegativeExponentsAndConvertItToPositive(m_denominator));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:185:5: warning: variable 'gcfMonomial' of type 'Monomial' can be declared 'const' [misc-const-correctness]
    Monomial gcfMonomial(getGcfMonomialInMonomials(numeratorAndDenominatorMonomials));
    ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:185:14: note: FIX-IT applied suggested code changes
    Monomial gcfMonomial(getGcfMonomialInMonomials(numeratorAndDenominatorMonomials));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:189:9: warning: variable 'isDenominatorHasNegativeSign' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool isDenominatorHasNegativeSign = getCommonSignInMonomials(m_denominator.getMonomials()) == -1;
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:189:14: note: FIX-IT applied suggested code changes
        bool isDenominatorHasNegativeSign = getCommonSignInMonomials(m_denominator.getMonomials()) == -1;
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:201:5: warning: variable 'scopeObject' of type 'ScopeObject' can be declared 'const' [misc-const-correctness]
    ScopeObject scopeObject;
    ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:201:17: note: FIX-IT applied suggested code changes
    ScopeObject scopeObject;
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:207:9: warning: variable 'areSomeFactorsRemoved' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool areSomeFactorsRemoved(
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialOverPolynomial.cpp:207:14: note: FIX-IT applied suggested code changes
        bool areSomeFactorsRemoved(
             ^
[50/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/PolynomialRaiseToAnUnsignedInt.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialRaiseToAnUnsignedInt.cpp:18:5: warning: variable 'gcfOfExponents' of type 'int' can be declared 'const' [misc-const-correctness]
    int gcfOfExponents(getGcfOfExponents(factorsToExponent));
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialRaiseToAnUnsignedInt.cpp:18:9: note: FIX-IT applied suggested code changes
    int gcfOfExponents(getGcfOfExponents(factorsToExponent));
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialRaiseToAnUnsignedInt.cpp:31:5: warning: variable 'factors' of type 'Polynomials' (aka 'vector<Polynomial>') can be declared 'const' [misc-const-correctness]
    Polynomials factors(factorizeAPolynomial(polynomial));
    ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialRaiseToAnUnsignedInt.cpp:31:17: note: FIX-IT applied suggested code changes
    Polynomials factors(factorizeAPolynomial(polynomial));
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialRaiseToAnUnsignedInt.cpp:52:9: warning: variable 'remainingExponent' of type 'int' can be declared 'const' [misc-const-correctness]
        int remainingExponent(exponent / gcfOfExponents);
        ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\PolynomialRaiseToAnUnsignedInt.cpp:52:13: note: FIX-IT applied suggested code changes
        int remainingExponent(exponent / gcfOfExponents);
            ^
[51/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/RationalizeTermOverTerm.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:47:5: warning: variable 'scopeObject' of type 'SimplificationOfExpression::ScopeObject' can be declared 'const' [misc-const-correctness]
    SimplificationOfExpression::ScopeObject scopeObject;
    ^
                                            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:47:45: note: FIX-IT applied suggested code changes
    SimplificationOfExpression::ScopeObject scopeObject;
                                            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:73:5: warning: variable 'gcfOfExponents' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber gcfOfExponents = getGreatestCommonFactor(
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:73:16: note: FIX-IT applied suggested code changes
    AlbaNumber gcfOfExponents = getGreatestCommonFactor(
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:76:9: warning: variable 'exponentFraction' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
        AlbaNumber::FractionData exponentFraction(gcfOfExponents.getFractionData());
        ^
                                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:76:34: note: FIX-IT applied suggested code changes
        AlbaNumber::FractionData exponentFraction(gcfOfExponents.getFractionData());
                                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:137:5: warning: variable 'firstTermRaiseToANumber' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
    TermRaiseToANumber firstTermRaiseToANumber(createTermRaiseToANumberFromTerm(firstTerm));
    ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:137:24: note: FIX-IT applied suggested code changes
    TermRaiseToANumber firstTermRaiseToANumber(createTermRaiseToANumberFromTerm(firstTerm));
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:138:5: warning: variable 'secondTermRaiseToANumber' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
    TermRaiseToANumber secondTermRaiseToANumber(createTermRaiseToANumberFromTerm(secondTerm));
    ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:138:24: note: FIX-IT applied suggested code changes
    TermRaiseToANumber secondTermRaiseToANumber(createTermRaiseToANumberFromTerm(secondTerm));
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:140:5: warning: variable 'gcfOfExponents' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber gcfOfExponents =
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:140:16: note: FIX-IT applied suggested code changes
    AlbaNumber gcfOfExponents =
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:143:9: warning: variable 'exponentFraction' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
        AlbaNumber::FractionData exponentFraction(gcfOfExponents.getFractionData());
        ^
                                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:143:34: note: FIX-IT applied suggested code changes
        AlbaNumber::FractionData exponentFraction(gcfOfExponents.getFractionData());
                                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:163:5: warning: variable 'multiplierTermsWithDetails' of type 'TermsWithDetails' (aka 'vector<TermWithDetails>') can be declared 'const' [misc-const-correctness]
    TermsWithDetails multiplierTermsWithDetails{firstTermWithDetails, secondMultiplierTerm};
    ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:163:22: note: FIX-IT applied suggested code changes
    TermsWithDetails multiplierTermsWithDetails{firstTermWithDetails, secondMultiplierTerm};
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:166:5: warning: variable 'firstRationalizedTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstRationalizedTerm(firstTerm ^ 2);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:166:10: note: FIX-IT applied suggested code changes
    Term firstRationalizedTerm(firstTerm ^ 2);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:167:5: warning: variable 'secondRationalizedTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term secondRationalizedTerm(secondTerm ^ 2);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:167:10: note: FIX-IT applied suggested code changes
    Term secondRationalizedTerm(secondTerm ^ 2);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:168:5: warning: variable 'firstRationalizedTermWithDetails' of type 'TermWithDetails' can be declared 'const' [misc-const-correctness]
    TermWithDetails firstRationalizedTermWithDetails(firstRationalizedTerm, TermAssociationType::Positive);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:168:21: note: FIX-IT applied suggested code changes
    TermWithDetails firstRationalizedTermWithDetails(firstRationalizedTerm, TermAssociationType::Positive);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:169:5: warning: variable 'secondRationalizedTermTermWithDetails' of type 'TermWithDetails' can be declared 'const' [misc-const-correctness]
    TermWithDetails secondRationalizedTermTermWithDetails(secondRationalizedTerm, TermAssociationType::Negative);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:169:21: note: FIX-IT applied suggested code changes
    TermWithDetails secondRationalizedTermTermWithDetails(secondRationalizedTerm, TermAssociationType::Negative);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:170:5: warning: variable 'rationalizedTermsWithDetails' of type 'TermsWithDetails' (aka 'vector<TermWithDetails>') can be declared 'const' [misc-const-correctness]
    TermsWithDetails rationalizedTermsWithDetails{
    ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:170:22: note: FIX-IT applied suggested code changes
    TermsWithDetails rationalizedTermsWithDetails{
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:181:5: warning: variable 'firstMultiplierTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstMultiplierTerm(firstTerm ^ 2);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:181:10: note: FIX-IT applied suggested code changes
    Term firstMultiplierTerm(firstTerm ^ 2);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:182:5: warning: variable 'secondMultiplierTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term secondMultiplierTerm(firstTerm * secondTerm);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:182:10: note: FIX-IT applied suggested code changes
    Term secondMultiplierTerm(firstTerm * secondTerm);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:183:5: warning: variable 'thirdMultiplierTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term thirdMultiplierTerm(secondTerm ^ 2);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:183:10: note: FIX-IT applied suggested code changes
    Term thirdMultiplierTerm(secondTerm ^ 2);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:184:5: warning: variable 'newSecondAssociationType' of type 'TermAssociationType' can be declared 'const' [misc-const-correctness]
    TermAssociationType newSecondAssociationType =
    ^
                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:184:25: note: FIX-IT applied suggested code changes
    TermAssociationType newSecondAssociationType =
                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:186:5: warning: variable 'firstMultiplierTermWithDetails' of type 'TermWithDetails' can be declared 'const' [misc-const-correctness]
    TermWithDetails firstMultiplierTermWithDetails(firstMultiplierTerm, TermAssociationType::Positive);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:186:21: note: FIX-IT applied suggested code changes
    TermWithDetails firstMultiplierTermWithDetails(firstMultiplierTerm, TermAssociationType::Positive);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:187:5: warning: variable 'secondMultiplierTermWithDetails' of type 'TermWithDetails' can be declared 'const' [misc-const-correctness]
    TermWithDetails secondMultiplierTermWithDetails(secondMultiplierTerm, newSecondAssociationType);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:187:21: note: FIX-IT applied suggested code changes
    TermWithDetails secondMultiplierTermWithDetails(secondMultiplierTerm, newSecondAssociationType);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:188:5: warning: variable 'thirdMultiplierTermWithDetails' of type 'TermWithDetails' can be declared 'const' [misc-const-correctness]
    TermWithDetails thirdMultiplierTermWithDetails(thirdMultiplierTerm, TermAssociationType::Positive);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:188:21: note: FIX-IT applied suggested code changes
    TermWithDetails thirdMultiplierTermWithDetails(thirdMultiplierTerm, TermAssociationType::Positive);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:189:5: warning: variable 'multiplierTermsWithDetails' of type 'TermsWithDetails' (aka 'vector<TermWithDetails>') can be declared 'const' [misc-const-correctness]
    TermsWithDetails multiplierTermsWithDetails{
    ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:189:22: note: FIX-IT applied suggested code changes
    TermsWithDetails multiplierTermsWithDetails{
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:193:5: warning: variable 'firstRationalizedTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstRationalizedTerm(firstTerm ^ 3);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:193:10: note: FIX-IT applied suggested code changes
    Term firstRationalizedTerm(firstTerm ^ 3);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:194:5: warning: variable 'secondRationalizedTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term secondRationalizedTerm(secondTerm ^ 3);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:194:10: note: FIX-IT applied suggested code changes
    Term secondRationalizedTerm(secondTerm ^ 3);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:195:5: warning: variable 'firstRationalizedTermWithDetails' of type 'TermWithDetails' can be declared 'const' [misc-const-correctness]
    TermWithDetails firstRationalizedTermWithDetails(firstRationalizedTerm, firstTermWithDetails.association);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:195:21: note: FIX-IT applied suggested code changes
    TermWithDetails firstRationalizedTermWithDetails(firstRationalizedTerm, firstTermWithDetails.association);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:196:5: warning: variable 'secondRationalizedTermTermWithDetails' of type 'TermWithDetails' can be declared 'const' [misc-const-correctness]
    TermWithDetails secondRationalizedTermTermWithDetails(secondRationalizedTerm, secondTermWithDetails.association);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:196:21: note: FIX-IT applied suggested code changes
    TermWithDetails secondRationalizedTermTermWithDetails(secondRationalizedTerm, secondTermWithDetails.association);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:197:5: warning: variable 'rationalizedTermsWithDetails' of type 'TermsWithDetails' (aka 'vector<TermWithDetails>') can be declared 'const' [misc-const-correctness]
    TermsWithDetails rationalizedTermsWithDetails{
    ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\RationalizeTermOverTerm.cpp:197:22: note: FIX-IT applied suggested code changes
    TermsWithDetails rationalizedTermsWithDetails{
                     ^
[52/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermRaiseToANumber.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[53/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermRaiseToTerms.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:77:9: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
        AlbaNumber::FractionData fractionData(exponentValue.getFractionData());
        ^
                                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:77:34: note: FIX-IT applied suggested code changes
        AlbaNumber::FractionData fractionData(exponentValue.getFractionData());
                                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:142:5: warning: variable 'termToMultiply' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term termToMultiply(expressionBase);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:142:10: note: FIX-IT applied suggested code changes
    Term termToMultiply(expressionBase);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:175:9: warning: variable 'exponent' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term exponent(getCombinedExponents());
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:175:14: note: FIX-IT applied suggested code changes
        Term exponent(getCombinedExponents());
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:186:9: warning: variable 'polynomialRaiseToAnUnsignedInt' of type 'PolynomialRaiseToAnUnsignedInt' can be declared 'const' [misc-const-correctness]
        PolynomialRaiseToAnUnsignedInt polynomialRaiseToAnUnsignedInt(createPolynomialIfPossible(m_base));
        ^
                                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:186:40: note: FIX-IT applied suggested code changes
        PolynomialRaiseToAnUnsignedInt polynomialRaiseToAnUnsignedInt(createPolynomialIfPossible(m_base));
                                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:219:9: warning: variable 'exponent' of type 'int' can be declared 'const' [misc-const-correctness]
        int exponent = static_cast<int>(exponentCombinedTerm.getAsNumber().getInteger());
        ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:219:13: note: FIX-IT applied suggested code changes
        int exponent = static_cast<int>(exponentCombinedTerm.getAsNumber().getInteger());
            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:224:9: warning: variable 'exponent' of type 'int' can be declared 'const' [misc-const-correctness]
        int exponent = static_cast<int>(exponentCombinedTerm.getAsNumber().getInteger());
        ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermRaiseToTerms.cpp:224:13: note: FIX-IT applied suggested code changes
        int exponent = static_cast<int>(exponentCombinedTerm.getAsNumber().getInteger());
            ^
[54/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermsAggregator.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:50:22: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        m_endIndex = m_terms.size() - 1;
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:86:5: warning: variable 'newTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term newTerm(term);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:86:10: note: FIX-IT applied suggested code changes
    Term newTerm(term);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:92:5: warning: variable 'isOutsideStartAndEndIndex' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isOutsideStartAndEndIndex(m_startIndex > firstIndex || m_endIndex < secondIndex);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:92:10: note: FIX-IT applied suggested code changes
    bool isOutsideStartAndEndIndex(m_startIndex > firstIndex || m_endIndex < secondIndex);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:102:5: warning: variable 'isOutsideStartAndEndIndex' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isOutsideStartAndEndIndex(m_startIndex > index || m_endIndex < index);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:102:10: note: FIX-IT applied suggested code changes
    bool isOutsideStartAndEndIndex(m_startIndex > index || m_endIndex < index);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:141:5: warning: variable 'nextOperatorIndexes' of type 'Indexes' (aka 'vector<int>') can be declared 'const' [misc-const-correctness]
    Indexes nextOperatorIndexes(getNextOperatorIndexes(operatorInputType));
    ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:141:13: note: FIX-IT applied suggested code changes
    Indexes nextOperatorIndexes(getNextOperatorIndexes(operatorInputType));
            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:220:9: warning: variable 'haveNoFirstValue' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool haveNoFirstValue(hasNoValueBeforeThisIndex(index));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:220:14: note: FIX-IT applied suggested code changes
        bool haveNoFirstValue(hasNoValueBeforeThisIndex(index));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:244:13: warning: variable 'newTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
            Term newTerm(performOperation(term2.getAsOperator(), term1, term3));
            ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:244:18: note: FIX-IT applied suggested code changes
            Term newTerm(performOperation(term2.getAsOperator(), term1, term3));
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:257:9: warning: variable 'haveNoFirstValue' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool haveNoFirstValue(hasNoValueBeforeThisIndex(index));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:257:14: note: FIX-IT applied suggested code changes
        bool haveNoFirstValue(hasNoValueBeforeThisIndex(index));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:260:13: warning: variable 'newTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
            Term newTerm(performOperation(term1.getAsOperator(), term2));
            ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:260:18: note: FIX-IT applied suggested code changes
            Term newTerm(performOperation(term1.getAsOperator(), term2));
                 ^
[55/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermsOverTerms.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:95:5: warning: variable 'factorizedNumerators' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
    Terms factorizedNumerators(factorizeTerms(m_numerators));
    ^
          const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:95:11: note: FIX-IT applied suggested code changes
    Terms factorizedNumerators(factorizeTerms(m_numerators));
          ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:96:5: warning: variable 'factorizedDenominators' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
    Terms factorizedDenominators(factorizeTerms(m_denominators));
    ^
          const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:96:11: note: FIX-IT applied suggested code changes
    Terms factorizedDenominators(factorizeTerms(m_denominators));
          ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:105:5: warning: variable 'factorizedNumerators' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
    Terms factorizedNumerators(factorizeTerms(m_numerators));
    ^
          const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:105:11: note: FIX-IT applied suggested code changes
    Terms factorizedNumerators(factorizeTerms(m_numerators));
          ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:106:5: warning: variable 'factorizedDenominators' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
    Terms factorizedDenominators(factorizeTerms(m_denominators));
    ^
          const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:106:11: note: FIX-IT applied suggested code changes
    Terms factorizedDenominators(factorizeTerms(m_denominators));
          ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:185:5: warning: variable 'hasZeroOnNumerators' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool hasZeroOnNumerators(hasZero(numerators));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:185:10: note: FIX-IT applied suggested code changes
    bool hasZeroOnNumerators(hasZero(numerators));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:186:5: warning: variable 'hasZeroOnDenominators' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool hasZeroOnDenominators(hasZero(denominators));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:186:10: note: FIX-IT applied suggested code changes
    bool hasZeroOnDenominators(hasZero(denominators));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:202:5: warning: variable 'exponentCount' of type 'int' can be declared 'const' [misc-const-correctness]
    int exponentCount = static_cast<int>(getAbsoluteValue(exponent).getInteger());
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:202:9: note: FIX-IT applied suggested code changes
    int exponentCount = static_cast<int>(getAbsoluteValue(exponent).getInteger());
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:286:5: warning: variable 'scopeObject' of type 'ScopeObject' can be declared 'const' [misc-const-correctness]
    ScopeObject scopeObject;
    ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:286:17: note: FIX-IT applied suggested code changes
    ScopeObject scopeObject;
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:297:17: warning: variable 'termRaiseToTerms' of type 'TermRaiseToTerms' can be declared 'const' [misc-const-correctness]
                TermRaiseToTerms termRaiseToTerms(base, exponent * -1);
                ^
                                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:297:34: note: FIX-IT applied suggested code changes
                TermRaiseToTerms termRaiseToTerms(base, exponent * -1);
                                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:300:17: warning: variable 'termRaiseToTerms' of type 'TermRaiseToTerms' can be declared 'const' [misc-const-correctness]
                TermRaiseToTerms termRaiseToTerms(base, exponent);
                ^
                                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:300:34: note: FIX-IT applied suggested code changes
                TermRaiseToTerms termRaiseToTerms(base, exponent);
                                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:319:17: warning: variable 'termRaiseToANumber' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
                TermRaiseToANumber termRaiseToANumber(base, exponent);
                ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:319:36: note: FIX-IT applied suggested code changes
                TermRaiseToANumber termRaiseToANumber(base, exponent);
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:322:17: warning: variable 'termRaiseToANumber' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
                TermRaiseToANumber termRaiseToANumber(base, exponent * -1);
                ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:322:36: note: FIX-IT applied suggested code changes
                TermRaiseToANumber termRaiseToANumber(base, exponent * -1);
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:343:5: warning: variable 'areSomeFactorsRemoved' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool areSomeFactorsRemoved(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:343:10: note: FIX-IT applied suggested code changes
    bool areSomeFactorsRemoved(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:393:5: warning: variable 'previousNumberOfNumerators' of type 'int' can be declared 'const' [misc-const-correctness]
    int previousNumberOfNumerators = numerators.size();
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:393:9: note: FIX-IT applied suggested code changes
    int previousNumberOfNumerators = numerators.size();
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:393:38: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int previousNumberOfNumerators = numerators.size();
                                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:394:5: warning: variable 'previousNumberOfDenominators' of type 'int' can be declared 'const' [misc-const-correctness]
    int previousNumberOfDenominators = denominators.size();
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:394:9: note: FIX-IT applied suggested code changes
    int previousNumberOfDenominators = denominators.size();
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:394:40: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int previousNumberOfDenominators = denominators.size();
                                       ^
[56/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermsRaiseToExponents.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsRaiseToExponents.cpp:25:5: warning: variable 'termRaiseToExponent' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
    TermRaiseToANumber termRaiseToExponent(createTermRaiseToANumberFromTerm(term));
    ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsRaiseToExponents.cpp:25:24: note: FIX-IT applied suggested code changes
    TermRaiseToANumber termRaiseToExponent(createTermRaiseToANumberFromTerm(term));
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsRaiseToExponents.cpp:31:5: warning: variable 'termRaiseToExponent' of type 'TermRaiseToTerms' can be declared 'const' [misc-const-correctness]
    TermRaiseToTerms termRaiseToExponent(createTermRaiseToTermsFromTerm(term));
    ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsRaiseToExponents.cpp:31:22: note: FIX-IT applied suggested code changes
    TermRaiseToTerms termRaiseToExponent(createTermRaiseToTermsFromTerm(term));
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsRaiseToExponents.cpp:171:5: warning: variable 'sign' of type 'int' can be declared 'const' [misc-const-correctness]
    int sign = (association == TermAssociationType::Positive) ? 1 : -1;
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsRaiseToExponents.cpp:171:9: note: FIX-IT applied suggested code changes
    int sign = (association == TermAssociationType::Positive) ? 1 : -1;
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsRaiseToExponents.cpp:173:9: warning: variable 'monomial' of type 'Monomial' can be declared 'const' [misc-const-correctness]
        Monomial monomial(createMonomialIfPossible(term));
        ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsRaiseToExponents.cpp:173:18: note: FIX-IT applied suggested code changes
        Monomial monomial(createMonomialIfPossible(term));
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsRaiseToExponents.cpp:177:17: warning: variable 'fractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
                AlbaNumber::FractionData fractionData(constant.getFractionData());
                ^
                                         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsRaiseToExponents.cpp:177:42: note: FIX-IT applied suggested code changes
                AlbaNumber::FractionData fractionData(constant.getFractionData());
                                         ^
[57/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermsRaiseToNumbers.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[58/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermsRaiseToTerms.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[59/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Differentiation/DerivativeVariableName.cpp.obj
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DerivativeVariableName.cpp:12:5: warning: variable 'numerator' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string numerator = getStringBeforeThisString(derivativeVariableInLeibnizNotation, "/");
    ^
           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DerivativeVariableName.cpp:12:12: note: FIX-IT applied suggested code changes
    string numerator = getStringBeforeThisString(derivativeVariableInLeibnizNotation, "/");
           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DerivativeVariableName.cpp:13:5: warning: variable 'denominator' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string denominator = getStringAfterThisString(derivativeVariableInLeibnizNotation, "/");
    ^
           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DerivativeVariableName.cpp:13:12: note: FIX-IT applied suggested code changes
    string denominator = getStringAfterThisString(derivativeVariableInLeibnizNotation, "/");
           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DerivativeVariableName.cpp:136:9: warning: variable 'differentiationLevelInDenominator' of type 'int' can be declared 'const' [misc-const-correctness]
        int differentiationLevelInDenominator = convertStringToNumber<int>(differentiationLevelString);
        ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DerivativeVariableName.cpp:136:13: note: FIX-IT applied suggested code changes
        int differentiationLevelInDenominator = convertStringToNumber<int>(differentiationLevelString);
            ^
[60/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Differentiation/Differentiation.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/BaseRetriever.hpp:9:7: warning: class 'BaseRetriever' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRetriever {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:58:9: warning: variable 'derivativeOfDependentVariableName' of type 'DerivativeVariableName' can be declared 'const' [misc-const-correctness]
        DerivativeVariableName derivativeOfDependentVariableName(1, m_nameOfVariableToDifferentiate, nameOfVariable);
        ^
                               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:58:32: note: FIX-IT applied suggested code changes
        DerivativeVariableName derivativeOfDependentVariableName(1, m_nameOfVariableToDifferentiate, nameOfVariable);
                               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:151:5: warning: variable 'derivativeOfFunctionOnly' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeOfFunctionOnly(differentiateFunctionOnly(functionObject));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:151:10: note: FIX-IT applied suggested code changes
    Term derivativeOfFunctionOnly(differentiateFunctionOnly(functionObject));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:153:5: warning: variable 'derivativeOfInputTermOfFunction' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeOfInputTermOfFunction(differentiate(inputTerm));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:153:10: note: FIX-IT applied suggested code changes
    Term derivativeOfInputTermOfFunction(differentiate(inputTerm));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:160:5: warning: variable 'term1Derivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term term1Derivative(differentiate(term1));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:160:10: note: FIX-IT applied suggested code changes
    Term term1Derivative(differentiate(term1));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:161:5: warning: variable 'term2Derivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term term2Derivative(differentiate(term2));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:161:10: note: FIX-IT applied suggested code changes
    Term term2Derivative(differentiate(term2));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:162:5: warning: variable 'firstPart' of type 'Expression' can be declared 'const' [misc-const-correctness]
    Expression firstPart(createExpressionIfPossible({term1, "*", term2Derivative}));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:162:16: note: FIX-IT applied suggested code changes
    Expression firstPart(createExpressionIfPossible({term1, "*", term2Derivative}));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:163:5: warning: variable 'secondPart' of type 'Expression' can be declared 'const' [misc-const-correctness]
    Expression secondPart(createExpressionIfPossible({term2, "*", term1Derivative}));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:163:16: note: FIX-IT applied suggested code changes
    Expression secondPart(createExpressionIfPossible({term2, "*", term1Derivative}));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:168:5: warning: variable 'numeratorDerivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term numeratorDerivative(differentiate(numerator));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:168:10: note: FIX-IT applied suggested code changes
    Term numeratorDerivative(differentiate(numerator));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:169:5: warning: variable 'denominatorDerivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term denominatorDerivative(differentiate(denominator));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:169:10: note: FIX-IT applied suggested code changes
    Term denominatorDerivative(differentiate(denominator));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:170:5: warning: variable 'resultNumeratorPart1' of type 'Expression' can be declared 'const' [misc-const-correctness]
    Expression resultNumeratorPart1(createExpressionIfPossible({denominator, "*", numeratorDerivative}));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:170:16: note: FIX-IT applied suggested code changes
    Expression resultNumeratorPart1(createExpressionIfPossible({denominator, "*", numeratorDerivative}));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:171:5: warning: variable 'resultNumeratorPart2' of type 'Expression' can be declared 'const' [misc-const-correctness]
    Expression resultNumeratorPart2(createExpressionIfPossible({numerator, "*", denominatorDerivative}));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:171:16: note: FIX-IT applied suggested code changes
    Expression resultNumeratorPart2(createExpressionIfPossible({numerator, "*", denominatorDerivative}));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:172:5: warning: variable 'resultNumerator' of type 'Expression' can be declared 'const' [misc-const-correctness]
    Expression resultNumerator(createExpressionIfPossible({resultNumeratorPart1, "-", resultNumeratorPart2}));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:172:16: note: FIX-IT applied suggested code changes
    Expression resultNumerator(createExpressionIfPossible({resultNumeratorPart1, "-", resultNumeratorPart2}));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:173:5: warning: variable 'resultDenominator' of type 'Expression' can be declared 'const' [misc-const-correctness]
    Expression resultDenominator(createExpressionIfPossible({denominator, "^", 2}));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:173:16: note: FIX-IT applied suggested code changes
    Expression resultDenominator(createExpressionIfPossible({denominator, "^", 2}));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:199:9: warning: variable 'oneMinusInputSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term oneMinusInputSquared(createExpressionIfPossible({1, "-", inputTerm, "^", 2}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:199:14: note: FIX-IT applied suggested code changes
        Term oneMinusInputSquared(createExpressionIfPossible({1, "-", inputTerm, "^", 2}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:200:9: warning: variable 'squareRootTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term squareRootTerm(createExpressionIfPossible({oneMinusInputSquared, "^", AlbaNumber::createFraction(1, 2)}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:200:14: note: FIX-IT applied suggested code changes
        Term squareRootTerm(createExpressionIfPossible({oneMinusInputSquared, "^", AlbaNumber::createFraction(1, 2)}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:203:9: warning: variable 'oneMinusInputSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term oneMinusInputSquared(createExpressionIfPossible({1, "-", inputTerm, "^", 2}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:203:14: note: FIX-IT applied suggested code changes
        Term oneMinusInputSquared(createExpressionIfPossible({1, "-", inputTerm, "^", 2}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:204:9: warning: variable 'squareRootTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term squareRootTerm(createExpressionIfPossible({oneMinusInputSquared, "^", AlbaNumber::createFraction(1, 2)}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:204:14: note: FIX-IT applied suggested code changes
        Term squareRootTerm(createExpressionIfPossible({oneMinusInputSquared, "^", AlbaNumber::createFraction(1, 2)}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:207:9: warning: variable 'onePlusInputSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term onePlusInputSquared(createExpressionIfPossible({1, "+", inputTerm, "^", 2}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:207:14: note: FIX-IT applied suggested code changes
        Term onePlusInputSquared(createExpressionIfPossible({1, "+", inputTerm, "^", 2}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:210:9: warning: variable 'inputSquaredMinusOne' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term inputSquaredMinusOne(createExpressionIfPossible({inputTerm, "^", 2, "-", 1}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:210:14: note: FIX-IT applied suggested code changes
        Term inputSquaredMinusOne(createExpressionIfPossible({inputTerm, "^", 2, "-", 1}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:211:9: warning: variable 'squareRootTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term squareRootTerm(createExpressionIfPossible({inputSquaredMinusOne, "^", AlbaNumber::createFraction(1, 2)}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:211:14: note: FIX-IT applied suggested code changes
        Term squareRootTerm(createExpressionIfPossible({inputSquaredMinusOne, "^", AlbaNumber::createFraction(1, 2)}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:214:9: warning: variable 'inputSquaredMinusOne' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term inputSquaredMinusOne(createExpressionIfPossible({inputTerm, "^", 2, "-", 1}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:214:14: note: FIX-IT applied suggested code changes
        Term inputSquaredMinusOne(createExpressionIfPossible({inputTerm, "^", 2, "-", 1}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:215:9: warning: variable 'squareRootTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term squareRootTerm(createExpressionIfPossible({inputSquaredMinusOne, "^", AlbaNumber::createFraction(1, 2)}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:215:14: note: FIX-IT applied suggested code changes
        Term squareRootTerm(createExpressionIfPossible({inputSquaredMinusOne, "^", AlbaNumber::createFraction(1, 2)}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:218:9: warning: variable 'onePlusInputSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term onePlusInputSquared(createExpressionIfPossible({1, "+", inputTerm, "^", 2}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:218:14: note: FIX-IT applied suggested code changes
        Term onePlusInputSquared(createExpressionIfPossible({1, "+", inputTerm, "^", 2}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:247:13: warning: variable 'derivativeOfDependentVariableName' of type 'DerivativeVariableName' can be declared 'const' [misc-const-correctness]
            DerivativeVariableName derivativeOfDependentVariableName(1, m_nameOfVariableToDifferentiate, variableName);
            ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:247:36: note: FIX-IT applied suggested code changes
            DerivativeVariableName derivativeOfDependentVariableName(1, m_nameOfVariableToDifferentiate, variableName);
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:289:9: warning: variable 'differentiatedTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term differentiatedTerm(differentiate(currentTerm));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:289:14: note: FIX-IT applied suggested code changes
        Term differentiatedTerm(differentiate(currentTerm));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:313:9: warning: variable 'quotientAndRemainder' of type 'PolynomialOverPolynomial::QuotientAndRemainder' can be declared 'const' [misc-const-correctness]
        PolynomialOverPolynomial::QuotientAndRemainder quotientAndRemainder(pop.simplifyAndDivide());
        ^
                                                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:313:56: note: FIX-IT applied suggested code changes
        PolynomialOverPolynomial::QuotientAndRemainder quotientAndRemainder(pop.simplifyAndDivide());
                                                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:352:5: warning: variable 'firstTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstTerm(termRaiseToTerms.getBase());
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:352:10: note: FIX-IT applied suggested code changes
    Term firstTerm(termRaiseToTerms.getBase());
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:353:5: warning: variable 'secondTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term secondTerm(termRaiseToTerms.getCombinedExponents());
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:353:10: note: FIX-IT applied suggested code changes
    Term secondTerm(termRaiseToTerms.getCombinedExponents());
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:354:5: warning: variable 'isFirstAChangingTerm' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isFirstAChangingTerm = isChangingTerm(firstTerm);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:354:10: note: FIX-IT applied suggested code changes
    bool isFirstAChangingTerm = isChangingTerm(firstTerm);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:355:5: warning: variable 'isSecondAChangingTerm' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isSecondAChangingTerm = isChangingTerm(secondTerm);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:355:10: note: FIX-IT applied suggested code changes
    bool isSecondAChangingTerm = isChangingTerm(secondTerm);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:369:5: warning: variable 'derivativeCauseOfChainRule' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeCauseOfChainRule(differentiate(exponent));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:369:10: note: FIX-IT applied suggested code changes
    Term derivativeCauseOfChainRule(differentiate(exponent));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:374:5: warning: variable 'derivativeCauseOfChainRule' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeCauseOfChainRule(differentiate(base));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:374:10: note: FIX-IT applied suggested code changes
    Term derivativeCauseOfChainRule(differentiate(base));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:397:9: warning: variable 'derivativeVariableName' of type 'DerivativeVariableName' can be declared 'const' [misc-const-correctness]
        DerivativeVariableName derivativeVariableName(variableName);
        ^
                               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Differentiation.cpp:397:32: note: FIX-IT applied suggested code changes
        DerivativeVariableName derivativeVariableName(variableName);
                               ^
[61/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Differentiation/DifferentiationForFiniteCalculus.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[62/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Differentiation/DifferentiationUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/BaseRetriever.hpp:9:7: warning: class 'BaseRetriever' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRetriever {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/SegregateTermsByVariableNamesInAdditionAndSubtractionRetriever.hpp:15:5: warning: function 'getTermWithMultipleVariableNames' should be marked [[nodiscard]] [modernize-use-nodiscard]
    Term const& getTermWithMultipleVariableNames() const;
    ^
    [[nodiscard]] 
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/SegregateTermsByVariableNamesInAdditionAndSubtractionRetriever.hpp:15:5: note: FIX-IT applied suggested code changes
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/SegregateTermsByVariableNamesInAdditionAndSubtractionRetriever.hpp:16:5: warning: function 'getRemainingTerm' should be marked [[nodiscard]] [modernize-use-nodiscard]
    Term const& getRemainingTerm() const;
    ^
    [[nodiscard]] 
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/SegregateTermsByVariableNamesInAdditionAndSubtractionRetriever.hpp:16:5: note: FIX-IT applied suggested code changes
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/SegregateTermsByVariableNamesInAdditionAndSubtractionRetriever.hpp:17:5: warning: function 'getVariableNameToTermMap' should be marked [[nodiscard]] [modernize-use-nodiscard]
    VariableNameToTermMap const& getVariableNameToTermMap() const;
    ^
    [[nodiscard]] 
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/SegregateTermsByVariableNamesInAdditionAndSubtractionRetriever.hpp:17:5: note: FIX-IT applied suggested code changes
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:40:5: warning: variable 'scopeObject' of type 'SimplificationOfExpression::ScopeObject' can be declared 'const' [misc-const-correctness]
    SimplificationOfExpression::ScopeObject scopeObject;
    ^
                                            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:40:45: note: FIX-IT applied suggested code changes
    SimplificationOfExpression::ScopeObject scopeObject;
                                            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:57:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:57:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:58:5: warning: variable 'inverseOfTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term inverseOfTerm(invertTerm(term, variableName));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:58:10: note: FIX-IT applied suggested code changes
    Term inverseOfTerm(invertTerm(term, variableName));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:59:5: warning: variable 'derivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivative(differentiation.differentiate(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:59:10: note: FIX-IT applied suggested code changes
    Term derivative(differentiation.differentiate(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:60:5: warning: variable 'derivativeOfInverse' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeOfInverse(differentiation.differentiate(inverseOfTerm));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:60:10: note: FIX-IT applied suggested code changes
    Term derivativeOfInverse(differentiation.differentiate(inverseOfTerm));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:62:5: warning: variable 'derivativeWithNewVariable' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeWithNewVariable(substitution.performSubstitutionTo(derivative));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:62:10: note: FIX-IT applied suggested code changes
    Term derivativeWithNewVariable(substitution.performSubstitutionTo(derivative));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:74:5: warning: variable 'derivativeVariableName' of type 'DerivativeVariableName' can be declared 'const' [misc-const-correctness]
    DerivativeVariableName derivativeVariableName(1, xVariableName, yVariableName);
    ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:74:28: note: FIX-IT applied suggested code changes
    DerivativeVariableName derivativeVariableName(1, xVariableName, yVariableName);
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:75:5: warning: variable 'derivativeName' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string derivativeName(derivativeVariableName.getNameInLeibnizNotation());
    ^
           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:75:12: note: FIX-IT applied suggested code changes
    string derivativeName(derivativeVariableName.getNameInLeibnizNotation());
           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:76:5: warning: variable 'isolation' of type 'IsolationOfOneVariableOnEqualityEquation' can be declared 'const' [misc-const-correctness]
    IsolationOfOneVariableOnEqualityEquation isolation(equation);
    ^
                                             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:76:46: note: FIX-IT applied suggested code changes
    IsolationOfOneVariableOnEqualityEquation isolation(equation);
                                             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:102:5: warning: variable 'integralOfP' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term integralOfP(integration.integrate(p));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:102:10: note: FIX-IT applied suggested code changes
    Term integralOfP(integration.integrate(p));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:103:5: warning: variable 'eToTheIntegralOfP' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term eToTheIntegralOfP(createExpressionIfPossible({getEAsATerm(), "^", integralOfP}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:103:10: note: FIX-IT applied suggested code changes
    Term eToTheIntegralOfP(createExpressionIfPossible({getEAsATerm(), "^", integralOfP}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:104:5: warning: variable 'eToTheNegativeIntegralOfP' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term eToTheNegativeIntegralOfP(createExpressionIfPossible({getEAsATerm(), "^", -integralOfP}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:104:10: note: FIX-IT applied suggested code changes
    Term eToTheNegativeIntegralOfP(createExpressionIfPossible({getEAsATerm(), "^", -integralOfP}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:105:5: warning: variable 'qWithoutY' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term qWithoutY(q / yVariableName);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:105:10: note: FIX-IT applied suggested code changes
    Term qWithoutY(q / yVariableName);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:106:5: warning: variable 'qExpression' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term qExpression(createExpressionIfPossible({qWithoutY, "*", eToTheIntegralOfP}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:106:10: note: FIX-IT applied suggested code changes
    Term qExpression(createExpressionIfPossible({qWithoutY, "*", eToTheIntegralOfP}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:107:5: warning: variable 'cExpression' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term cExpression(createExpressionIfPossible({getEAsATerm(), "*", eToTheNegativeIntegralOfP}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:107:10: note: FIX-IT applied suggested code changes
    Term cExpression(createExpressionIfPossible({getEAsATerm(), "*", eToTheNegativeIntegralOfP}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:108:5: warning: variable 'integralOfQExpression' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term integralOfQExpression(integration.integrate(qExpression));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:108:10: note: FIX-IT applied suggested code changes
    Term integralOfQExpression(integration.integrate(qExpression));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:109:5: warning: variable 'qcExpression' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term qcExpression(createExpressionIfPossible({integralOfQExpression, "+", cExpression}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:109:10: note: FIX-IT applied suggested code changes
    Term qcExpression(createExpressionIfPossible({integralOfQExpression, "+", cExpression}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:110:5: warning: variable 'pqcExpression' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term pqcExpression(createExpressionIfPossible({eToTheNegativeIntegralOfP, "*", qcExpression}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:110:10: note: FIX-IT applied suggested code changes
    Term pqcExpression(createExpressionIfPossible({eToTheNegativeIntegralOfP, "*", qcExpression}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:118:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:118:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:119:5: warning: variable 'derivativeTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeTerm(differentiation.differentiate(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:119:10: note: FIX-IT applied suggested code changes
    Term derivativeTerm(differentiation.differentiate(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:124:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToValues substitution{{variableName, value}};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:124:37: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToValues substitution{{variableName, value}};
                                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:129:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToTerms' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToTerms substitution{{variableName, valueTerm}};
    ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:129:36: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToTerms substitution{{variableName, valueTerm}};
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:134:5: warning: variable 'x' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term x(X_NAME);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:134:10: note: FIX-IT applied suggested code changes
    Term x(X_NAME);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:135:5: warning: variable 'deltaX' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term deltaX(DELTA_X_NAME);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:135:10: note: FIX-IT applied suggested code changes
    Term deltaX(DELTA_X_NAME);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:138:5: warning: variable 'fOfXPlusDeltaX' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term fOfXPlusDeltaX(substitution.performSubstitutionTo(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:138:10: note: FIX-IT applied suggested code changes
    Term fOfXPlusDeltaX(substitution.performSubstitutionTo(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:140:5: warning: variable 'fOfX' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term fOfX(substitution.performSubstitutionTo(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:140:10: note: FIX-IT applied suggested code changes
    Term fOfX(substitution.performSubstitutionTo(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:151:5: warning: variable 'derivativeDefinition' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeDefinition(getDerivativeDefinition(term, variableName));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:151:10: note: FIX-IT applied suggested code changes
    Term derivativeDefinition(getDerivativeDefinition(term, variableName));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:152:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToTerms' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToTerms substitution{{X_NAME, termSubstituteToBack}};
    ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:152:36: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToTerms substitution{{X_NAME, termSubstituteToBack}};
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:153:5: warning: variable 'derivativeAfterSubstitution' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeAfterSubstitution(substitution.performSubstitutionTo(derivativeDefinition));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:153:10: note: FIX-IT applied suggested code changes
    Term derivativeAfterSubstitution(substitution.performSubstitutionTo(derivativeDefinition));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:160:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToTerms' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToTerms substitution{{variableName, variableNamePlusOne}};
    ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:160:36: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToTerms substitution{{variableName, variableNamePlusOne}};
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:178:5: warning: variable 'solutionSet' of type 'SolutionSet' can be declared 'const' [misc-const-correctness]
    SolutionSet solutionSet(calculateDomainForEquation(xVariableName, Equation(yVariableName, "=", yInTermsOfX)));
    ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:178:17: note: FIX-IT applied suggested code changes
    SolutionSet solutionSet(calculateDomainForEquation(xVariableName, Equation(yVariableName, "=", yInTermsOfX)));
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:180:5: warning: variable 'allPositiveNumbers' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
    AlbaNumberInterval allPositiveNumbers(createCloseEndpoint(AlbaNumber(0)), createPositiveInfinityOpenEndpoint());
    ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:180:24: note: FIX-IT applied suggested code changes
    AlbaNumberInterval allPositiveNumbers(createCloseEndpoint(AlbaNumber(0)), createPositiveInfinityOpenEndpoint());
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:182:9: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
        Differentiation differentiation(xVariableName);
        ^
                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:182:25: note: FIX-IT applied suggested code changes
        Differentiation differentiation(xVariableName);
                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:193:5: warning: variable 'theta' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term theta(thetaName);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:193:10: note: FIX-IT applied suggested code changes
    Term theta(thetaName);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:194:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(thetaName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:194:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(thetaName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:195:5: warning: variable 'drOverDTheta' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term drOverDTheta(differentiation.differentiate(radiusInTermsOfTheta));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:195:10: note: FIX-IT applied suggested code changes
    Term drOverDTheta(differentiation.differentiate(radiusInTermsOfTheta));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:196:5: warning: variable 'sinTheta' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term sinTheta(sin(theta));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:196:10: note: FIX-IT applied suggested code changes
    Term sinTheta(sin(theta));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:197:5: warning: variable 'cosTheta' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term cosTheta(cos(theta));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:197:10: note: FIX-IT applied suggested code changes
    Term cosTheta(cos(theta));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:198:5: warning: variable 'numerator' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term numerator(createExpressionIfPossible({drOverDTheta, "*", sinTheta, "+", radiusInTermsOfTheta, "*", cosTheta}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:198:10: note: FIX-IT applied suggested code changes
    Term numerator(createExpressionIfPossible({drOverDTheta, "*", sinTheta, "+", radiusInTermsOfTheta, "*", cosTheta}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:199:5: warning: variable 'denominator' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term denominator(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:199:10: note: FIX-IT applied suggested code changes
    Term denominator(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:208:5: warning: variable 'dyOverDx' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term dyOverDx(getCartesianDerivativeOfTermInPolarCoordinates(radiusInTermsOfTheta, thetaName));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:208:10: note: FIX-IT applied suggested code changes
    Term dyOverDx(getCartesianDerivativeOfTermInPolarCoordinates(radiusInTermsOfTheta, thetaName));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:209:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToValues substitution{{thetaName, thetaValue}};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:209:37: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToValues substitution{{thetaName, thetaValue}};
                                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:218:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:218:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:219:5: warning: variable 'difference' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term difference(valueToApproach - startingValue);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:219:10: note: FIX-IT applied suggested code changes
    Term difference(valueToApproach - startingValue);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:228:9: warning: variable 'currentDerivativeValue' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term currentDerivativeValue(evaluateAtDefiniteTerm(currentDerivative, variableName, startingValue));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:228:14: note: FIX-IT applied suggested code changes
        Term currentDerivativeValue(evaluateAtDefiniteTerm(currentDerivative, variableName, startingValue));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:229:9: warning: variable 'currentTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term currentTerm(currentDerivativeValue * differenceRaiseToPower / factorialValue);
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:229:14: note: FIX-IT applied suggested code changes
        Term currentTerm(currentDerivativeValue * differenceRaiseToPower / factorialValue);
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:242:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:242:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:243:5: warning: variable 'difference' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term difference(valueToApproach - startingValue);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:243:10: note: FIX-IT applied suggested code changes
    Term difference(valueToApproach - startingValue);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:244:5: warning: variable 'nPlusOne' of type 'int' can be declared 'const' [misc-const-correctness]
    int nPlusOne = numberOfTimes + 1;
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:244:9: note: FIX-IT applied suggested code changes
    int nPlusOne = numberOfTimes + 1;
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:245:5: warning: variable 'derivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivative(differentiation.differentiateMultipleTimes(term, nPlusOne));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:245:10: note: FIX-IT applied suggested code changes
    Term derivative(differentiation.differentiateMultipleTimes(term, nPlusOne));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:246:5: warning: variable 'derivativeValue' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeValue(evaluateAtDefiniteTerm(derivative, variableName, valueForEstimation));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:246:10: note: FIX-IT applied suggested code changes
    Term derivativeValue(evaluateAtDefiniteTerm(derivative, variableName, valueForEstimation));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:247:5: warning: variable 'differenceRaiseToPower' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term differenceRaiseToPower(difference ^ (nPlusOne));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:247:10: note: FIX-IT applied suggested code changes
    Term differenceRaiseToPower(difference ^ (nPlusOne));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:248:5: warning: variable 'factorialValue' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term factorialValue(getFactorial(nPlusOne));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:248:10: note: FIX-IT applied suggested code changes
    Term factorialValue(getFactorial(nPlusOne));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:257:5: warning: variable 'commonVariableDifferentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation commonVariableDifferentiation(commonVariable);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:257:21: note: FIX-IT applied suggested code changes
    Differentiation commonVariableDifferentiation(commonVariable);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:269:9: warning: variable 'derivativeOfVariable' of type 'DerivativeVariableName' can be declared 'const' [misc-const-correctness]
        DerivativeVariableName derivativeOfVariable(1, "", variableName);
        ^
                               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:269:32: note: FIX-IT applied suggested code changes
        DerivativeVariableName derivativeOfVariable(1, "", variableName);
                               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:277:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:277:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:286:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:286:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:287:5: warning: variable 'capitalF' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term capitalF(integration.integrate(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:287:10: note: FIX-IT applied suggested code changes
    Term capitalF(integration.integrate(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:288:5: warning: variable 'derivativeOfCapitalF' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeOfCapitalF(differentiation.differentiate(capitalF));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:288:10: note: FIX-IT applied suggested code changes
    Term derivativeOfCapitalF(differentiation.differentiate(capitalF));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:296:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:296:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:297:5: warning: variable 'derivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivative(differentiation.differentiate(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:297:10: note: FIX-IT applied suggested code changes
    Term derivative(differentiation.differentiate(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:298:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToValues substitution{{"x", value}};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:298:37: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToValues substitution{{"x", value}};
                                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:299:5: warning: variable 'derivativeValue' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeValue(substitution.performSubstitutionTo(derivative));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:299:10: note: FIX-IT applied suggested code changes
    Term derivativeValue(substitution.performSubstitutionTo(derivative));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:309:5: warning: variable 'derivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivative(getDerivativeAtUsingLimit(term, variableName, "x", LimitAtAValueApproachType::BothSides));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:309:10: note: FIX-IT applied suggested code changes
    Term derivative(getDerivativeAtUsingLimit(term, variableName, "x", LimitAtAValueApproachType::BothSides));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:310:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToValues substitution{{"x", value}};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:310:37: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToValues substitution{{"x", value}};
                                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:311:5: warning: variable 'derivativeValue' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivativeValue(substitution.performSubstitutionTo(derivative));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:311:10: note: FIX-IT applied suggested code changes
    Term derivativeValue(substitution.performSubstitutionTo(derivative));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:323:5: warning: variable 'derivativeVariableName' of type 'DerivativeVariableName' can be declared 'const' [misc-const-correctness]
    DerivativeVariableName derivativeVariableName(1, xVariableName, yVariableName);
    ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\DifferentiationUtilities.cpp:323:28: note: FIX-IT applied suggested code changes
    DerivativeVariableName derivativeVariableName(1, xVariableName, yVariableName);
                           ^
[63/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Differentiation/Lagrange.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:25:5: warning: variable 'size' of type 'int' can be declared 'const' [misc-const-correctness]
    int size(min(lagrangeFunctions.size(), lagrangeMultiplierNames.size()));
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:25:9: note: FIX-IT applied suggested code changes
    int size(min(lagrangeFunctions.size(), lagrangeMultiplierNames.size()));
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:25:14: warning: narrowing conversion from 'unsigned long long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int size(min(lagrangeFunctions.size(), lagrangeMultiplierNames.size()));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:34:5: warning: variable 'lagrangeMultiplierNames' of type 'strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    strings lagrangeMultiplierNames(getLagrangeMultiplierNames(lagrangeFunctions.size()));
    ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:34:13: note: FIX-IT applied suggested code changes
    strings lagrangeMultiplierNames(getLagrangeMultiplierNames(lagrangeFunctions.size()));
            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:34:64: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    strings lagrangeMultiplierNames(getLagrangeMultiplierNames(lagrangeFunctions.size()));
                                                               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:35:5: warning: variable 'termWithLagrangeFunctions' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term termWithLagrangeFunctions(getTermWithLagrangeFunctions(term, lagrangeFunctions, lagrangeMultiplierNames));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:35:10: note: FIX-IT applied suggested code changes
    Term termWithLagrangeFunctions(getTermWithLagrangeFunctions(term, lagrangeFunctions, lagrangeMultiplierNames));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:40:5: warning: variable 'isolation' of type 'IsolationOfOneVariableOnEqualityEquations' can be declared 'const' [misc-const-correctness]
    IsolationOfOneVariableOnEqualityEquations isolation(lagrangeEquations);
    ^
                                              const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:40:47: note: FIX-IT applied suggested code changes
    IsolationOfOneVariableOnEqualityEquations isolation(lagrangeEquations);
                                              ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:48:5: warning: variable 'converter' of type 'StringConverterWithFormatting' can be declared 'const' [misc-const-correctness]
    static StringConverterWithFormatting converter(3, '0');
    ^
                                         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:48:42: note: FIX-IT applied suggested code changes
    static StringConverterWithFormatting converter(3, '0');
                                         ^
[64/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Equation/Equation.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[65/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Equation/EquationBuilder.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Equation\EquationBuilder.cpp:18:9: warning: variable 'firstTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term firstTerm(buildTermIfPossible(m_termStrings[0]));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Equation\EquationBuilder.cpp:18:14: note: FIX-IT applied suggested code changes
        Term firstTerm(buildTermIfPossible(m_termStrings[0]));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Equation\EquationBuilder.cpp:19:9: warning: variable 'secondTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term secondTerm(buildTermIfPossible(m_termStrings[1]));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Equation\EquationBuilder.cpp:19:14: note: FIX-IT applied suggested code changes
        Term secondTerm(buildTermIfPossible(m_termStrings[1]));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Equation\EquationBuilder.cpp:39:17: warning: variable 'twoCharacterString' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
                string twoCharacterString = tempString + splittedString;
                ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Equation\EquationBuilder.cpp:39:24: note: FIX-IT applied suggested code changes
                string twoCharacterString = tempString + splittedString;
                       ^
[66/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Equation/EquationOperator.cpp.obj
[67/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Equation/EquationUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/BaseRetriever.hpp:9:7: warning: class 'BaseRetriever' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRetriever {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Equation\EquationUtilities.cpp:36:5: warning: variable 'builder' of type 'EquationBuilder' can be declared 'const' [misc-const-correctness]
    EquationBuilder builder(equationString);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Equation\EquationUtilities.cpp:36:21: note: FIX-IT applied suggested code changes
    EquationBuilder builder(equationString);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Equation\EquationUtilities.cpp:86:5: warning: variable 'equation2' of type 'Equation' can be declared 'const' [misc-const-correctness]
    Equation equation2(substitution.performSubstitutionTo(equation1));
    ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Equation\EquationUtilities.cpp:86:14: note: FIX-IT applied suggested code changes
    Equation equation2(substitution.performSubstitutionTo(equation1));
             ^
[68/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Extrema/ExtremaUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Solution/Solver/BaseSolver.hpp:5:7: warning: class 'BaseSolver' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSolver {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Solution/Solver/OneEquationOneVariable/BaseOneEquationOneVariableSolver.hpp:10:7: warning: class 'BaseOneEquationOneVariableSolver' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseOneEquationOneVariableSolver : public BaseSolver {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:50:5: warning: variable 'fa' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term fa(substitution.performSubstitutionTo(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:50:10: note: FIX-IT applied suggested code changes
    Term fa(substitution.performSubstitutionTo(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:52:5: warning: variable 'fb' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term fb(substitution.performSubstitutionTo(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:52:10: note: FIX-IT applied suggested code changes
    Term fb(substitution.performSubstitutionTo(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:55:9: warning: variable 'mean' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber mean = (fb.getAsNumber() - fa.getAsNumber()) / (b - a);
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:55:20: note: FIX-IT applied suggested code changes
        AlbaNumber mean = (fb.getAsNumber() - fa.getAsNumber()) / (b - a);
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:56:9: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
        Differentiation differentiation(variableName);
        ^
                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:56:25: note: FIX-IT applied suggested code changes
        Differentiation differentiation(variableName);
                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:57:9: warning: variable 'fPrime' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term fPrime(differentiation.differentiate(term));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:57:14: note: FIX-IT applied suggested code changes
        Term fPrime(differentiation.differentiate(term));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:58:9: warning: variable 'derivativeEqualsMeanEquation' of type 'Equation' can be declared 'const' [misc-const-correctness]
        Equation derivativeEqualsMeanEquation(fPrime, "=", mean);
        ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:58:18: note: FIX-IT applied suggested code changes
        Equation derivativeEqualsMeanEquation(fPrime, "=", mean);
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:60:9: warning: variable 'solutionSet' of type 'SolutionSet' can be declared 'const' [misc-const-correctness]
        SolutionSet solutionSet(solver.calculateSolutionAndReturnSolutionSet(derivativeEqualsMeanEquation));
        ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:60:21: note: FIX-IT applied suggested code changes
        SolutionSet solutionSet(solver.calculateSolutionAndReturnSolutionSet(derivativeEqualsMeanEquation));
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:61:9: warning: variable 'abOpenInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
        AlbaNumberInterval abOpenInterval(createOpenEndpoint(a), createOpenEndpoint(b));
        ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:61:28: note: FIX-IT applied suggested code changes
        AlbaNumberInterval abOpenInterval(createOpenEndpoint(a), createOpenEndpoint(b));
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:70:5: warning: variable 'termsOverTerms' of type 'TermsOverTerms' can be declared 'const' [misc-const-correctness]
    TermsOverTerms termsOverTerms(createTermsOverTermsFromTerm(term));
    ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:70:20: note: FIX-IT applied suggested code changes
    TermsOverTerms termsOverTerms(createTermsOverTermsFromTerm(term));
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:71:5: warning: variable 'numerator' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term numerator(termsOverTerms.getCombinedNumerator());
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:71:10: note: FIX-IT applied suggested code changes
    Term numerator(termsOverTerms.getCombinedNumerator());
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:72:5: warning: variable 'denominator' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term denominator(termsOverTerms.getCombinedDenominator());
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:72:10: note: FIX-IT applied suggested code changes
    Term denominator(termsOverTerms.getCombinedDenominator());
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:75:5: warning: variable 'fa' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term fa(substitution.performSubstitutionTo(numerator));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:75:10: note: FIX-IT applied suggested code changes
    Term fa(substitution.performSubstitutionTo(numerator));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:76:5: warning: variable 'ga' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term ga(substitution.performSubstitutionTo(denominator));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:76:10: note: FIX-IT applied suggested code changes
    Term ga(substitution.performSubstitutionTo(denominator));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:78:5: warning: variable 'fb' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term fb(substitution.performSubstitutionTo(numerator));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:78:10: note: FIX-IT applied suggested code changes
    Term fb(substitution.performSubstitutionTo(numerator));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:79:5: warning: variable 'gb' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term gb(substitution.performSubstitutionTo(denominator));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:79:10: note: FIX-IT applied suggested code changes
    Term gb(substitution.performSubstitutionTo(denominator));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:82:9: warning: variable 'cauchyValue' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber cauchyValue = (fb.getAsNumber() - fa.getAsNumber()) / (gb.getAsNumber() - ga.getAsNumber());
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:82:20: note: FIX-IT applied suggested code changes
        AlbaNumber cauchyValue = (fb.getAsNumber() - fa.getAsNumber()) / (gb.getAsNumber() - ga.getAsNumber());
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:83:9: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
        Differentiation differentiation(variableName);
        ^
                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:83:25: note: FIX-IT applied suggested code changes
        Differentiation differentiation(variableName);
                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:84:9: warning: variable 'fPrime' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term fPrime(differentiation.differentiate(numerator));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:84:14: note: FIX-IT applied suggested code changes
        Term fPrime(differentiation.differentiate(numerator));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:85:9: warning: variable 'gPrime' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term gPrime(differentiation.differentiate(denominator));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:85:14: note: FIX-IT applied suggested code changes
        Term gPrime(differentiation.differentiate(denominator));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:86:9: warning: variable 'cauchyExpression' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term cauchyExpression(fPrime / gPrime);
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:86:14: note: FIX-IT applied suggested code changes
        Term cauchyExpression(fPrime / gPrime);
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:87:9: warning: variable 'cauchyEquation' of type 'Equation' can be declared 'const' [misc-const-correctness]
        Equation cauchyEquation(cauchyExpression, "=", cauchyValue);
        ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:87:18: note: FIX-IT applied suggested code changes
        Equation cauchyEquation(cauchyExpression, "=", cauchyValue);
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:89:9: warning: variable 'solutionSet' of type 'SolutionSet' can be declared 'const' [misc-const-correctness]
        SolutionSet solutionSet(solver.calculateSolutionAndReturnSolutionSet(cauchyEquation));
        ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:89:21: note: FIX-IT applied suggested code changes
        SolutionSet solutionSet(solver.calculateSolutionAndReturnSolutionSet(cauchyEquation));
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:90:9: warning: variable 'abOpenInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
        AlbaNumberInterval abOpenInterval(createOpenEndpoint(a), createOpenEndpoint(b));
        ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:90:28: note: FIX-IT applied suggested code changes
        AlbaNumberInterval abOpenInterval(createOpenEndpoint(a), createOpenEndpoint(b));
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:99:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:99:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:100:5: warning: variable 'firstDerivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstDerivative(differentiation.differentiate(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:100:10: note: FIX-IT applied suggested code changes
    Term firstDerivative(differentiation.differentiate(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:101:5: warning: variable 'derivativeEqualsZeroEquation' of type 'Equation' can be declared 'const' [misc-const-correctness]
    Equation derivativeEqualsZeroEquation(firstDerivative, "=", 0);
    ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:101:14: note: FIX-IT applied suggested code changes
    Equation derivativeEqualsZeroEquation(firstDerivative, "=", 0);
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:103:5: warning: variable 'solutionSet' of type 'SolutionSet' can be declared 'const' [misc-const-correctness]
    SolutionSet solutionSet(solver.calculateSolutionAndReturnSolutionSet(derivativeEqualsZeroEquation));
    ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:103:17: note: FIX-IT applied suggested code changes
    SolutionSet solutionSet(solver.calculateSolutionAndReturnSolutionSet(derivativeEqualsZeroEquation));
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:114:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:114:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:115:5: warning: variable 'secondDerivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term secondDerivative(differentiation.differentiateMultipleTimes(term, 2));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:115:10: note: FIX-IT applied suggested code changes
    Term secondDerivative(differentiation.differentiateMultipleTimes(term, 2));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:118:9: warning: variable 'derivativeEqualsZeroEquation' of type 'Equation' can be declared 'const' [misc-const-correctness]
        Equation derivativeEqualsZeroEquation(secondDerivative, "=", 0);
        ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:118:18: note: FIX-IT applied suggested code changes
        Equation derivativeEqualsZeroEquation(secondDerivative, "=", 0);
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:120:9: warning: variable 'solutionSet' of type 'SolutionSet' can be declared 'const' [misc-const-correctness]
        SolutionSet solutionSet(solver.calculateSolutionAndReturnSolutionSet(derivativeEqualsZeroEquation));
        ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:120:21: note: FIX-IT applied suggested code changes
        SolutionSet solutionSet(solver.calculateSolutionAndReturnSolutionSet(derivativeEqualsZeroEquation));
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:136:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:136:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:137:5: warning: variable 'firstDerivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstDerivative(differentiation.differentiate(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:137:10: note: FIX-IT applied suggested code changes
    Term firstDerivative(differentiation.differentiate(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:138:5: warning: variable 'secondDerivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term secondDerivative(differentiation.differentiateMultipleTimes(term, 2));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:138:10: note: FIX-IT applied suggested code changes
    Term secondDerivative(differentiation.differentiateMultipleTimes(term, 2));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:139:5: warning: variable 'firstDerivativeEqualsZeroEquation' of type 'Equation' can be declared 'const' [misc-const-correctness]
    Equation firstDerivativeEqualsZeroEquation(firstDerivative, "=", 0);
    ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:139:14: note: FIX-IT applied suggested code changes
    Equation firstDerivativeEqualsZeroEquation(firstDerivative, "=", 0);
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:141:5: warning: variable 'solutionSet' of type 'SolutionSet' can be declared 'const' [misc-const-correctness]
    SolutionSet solutionSet(solver.calculateSolutionAndReturnSolutionSet(firstDerivativeEqualsZeroEquation));
    ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:141:17: note: FIX-IT applied suggested code changes
    SolutionSet solutionSet(solver.calculateSolutionAndReturnSolutionSet(firstDerivativeEqualsZeroEquation));
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:145:9: warning: variable 'substitution' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
        SubstitutionOfVariablesToValues substitution({{variableName, valueWhenFirstDerivativeIsZero}});
        ^
                                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:145:41: note: FIX-IT applied suggested code changes
        SubstitutionOfVariablesToValues substitution({{variableName, valueWhenFirstDerivativeIsZero}});
                                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:146:9: warning: variable 'secondDerivativeTermAtCriticalValue' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term secondDerivativeTermAtCriticalValue(substitution.performSubstitutionTo(secondDerivative));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:146:14: note: FIX-IT applied suggested code changes
        Term secondDerivativeTermAtCriticalValue(substitution.performSubstitutionTo(secondDerivative));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:147:9: warning: variable 'evaluatedTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term evaluatedTerm(substitution.performSubstitutionTo(term));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:147:14: note: FIX-IT applied suggested code changes
        Term evaluatedTerm(substitution.performSubstitutionTo(term));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:149:13: warning: variable 'secondDerivativeValueAtCriticalValue' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
            AlbaNumber secondDerivativeValueAtCriticalValue(secondDerivativeTermAtCriticalValue.getAsNumber());
            ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:149:24: note: FIX-IT applied suggested code changes
            AlbaNumber secondDerivativeValueAtCriticalValue(secondDerivativeTermAtCriticalValue.getAsNumber());
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:166:5: warning: variable 'variableNameToCriticalNumbersMap' of type 'VariableNameToCriticalNumbersMap' (aka 'map<basic_string<char, char_traits<char>, allocator<char>>, vector<AlbaNumber>>') can be declared 'const' [misc-const-correctness]
    VariableNameToCriticalNumbersMap variableNameToCriticalNumbersMap(
    ^
                                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:166:38: note: FIX-IT applied suggested code changes
    VariableNameToCriticalNumbersMap variableNameToCriticalNumbersMap(
                                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:222:13: warning: variable 'evaluatedTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
            Term evaluatedTerm(substitution.performSubstitutionTo(term));
            ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:222:18: note: FIX-IT applied suggested code changes
            Term evaluatedTerm(substitution.performSubstitutionTo(term));
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:224:17: warning: variable 'evaluatedValue' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
                AlbaNumber evaluatedValue(evaluatedTerm.getAsNumber());
                ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:224:28: note: FIX-IT applied suggested code changes
                AlbaNumber evaluatedValue(evaluatedTerm.getAsNumber());
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:252:5: warning: variable 'solutionSets' of type 'MultipleVariableSolutionSets' (aka 'vector<MultipleVariableSolutionSet>') can be declared 'const' [misc-const-correctness]
    MultipleVariableSolutionSets solutionSets(
    ^
                                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:252:34: note: FIX-IT applied suggested code changes
    MultipleVariableSolutionSets solutionSets(
                                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:292:5: warning: variable 'result' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool result(false);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:292:10: note: FIX-IT applied suggested code changes
    bool result(false);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:321:5: warning: variable 'substitutionOfC' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToValues substitutionOfC({{variableName, valueForEvaluation}});
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:321:37: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToValues substitutionOfC({{variableName, valueForEvaluation}});
                                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:322:5: warning: variable 'fOfC' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term fOfC(substitutionOfC.performSubstitutionTo(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:322:10: note: FIX-IT applied suggested code changes
    Term fOfC(substitutionOfC.performSubstitutionTo(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:325:13: warning: variable 'substitutionOfX' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
            SubstitutionOfVariablesToValues substitutionOfX({{variableName, valueUsedForChecking}});
            ^
                                            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:325:45: note: FIX-IT applied suggested code changes
            SubstitutionOfVariablesToValues substitutionOfX({{variableName, valueUsedForChecking}});
                                            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:326:13: warning: variable 'fOfX' of type 'Term' can be declared 'const' [misc-const-correctness]
            Term fOfX(substitutionOfX.performSubstitutionTo(term));
            ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:326:18: note: FIX-IT applied suggested code changes
            Term fOfX(substitutionOfX.performSubstitutionTo(term));
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:328:17: warning: variable 'isMaximum' of type 'bool' can be declared 'const' [misc-const-correctness]
                bool isMaximum(fOfC.getAsNumber() >= fOfX.getAsNumber());
                ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:328:22: note: FIX-IT applied suggested code changes
                bool isMaximum(fOfC.getAsNumber() >= fOfX.getAsNumber());
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:329:17: warning: variable 'isMinimum' of type 'bool' can be declared 'const' [misc-const-correctness]
                bool isMinimum(fOfC.getAsNumber() <= fOfX.getAsNumber());
                ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:329:22: note: FIX-IT applied suggested code changes
                bool isMinimum(fOfC.getAsNumber() <= fOfX.getAsNumber());
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:348:5: warning: variable 'derivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivative(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:348:10: note: FIX-IT applied suggested code changes
    Term derivative(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:350:5: warning: variable 'hasRelativeExtremum' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool hasRelativeExtremum = willYieldToRelativeMaximumValue(term, variableName, valueAtPossibleExtremum, interval) ||
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:350:10: note: FIX-IT applied suggested code changes
    bool hasRelativeExtremum = willYieldToRelativeMaximumValue(term, variableName, valueAtPossibleExtremum, interval) ||
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:356:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:356:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:357:5: warning: variable 'firstDerivativeTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstDerivativeTerm(differentiation.differentiate(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:357:10: note: FIX-IT applied suggested code changes
    Term firstDerivativeTerm(differentiation.differentiate(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:358:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToValues substitution({{variableName, value}});
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:358:37: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToValues substitution({{variableName, value}});
                                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:359:5: warning: variable 'firstDerivativeValue' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstDerivativeValue(substitution.performSubstitutionTo(firstDerivativeTerm));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:359:10: note: FIX-IT applied suggested code changes
    Term firstDerivativeValue(substitution.performSubstitutionTo(firstDerivativeTerm));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:368:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:368:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:369:5: warning: variable 'firstDerivativeTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstDerivativeTerm(differentiation.differentiate(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:369:10: note: FIX-IT applied suggested code changes
    Term firstDerivativeTerm(differentiation.differentiate(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:370:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToValues substitution({{variableName, value}});
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:370:37: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToValues substitution({{variableName, value}});
                                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:371:5: warning: variable 'firstDerivativeValue' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstDerivativeValue(substitution.performSubstitutionTo(firstDerivativeTerm));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:371:10: note: FIX-IT applied suggested code changes
    Term firstDerivativeValue(substitution.performSubstitutionTo(firstDerivativeTerm));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:380:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:380:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:381:5: warning: variable 'secondDerivativeTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term secondDerivativeTerm(differentiation.differentiateMultipleTimes(term, 2));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:381:10: note: FIX-IT applied suggested code changes
    Term secondDerivativeTerm(differentiation.differentiateMultipleTimes(term, 2));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:382:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToValues substitution({{variableName, value}});
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:382:37: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToValues substitution({{variableName, value}});
                                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:383:5: warning: variable 'secondDerivativeValue' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term secondDerivativeValue(substitution.performSubstitutionTo(secondDerivativeTerm));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:383:10: note: FIX-IT applied suggested code changes
    Term secondDerivativeValue(substitution.performSubstitutionTo(secondDerivativeTerm));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:392:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:392:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:393:5: warning: variable 'firstDerivativeTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstDerivativeTerm(differentiation.differentiateMultipleTimes(term, 2));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:393:10: note: FIX-IT applied suggested code changes
    Term firstDerivativeTerm(differentiation.differentiateMultipleTimes(term, 2));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:394:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToValues substitution({{variableName, value}});
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:394:37: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToValues substitution({{variableName, value}});
                                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:395:5: warning: variable 'secondDerivativeValue' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term secondDerivativeValue(substitution.performSubstitutionTo(firstDerivativeTerm));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:395:10: note: FIX-IT applied suggested code changes
    Term secondDerivativeValue(substitution.performSubstitutionTo(firstDerivativeTerm));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:407:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(variableName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:407:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(variableName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:408:5: warning: variable 'secondDerivativeTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term secondDerivativeTerm(differentiation.differentiateMultipleTimes(term, 2));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:408:10: note: FIX-IT applied suggested code changes
    Term secondDerivativeTerm(differentiation.differentiateMultipleTimes(term, 2));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:411:9: warning: variable 'substitution' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
        SubstitutionOfVariablesToValues substitution({{variableName, value}});
        ^
                                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:411:41: note: FIX-IT applied suggested code changes
        SubstitutionOfVariablesToValues substitution({{variableName, value}});
                                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:412:9: warning: variable 'secondDerivativeValue' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term secondDerivativeValue(substitution.performSubstitutionTo(secondDerivativeTerm));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:412:14: note: FIX-IT applied suggested code changes
        Term secondDerivativeValue(substitution.performSubstitutionTo(secondDerivativeTerm));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:430:5: warning: variable 'fa' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term fa(substitution.performSubstitutionTo(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:430:10: note: FIX-IT applied suggested code changes
    Term fa(substitution.performSubstitutionTo(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:432:5: warning: variable 'fb' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term fb(substitution.performSubstitutionTo(term));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:432:10: note: FIX-IT applied suggested code changes
    Term fb(substitution.performSubstitutionTo(term));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:436:9: warning: variable 'continuityDomainIntervals' of type 'AlbaNumberIntervals' (aka 'vector<AlbaNumberInterval>') can be declared 'const' [misc-const-correctness]
        AlbaNumberIntervals continuityDomainIntervals(getContinuityDomain(term).getAcceptedIntervals());
        ^
                            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:436:29: note: FIX-IT applied suggested code changes
        AlbaNumberIntervals continuityDomainIntervals(getContinuityDomain(term).getAcceptedIntervals());
                            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:437:9: warning: variable 'differentiabilityDomainIntervals' of type 'AlbaNumberIntervals' (aka 'vector<AlbaNumberInterval>') can be declared 'const' [misc-const-correctness]
        AlbaNumberIntervals differentiabilityDomainIntervals(
        ^
                            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:437:29: note: FIX-IT applied suggested code changes
        AlbaNumberIntervals differentiabilityDomainIntervals(
                            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:439:9: warning: variable 'abCloseInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
        AlbaNumberInterval abCloseInterval(createCloseEndpoint(a), createCloseEndpoint(b));
        ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:439:28: note: FIX-IT applied suggested code changes
        AlbaNumberInterval abCloseInterval(createCloseEndpoint(a), createCloseEndpoint(b));
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:440:9: warning: variable 'abOpenInterval' of type 'AlbaNumberInterval' can be declared 'const' [misc-const-correctness]
        AlbaNumberInterval abOpenInterval(createOpenEndpoint(a), createOpenEndpoint(b));
        ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:440:28: note: FIX-IT applied suggested code changes
        AlbaNumberInterval abOpenInterval(createOpenEndpoint(a), createOpenEndpoint(b));
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:444:13: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
            Differentiation differentiation(variableName);
            ^
                            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:444:29: note: FIX-IT applied suggested code changes
            Differentiation differentiation(variableName);
                            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:445:13: warning: variable 'firstDerivativeTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
            Term firstDerivativeTerm(differentiation.differentiate(term));
            ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:445:18: note: FIX-IT applied suggested code changes
            Term firstDerivativeTerm(differentiation.differentiate(term));
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:447:13: warning: variable 'fPrimeC' of type 'Term' can be declared 'const' [misc-const-correctness]
            Term fPrimeC(substitution.performSubstitutionTo(firstDerivativeTerm));
            ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:447:18: note: FIX-IT applied suggested code changes
            Term fPrimeC(substitution.performSubstitutionTo(firstDerivativeTerm));
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:457:5: warning: variable 'lowEndpoint' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint lowEndpoint(interval.getLowerEndpoint());
    ^
                               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:457:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint lowEndpoint(interval.getLowerEndpoint());
                               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:458:5: warning: variable 'highEndpoint' of type 'AlbaNumberIntervalEndpoint' can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervalEndpoint highEndpoint(interval.getHigherEndpoint());
    ^
                               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:458:32: note: FIX-IT applied suggested code changes
    AlbaNumberIntervalEndpoint highEndpoint(interval.getHigherEndpoint());
                               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:468:9: warning: variable 'midpoint' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber midpoint = (lowValue + highValue) / 2;
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:468:20: note: FIX-IT applied suggested code changes
        AlbaNumber midpoint = (lowValue + highValue) / 2;
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:478:5: warning: variable 'domainSolutionSet' of type 'SolutionSet' can be declared 'const' [misc-const-correctness]
    SolutionSet domainSolutionSet = calculateDomainForTermWithOneVariable(term);
    ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:478:17: note: FIX-IT applied suggested code changes
    SolutionSet domainSolutionSet = calculateDomainForTermWithOneVariable(term);
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:479:5: warning: variable 'domains' of type 'AlbaNumberIntervals' (aka 'vector<AlbaNumberInterval>') can be declared 'const' [misc-const-correctness]
    AlbaNumberIntervals domains(domainSolutionSet.getAcceptedIntervals());
    ^
                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:479:25: note: FIX-IT applied suggested code changes
    AlbaNumberIntervals domains(domainSolutionSet.getAcceptedIntervals());
                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:512:13: warning: variable 'secondDerivativeSubstituted' of type 'Term' can be declared 'const' [misc-const-correctness]
            Term secondDerivativeSubstituted(substitution.performSubstitutionTo(secondDerivative));
            ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:512:18: note: FIX-IT applied suggested code changes
            Term secondDerivativeSubstituted(substitution.performSubstitutionTo(secondDerivative));
                 ^
[69/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/BrentMethod.cpp.obj
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:50:5: warning: variable 'scopeConfigurationObject' of type 'AlbaNumber::ScopeConfigurationObject' can be declared 'const' [misc-const-correctness]
    AlbaNumber::ScopeConfigurationObject scopeConfigurationObject;
    ^
                                         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:50:42: note: FIX-IT applied suggested code changes
    AlbaNumber::ScopeConfigurationObject scopeConfigurationObject;
                                         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:66:5: warning: variable 'fc' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber fc = calculate(m_values.c);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:66:16: note: FIX-IT applied suggested code changes
    AlbaNumber fc = calculate(m_values.c);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:87:5: warning: variable 'fs' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber fs = calculate(m_values.s);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:87:16: note: FIX-IT applied suggested code changes
    AlbaNumber fs = calculate(m_values.s);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:128:5: warning: variable 'first' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber first = ((a * 3) + b) / 4;
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:128:16: note: FIX-IT applied suggested code changes
    AlbaNumber first = ((a * 3) + b) / 4;
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:129:5: warning: variable 'second' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber second = b;
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:129:16: note: FIX-IT applied suggested code changes
    AlbaNumber second = b;
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:130:5: warning: variable 'minForConditionOne' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber minForConditionOne = min(first, second);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:130:16: note: FIX-IT applied suggested code changes
    AlbaNumber minForConditionOne = min(first, second);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:131:5: warning: variable 'maxForConditionOne' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber maxForConditionOne = max(first, second);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:131:16: note: FIX-IT applied suggested code changes
    AlbaNumber maxForConditionOne = max(first, second);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:132:5: warning: variable 'gamma' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber gamma = 1;
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:132:16: note: FIX-IT applied suggested code changes
    AlbaNumber gamma = 1;
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:133:5: warning: variable 'isConditionOne' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isConditionOne = s < minForConditionOne || maxForConditionOne < s;
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:133:10: note: FIX-IT applied suggested code changes
    bool isConditionOne = s < minForConditionOne || maxForConditionOne < s;
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:134:5: warning: variable 'isConditionTwo' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isConditionTwo = mflag && getAbsoluteValue(s - b) >= (getAbsoluteValue(b - c) / 2);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:134:10: note: FIX-IT applied suggested code changes
    bool isConditionTwo = mflag && getAbsoluteValue(s - b) >= (getAbsoluteValue(b - c) / 2);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:135:5: warning: variable 'isConditionThree' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isConditionThree = !mflag && getAbsoluteValue(s - b) >= (getAbsoluteValue(c - d) / 2);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:135:10: note: FIX-IT applied suggested code changes
    bool isConditionThree = !mflag && getAbsoluteValue(s - b) >= (getAbsoluteValue(c - d) / 2);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:136:5: warning: variable 'isConditionFour' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isConditionFour = mflag && getAbsoluteValue(b - c) < getAbsoluteValue(gamma);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:136:10: note: FIX-IT applied suggested code changes
    bool isConditionFour = mflag && getAbsoluteValue(b - c) < getAbsoluteValue(gamma);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:137:5: warning: variable 'isConditionFive' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isConditionFive = !mflag && getAbsoluteValue(c - d) < getAbsoluteValue(gamma);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:137:10: note: FIX-IT applied suggested code changes
    bool isConditionFive = !mflag && getAbsoluteValue(c - d) < getAbsoluteValue(gamma);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:154:5: warning: variable 'fa' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber fa = calculate(a);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:154:16: note: FIX-IT applied suggested code changes
    AlbaNumber fa = calculate(a);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:155:5: warning: variable 'fb' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber fb = calculate(b);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:155:16: note: FIX-IT applied suggested code changes
    AlbaNumber fb = calculate(b);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:156:5: warning: variable 'fc' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber fc = calculate(c);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:156:16: note: FIX-IT applied suggested code changes
    AlbaNumber fc = calculate(c);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:157:5: warning: variable 'firstDenominator' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber firstDenominator((fa - fb) * (fa - fc));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:157:16: note: FIX-IT applied suggested code changes
    AlbaNumber firstDenominator((fa - fb) * (fa - fc));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:158:5: warning: variable 'secondDenominator' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber secondDenominator((fb - fa) * (fb - fc));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:158:16: note: FIX-IT applied suggested code changes
    AlbaNumber secondDenominator((fb - fa) * (fb - fc));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:159:5: warning: variable 'thirdDenominator' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber thirdDenominator((fc - fa) * (fc - fb));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:159:16: note: FIX-IT applied suggested code changes
    AlbaNumber thirdDenominator((fc - fa) * (fc - fb));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:162:9: warning: variable 'firstPart' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber firstPart = (a * fb * fc) / firstDenominator;
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:162:20: note: FIX-IT applied suggested code changes
        AlbaNumber firstPart = (a * fb * fc) / firstDenominator;
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:163:9: warning: variable 'secondPart' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber secondPart = (b * fa * fc) / secondDenominator;
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:163:20: note: FIX-IT applied suggested code changes
        AlbaNumber secondPart = (b * fa * fc) / secondDenominator;
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:164:9: warning: variable 'thirdPart' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber thirdPart = (c * fa * fb) / thirdDenominator;
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:164:20: note: FIX-IT applied suggested code changes
        AlbaNumber thirdPart = (c * fa * fb) / thirdDenominator;
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:172:5: warning: variable 'fa' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber fa = calculate(a);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:172:16: note: FIX-IT applied suggested code changes
    AlbaNumber fa = calculate(a);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:173:5: warning: variable 'fb' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber fb = calculate(b);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:173:16: note: FIX-IT applied suggested code changes
    AlbaNumber fb = calculate(b);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:174:5: warning: variable 'denominator' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber denominator(fb - fa);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:174:16: note: FIX-IT applied suggested code changes
    AlbaNumber denominator(fb - fa);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:176:9: warning: variable 'firstPart' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber firstPart = b;
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:176:20: note: FIX-IT applied suggested code changes
        AlbaNumber firstPart = b;
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:177:9: warning: variable 'secondPart' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber secondPart = (fb * (b - a)) / (denominator);
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:177:20: note: FIX-IT applied suggested code changes
        AlbaNumber secondPart = (fb * (b - a)) / (denominator);
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:185:9: warning: variable 'aCoefficient' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber aCoefficient(m_coefficients.front());
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\BrentMethod.cpp:185:20: note: FIX-IT applied suggested code changes
        AlbaNumber aCoefficient(m_coefficients.front());
                   ^
[70/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationBySplitting.cpp.obj
FAILED: CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationBySplitting.cpp.obj 
"C:\Program Files\CMake\bin\cmake.exe" -E __run_co_compile --tidy="C:/Program Files/LLVM/bin/clang-tidy.exe;--fix;--header-filter=D:\/a\/aprg\/aprg\/AprgAlgebra\/AprgAlgebra.*;--config-file=D:/a/aprg/aprg/Clang/ClangTidyFiles/autofix.clang-tidy;--extra-arg-before=--driver-mode=g++" --source=D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp -- C:\PROGRA~1\LLVM\bin\CLANG_~1.EXE -DAPRG_CODE_REVISION=\"997db5a1fb8887a0e91226e785ec66b9fb3b6305\" -DAPRG_DEBUG -DAPRG_DIR=\"D:/a/aprg/aprg\" -DAPRG_TEST_MODE_ON -DOS_WINDOWS -ID:/a/aprg/aprg/AprgCommon/AprgCommon/src -ID:/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows -ID:/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities -ID:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src -ID:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/tst -ID:/a/aprg/aprg/gtest/gtest/googletest/include -ID:/a/aprg/aprg/gtest/gtest/googletest -Wall -Wextra -pedantic -fcolor-diagnostics -std=c++20  -O0 -g -Xclang -gcodeview -D_DEBUG -D_DLL -D_MT -Xclang --dependent-lib=msvcrtd -MD -MT CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationBySplitting.cpp.obj -MF CMakeFiles\AprgAlgebra.dir\src\Algebra\Factorization\FactorizationBySplitting.cpp.obj.d -o CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationBySplitting.cpp.obj -c D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src/Algebra/Factorization/FactorizationBySplitting.cpp
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:50:13: warning: variable 'monomialDegree' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
            AlbaNumber monomialDegree(getDegree(monomial));
            ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:50:24: note: FIX-IT applied suggested code changes
            AlbaNumber monomialDegree(getDegree(monomial));
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:64:5: warning: variable 'polynomialDegree' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber polynomialDegree(getMaxDegree(polynomial));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:64:16: note: FIX-IT applied suggested code changes
    AlbaNumber polynomialDegree(getMaxDegree(polynomial));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:72:62: warning: narrowing conversion from 'int64_t' (aka 'long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                if (areExponentsDivisible(remainingMonomial, degree)) {
                                                             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:89:5: warning: variable 'monomials' of type 'Monomials' (aka 'vector<Monomial>') can be declared 'const' [misc-const-correctness]
    Monomials monomials(polynomial.getMonomials());
    ^
              const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:89:15: note: FIX-IT applied suggested code changes
    Monomials monomials(polynomial.getMonomials());
              ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:94:9: warning: variable 'monomialFirstVariableName' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string monomialFirstVariableName(getFirstVariableName(monomial));
        ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:94:16: note: FIX-IT applied suggested code changes
        string monomialFirstVariableName(getFirstVariableName(monomial));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:138:9: warning: variable 'newPolynomialWithVariables' of type 'Polynomial' can be declared 'const' [misc-const-correctness]
        Polynomial newPolynomialWithVariables(
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:138:20: note: FIX-IT applied suggested code changes
        Polynomial newPolynomialWithVariables(
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:152:5: warning: variable 'factorizedPolynomialsWithVariables' of type 'Polynomials' (aka 'vector<Polynomial>') can be declared 'const' [misc-const-correctness]
    Polynomials factorizedPolynomialsWithVariables(factorizeAPolynomial(newPolynomialWithVariables));
    ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:152:17: note: FIX-IT applied suggested code changes
    Polynomials factorizedPolynomialsWithVariables(factorizeAPolynomial(newPolynomialWithVariables));
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:155:13: warning: variable 'finalPolynomial' of type 'Polynomial' can be declared 'const' [misc-const-correctness]
            Polynomial finalPolynomial(createPolynomialIfPossible(
            ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:155:24: note: FIX-IT applied suggested code changes
            Polynomial finalPolynomial(createPolynomialIfPossible(
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:166:13: warning: variable 'commonFactorsOfAPolynomial' of type 'Polynomials' (aka 'vector<Polynomial>') can be declared 'const' [misc-const-correctness]
            Polynomials commonFactorsOfAPolynomial(factorizeAPolynomial(*it));
            ^
                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:166:25: note: FIX-IT applied suggested code changes
            Polynomials commonFactorsOfAPolynomial(factorizeAPolynomial(*it));
                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:177:13: warning: variable 'divideProcess' of type 'PolynomialOverPolynomial' can be declared 'const' [misc-const-correctness]
            PolynomialOverPolynomial divideProcess(resultPolynomial, commonFactor);
            ^
                                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:177:38: note: FIX-IT applied suggested code changes
            PolynomialOverPolynomial divideProcess(resultPolynomial, commonFactor);
                                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:178:13: warning: variable 'quotientAndRemainder' of type 'PolynomialOverPolynomial::QuotientAndRemainder' can be declared 'const' [misc-const-correctness]
            PolynomialOverPolynomial::QuotientAndRemainder quotientAndRemainder(divideProcess.divide());
            ^
                                                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:178:60: note: FIX-IT applied suggested code changes
            PolynomialOverPolynomial::QuotientAndRemainder quotientAndRemainder(divideProcess.divide());
                                                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:201:48: warning: unnecessary temporary object created while calling emplace_back [hicpp-use-emplace,modernize-use-emplace]
                    commonFactors.emplace_back(Polynomial{gcfMonomial});
                                               ^~~~~~~~~~~           ~
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:201:48: note: FIX-IT applied suggested code changes
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:201:70: note: FIX-IT applied suggested code changes
                    commonFactors.emplace_back(Polynomial{gcfMonomial});
                                                                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:234:9: warning: variable 'factors' of type 'Polynomials' (aka 'vector<Polynomial>') can be declared 'const' [misc-const-correctness]
        Polynomials factors(factorizeAPolynomial(smallerPolynomial));
        ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:234:21: note: FIX-IT applied suggested code changes
        Polynomials factors(factorizeAPolynomial(smallerPolynomial));
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:239:17: warning: variable 'variableNameForSubstitution' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
                string variableNameForSubstitution(createVariableNameForSubstitution(Term(factor)));
                ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:239:24: note: FIX-IT applied suggested code changes
                string variableNameForSubstitution(createVariableNameForSubstitution(Term(factor)));
                       ^
In file included from D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src/Algebra/Factorization/FactorizationBySplitting.cpp:1:
In file included from D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src/Algebra/Factorization/FactorizationBySplitting.hpp:3:
In file included from D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Substitution/SubstitutionOfVariablesToTerms.hpp:3:
In file included from D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Equation/Equation.hpp:3:
In file included from D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Equation/EquationOperator.hpp:3:
In file included from C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\string:11:
In file included from C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\xstring:14:
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\xmemory:717:9: error: no matching function for call to 'construct_at'
        _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
        ^~~~~~~~~~~~~~~~~
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\yvals_core.h:1853:20: note: expanded from macro '_STD'
#define _STD       ::std::
                   ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vector:800:27: note: in instantiation of function template specialization 'std::_Default_allocator_traits<std::allocator<alba::algebra::Polynomial>>::construct<alba::algebra::Polynomial, alba::algebra::Monomial &>' requested here
            _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
                          ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vector:782:20: note: in instantiation of function template specialization 'std::vector<alba::algebra::Polynomial>::_Emplace_back_with_unused_capacity<alba::algebra::Monomial &>' requested here
            return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
                   ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vector:864:24: note: in instantiation of function template specialization 'std::vector<alba::algebra::Polynomial>::_Emplace_one_at_back<alba::algebra::Monomial &>' requested here
        _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
                       ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src/Algebra/Factorization/FactorizationBySplitting.cpp:201:35: note: in instantiation of function template specialization 'std::vector<alba::algebra::Polynomial>::emplace_back<alba::algebra::Monomial &>' requested here
                    commonFactors.emplace_back(gcfMonomial);
                                  ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\xutility:239:16: note: candidate template ignored: substitution failure [with _Ty = alba::algebra::Polynomial, _Types = <alba::algebra::Monomial &>]: no matching constructor for initialization of 'alba::algebra::Polynomial'
constexpr _Ty* construct_at(_Ty* const _Location, _Types&&... _Args) noexcept(
               ^
1 error generated.
ninja: build stopped: subcommand failed.
DONE!
