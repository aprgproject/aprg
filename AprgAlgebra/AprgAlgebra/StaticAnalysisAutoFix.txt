StaticAnalysisJobIdentifier: [011]
2023-09-10T22:12:08
[35m2023-09-10T22:13:10[0m | [33mBuildAndRun.sh:28[0m | The current path is [/d/a/aprg/aprg/AprgAlgebra/AprgAlgebra].
[35m2023-09-10T22:13:10[0m | [33mBuildAndRun.sh:29[0m | The scriptPath is [/d/a/aprg/aprg/AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh].
[35m2023-09-10T22:13:10[0m | [33mBuildAndRun.sh:30[0m | The scriptOption is [buildOnOneCore].
[35m2023-09-10T22:13:10[0m | [33mBuildAndRun.sh:31[0m | The buildDirectoryName is [StaticAnalyzersBuild].
[35m2023-09-10T22:13:10[0m | [33mBuildAndRun.sh:32[0m | The argument1 is [Debug] and argument2 is [].
[35m2023-09-10T22:13:10[0m | [33mBuildAndRun.sh:33[0m | The immediateDirectoryName is [AprgAlgebra].
[35m2023-09-10T22:13:10[0m | [33mBuildAndRun.sh:84[0m | The buildType is [Debug].
[35m2023-09-10T22:13:10[0m | [33mBuildAndRun.sh:85[0m | The numberOfCores is [2].
[35m2023-09-10T22:13:10[0m | [33mBuildAndRun.sh:68[0m | The build path is [/d/a/aprg/aprg/AprgAlgebra/StaticAnalyzersBuild] and the output of [ls -la --color=auto]:
total 593
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 22:13 .
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 22:12 ..
-rw-r--r-- 1 runneradmin 197121  18069 Sep 10 22:13 CMakeCache.txt
drwxr-xr-x 1 runneradmin 197121      0 Sep 10 22:13 CMakeFiles
-rw-r--r-- 1 runneradmin 197121    532 Sep 10 22:13 CTestTestfile.cmake
-rw-r--r-- 1 runneradmin 197121 567519 Sep 10 22:13 build.ninja
-rw-r--r-- 1 runneradmin 197121   2265 Sep 10 22:13 cmake_install.cmake
[1/311] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc.obj
In file included from D:/a/aprg/aprg/gtest/gtest/googletest/src/gtest-all.cc:49:
D:/a/aprg/aprg/gtest/gtest/googletest\src/gtest.cc:2604:3: warning: extension used [-Wlanguage-extension-token]
  __try {
  ^
1 warning generated.
[2/311] Building CXX object CMakeFiles/gtest.dir/D_/a/aprg/aprg/gtest/gtest/googletest/src/gtest_main.cc.obj
[3/311] Linking CXX static library gtest.lib
[4/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Container/AlbaContainerHelper.cpp.obj
[5/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/File/AlbaFileReader.cpp.obj
[6/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Angle/AlbaAngle.cpp.obj
[7/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComplexNumberHelpers.cpp.obj
[8/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/ComputationHelpers.cpp.obj
[9/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/FactorAndMulitplesHelpers.cpp.obj
[10/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PowerHelpers.cpp.obj
[11/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/PrecisionHelpers.cpp.obj
[12/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Helpers/StatisticsHelpers.cpp.obj
[13/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaComplexNumber.cpp.obj
[14/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/AlbaNumber.cpp.obj
[15/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberInterval.cpp.obj
[16/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalEndpoint.cpp.obj
[17/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Number/Interval/AlbaNumberIntervalHelpers.cpp.obj
[18/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Math/Ratio/AlbaRatio.cpp.obj
[19/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Memory/AlbaMemoryBuffer.cpp.obj
[20/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaPathHandler.cpp.obj
[21/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/PathHandler/AlbaWebPathHandler.cpp.obj
[22/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Print/AlbaPrintFunctions.cpp.obj
[23/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/AlbaOldRandomizer.cpp.obj
[24/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaCombinedEntropySource.cpp.obj
[25/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Randomizer/EntropySources/AlbaEntropySourceBasedOnTime.cpp.obj
[26/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitReader.cpp.obj
[27/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamBitWriter.cpp.obj
[28/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterReader.cpp.obj
[29/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Stream/AlbaStreamParameterWriter.cpp.obj
[30/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/String/AlbaStringHelper.cpp.obj
[31/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTime.cpp.obj
[32/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaDateTimeHelper.cpp.obj
[33/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\Time\AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
D:/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimeHelper.cpp:23:34: warning: 'localtime' is deprecated: This function or variable may be unsafe. Consider using localtime_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [-Wdeprecated-declarations]
    struct tm const localTime = *localtime(&currentTimeT);
                                 ^
C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\time.h:524:9: note: 'localtime' has been explicitly marked deprecated here
        _CRT_INSECURE_DEPRECATE(localtime_s)
        ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
        #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
                                                      ^
C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
#define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
                                              ^
1 warning generated.
[34/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Time/AlbaLocalTimer.cpp.obj
[35/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/AlbaUserInterface.cpp.obj
[36/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/User/DisplayTable.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:205:67: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
int DisplayTablePrinter::getVerticalBorderLength() const { return m_verticalBorder.length(); }
                                                                  ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\src\Common\User\DisplayTable.cpp:208:12: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return ((m_maxLengthAtColumn.size() + 1) * getVerticalBorderLength()) + m_totalColumnLength;
           ^
[37/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/src/Common/Utility/AlbaScopeGuard.cpp.obj
[38/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/BaseFileReaderTest.cpp.obj
[39/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities/CommonTestsUtilities/File/FileUtilities.cpp.obj
[40/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/PathHandler/AlbaWindowsPathHandler.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:28:24: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const length = fullPath.length();
                       ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:30:45: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int const indexWithSlashCharacter = fullPath.find_first_of(m_slashCharacterString, index);
                                            ^
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\PathHandler\AlbaWindowsPathHandler.cpp:270:23: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const index = m_directory.find_first_of(m_slashCharacterString + ":");
                      ^
[41/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimeHelper.cpp.obj
D:\a\aprg\aprg\AprgCommon\AprgCommon\srcWindows\Common\Time\AlbaWindowsTimeHelper.cpp:6:12: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
    return AlbaDateTime(
           ^
[42/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Time/AlbaWindowsTimer.cpp.obj
[43/311] Building CXX object CMakeFiles/APRG_COMMON.dir/D_/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows/Common/Windows/AlbaWindowsHelper.cpp.obj
[44/311] Linking CXX static library APRG_COMMON.lib
[45/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/AdditionAndSubtractionOfExpressions.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:47:67: warning: narrowing conversion from 'unsigned long long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
int AdditionAndSubtractionOfExpressions::getSize() const { return min(m_expressions.size(), m_associations.size()); }
                                                                  ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:144:16: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int size = mergeParts.size();
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfExpressions.cpp:160:24: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                size = mergeParts.size();
                       ^
[46/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/AdditionAndSubtractionOfTermsOverTerms.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\AdditionAndSubtractionOfTermsOverTerms.cpp:145:31: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const numberOfItems = m_items.size();
                              ^
[47/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/ConstructUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[48/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/MultiplicationAndDivisionOfRadicals.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\MultiplicationAndDivisionOfRadicals.cpp:82:59: warning: narrowing conversion from 'DenominatorDataType' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        if (isEven(static_cast<int>(getAbsoluteValue<int>(fractionData.denominator)))) {
                                                          ^
[49/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/PolynomialOverPolynomial.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[50/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/PolynomialRaiseToAnUnsignedInt.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[51/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/RationalizeTermOverTerm.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[52/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermRaiseToANumber.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[53/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermRaiseToTerms.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[54/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermsAggregator.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsAggregator.cpp:50:22: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        m_endIndex = m_terms.size() - 1;
                     ^
[55/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermsOverTerms.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:393:44: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const previousNumberOfNumerators = numerators.size();
                                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Constructs\TermsOverTerms.cpp:394:46: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const previousNumberOfDenominators = denominators.size();
                                             ^
[56/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermsRaiseToExponents.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[57/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermsRaiseToNumbers.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[58/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Constructs/TermsRaiseToTerms.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[59/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Differentiation/DerivativeVariableName.cpp.obj
[60/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Differentiation/Differentiation.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/BaseRetriever.hpp:9:7: warning: class 'BaseRetriever' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRetriever {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[61/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Differentiation/DifferentiationForFiniteCalculus.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[62/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Differentiation/DifferentiationUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/BaseRetriever.hpp:9:7: warning: class 'BaseRetriever' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRetriever {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[63/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Differentiation/Lagrange.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:25:20: warning: narrowing conversion from 'unsigned long long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int const size(min(lagrangeFunctions.size(), lagrangeMultiplierNames.size()));
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Differentiation\Lagrange.cpp:34:70: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    strings const lagrangeMultiplierNames(getLagrangeMultiplierNames(lagrangeFunctions.size()));
                                                                     ^
[64/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Equation/Equation.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[65/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Equation/EquationBuilder.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[66/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Equation/EquationOperator.cpp.obj
[67/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Equation/EquationUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/BaseRetriever.hpp:9:7: warning: class 'BaseRetriever' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRetriever {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[68/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Extrema/ExtremaUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Solution/Solver/BaseSolver.hpp:5:7: warning: class 'BaseSolver' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseSolver {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Solution/Solver/OneEquationOneVariable/BaseOneEquationOneVariableSolver.hpp:10:7: warning: class 'BaseOneEquationOneVariableSolver' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseOneEquationOneVariableSolver : public BaseSolver {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:480:31: warning: the const qualified variable 'domains' is copy-constructed from a const reference; consider making it a const reference [performance-unnecessary-copy-initialization]
    AlbaNumberIntervals const domains(domainSolutionSet.getAcceptedIntervals());
                              ^
                             &
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Extrema\ExtremaUtilities.cpp:480:30: note: FIX-IT applied suggested code changes
    AlbaNumberIntervals const domains(domainSolutionSet.getAcceptedIntervals());
                             ^
[69/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/BrentMethod.cpp.obj
[70/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationBySplitting.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:72:62: warning: narrowing conversion from 'int64_t' (aka 'long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                if (areExponentsDivisible(remainingMonomial, degree)) {
                                                             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:89:21: warning: the const qualified variable 'monomials' is copy-constructed from a const reference; consider making it a const reference [performance-unnecessary-copy-initialization]
    Monomials const monomials(polynomial.getMonomials());
                    ^
                   &
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:89:20: note: FIX-IT applied suggested code changes
    Monomials const monomials(polynomial.getMonomials());
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:201:21: warning: variable 'gcfPolynomial' of type 'Polynomial' can be declared 'const' [misc-const-correctness]
                    Polynomial gcfPolynomial{gcfMonomial};
                    ^
                               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationBySplitting.cpp:201:32: note: FIX-IT applied suggested code changes
                    Polynomial gcfPolynomial{gcfMonomial};
                               ^
[71/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationConfiguration.cpp.obj
[72/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationOfExpression.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:21:9: warning: variable 'factors' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
        Terms factors(factorizeTerm(term));
        ^
              const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:21:15: note: FIX-IT applied suggested code changes
        Terms factors(factorizeTerm(term));
              ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:43:17: warning: variable 'exponentAtAddend' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
                AlbaNumber exponentAtAddend(it->getExponentOfBase(base));
                ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:43:28: note: FIX-IT applied suggested code changes
                AlbaNumber exponentAtAddend(it->getExponentOfBase(base));
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:63:5: warning: variable 'remainingConstant' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber remainingConstant(constantFactorOfOriginalAddend / constantGcf);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:63:16: note: FIX-IT applied suggested code changes
    AlbaNumber remainingConstant(constantFactorOfOriginalAddend / constantGcf);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:75:5: warning: variable 'remainingNonConstantFactorsWithDetails' of type 'TermsWithDetails' (aka 'vector<TermWithDetails>') can be declared 'const' [misc-const-correctness]
    TermsWithDetails remainingNonConstantFactorsWithDetails(
    ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:75:22: note: FIX-IT applied suggested code changes
    TermsWithDetails remainingNonConstantFactorsWithDetails(
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:85:5: warning: variable 'combinedInnerTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term combinedInnerTerm(createTermWithMultiplicationAndDivisionTermsWithDetails(innerMultipliers));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:85:10: note: FIX-IT applied suggested code changes
    Term combinedInnerTerm(createTermWithMultiplicationAndDivisionTermsWithDetails(innerMultipliers));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:101:5: warning: variable 'termsRaiseToNumbers' of type 'TermsRaiseToNumbers' can be declared 'const' [misc-const-correctness]
    TermsRaiseToNumbers termsRaiseToNumbers(factorizeToTermsRaiseToNumbers(expression));
    ^
                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:101:25: note: FIX-IT applied suggested code changes
    TermsRaiseToNumbers termsRaiseToNumbers(factorizeToTermsRaiseToNumbers(expression));
                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:108:5: warning: variable 'scopeObject' of type 'ScopeObject' can be declared 'const' [misc-const-correctness]
    ScopeObject scopeObject;
    ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:108:17: note: FIX-IT applied suggested code changes
    ScopeObject scopeObject;
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:136:5: warning: variable 'constantGcf' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber constantGcf(getGcfOfConstants(constantFactorsPerAddends));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:136:16: note: FIX-IT applied suggested code changes
    AlbaNumber constantGcf(getGcfOfConstants(constantFactorsPerAddends));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:151:9: warning: variable 'factorizedTerms' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
        Terms factorizedTerms(factorizeTerm(term));
        ^
              const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:151:15: note: FIX-IT applied suggested code changes
        Terms factorizedTerms(factorizeTerm(term));
              ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:159:5: warning: variable 'mainBaseToExponent' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
    TermRaiseToANumber mainBaseToExponent(createTermRaiseToANumberFromExpression(expression));
    ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:159:24: note: FIX-IT applied suggested code changes
    TermRaiseToANumber mainBaseToExponent(createTermRaiseToANumberFromExpression(expression));
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:167:9: warning: variable 'factorizedBases' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
        Terms factorizedBases(factorizeTerm(base));
        ^
              const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfExpression.cpp:167:15: note: FIX-IT applied suggested code changes
        Terms factorizedBases(factorizeTerm(base));
              ^
[73/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationOfIncreasingAndDecreasingExponentForm.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:27:9: warning: variable 'firstMonomial' of type 'Monomial' can be declared 'const' [misc-const-correctness]
        Monomial firstMonomial(monomials.front());
        ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:27:18: note: FIX-IT applied suggested code changes
        Monomial firstMonomial(monomials.front());
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:28:9: warning: variable 'lastMonomial' of type 'Monomial' can be declared 'const' [misc-const-correctness]
        Monomial lastMonomial(monomials.back());
        ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:28:18: note: FIX-IT applied suggested code changes
        Monomial lastMonomial(monomials.back());
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:29:9: warning: variable 'maxExponentDivisor' of type 'int' can be declared 'const' [misc-const-correctness]
        int maxExponentDivisor(calculateMaxExponentDivisor(firstMonomial, lastMonomial));
        ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:29:13: note: FIX-IT applied suggested code changes
        int maxExponentDivisor(calculateMaxExponentDivisor(firstMonomial, lastMonomial));
            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:37:17: warning: variable 'monomialsWithExponentsInOrder' of type 'Monomials' (aka 'vector<Monomial>') can be declared 'const' [misc-const-correctness]
                Monomials monomialsWithExponentsInOrder(
                ^
                          const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:37:27: note: FIX-IT applied suggested code changes
                Monomials monomialsWithExponentsInOrder(
                          ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:40:21: warning: variable 'coefficients' of type 'AlbaNumbers' (aka 'vector<AlbaNumber>') can be declared 'const' [misc-const-correctness]
                    AlbaNumbers coefficients(
                    ^
                                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:40:33: note: FIX-IT applied suggested code changes
                    AlbaNumbers coefficients(
                                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:58:5: warning: variable 'rootValues' of type 'AlbaNumbers' (aka 'vector<AlbaNumber>') can be declared 'const' [misc-const-correctness]
    AlbaNumbers rootValues(calculatePolynomialRoots(coefficients));
    ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:58:17: note: FIX-IT applied suggested code changes
    AlbaNumbers rootValues(calculatePolynomialRoots(coefficients));
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:68:13: warning: variable 'rootFirstMonomial' of type 'Monomial' can be declared 'const' [misc-const-correctness]
            Monomial rootFirstMonomial(rootFirstCoefficient, firstVariableExponent);
            ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:68:22: note: FIX-IT applied suggested code changes
            Monomial rootFirstMonomial(rootFirstCoefficient, firstVariableExponent);
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:69:13: warning: variable 'rootSecondMonomial' of type 'Monomial' can be declared 'const' [misc-const-correctness]
            Monomial rootSecondMonomial(rootSecondCoefficient, secondVariableExponent);
            ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:69:22: note: FIX-IT applied suggested code changes
            Monomial rootSecondMonomial(rootSecondCoefficient, secondVariableExponent);
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:70:13: warning: variable 'rootPolynomial' of type 'Polynomial' can be declared 'const' [misc-const-correctness]
            Polynomial rootPolynomial{rootFirstMonomial, rootSecondMonomial};
            ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:70:24: note: FIX-IT applied suggested code changes
            Polynomial rootPolynomial{rootFirstMonomial, rootSecondMonomial};
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:71:13: warning: variable 'divideProcess' of type 'PolynomialOverPolynomial' can be declared 'const' [misc-const-correctness]
            PolynomialOverPolynomial divideProcess(remainingPolynomial, rootPolynomial);
            ^
                                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:71:38: note: FIX-IT applied suggested code changes
            PolynomialOverPolynomial divideProcess(remainingPolynomial, rootPolynomial);
                                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:72:13: warning: variable 'quotientAndRemainder' of type 'PolynomialOverPolynomial::QuotientAndRemainder' can be declared 'const' [misc-const-correctness]
            PolynomialOverPolynomial::QuotientAndRemainder quotientAndRemainder(divideProcess.divide());
            ^
                                                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:72:60: note: FIX-IT applied suggested code changes
            PolynomialOverPolynomial::QuotientAndRemainder quotientAndRemainder(divideProcess.divide());
                                                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:84:5: warning: variable 'aCoefficientFractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData aCoefficientFractionData(aCoefficient.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:84:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData aCoefficientFractionData(aCoefficient.getFractionData());
                             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:85:5: warning: variable 'secondFractionData' of type 'AlbaNumber::FractionData' can be declared 'const' [misc-const-correctness]
    AlbaNumber::FractionData secondFractionData(rootSecondCoefficient.getFractionData());
    ^
                             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:85:30: note: FIX-IT applied suggested code changes
    AlbaNumber::FractionData secondFractionData(rootSecondCoefficient.getFractionData());
                             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:86:5: warning: variable 'multiplier' of type 'int' can be declared 'const' [misc-const-correctness]
    int multiplier = getGreatestCommonFactor<int>(
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:86:9: note: FIX-IT applied suggested code changes
    int multiplier = getGreatestCommonFactor<int>(
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:87:63: warning: narrowing conversion from 'DenominatorDataType' (aka 'unsigned int') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        getAbsoluteValue(aCoefficientFractionData.numerator), secondFractionData.denominator);
                                                              ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:116:9: warning: variable 'derivativeRoots' of type 'AlbaNumbers' (aka 'vector<AlbaNumber>') can be declared 'const' [misc-const-correctness]
        AlbaNumbers derivativeRoots(calculatePolynomialRoots(getDerivativeCoefficients(coefficients)));
        ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:116:21: note: FIX-IT applied suggested code changes
        AlbaNumbers derivativeRoots(calculatePolynomialRoots(getDerivativeCoefficients(coefficients)));
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:126:5: warning: variable 'maxAbsoluteValue' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber maxAbsoluteValue(getMaxAbsoluteValueForRootFinding(coefficients));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:126:16: note: FIX-IT applied suggested code changes
    AlbaNumber maxAbsoluteValue(getMaxAbsoluteValueForRootFinding(coefficients));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:131:5: warning: variable 'size' of type 'int' can be declared 'const' [misc-const-correctness]
    int size = valuesForRootFinding.size();
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:131:9: note: FIX-IT applied suggested code changes
    int size = valuesForRootFinding.size();
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:131:16: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int size = valuesForRootFinding.size();
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:133:9: warning: variable 'j' of type 'int' can be declared 'const' [misc-const-correctness]
        int j = i + 1;
        ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:133:13: note: FIX-IT applied suggested code changes
        int j = i + 1;
            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:182:5: warning: variable 'maxExponent' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber maxExponent = max(getMaxExponent(firstMonomial), getMaxExponent(lastMonomial));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:182:16: note: FIX-IT applied suggested code changes
    AlbaNumber maxExponent = max(getMaxExponent(firstMonomial), getMaxExponent(lastMonomial));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:183:5: warning: variable 'maxExponentDivisor' of type 'int' can be declared 'const' [misc-const-correctness]
    int maxExponentDivisor = getAbsoluteValue(maxExponent.getInteger());
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:183:9: note: FIX-IT applied suggested code changes
    int maxExponentDivisor = getAbsoluteValue(maxExponent.getInteger());
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:183:30: warning: narrowing conversion from 'long long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int maxExponentDivisor = getAbsoluteValue(maxExponent.getInteger());
                             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:189:5: warning: variable 'polynomialWithExponentsInOrder' of type 'Polynomial' can be declared 'const' [misc-const-correctness]
    Polynomial polynomialWithExponentsInOrder(monomialsWithExponentsInOrder);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:189:16: note: FIX-IT applied suggested code changes
    Polynomial polynomialWithExponentsInOrder(monomialsWithExponentsInOrder);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:201:5: warning: variable 'doAnyRootsHaveDoubleValues' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool doAnyRootsHaveDoubleValues =
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfIncreasingAndDecreasingExponentForm.cpp:201:10: note: FIX-IT applied suggested code changes
    bool doAnyRootsHaveDoubleValues =
         ^
[74/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationOfPolynomial.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/BaseRetriever.hpp:9:7: warning: class 'BaseRetriever' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRetriever {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfPolynomial.cpp:22:9: warning: variable 'gcfMonomial' of type 'Monomial' can be declared 'const' [misc-const-correctness]
        Monomial gcfMonomial(getGcfMonomialInMonomials(polynomial.getMonomials()));
        ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfPolynomial.cpp:22:18: note: FIX-IT applied suggested code changes
        Monomial gcfMonomial(getGcfMonomialInMonomials(polynomial.getMonomials()));
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfPolynomial.cpp:42:36: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int const originalSize(polynomialsToFactorize.size());
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfPolynomial.cpp:43:29: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int deltaSize = polynomialsToFactorize.size() - originalSize;
                            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfPolynomial.cpp:61:5: warning: variable 'shouldPutFactorizedPolynomials' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool shouldPutFactorizedPolynomials =
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfPolynomial.cpp:61:10: note: FIX-IT applied suggested code changes
    bool shouldPutFactorizedPolynomials =
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfPolynomial.cpp:98:21: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        deltaSize = polynomialsToFactorize.size() - originalSize;
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfPolynomial.cpp:109:21: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        deltaSize = polynomialsToFactorize.size() - originalSize;
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfPolynomial.cpp:120:21: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        deltaSize = polynomialsToFactorize.size() - originalSize;
                    ^
[75/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationOfTerm.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfTerm.cpp:20:13: warning: variable 'polynomialFactors' of type 'Polynomials' (aka 'vector<Polynomial>') can be declared 'const' [misc-const-correctness]
            Polynomials polynomialFactors(factorizeAPolynomial(simplifiedPolynomial));
            ^
                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfTerm.cpp:20:25: note: FIX-IT applied suggested code changes
            Polynomials polynomialFactors(factorizeAPolynomial(simplifiedPolynomial));
                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfTerm.cpp:26:17: warning: variable 'factors' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
                Terms factors(factorizeAnExpression(term.getAsExpression()));
                ^
                      const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationOfTerm.cpp:26:23: note: FIX-IT applied suggested code changes
                Terms factors(factorizeAnExpression(term.getAsExpression()));
                      ^
[76/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationUsingPatterns.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
[77/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Factorization/FactorizationUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/BaseRetriever.hpp:9:7: warning: class 'BaseRetriever' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRetriever {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationUtilities.cpp:52:5: warning: variable 'constant' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber constant(monomial.getCoefficient());
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationUtilities.cpp:52:16: note: FIX-IT applied suggested code changes
    AlbaNumber constant(monomial.getCoefficient());
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationUtilities.cpp:68:9: warning: variable 'areBothConstantIntegers' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool areBothConstantIntegers =
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationUtilities.cpp:68:14: note: FIX-IT applied suggested code changes
        bool areBothConstantIntegers =
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationUtilities.cpp:70:9: warning: variable 'areEitherConstantOne' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool areEitherConstantOne = first.getCoefficient() == 1 || second.getCoefficient() == 1;
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationUtilities.cpp:70:14: note: FIX-IT applied suggested code changes
        bool areEitherConstantOne = first.getCoefficient() == 1 || second.getCoefficient() == 1;
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationUtilities.cpp:74:9: warning: variable 'areAllExponentsOneOrZero' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool areAllExponentsOneOrZero = all_of(exponents.cbegin(), exponents.cend(), [](AlbaNumber const& exponent) {
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationUtilities.cpp:74:14: note: FIX-IT applied suggested code changes
        bool areAllExponentsOneOrZero = all_of(exponents.cbegin(), exponents.cend(), [](AlbaNumber const& exponent) {
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationUtilities.cpp:77:9: warning: variable 'areBothDegreeLessThanOne' of type 'bool' can be declared 'const' [misc-const-correctness]
        bool areBothDegreeLessThanOne = getDegree(first) <= 1 && getDegree(second) <= 1;
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Factorization\FactorizationUtilities.cpp:77:14: note: FIX-IT applied suggested code changes
        bool areBothDegreeLessThanOne = getDegree(first) <= 1 && getDegree(second) <= 1;
             ^
[78/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Functions/CommonFunctionLibrary.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\CommonFunctionLibrary.cpp:19:24: warning: avoid repeating the return type from the declaration; use a braced initializer list instead [modernize-return-braced-init-list]
                return AlbaNumber(ceil(number.getDouble()));
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\CommonFunctionLibrary.cpp:57:21: warning: variable 'lastNumber' of type 'int' can be declared 'const' [misc-const-correctness]
                    int lastNumber = static_cast<int>(number.getInteger());
                    ^
                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\CommonFunctionLibrary.cpp:57:25: note: FIX-IT applied suggested code changes
                    int lastNumber = static_cast<int>(number.getInteger());
                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\CommonFunctionLibrary.cpp:166:5: warning: variable 'amplitudeCopy' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber amplitudeCopy(amplitude);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\CommonFunctionLibrary.cpp:166:16: note: FIX-IT applied suggested code changes
    AlbaNumber amplitudeCopy(amplitude);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\CommonFunctionLibrary.cpp:167:5: warning: variable 'periodCopy' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber periodCopy(period);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\CommonFunctionLibrary.cpp:167:16: note: FIX-IT applied suggested code changes
    AlbaNumber periodCopy(period);
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\CommonFunctionLibrary.cpp:168:5: warning: variable 'phaseDifferenceCopy' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber phaseDifferenceCopy(phaseDifference);
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\CommonFunctionLibrary.cpp:168:16: note: FIX-IT applied suggested code changes
    AlbaNumber phaseDifferenceCopy(phaseDifference);
               ^
[79/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Functions/FunctionUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\FunctionUtilities.cpp:19:9: warning: variable 'substituteTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term substituteTerm(substitution.performSubstitutionTo(functionObject));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\FunctionUtilities.cpp:19:14: note: FIX-IT applied suggested code changes
        Term substituteTerm(substitution.performSubstitutionTo(functionObject));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\FunctionUtilities.cpp:30:5: warning: variable 'continuousFunctionNames' of type 'strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    strings continuousFunctionNames{"abs", "sin", "cos"};
    ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\FunctionUtilities.cpp:30:13: note: FIX-IT applied suggested code changes
    strings continuousFunctionNames{"abs", "sin", "cos"};
            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\FunctionUtilities.cpp:35:5: warning: variable 'continuousFunctionNames' of type 'strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    strings continuousFunctionNames{"sin", "cos", "tan", "csc", "sec", "cot"};
    ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\FunctionUtilities.cpp:35:13: note: FIX-IT applied suggested code changes
    strings continuousFunctionNames{"sin", "cos", "tan", "csc", "sec", "cot"};
            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\FunctionUtilities.cpp:40:5: warning: variable 'continuousFunctionNames' of type 'strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    strings continuousFunctionNames{"arcsin", "arccos", "arctan", "arccsc", "arcsec", "arccot"};
    ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\FunctionUtilities.cpp:40:13: note: FIX-IT applied suggested code changes
    strings continuousFunctionNames{"arcsin", "arccos", "arctan", "arccsc", "arcsec", "arccot"};
            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\FunctionUtilities.cpp:45:5: warning: variable 'continuousFunctionNames' of type 'strings' (aka 'vector<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
    strings continuousFunctionNames{"ln", "log"};
    ^
            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Functions\FunctionUtilities.cpp:45:13: note: FIX-IT applied suggested code changes
    strings continuousFunctionNames{"ln", "log"};
            ^
[80/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Geometry/ThreeDimensions/ThreeDimensionsUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:9:5: warning: variable 'xMinusX0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:9:10: note: FIX-IT applied suggested code changes
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:10:5: warning: variable 'yMinusY0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:10:10: note: FIX-IT applied suggested code changes
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:11:5: warning: variable 'zMinusZ0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:11:10: note: FIX-IT applied suggested code changes
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:12:5: warning: variable 'xSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:12:10: note: FIX-IT applied suggested code changes
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:13:5: warning: variable 'ySquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:13:10: note: FIX-IT applied suggested code changes
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:14:5: warning: variable 'zSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zSquared(createExpressionIfPossible({zMinusZ0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:14:10: note: FIX-IT applied suggested code changes
    Term zSquared(createExpressionIfPossible({zMinusZ0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:15:5: warning: variable 'aSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:15:10: note: FIX-IT applied suggested code changes
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:16:5: warning: variable 'bSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:16:10: note: FIX-IT applied suggested code changes
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:17:5: warning: variable 'cSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term cSquared(createExpressionIfPossible({c, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:17:10: note: FIX-IT applied suggested code changes
    Term cSquared(createExpressionIfPossible({c, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:18:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:18:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:24:5: warning: variable 'xMinusX0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:24:10: note: FIX-IT applied suggested code changes
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:25:5: warning: variable 'yMinusY0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:25:10: note: FIX-IT applied suggested code changes
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:26:5: warning: variable 'zMinusZ0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:26:10: note: FIX-IT applied suggested code changes
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:27:5: warning: variable 'xSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:27:10: note: FIX-IT applied suggested code changes
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:28:5: warning: variable 'ySquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:28:10: note: FIX-IT applied suggested code changes
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:29:5: warning: variable 'zSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zSquared(createExpressionIfPossible({zMinusZ0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:29:10: note: FIX-IT applied suggested code changes
    Term zSquared(createExpressionIfPossible({zMinusZ0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:30:5: warning: variable 'aSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:30:10: note: FIX-IT applied suggested code changes
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:31:5: warning: variable 'bSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:31:10: note: FIX-IT applied suggested code changes
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:32:5: warning: variable 'cSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term cSquared(createExpressionIfPossible({c, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:32:10: note: FIX-IT applied suggested code changes
    Term cSquared(createExpressionIfPossible({c, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:33:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:33:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:39:5: warning: variable 'xMinusX0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:39:10: note: FIX-IT applied suggested code changes
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:40:5: warning: variable 'yMinusY0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:40:10: note: FIX-IT applied suggested code changes
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:41:5: warning: variable 'zMinusZ0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:41:10: note: FIX-IT applied suggested code changes
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:42:5: warning: variable 'xSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:42:10: note: FIX-IT applied suggested code changes
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:43:5: warning: variable 'ySquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:43:10: note: FIX-IT applied suggested code changes
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:44:5: warning: variable 'zSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zSquared(createExpressionIfPossible({zMinusZ0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:44:10: note: FIX-IT applied suggested code changes
    Term zSquared(createExpressionIfPossible({zMinusZ0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:45:5: warning: variable 'aSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:45:10: note: FIX-IT applied suggested code changes
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:46:5: warning: variable 'bSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:46:10: note: FIX-IT applied suggested code changes
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:47:5: warning: variable 'cSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term cSquared(createExpressionIfPossible({c, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:47:10: note: FIX-IT applied suggested code changes
    Term cSquared(createExpressionIfPossible({c, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:48:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:48:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:50:5: warning: variable 'oneWithSign' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term oneWithSign = isOneNegative ? -1 : 1;
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:50:10: note: FIX-IT applied suggested code changes
    Term oneWithSign = isOneNegative ? -1 : 1;
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:55:5: warning: variable 'xMinusX0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:55:10: note: FIX-IT applied suggested code changes
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:56:5: warning: variable 'yMinusY0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:56:10: note: FIX-IT applied suggested code changes
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:57:5: warning: variable 'zMinusZ0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:57:10: note: FIX-IT applied suggested code changes
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:58:5: warning: variable 'xSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:58:10: note: FIX-IT applied suggested code changes
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:59:5: warning: variable 'ySquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:59:10: note: FIX-IT applied suggested code changes
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:60:5: warning: variable 'aSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:60:10: note: FIX-IT applied suggested code changes
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:61:5: warning: variable 'bSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:61:10: note: FIX-IT applied suggested code changes
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:62:5: warning: variable 'zOverC' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zOverC(createExpressionIfPossible({zMinusZ0, "/", c}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:62:10: note: FIX-IT applied suggested code changes
    Term zOverC(createExpressionIfPossible({zMinusZ0, "/", c}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:63:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible({xSquared, "/", aSquared, "+", ySquared, "/", bSquared}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:63:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible({xSquared, "/", aSquared, "+", ySquared, "/", bSquared}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:69:5: warning: variable 'xMinusX0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:69:10: note: FIX-IT applied suggested code changes
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:70:5: warning: variable 'yMinusY0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:70:10: note: FIX-IT applied suggested code changes
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:71:5: warning: variable 'zMinusZ0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:71:10: note: FIX-IT applied suggested code changes
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:72:5: warning: variable 'xSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:72:10: note: FIX-IT applied suggested code changes
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:73:5: warning: variable 'ySquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:73:10: note: FIX-IT applied suggested code changes
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:74:5: warning: variable 'aSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:74:10: note: FIX-IT applied suggested code changes
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:75:5: warning: variable 'bSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:75:10: note: FIX-IT applied suggested code changes
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:76:5: warning: variable 'zOverC' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zOverC(createExpressionIfPossible({zMinusZ0, "/", c}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:76:10: note: FIX-IT applied suggested code changes
    Term zOverC(createExpressionIfPossible({zMinusZ0, "/", c}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:77:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible({ySquared, "/", bSquared, "-", xSquared, "/", aSquared}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:77:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible({ySquared, "/", bSquared, "-", xSquared, "/", aSquared}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:83:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible({a, "*", x, "+", b, "*", y, "+", c, "*", z, "+", d}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:83:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible({a, "*", x, "+", b, "*", y, "+", c, "*", z, "+", d}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:88:5: warning: variable 'xMinusX0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:88:10: note: FIX-IT applied suggested code changes
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:89:5: warning: variable 'yMinusY0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:89:10: note: FIX-IT applied suggested code changes
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:90:5: warning: variable 'zMinusZ0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:90:10: note: FIX-IT applied suggested code changes
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:91:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible({a, "*", xMinusX0, "+", b, "*", yMinusY0, "+", c, "*", zMinusZ0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:91:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible({a, "*", xMinusX0, "+", b, "*", yMinusY0, "+", c, "*", zMinusZ0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:96:5: warning: variable 'xMinusX0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:96:10: note: FIX-IT applied suggested code changes
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:97:5: warning: variable 'yMinusY0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:97:10: note: FIX-IT applied suggested code changes
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:98:5: warning: variable 'zMinusZ0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:98:10: note: FIX-IT applied suggested code changes
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:99:5: warning: variable 'xSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:99:10: note: FIX-IT applied suggested code changes
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:100:5: warning: variable 'ySquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:100:10: note: FIX-IT applied suggested code changes
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:101:5: warning: variable 'zSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zSquared(createExpressionIfPossible({zMinusZ0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:101:10: note: FIX-IT applied suggested code changes
    Term zSquared(createExpressionIfPossible({zMinusZ0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:102:5: warning: variable 'rSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term rSquared(createExpressionIfPossible({r, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:102:10: note: FIX-IT applied suggested code changes
    Term rSquared(createExpressionIfPossible({r, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:103:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible({xSquared, "+", ySquared, "+", zSquared}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:103:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible({xSquared, "+", ySquared, "+", zSquared}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:110:5: warning: variable 'xMinusX0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:110:10: note: FIX-IT applied suggested code changes
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:111:5: warning: variable 'yMinusY0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:111:10: note: FIX-IT applied suggested code changes
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:112:5: warning: variable 'zMinusZ0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:112:10: note: FIX-IT applied suggested code changes
    Term zMinusZ0(createExpressionIfPossible({z, "-", z0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:113:5: warning: variable 'xSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xSide(createExpressionIfPossible({xMinusX0, "/", a}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:113:10: note: FIX-IT applied suggested code changes
    Term xSide(createExpressionIfPossible({xMinusX0, "/", a}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:114:5: warning: variable 'ySide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term ySide(createExpressionIfPossible({yMinusY0, "/", b}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:114:10: note: FIX-IT applied suggested code changes
    Term ySide(createExpressionIfPossible({yMinusY0, "/", b}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:115:5: warning: variable 'zSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term zSide(createExpressionIfPossible({zMinusZ0, "/", c}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\ThreeDimensions\ThreeDimensionsUtilities.cpp:115:10: note: FIX-IT applied suggested code changes
    Term zSide(createExpressionIfPossible({zMinusZ0, "/", c}));
         ^
[81/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Geometry/TwoDimensions/TwoDimensionsUtilities.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:14:5: warning: variable 'xMinusX0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:14:10: note: FIX-IT applied suggested code changes
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:15:5: warning: variable 'yMinusY0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:15:10: note: FIX-IT applied suggested code changes
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:16:5: warning: variable 'xSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:16:10: note: FIX-IT applied suggested code changes
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:17:5: warning: variable 'ySquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:17:10: note: FIX-IT applied suggested code changes
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:18:5: warning: variable 'rSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term rSquared(createExpressionIfPossible({r, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:18:10: note: FIX-IT applied suggested code changes
    Term rSquared(createExpressionIfPossible({r, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:19:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible({xSquared, "+", ySquared}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:19:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible({xSquared, "+", ySquared}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:25:5: warning: variable 'xMinusX0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:25:10: note: FIX-IT applied suggested code changes
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:26:5: warning: variable 'yMinusY0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:26:10: note: FIX-IT applied suggested code changes
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:27:5: warning: variable 'xSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:27:10: note: FIX-IT applied suggested code changes
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:28:5: warning: variable 'ySquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:28:10: note: FIX-IT applied suggested code changes
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:29:5: warning: variable 'aSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:29:10: note: FIX-IT applied suggested code changes
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:30:5: warning: variable 'bSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:30:10: note: FIX-IT applied suggested code changes
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:31:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible({xSquared, "/", aSquared, "+", ySquared, "/", bSquared}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:31:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible({xSquared, "/", aSquared, "+", ySquared, "/", bSquared}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:36:5: warning: variable 'xMinusX0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:36:10: note: FIX-IT applied suggested code changes
    Term xMinusX0(createExpressionIfPossible({x, "-", x0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:37:5: warning: variable 'yMinusY0' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:37:10: note: FIX-IT applied suggested code changes
    Term yMinusY0(createExpressionIfPossible({y, "-", y0}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:38:5: warning: variable 'xSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:38:10: note: FIX-IT applied suggested code changes
    Term xSquared(createExpressionIfPossible({xMinusX0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:39:5: warning: variable 'ySquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:39:10: note: FIX-IT applied suggested code changes
    Term ySquared(createExpressionIfPossible({yMinusY0, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:40:5: warning: variable 'aSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:40:10: note: FIX-IT applied suggested code changes
    Term aSquared(createExpressionIfPossible({a, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:41:5: warning: variable 'bSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:41:10: note: FIX-IT applied suggested code changes
    Term bSquared(createExpressionIfPossible({b, "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:42:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible({xSquared, "/", aSquared, "-", ySquared, "/", bSquared}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:42:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible({xSquared, "/", aSquared, "-", ySquared, "/", bSquared}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:53:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible({a, "+", b, "*", trigPart}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:53:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible({a, "+", b, "*", trigPart}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:54:5: warning: variable 'rightHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term rightHandSide(r);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:54:10: note: FIX-IT applied suggested code changes
    Term rightHandSide(r);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:59:5: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term leftHandSide(createExpressionIfPossible({a, "*", x, "+", b, "*", y, "+", c}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:59:10: note: FIX-IT applied suggested code changes
    Term leftHandSide(createExpressionIfPossible({a, "*", x, "+", b, "*", y, "+", c}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:66:9: warning: variable 'xSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term xSquared(createExpressionIfPossible({x, "^", 2}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:66:14: note: FIX-IT applied suggested code changes
        Term xSquared(createExpressionIfPossible({x, "^", 2}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:67:9: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term leftHandSide(createExpressionIfPossible({a, "*", xSquared, "+", b, "*", x, "+", c}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:67:14: note: FIX-IT applied suggested code changes
        Term leftHandSide(createExpressionIfPossible({a, "*", xSquared, "+", b, "*", x, "+", c}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:68:9: warning: variable 'rightHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term rightHandSide(y);
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:68:14: note: FIX-IT applied suggested code changes
        Term rightHandSide(y);
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:71:9: warning: variable 'ySquared' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term ySquared(createExpressionIfPossible({y, "^", 2}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:71:14: note: FIX-IT applied suggested code changes
        Term ySquared(createExpressionIfPossible({y, "^", 2}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:72:9: warning: variable 'leftHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term leftHandSide(createExpressionIfPossible({a, "*", ySquared, "+", b, "*", y, "+", c}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:72:14: note: FIX-IT applied suggested code changes
        Term leftHandSide(createExpressionIfPossible({a, "*", ySquared, "+", b, "*", y, "+", c}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:73:9: warning: variable 'rightHandSide' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term rightHandSide(x);
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:73:14: note: FIX-IT applied suggested code changes
        Term rightHandSide(x);
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:82:5: warning: variable 'topCircleArea' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term topCircleArea(createExpressionIfPossible({getPiAsATerm(), "*", "rt", "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:82:10: note: FIX-IT applied suggested code changes
    Term topCircleArea(createExpressionIfPossible({getPiAsATerm(), "*", "rt", "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:83:5: warning: variable 'bottomCircleArea' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term bottomCircleArea(createExpressionIfPossible({getPiAsATerm(), "*", "rb", "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:83:10: note: FIX-IT applied suggested code changes
    Term bottomCircleArea(createExpressionIfPossible({getPiAsATerm(), "*", "rb", "^", 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:84:5: warning: variable 'sideArea' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term sideArea(createExpressionIfPossible(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:84:10: note: FIX-IT applied suggested code changes
    Term sideArea(createExpressionIfPossible(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:113:5: warning: variable 'radiusPart' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term radiusPart(createExpressionIfPossible({"rt", "^", 2, "+", "rt", "*", "rb", "+", "rb", "^", 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Geometry\TwoDimensions\TwoDimensionsUtilities.cpp:113:10: note: FIX-IT applied suggested code changes
    Term radiusPart(createExpressionIfPossible({"rt", "^", 2, "+", "rt", "*", "rb", "+", "rb", "^", 2}));
         ^
[82/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Induction/ProofByInduction.cpp.obj
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:22:5: warning: variable 'valueFromManual' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber valueFromManual(m_manualCalculation(value));
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:22:16: note: FIX-IT applied suggested code changes
    AlbaNumber valueFromManual(m_manualCalculation(value));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:24:5: warning: variable 'substitution' of type 'SubstitutionOfVariablesToValues' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToValues substitution{{m_variableName, value}};
    ^
                                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:24:37: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToValues substitution{{m_variableName, value}};
                                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:25:5: warning: variable 'guessTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term guessTerm(substitution.performSubstitutionTo(m_guessExpression));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:25:10: note: FIX-IT applied suggested code changes
    Term guessTerm(substitution.performSubstitutionTo(m_guessExpression));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:33:5: warning: variable 'substitutionForNextStep' of type 'SubstitutionOfVariablesToTerms' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToTerms substitutionForNextStep{
    ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:33:36: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToTerms substitutionForNextStep{
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:40:5: warning: variable 'substitutionOfInitialValue' of type 'SubstitutionOfVariablesToTerms' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToTerms substitutionOfInitialValue{{m_variableName, initialValue}};
    ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:40:36: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToTerms substitutionOfInitialValue{{m_variableName, initialValue}};
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:41:5: warning: variable 'substitutionOfNextValue' of type 'SubstitutionOfVariablesToTerms' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToTerms substitutionOfNextValue{{m_variableName, nextValue}};
    ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Induction\ProofByInduction.cpp:41:36: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToTerms substitutionOfNextValue{{m_variableName, nextValue}};
                                   ^
[83/311] Building CXX object CMakeFiles/AprgAlgebra.dir/src/Algebra/Integration/Integration.cpp.obj
FAILED: CMakeFiles/AprgAlgebra.dir/src/Algebra/Integration/Integration.cpp.obj 
"C:\Program Files\CMake\bin\cmake.exe" -E __run_co_compile --tidy="C:/Program Files/LLVM/bin/clang-tidy.exe;--fix;--header-filter=D:\/a\/aprg\/aprg\/AprgAlgebra\/AprgAlgebra.*;--config-file=D:/a/aprg/aprg/Clang/ClangTidyFiles/autofix.clang-tidy;--extra-arg-before=--driver-mode=g++" --source=D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp -- C:\PROGRA~1\LLVM\bin\CLANG_~1.EXE -DAPRG_CODE_REVISION=\"aa413d4c9b589fa6eba12a5d1d875a5ba3caef68\" -DAPRG_DEBUG -DAPRG_DIR=\"D:/a/aprg/aprg\" -DAPRG_TEST_MODE_ON -DOS_WINDOWS -ID:/a/aprg/aprg/AprgCommon/AprgCommon/src -ID:/a/aprg/aprg/AprgCommon/AprgCommon/srcWindows -ID:/a/aprg/aprg/AprgCommon/AprgCommon/tstUtilities -ID:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src -ID:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/tst -ID:/a/aprg/aprg/gtest/gtest/googletest/include -ID:/a/aprg/aprg/gtest/gtest/googletest -Wall -Wextra -pedantic -fcolor-diagnostics -std=c++20  -O0 -g -Xclang -gcodeview -D_DEBUG -D_DLL -D_MT -Xclang --dependent-lib=msvcrtd -MD -MT CMakeFiles/AprgAlgebra.dir/src/Algebra/Integration/Integration.cpp.obj -MF CMakeFiles\AprgAlgebra.dir\src\Algebra\Integration\Integration.cpp.obj.d -o CMakeFiles/AprgAlgebra.dir/src/Algebra/Integration/Integration.cpp.obj -c D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src/Algebra/Integration/Integration.cpp
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Retrieval/BaseRetriever.hpp:9:7: warning: class 'BaseRetriever' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseRetriever {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTerm.hpp:7:7: warning: class 'BaseTerm' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTerm {
      ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src\Algebra/Term/TermTypes/BaseTermData.hpp:5:7: warning: class 'BaseTermData' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class BaseTermData {
      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:100:5: warning: variable 'exponentForVariable' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
    AlbaNumber exponentForVariable = monomial.getExponentForVariable(getCurrentVariableToIntegrate());
    ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:100:16: note: FIX-IT applied suggested code changes
    AlbaNumber exponentForVariable = monomial.getExponentForVariable(getCurrentVariableToIntegrate());
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:132:5: warning: variable 'integratedTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term integratedTerm(integrateAtDefiniteValues(term, lowerEnd, higherEnd));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:132:10: note: FIX-IT applied suggested code changes
    Term integratedTerm(integrateAtDefiniteValues(term, lowerEnd, higherEnd));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:189:9: warning: variable 'termRaiseToANumber' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
        TermRaiseToANumber termRaiseToANumber(createTermRaiseToANumberFromTerm(factor));
        ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:189:28: note: FIX-IT applied suggested code changes
        TermRaiseToANumber termRaiseToANumber(createTermRaiseToANumberFromTerm(factor));
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:193:13: warning: variable 'polynomialFactor' of type 'Polynomial' can be declared 'const' [misc-const-correctness]
            Polynomial polynomialFactor(createPolynomialIfPossible(factorsToProcess));
            ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:193:24: note: FIX-IT applied suggested code changes
            Polynomial polynomialFactor(createPolynomialIfPossible(factorsToProcess));
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:194:13: warning: variable 'maxDegreeOfFactor' of type 'int' can be declared 'const' [misc-const-correctness]
            int maxDegreeOfFactor = static_cast<int>(getMaxDegree(polynomialFactor).getInteger());
            ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:194:17: note: FIX-IT applied suggested code changes
            int maxDegreeOfFactor = static_cast<int>(getMaxDegree(polynomialFactor).getInteger());
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:195:13: warning: variable 'denominatorExponent' of type 'int' can be declared 'const' [misc-const-correctness]
            int denominatorExponent = static_cast<int>(negatedExponent.getInteger());
            ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:195:17: note: FIX-IT applied suggested code changes
            int denominatorExponent = static_cast<int>(negatedExponent.getInteger());
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:227:40: warning: narrowing conversion from '_Iter_diff_t<_Tree_const_iterator<_Tree_val<_Tree_simple_types<AlbaNumber>>>>' (aka 'long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                    exponentPosition = distance(exponents.cbegin(), itPosition);
                                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:232:40: warning: narrowing conversion from '_Iter_diff_t<_Tree_const_iterator<_Tree_val<_Tree_simple_types<basic_string<char, char_traits<char>, allocator<char>>>>>>' (aka 'long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                    variablePosition = distance(newVariableNames.cbegin(), itPosition);
                                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:253:40: warning: narrowing conversion from '_Iter_diff_t<_Tree_const_iterator<_Tree_val<_Tree_simple_types<AlbaNumber>>>>' (aka 'long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                    exponentPosition = distance(exponents.cbegin(), itPosition);
                                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:302:5: warning: variable 'inputTimes2' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term inputTimes2(inputTerm * 2);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:302:10: note: FIX-IT applied suggested code changes
    Term inputTimes2(inputTerm * 2);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:303:5: warning: variable 'equivalentToSineSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term equivalentToSineSquared(getSineSquaredOfHalvedValue(inputTimes2));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:303:10: note: FIX-IT applied suggested code changes
    Term equivalentToSineSquared(getSineSquaredOfHalvedValue(inputTimes2));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:311:5: warning: variable 'inputTimes2' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term inputTimes2(inputTerm * 2);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:311:10: note: FIX-IT applied suggested code changes
    Term inputTimes2(inputTerm * 2);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:312:5: warning: variable 'equivalentToCosineSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term equivalentToCosineSquared(getCosineSquaredOfHalvedValue(inputTimes2));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:312:10: note: FIX-IT applied suggested code changes
    Term equivalentToCosineSquared(getCosineSquaredOfHalvedValue(inputTimes2));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:319:5: warning: variable 'termToMultiply' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term termToMultiply(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:319:10: note: FIX-IT applied suggested code changes
    Term termToMultiply(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:326:5: warning: variable 'termToMultiply' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term termToMultiply(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:326:10: note: FIX-IT applied suggested code changes
    Term termToMultiply(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:332:5: warning: variable 'termToMultiply' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term termToMultiply(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:332:10: note: FIX-IT applied suggested code changes
    Term termToMultiply(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:339:5: warning: variable 'termToMultiply' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term termToMultiply(
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:339:10: note: FIX-IT applied suggested code changes
    Term termToMultiply(
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:349:9: warning: variable 'scopeObject' of type 'SimplificationOfExpression::ScopeObject' can be declared 'const' [misc-const-correctness]
        SimplificationOfExpression::ScopeObject scopeObject;
        ^
                                                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:349:49: note: FIX-IT applied suggested code changes
        SimplificationOfExpression::ScopeObject scopeObject;
                                                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:358:9: warning: variable 'termsOverTerms' of type 'TermsOverTerms' can be declared 'const' [misc-const-correctness]
        TermsOverTerms termsOverTerms(createTermsOverTermsFromTerm(term));
        ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:358:24: note: FIX-IT applied suggested code changes
        TermsOverTerms termsOverTerms(createTermsOverTermsFromTerm(term));
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:359:9: warning: variable 'termsWithExponentsToCheck' of type 'TermsRaiseToNumbers' can be declared 'const' [misc-const-correctness]
        TermsRaiseToNumbers termsWithExponentsToCheck(termsOverTerms.getTermsRaiseToNumbers());
        ^
                            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:359:29: note: FIX-IT applied suggested code changes
        TermsRaiseToNumbers termsWithExponentsToCheck(termsOverTerms.getTermsRaiseToNumbers());
                            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:375:9: warning: variable 'newTrigFunctionsInputTermToExponents' of type 'InputTermToTrigonometryFunctionExponentsMap' (aka 'map<Term, TrigonometryFunctionExponents>') can be declared 'const' [misc-const-correctness]
        InputTermToTrigonometryFunctionExponentsMap newTrigFunctionsInputTermToExponents(
        ^
                                                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:375:53: note: FIX-IT applied suggested code changes
        InputTermToTrigonometryFunctionExponentsMap newTrigFunctionsInputTermToExponents(
                                                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:379:13: warning: variable 'newExponents' of type 'TrigonometryFunctionExponents' can be declared 'const' [misc-const-correctness]
            TrigonometryFunctionExponents newExponents(getTrigonometricExponentsSuitableForIntegration(exponents));
            ^
                                          const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:379:43: note: FIX-IT applied suggested code changes
            TrigonometryFunctionExponents newExponents(getTrigonometricExponentsSuitableForIntegration(exponents));
                                          ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:388:13: warning: variable 'termsOverTerms' of type 'TermsOverTerms' can be declared 'const' [misc-const-correctness]
            TermsOverTerms termsOverTerms(newTerms.getTermWithDetailsInMultiplicationAndDivisionOperation());
            ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:388:28: note: FIX-IT applied suggested code changes
            TermsOverTerms termsOverTerms(newTerms.getTermWithDetailsInMultiplicationAndDivisionOperation());
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:499:5: warning: variable 'substitutionVariableToTerm' of type 'SubstitutionOfVariablesToTerms' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToTerms substitutionVariableToTerm({{newVariableName, termForNewVariable}});
    ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:499:36: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToTerms substitutionVariableToTerm({{newVariableName, termForNewVariable}});
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:512:5: warning: variable 'substitutionThetaToUForVariableToTerm' of type 'SubstitutionOfVariablesToTerms' can be declared 'const' [misc-const-correctness]
    SubstitutionOfVariablesToTerms substitutionThetaToUForVariableToTerm(
    ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:512:36: note: FIX-IT applied suggested code changes
    SubstitutionOfVariablesToTerms substitutionThetaToUForVariableToTerm(
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:536:9: warning: variable 'hypotenuseSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term hypotenuseSquared(createExpressionIfPossible({a, "^", 2, "+", u, "^", 2}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:536:14: note: FIX-IT applied suggested code changes
        Term hypotenuseSquared(createExpressionIfPossible({a, "^", 2, "+", u, "^", 2}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:545:9: warning: variable 'adjacentSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term adjacentSquared(createExpressionIfPossible({a, "^", 2, "-", u, "^", 2}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:545:14: note: FIX-IT applied suggested code changes
        Term adjacentSquared(createExpressionIfPossible({a, "^", 2, "-", u, "^", 2}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:554:9: warning: variable 'oppositeSquared' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term oppositeSquared(createExpressionIfPossible({u, "^", 2, "-", a, "^", 2}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:554:14: note: FIX-IT applied suggested code changes
        Term oppositeSquared(createExpressionIfPossible({u, "^", 2, "-", a, "^", 2}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:591:9: warning: variable 'cosPositiveExponents' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber cosPositiveExponents(getAbsoluteValue(exponents.cosExponent));
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:591:20: note: FIX-IT applied suggested code changes
        AlbaNumber cosPositiveExponents(getAbsoluteValue(exponents.cosExponent));
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:602:9: warning: variable 'sinPositiveExponents' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber sinPositiveExponents(getAbsoluteValue(exponents.sinExponent));
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:602:20: note: FIX-IT applied suggested code changes
        AlbaNumber sinPositiveExponents(getAbsoluteValue(exponents.sinExponent));
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:638:5: warning: variable 'converter' of type 'StringConverterWithFormatting' can be declared 'const' [misc-const-correctness]
    static StringConverterWithFormatting converter(3, '0');
    ^
                                         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:638:42: note: FIX-IT applied suggested code changes
    static StringConverterWithFormatting converter(3, '0');
                                         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:675:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(getCurrentVariableToIntegrate());
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:675:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(getCurrentVariableToIntegrate());
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:676:5: warning: variable 'derivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term derivative(differentiation.differentiate(termForNewVariable));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:676:10: note: FIX-IT applied suggested code changes
    Term derivative(differentiation.differentiate(termForNewVariable));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:677:5: warning: variable 'termForSubstitution' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term termForSubstitution = mainTerm / derivative;
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:677:10: note: FIX-IT applied suggested code changes
    Term termForSubstitution = mainTerm / derivative;
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:678:5: warning: variable 'newVariableName' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string newVariableName(createVariableNameForSubstitution(termForNewVariable));
    ^
           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:678:12: note: FIX-IT applied suggested code changes
    string newVariableName(createVariableNameForSubstitution(termForNewVariable));
           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:680:5: warning: variable 'substitutionOfNewVariableDirectMatch' of type 'SubstitutionOfTermsToTerms' can be declared 'const' [misc-const-correctness]
    SubstitutionOfTermsToTerms substitutionOfNewVariableDirectMatch({{termForNewVariable, newVariable}});
    ^
                               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:680:32: note: FIX-IT applied suggested code changes
    SubstitutionOfTermsToTerms substitutionOfNewVariableDirectMatch({{termForNewVariable, newVariable}});
                               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:683:9: warning: variable 'isolationForOldVariable' of type 'IsolationOfOneVariableOnEqualityEquation' can be declared 'const' [misc-const-correctness]
        IsolationOfOneVariableOnEqualityEquation isolationForOldVariable(
        ^
                                                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:683:50: note: FIX-IT applied suggested code changes
        IsolationOfOneVariableOnEqualityEquation isolationForOldVariable(
                                                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:691:13: warning: variable 'exponentForOldVariable' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
            AlbaNumber exponentForOldVariable(
            ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:691:24: note: FIX-IT applied suggested code changes
            AlbaNumber exponentForOldVariable(
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:697:13: warning: variable 'substitutionFromOldVariableToNewVariable' of type 'SubstitutionOfVariablesToTerms' can be declared 'const' [misc-const-correctness]
            SubstitutionOfVariablesToTerms substitutionFromOldVariableToNewVariable(
            ^
                                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:697:44: note: FIX-IT applied suggested code changes
            SubstitutionOfVariablesToTerms substitutionFromOldVariableToNewVariable(
                                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:708:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(details.thetaName);
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:708:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(details.thetaName);
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:709:5: warning: variable 'duEquivalent' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term duEquivalent(differentiation.differentiate(details.uEquivalent));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:709:10: note: FIX-IT applied suggested code changes
    Term duEquivalent(differentiation.differentiate(details.uEquivalent));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:710:5: warning: variable 'isolation' of type 'IsolationOfOneVariableOnEqualityEquation' can be declared 'const' [misc-const-correctness]
    IsolationOfOneVariableOnEqualityEquation isolation(Equation(details.u, "=", details.uEquivalent));
    ^
                                             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:710:46: note: FIX-IT applied suggested code changes
    IsolationOfOneVariableOnEqualityEquation isolation(Equation(details.u, "=", details.uEquivalent));
                                             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:716:9: warning: variable 'exponentForOldVariable' of type 'AlbaNumber' can be declared 'const' [misc-const-correctness]
        AlbaNumber exponentForOldVariable(
        ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:716:20: note: FIX-IT applied suggested code changes
        AlbaNumber exponentForOldVariable(
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:722:9: warning: variable 'substitutionUToThetaForTermToTerm' of type 'SubstitutionOfTermsToTerms' can be declared 'const' [misc-const-correctness]
        SubstitutionOfTermsToTerms substitutionUToThetaForTermToTerm(
        ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:722:36: note: FIX-IT applied suggested code changes
        SubstitutionOfTermsToTerms substitutionUToThetaForTermToTerm(
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:724:9: warning: variable 'substitutionUToThetaForVariableToTerm' of type 'SubstitutionOfVariablesToTerms' can be declared 'const' [misc-const-correctness]
        SubstitutionOfVariablesToTerms substitutionUToThetaForVariableToTerm(
        ^
                                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:724:40: note: FIX-IT applied suggested code changes
        SubstitutionOfVariablesToTerms substitutionUToThetaForVariableToTerm(
                                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:735:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(getCurrentVariableToIntegrate());
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:735:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(getCurrentVariableToIntegrate());
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:768:17: warning: variable 'termRaiseToTerms' of type 'TermRaiseToTerms' can be declared 'const' [misc-const-correctness]
                TermRaiseToTerms termRaiseToTerms(expression.getTermsWithAssociation().getTermsWithDetails());
                ^
                                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:768:34: note: FIX-IT applied suggested code changes
                TermRaiseToTerms termRaiseToTerms(expression.getTermsWithAssociation().getTermsWithDetails());
                                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:869:13: warning: variable 'termRaiseToTerms' of type 'TermRaiseToTerms' can be declared 'const' [misc-const-correctness]
            TermRaiseToTerms termRaiseToTerms(expression.getTermsWithAssociation().getTermsWithDetails());
            ^
                             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:869:30: note: FIX-IT applied suggested code changes
            TermRaiseToTerms termRaiseToTerms(expression.getTermsWithAssociation().getTermsWithDetails());
                             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:871:13: warning: variable 'exponent' of type 'Term' can be declared 'const' [misc-const-correctness]
            Term exponent(termRaiseToTerms.getCombinedExponents());
            ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:871:18: note: FIX-IT applied suggested code changes
            Term exponent(termRaiseToTerms.getCombinedExponents());
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:872:13: warning: variable 'combinedBaseAndExponent' of type 'Term' can be declared 'const' [misc-const-correctness]
            Term combinedBaseAndExponent(termRaiseToTerms.getCombinedTerm());
            ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:872:18: note: FIX-IT applied suggested code changes
            Term combinedBaseAndExponent(termRaiseToTerms.getCombinedTerm());
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:881:13: warning: variable 'oldTermRaiseToANumber' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
            TermRaiseToANumber oldTermRaiseToANumber(createTermRaiseToANumberFromExpression(expression));
            ^
                               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:881:32: note: FIX-IT applied suggested code changes
            TermRaiseToANumber oldTermRaiseToANumber(createTermRaiseToANumberFromExpression(expression));
                               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:918:9: warning: variable 'integratedTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term integratedTerm(integrateInternallyWithPurpose(currentTerm, IntegrationPurpose::NoChange));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:918:14: note: FIX-IT applied suggested code changes
        Term integratedTerm(integrateInternallyWithPurpose(currentTerm, IntegrationPurpose::NoChange));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:938:5: warning: variable 'firstTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstTerm(termRaiseToTerms.getBase());
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:938:10: note: FIX-IT applied suggested code changes
    Term firstTerm(termRaiseToTerms.getBase());
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:939:5: warning: variable 'secondTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term secondTerm(termRaiseToTerms.getCombinedExponents());
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:939:10: note: FIX-IT applied suggested code changes
    Term secondTerm(termRaiseToTerms.getCombinedExponents());
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:940:5: warning: variable 'isFirstAChangingTerm' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isFirstAChangingTerm = isChangingTerm(firstTerm);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:940:10: note: FIX-IT applied suggested code changes
    bool isFirstAChangingTerm = isChangingTerm(firstTerm);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:941:5: warning: variable 'isSecondAChangingTerm' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isSecondAChangingTerm = isChangingTerm(secondTerm);
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:941:10: note: FIX-IT applied suggested code changes
    bool isSecondAChangingTerm = isChangingTerm(secondTerm);
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:961:9: warning: variable 'nonChangingTermCombined' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term nonChangingTermCombined(createTermWithMultiplicationAndDivisionTermsWithDetails(nonChangingTerms));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:961:14: note: FIX-IT applied suggested code changes
        Term nonChangingTermCombined(createTermWithMultiplicationAndDivisionTermsWithDetails(nonChangingTerms));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:962:9: warning: variable 'changingTermCombined' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term changingTermCombined(createTermWithMultiplicationAndDivisionTermsWithDetails(changingTerms));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:962:14: note: FIX-IT applied suggested code changes
        Term changingTermCombined(createTermWithMultiplicationAndDivisionTermsWithDetails(changingTerms));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:963:9: warning: variable 'integratedChangingTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term integratedChangingTerm(integrateInternallyWithPurpose(changingTermCombined, IntegrationPurpose::NoChange));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:963:14: note: FIX-IT applied suggested code changes
        Term integratedChangingTerm(integrateInternallyWithPurpose(changingTermCombined, IntegrationPurpose::NoChange));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:974:5: warning: variable 'termsOverTerms' of type 'TermsOverTerms' can be declared 'const' [misc-const-correctness]
    TermsOverTerms termsOverTerms(changingTerms);
    ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:974:20: note: FIX-IT applied suggested code changes
    TermsOverTerms termsOverTerms(changingTerms);
                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:975:5: warning: variable 'termsWithExponentsToCheck' of type 'TermsRaiseToNumbers' can be declared 'const' [misc-const-correctness]
    TermsRaiseToNumbers termsWithExponentsToCheck(termsOverTerms.getTermsRaiseToNumbers());
    ^
                        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:975:25: note: FIX-IT applied suggested code changes
    TermsRaiseToNumbers termsWithExponentsToCheck(termsOverTerms.getTermsRaiseToNumbers());
                        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1009:13: warning: variable 'isExponentGreaterThan1' of type 'bool' can be declared 'const' [misc-const-correctness]
            bool isExponentGreaterThan1 = exponentValue.isIntegerType() && exponentValue > 1;
            ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1009:18: note: FIX-IT applied suggested code changes
            bool isExponentGreaterThan1 = exponentValue.isIntegerType() && exponentValue > 1;
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1049:5: warning: variable 'subTerms' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
    Terms subTerms(retrieveSubTerms(simplifiedTerm));
    ^
          const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1049:11: note: FIX-IT applied suggested code changes
    Terms subTerms(retrieveSubTerms(simplifiedTerm));
          ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1065:9: warning: variable 'newVariableName' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string newVariableName(createVariableNameForSubstitution(termForNewVariable));
        ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1065:16: note: FIX-IT applied suggested code changes
        string newVariableName(createVariableNameForSubstitution(termForNewVariable));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1066:9: warning: variable 'integratedTermWithNewVariable' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term integratedTermWithNewVariable(integrateIntenallyWithNewVariable(
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1066:14: note: FIX-IT applied suggested code changes
        Term integratedTermWithNewVariable(integrateIntenallyWithNewVariable(
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1078:9: warning: variable 'subTerms' of type 'Terms' (aka 'vector<Term>') can be declared 'const' [misc-const-correctness]
        Terms subTerms(retrieveSubTerms(simplifiedTerm));
        ^
              const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1078:15: note: FIX-IT applied suggested code changes
        Terms subTerms(retrieveSubTerms(simplifiedTerm));
              ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1117:9: warning: variable 'firstAndSecondTermVariableName' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        string firstAndSecondTermVariableName(createVariableNameForSubstitution(firstAndSecondTerm));
        ^
               const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1117:16: note: FIX-IT applied suggested code changes
        string firstAndSecondTermVariableName(createVariableNameForSubstitution(firstAndSecondTerm));
               ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1118:9: warning: variable 'firstAndSecondTermVariable' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term firstAndSecondTermVariable(firstAndSecondTermVariableName);
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1118:14: note: FIX-IT applied suggested code changes
        Term firstAndSecondTermVariable(firstAndSecondTermVariableName);
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1120:9: warning: variable 'substitution' of type 'SubstitutionOfTermsToTerms' can be declared 'const' [misc-const-correctness]
        SubstitutionOfTermsToTerms substitution{{termToSubstitute, newTermToSubstitute}};
        ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1120:36: note: FIX-IT applied suggested code changes
        SubstitutionOfTermsToTerms substitution{{termToSubstitute, newTermToSubstitute}};
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1121:9: warning: variable 'newMainTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term newMainTerm(substitution.performSubstitutionTo(mainTerm));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1121:14: note: FIX-IT applied suggested code changes
        Term newMainTerm(substitution.performSubstitutionTo(mainTerm));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1130:5: warning: variable 'isANegative' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isANegative(isANegativeTerm(aSquaredWithSign));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1130:10: note: FIX-IT applied suggested code changes
    bool isANegative(isANegativeTerm(aSquaredWithSign));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1131:5: warning: variable 'isUNegative' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isUNegative(isANegativeTerm(uSquaredWithSign));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1131:10: note: FIX-IT applied suggested code changes
    bool isUNegative(isANegativeTerm(uSquaredWithSign));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1135:5: warning: variable 'uToANumber' of type 'TermRaiseToANumber' can be declared 'const' [misc-const-correctness]
    TermRaiseToANumber uToANumber(createTermRaiseToANumberFromTerm(uSquared));
    ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1135:24: note: FIX-IT applied suggested code changes
    TermRaiseToANumber uToANumber(createTermRaiseToANumberFromTerm(uSquared));
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1141:9: warning: variable 'details' of type 'TrigonometricSubstitutionDetails' can be declared 'const' [misc-const-correctness]
        TrigonometricSubstitutionDetails details(calculateTrigonometricSubstitutionDetails(
        ^
                                         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1141:42: note: FIX-IT applied suggested code changes
        TrigonometricSubstitutionDetails details(calculateTrigonometricSubstitutionDetails(
                                         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1148:21: warning: variable 'integratedTermWithTrigSub' of type 'Term' can be declared 'const' [misc-const-correctness]
                    Term integratedTermWithTrigSub(integrateIntenallyWithNewVariable(
                    ^
                         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1148:26: note: FIX-IT applied suggested code changes
                    Term integratedTermWithTrigSub(integrateIntenallyWithNewVariable(
                         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1161:5: warning: variable 'numberOfTerms' of type 'int' can be declared 'const' [misc-const-correctness]
    int numberOfTerms(termsWithDetailsInMultiplicationOrDivision.size());
    ^
        const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1161:9: note: FIX-IT applied suggested code changes
    int numberOfTerms(termsWithDetailsInMultiplicationOrDivision.size());
        ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1161:23: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int numberOfTerms(termsWithDetailsInMultiplicationOrDivision.size());
                      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1180:5: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
    Differentiation differentiation(getCurrentVariableToIntegrate());
    ^
                    const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1180:21: note: FIX-IT applied suggested code changes
    Differentiation differentiation(getCurrentVariableToIntegrate());
                    ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1181:5: warning: variable 'firstTermDerivative' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term firstTermDerivative(differentiation.differentiate(firstInnerTerm));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1181:10: note: FIX-IT applied suggested code changes
    Term firstTermDerivative(differentiation.differentiate(firstInnerTerm));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1182:5: warning: variable 'quotientOfDerivatives' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term quotientOfDerivatives = firstTermDerivative / secondTerm;
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1182:10: note: FIX-IT applied suggested code changes
    Term quotientOfDerivatives = firstTermDerivative / secondTerm;
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1185:9: warning: variable 'substitutionTermToVariable' of type 'SubstitutionOfTermsToTerms' can be declared 'const' [misc-const-correctness]
        SubstitutionOfTermsToTerms substitutionTermToVariable({{firstInnerTerm, newVariableToIntegrate}});
        ^
                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1185:36: note: FIX-IT applied suggested code changes
        SubstitutionOfTermsToTerms substitutionTermToVariable({{firstInnerTerm, newVariableToIntegrate}});
                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1186:9: warning: variable 'newFirstOuterTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term newFirstOuterTerm(substitutionTermToVariable.performSubstitutionTo(firstOuterTerm));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1186:14: note: FIX-IT applied suggested code changes
        Term newFirstOuterTerm(substitutionTermToVariable.performSubstitutionTo(firstOuterTerm));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1187:9: warning: variable 'integratedOuterTermInNewVariable' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term integratedOuterTermInNewVariable(
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1187:14: note: FIX-IT applied suggested code changes
        Term integratedOuterTermInNewVariable(
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1189:9: warning: variable 'substitutionVariableToTerm' of type 'SubstitutionOfVariablesToTerms' can be declared 'const' [misc-const-correctness]
        SubstitutionOfVariablesToTerms substitutionVariableToTerm({{newVariableToIntegrate, firstInnerTerm}});
        ^
                                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1189:40: note: FIX-IT applied suggested code changes
        SubstitutionOfVariablesToTerms substitutionVariableToTerm({{newVariableToIntegrate, firstInnerTerm}});
                                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1190:9: warning: variable 'integratedOuterTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term integratedOuterTerm(substitutionVariableToTerm.performSubstitutionTo(integratedOuterTermInNewVariable));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1190:14: note: FIX-IT applied suggested code changes
        Term integratedOuterTerm(substitutionVariableToTerm.performSubstitutionTo(integratedOuterTermInNewVariable));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1197:5: warning: variable 'singleVariableName' of type 'string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
    string singleVariableName(getSingleVariableNameIfItExistsAsTheOnlyOneOtherwiseItsEmpty(term));
    ^
           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1197:12: note: FIX-IT applied suggested code changes
    string singleVariableName(getSingleVariableNameIfItExistsAsTheOnlyOneOtherwiseItsEmpty(term));
           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1219:5: warning: variable 'quotientAndRemainder' of type 'PolynomialOverPolynomial::QuotientAndRemainder' can be declared 'const' [misc-const-correctness]
    PolynomialOverPolynomial::QuotientAndRemainder quotientAndRemainder(pop.simplifyAndDivide());
    ^
                                                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1219:52: note: FIX-IT applied suggested code changes
    PolynomialOverPolynomial::QuotientAndRemainder quotientAndRemainder(pop.simplifyAndDivide());
                                                   ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1252:13: warning: variable 'factorsWithExponents' of type 'TermsRaiseToNumbers' can be declared 'const' [misc-const-correctness]
            TermsRaiseToNumbers factorsWithExponents(oneOverDenominator.getTermsRaiseToNumbers());
            ^
                                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1252:33: note: FIX-IT applied suggested code changes
            TermsRaiseToNumbers factorsWithExponents(oneOverDenominator.getTermsRaiseToNumbers());
                                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1259:13: warning: variable 'numeratorWithNewVariables' of type 'Polynomial' can be declared 'const' [misc-const-correctness]
            Polynomial numeratorWithNewVariables(
            ^
                       const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1259:24: note: FIX-IT applied suggested code changes
            Polynomial numeratorWithNewVariables(
                       ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1261:13: warning: variable 'newVariableNames' of type 'VariableNamesSet' (aka 'set<basic_string<char, char_traits<char>, allocator<char>>>') can be declared 'const' [misc-const-correctness]
            VariableNamesSet newVariableNames(
            ^
                             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1261:30: note: FIX-IT applied suggested code changes
            VariableNamesSet newVariableNames(
                             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1263:13: warning: variable 'exponents' of type 'AlbaNumbersSet' (aka 'set<AlbaNumber>') can be declared 'const' [misc-const-correctness]
            AlbaNumbersSet exponents(getExponentsForPartialFraction(originalVariableName, numeratorWithNewVariables));
            ^
                           const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1263:28: note: FIX-IT applied suggested code changes
            AlbaNumbersSet exponents(getExponentsForPartialFraction(originalVariableName, numeratorWithNewVariables));
                           ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1296:9: warning: variable 'integratedTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term integratedTerm(integrateInternallyWithPurpose(termToIntegrate, IntegrationPurpose::PartialFraction));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1296:14: note: FIX-IT applied suggested code changes
        Term integratedTerm(integrateInternallyWithPurpose(termToIntegrate, IntegrationPurpose::PartialFraction));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1312:5: warning: variable 'isAnInverseTrigonometricFunction' of type 'bool' can be declared 'const' [misc-const-correctness]
    bool isAnInverseTrigonometricFunction = term.isFunction() && isInverseTrigonometricFunction(term.getAsFunction());
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1312:10: note: FIX-IT applied suggested code changes
    bool isAnInverseTrigonometricFunction = term.isFunction() && isInverseTrigonometricFunction(term.getAsFunction());
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1324:13: warning: variable 'numberOfTerms' of type 'int' can be declared 'const' [misc-const-correctness]
            int numberOfTerms(termsWithDetailsInMultiplicationAndDivision.size());
            ^
                const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1324:17: note: FIX-IT applied suggested code changes
            int numberOfTerms(termsWithDetailsInMultiplicationAndDivision.size());
                ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1324:31: warning: narrowing conversion from 'size_type' (aka 'unsigned long long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
            int numberOfTerms(termsWithDetailsInMultiplicationAndDivision.size());
                              ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1379:9: warning: variable 'v' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term v(integrateInternallyWithPurpose(dv, IntegrationPurpose::IntegrationByParts));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1379:14: note: FIX-IT applied suggested code changes
        Term v(integrateInternallyWithPurpose(dv, IntegrationPurpose::IntegrationByParts));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1381:13: warning: variable 'differentiation' of type 'Differentiation' can be declared 'const' [misc-const-correctness]
            Differentiation differentiation(getCurrentVariableToIntegrate());
            ^
                            const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1381:29: note: FIX-IT applied suggested code changes
            Differentiation differentiation(getCurrentVariableToIntegrate());
                            ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1382:13: warning: variable 'du' of type 'Term' can be declared 'const' [misc-const-correctness]
            Term du(differentiation.differentiate(u));
            ^
                 const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1382:18: note: FIX-IT applied suggested code changes
            Term du(differentiation.differentiate(u));
                 ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1389:17: warning: variable 'integratedVTimesDu' of type 'Term' can be declared 'const' [misc-const-correctness]
                Term integratedVTimesDu(
                ^
                     const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1389:22: note: FIX-IT applied suggested code changes
                Term integratedVTimesDu(
                     ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1404:9: warning: variable 'exponents' of type 'TrigonometryFunctionExponents' can be declared 'const' [misc-const-correctness]
        TrigonometryFunctionExponents exponents(inputTermToExponents.begin()->second);
        ^
                                      const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1404:39: note: FIX-IT applied suggested code changes
        TrigonometryFunctionExponents exponents(inputTermToExponents.begin()->second);
                                      ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1441:9: warning: variable 'termWithExponent' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term termWithExponent(
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1441:14: note: FIX-IT applied suggested code changes
        Term termWithExponent(
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1443:9: warning: variable 'termToIntegrate' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term termToIntegrate(createExpressionIfPossible({termWithExponent, "*", sin(functionInputTerm)}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1443:14: note: FIX-IT applied suggested code changes
        Term termToIntegrate(createExpressionIfPossible({termWithExponent, "*", sin(functionInputTerm)}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1455:9: warning: variable 'termWithExponent' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term termWithExponent(
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1455:14: note: FIX-IT applied suggested code changes
        Term termWithExponent(
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1457:9: warning: variable 'termToIntegrate' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term termToIntegrate(createExpressionIfPossible({termWithExponent, "*", cos(functionInputTerm)}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1457:14: note: FIX-IT applied suggested code changes
        Term termToIntegrate(createExpressionIfPossible({termWithExponent, "*", cos(functionInputTerm)}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1464:5: warning: variable 'tanRaiseToExponentMinus2' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term tanRaiseToExponentMinus2(createExpressionIfPossible({tan(functionInputTerm), "^", exponent - 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1464:10: note: FIX-IT applied suggested code changes
    Term tanRaiseToExponentMinus2(createExpressionIfPossible({tan(functionInputTerm), "^", exponent - 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1465:5: warning: variable 'termToIntegrate' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term termToIntegrate = getTangentSquaredInSecant(functionInputTerm) * tanRaiseToExponentMinus2;
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1465:10: note: FIX-IT applied suggested code changes
    Term termToIntegrate = getTangentSquaredInSecant(functionInputTerm) * tanRaiseToExponentMinus2;
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1478:9: warning: variable 'cscRaiseToExponentMinus2' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term cscRaiseToExponentMinus2(createExpressionIfPossible({csc(functionInputTerm), "^", exponentMinus2}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1478:14: note: FIX-IT applied suggested code changes
        Term cscRaiseToExponentMinus2(createExpressionIfPossible({csc(functionInputTerm), "^", exponentMinus2}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1479:9: warning: variable 'nonIntegralTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term nonIntegralTerm(
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1479:14: note: FIX-IT applied suggested code changes
        Term nonIntegralTerm(
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1496:9: warning: variable 'secRaiseToExponentMinus2' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term secRaiseToExponentMinus2(createExpressionIfPossible({sec(functionInputTerm), "^", exponentMinus2}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1496:14: note: FIX-IT applied suggested code changes
        Term secRaiseToExponentMinus2(createExpressionIfPossible({sec(functionInputTerm), "^", exponentMinus2}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1497:9: warning: variable 'nonIntegralTerm' of type 'Term' can be declared 'const' [misc-const-correctness]
        Term nonIntegralTerm(createExpressionIfPossible({secRaiseToExponentMinus2, "*", tan(functionInputTerm)}));
        ^
             const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1497:14: note: FIX-IT applied suggested code changes
        Term nonIntegralTerm(createExpressionIfPossible({secRaiseToExponentMinus2, "*", tan(functionInputTerm)}));
             ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1506:5: warning: variable 'tanRaiseToExponentMinus2' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term tanRaiseToExponentMinus2(createExpressionIfPossible({cot(functionInputTerm), "^", exponent - 2}));
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1506:10: note: FIX-IT applied suggested code changes
    Term tanRaiseToExponentMinus2(createExpressionIfPossible({cot(functionInputTerm), "^", exponent - 2}));
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1507:5: warning: variable 'termToIntegrate' of type 'Term' can be declared 'const' [misc-const-correctness]
    Term termToIntegrate = getCotangentSquaredInCosecant(functionInputTerm) * tanRaiseToExponentMinus2;
    ^
         const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1507:10: note: FIX-IT applied suggested code changes
    Term termToIntegrate = getCotangentSquaredInCosecant(functionInputTerm) * tanRaiseToExponentMinus2;
         ^
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1604:5: warning: variable 'configurations' of type 'Configurations' (aka 'vector<Configuration>') can be declared 'const' [misc-const-correctness]
    Configurations configurations{
    ^
                   const 
D:\a\aprg\aprg\AprgAlgebra\AprgAlgebra\src\Algebra\Integration\Integration.cpp:1604:20: note: FIX-IT applied suggested code changes
    Configurations configurations{
                   ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src/Algebra/Integration/Integration.cpp:381:23: error: no viable overloaded '='
            exponents = newExponents;
            ~~~~~~~~~ ^ ~~~~~~~~~~~~
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src/Algebra/Integration/Integration.hpp:25:12: note: candidate function (the implicit copy assignment operator) not viable: 'this' argument has type 'std::tuple_element<1, const std::pair<const alba::algebra::Term, alba::algebra::Integration::TrigonometryFunctionExponents>>::type' (aka 'const alba::algebra::Integration::TrigonometryFunctionExponents'), but method is not marked const
    struct TrigonometryFunctionExponents {
           ^
D:/a/aprg/aprg/AprgAlgebra/AprgAlgebra/src/Algebra/Integration/Integration.hpp:25:12: note: candidate function (the implicit move assignment operator) not viable: 'this' argument has type 'std::tuple_element<1, const std::pair<const alba::algebra::Term, alba::algebra::Integration::TrigonometryFunctionExponents>>::type' (aka 'const alba::algebra::Integration::TrigonometryFunctionExponents'), but method is not marked const
1 error generated.
ninja: build stopped: subcommand failed.
DONE!
