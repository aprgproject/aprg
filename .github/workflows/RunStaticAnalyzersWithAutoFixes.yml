name: Run Static Analyzers With Auto Fixes Workflow
run-name: Run Static Analyzers With Auto Fixes Workflow

on:
  push:
    branches: [main]
    paths:
      - '**StaticAnalysisAutoFix.txt'
  workflow_dispatch:
    inputs:
      staticAnalysisJobId:
        description: 'Job Identifier'
        type: number
        required: true
        default: 0
  
env:
  determineCppProjectsRelativePath: "AllCommonScripts/GithubWorkflowScripts/DetermineCppProjects.sh"
  gitAddCommitPushScriptRelativePath: "AllCommonScripts/GithubWorkflowScripts/GitAddCommitPush.sh"
  staticAnalysisScriptRelativePath: "AllCommonScripts/GithubWorkflowScripts/RunStaticAnalysisWithAutoFixes.sh"
  formatCppFilesRelativePath: "AllCommonScripts/ScriptsForCpp/formatCppFiles.sh"
  staticAnalysisFilename: "StaticAnalysisAutoFix.txt"

jobs:
        
  determineCppProjects:
    name: Determine CPP Projects
    runs-on: ubuntu-latest
    outputs:
      staticAnalysisJobId: ${{ steps.idOfGetJobIdStep.outputs.STATIC_ANALYSIS_JOB_ID }}
      projectsToBuild: ${{ steps.idOfGetCppProjectStep.outputs.APRG_CPP_DIRECTORIES }}
    steps:
      - name: Checkout code for changes checking
        id: idOfCheckout
        uses: actions/checkout@v3
          
      - name: Get Static Analysis Job Id from Git Or from User Input
        id: idOfGetJobIdStep
        run: |
          staticAnalysisJobId="${{ inputs.staticAnalysisJobId }}" 
          if [[ -z $staticAnalysisJobId ]]; then
            lastCommitMessage=$(git log -1 --pretty=%B)
            echo "lastCommitMessage: [$lastCommitMessage]"
            staticAnalysisJobId=$(echo "$lastCommitMessage" | sed -nE "s|^.*JobId:\[(.*)\].*$|\1|p")
          fi
          echo "staticAnalysisJobId: [$staticAnalysisJobId]"
          echo "staticAnalysisJobId=$staticAnalysisJobId" >> "$GITHUB_ENV"
          echo "STATIC_ANALYSIS_JOB_ID=$staticAnalysisJobId" >> "$GITHUB_OUTPUT"
        
      - name: Get C/C++ Projects for Static Analysis
        id: idOfGetCppProjectStep
        run: |
          determineCppProjectsPath=$(realpath "$(pwd)/${{ env.determineCppProjectsRelativePath }}")
          echo "determineCppProjectsPath: [$determineCppProjectsPath]"
          chmod +x "$determineCppProjectsPath"
          "$determineCppProjectsPath" checkStaticAnalysisFiles "$staticAnalysisJobId" "${{ env.staticAnalysisFilename }}"
          
          
  runStaticAnalyzersOnCppProjects:
    name: JobId[${{ needs.determineCppProjects.outputs.staticAnalysisJobId }}] Run Static Analyzers with Auto Fixes
    needs: determineCppProjects
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
          
      - name: Print Job Details
        run: |
          echo "github.event_name: [${{ github.event_name }}]"
          echo "github.event.action: [${{ github.event.action }}]"
          echo "c/c++ projects: [${{ needs.determineCppProjects.outputs.projectsToBuild }}]"
          echo "staticAnalysisFilename: [${{ env.staticAnalysisFilename }}]"
          echo "staticAnalysisJobId: [${{ needs.determineCppProjects.outputs.staticAnalysisJobId }}]"
          
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false 
          # use the personal access token (without this setting, the GITHUB_TOKEN is used)
          # this is needed to trigger BuildAndRun github workflow after commit
        
      - name: Set up Git
        run: |
          git config user.name "aprgproject"
          git config user.email "aprgproject@gmail.com"
          # set origin (fetch)
          git remote set-url origin https://$WORKFLOW_TOKEN@github.com/aprgproject/aprg
          # set origin (push)
          git remote set-url --push origin https://$WORKFLOW_TOKEN@github.com/aprgproject/aprg
          # git remote -v
        env:
          WORKFLOW_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install ninja-build cmake
          echo "cmake version: [$(cmake --version)]"
          echo "ninja version: [$(ninja --version)]"
          echo "clang version: [$(clang --version)]"
          sudo apt install libboost-all-dev
          echo "libboost-all-dev version (dpkg): [$(dpkg -l | grep libboost-all-dev | tr -s ' ')]"
          sudo apt install libgsl-dev
          echo "libgsl-dev version (dpkg): [$(dpkg -l | grep libgsl-dev | tr -s ' ')]"
          sudo apt install p7zip-full
          echo "p7zip-full version (dpkg): [$(dpkg -l | grep p7zip-full | tr -s ' ')]"
          sudo apt install clang-tidy cppcheck clazy
          echo "clang-tidy version: [$(clang-tidy --version)]"
          echo "cppcheck version: [$(cppcheck --version)]"
          echo "clazy version: [$(clazy --version)]"
          sudo apt install clang-format
          echo "clang-format version: [$(clang-format --version)]"
          sudo apt-get install dos2unix
          echo "dos2unix version: [$(dos2unix --version)]"
            
      - name: Build and Run with Static Analyzers with Auto Fixes
        shell: bash
        continue-on-error: true
        run: |
          echo "C/C++ Projects to check: [${{ needs.determineCppProjects.outputs.projectsToBuild }}]"
          staticAnalysisScriptPath=$(realpath "$(pwd)/${{ env.staticAnalysisScriptRelativePath }}")
          echo "staticAnalysisScriptPath: [$(staticAnalysisScriptPath)]"
          chmod +x "$staticAnalysisScriptPath"
          # 19800 seconds translates to 5 hours and 30 minutes
          timeout 19800 "$staticAnalysisScriptPath" "${{ needs.determineCppProjects.outputs.staticAnalysisJobId }}" "${{ env.staticAnalysisFilename }}" "${{ needs.determineCppProjects.outputs.projectsToBuild }}" 
            
      - name: Run clang format
        shell: bash
        run: |
          formatCppFilesScriptPath=$(realpath "$(pwd)/${{ env.formatCppFilesRelativePath }}")
          echo "formatCppFilesScriptPath: [$(formatCppFilesScriptPath)]"
          chmod +x "$formatCppFilesScriptPath"
          "$formatCppFilesScriptPath"
        
      - name: Commit and Push Changes
        run: |
          gitAddCommitPushScriptPath=$(realpath "$(pwd)/${{ env.gitAddCommitPushScriptRelativePath }}")
          echo "gitAddCommitPushScriptPath: [$(gitAddCommitPushScriptPath)]"
          chmod +x "$gitAddCommitPushScriptPath"
          "$gitAddCommitPushScriptPath" "${{ needs.determineCppProjects.outputs.staticAnalysisJobId }}"  "WORKFLOW COMMIT: Automatic fixes from Static Analyzers."
