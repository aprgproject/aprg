on:
  push:
    branches: [main]
    paths:
      - '**'


jobs:

  detect-git-changes:
    name: Detect Git Changes
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code for changes checking
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2

      - name: Detect Git Changes
        run: |
          changedFiles=$(git diff --name-only HEAD^)
          echo "changedFiles: [$changedFiles]"
          
          
  build-and-test:
    name: Build and Test for ${{ matrix.config.name }}
    needs: detect-git-changes
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "WindowsLatestMsvc",
            os: windows-latest,
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Visual Studio 17 2022"
          }
        - {
            name: "WindowsLatestMingw",
            os: windows-latest,
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            generators: "Ninja"
          }
        - {
            name: "UbuntuLatestGcc",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            c_compiler_location: "/usr/bin/gcc",
            cpp_compiler_location: "/usr/bin/g++",
            generators: "Ninja"
          }
        - {
            name: "UbuntuLatestClang",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            c_compiler_location: "/usr/bin/clang",
            cpp_compiler_location: "/usr/bin/clang++",
            generators: "Ninja"
          }
# MAC OS is not supported
#        - {
#            name: "macOS Latest Clang",
#            os: macos-latest,
#            build_type: "Release",
#            cc: "clang",
#            cxx: "clang++",
#            generators: "Ninja"
#          }

    steps:
    
      - name: Checkout code for building
        uses: actions/checkout@v3
          
      - name: Print environment
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version
          #Not needed to run environment script
          #echo "Executing visual studio environment script..."
          #cmd "${{ matrix.config.environment_script }}"
          #echo "Finished visual studio environment script."

      - name: Install dependencies on ubuntu/gcc
        if: startsWith(matrix.config.name, 'UbuntuLatestGcc')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version

      - name: Install dependencies on ubuntu/clang
        if: startsWith(matrix.config.name, 'UbuntuLatestClang')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          clang --version
          

# MAC OS is not supported          
#      - name: Install dependencies on macos
#        if: startsWith(matrix.config.os, 'macos')
#        run: |
#          brew install cmake ninja
#          ninja --version
#          cmake --version
          
      - name: Fix folders
        shell: bash
        working-directory: AprgCommon
        run: |
          mkdir GitHubBuild
          cd GitHubBuild
            
      - name: Configure for windows
        if: startsWith(matrix.config.os, 'windows')
        shell: bash
        working-directory: AprgCommon/GitHubBuild
        run: |
          cmake ../AprgCommon \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}"
            
      - name: Configure for ubuntu
        if: startsWith(matrix.config.os, 'ubuntu')
        shell: bash
        working-directory: AprgCommon/GitHubBuild
        run: |
          cmake ../AprgCommon \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -DCMAKE_C_COMPILER=${{ matrix.config.c_compiler_location }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cpp_compiler_location }} \
            -G "${{ matrix.config.generators }}"
            
      - name: Build
        shell: bash
        working-directory: AprgCommon/GitHubBuild
        run: |
          cmake --build . --config ${{ matrix.config.build_type }}
            
      - name: Install
        shell: bash
        working-directory: AprgCommon/GitHubBuild
        run: |
          cmake --install . --verbose --config ${{ matrix.config.build_type }}

      - name: Run
        shell: bash
        working-directory: AprgCommon/GitHubBuild
        run: |
          projectName="$(cmake . -P ../../AprgCMakeHelpers/GetProjectName.cmake)"
          echo "projectName: [$projectName]"
          ls -la
          pwd
          if [ -z "$projectName" ]; then
              exit 1
          fi
          "./install/bin/$projectName"
          ls -la
          pwd
