# 

on:
  push:
    branches: [main]
    paths:
      - '**'


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} #will run in turn on all types of machines
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "WindowsLatestMsvc",
            os: windows-latest,
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            c_compiler_location: "",
            cpp_compiler_location: "",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Visual Studio 17 2022"
          }
        - {
            name: "WindowsLatestMingw",
            os: windows-latest,
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            c_compiler_location: "",
            cpp_compiler_location: "",
            generators: "Ninja"
          }
        - {
            name: "UbuntuLatestGcc",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            c_compiler_location: "/usr/bin/gcc",
            cpp_compiler_location: "/usr/bin/g++",
            generators: "Ninja"
          }
        - {
            name: "UbuntuLatestClang",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            c_compiler_location: "/usr/bin/clang",
            cpp_compiler_location: "/usr/bin/clang++",
            generators: "Ninja"
          }
# MAC OS is not supported
#        - {
#            name: "macOS Latest Clang",
#            os: macos-latest,
#            build_type: "Release",
#            cc: "clang",
#            cxx: "clang++",
#            generators: "Ninja"
#          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout (fetch last two commits to get the diff)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2
          
      - name: Print environment
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version
          #echo "Executing visual studio environment script..."
          #cmd "${{ matrix.config.environment_script }}"
          #echo "Finished visual studio environment script."

      - name: Install dependencies on ubuntu/gcc
        if: startsWith(matrix.config.name, 'UbuntuLatestGcc')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version

      - name: Install dependencies on ubuntu/clang
        if: startsWith(matrix.config.name, 'UbuntuLatestClang')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          clang --version
          

# MAC OS is not supported          
#      - name: Install dependencies on macos
#        if: startsWith(matrix.config.os, 'macos')
#        run: |
#          brew install cmake ninja
#          ninja --version
#          cmake --version
          
      - name: Configure
        shell: bash
        run: |
          echo "Show ref: $(git show-ref --heads)"
          echo "git log: $(git log -n 5)"
          git fetch origin +refs/heads/*:refs/remotes/origin/*
          recentCommitHash=${{ github.sha }}
          echo "The recentCommitHash is: [$recentCommitHash]"
          revisedFiles=$(git diff --name-only HEAD^)
          echo "revisedFiles: [$revisedFiles]"
          cd AprgCommon
          mkdir GitHubBuild
          mkdir GithubInstall
          ls -la
          pwd
          cd GitHubBuild
          ls -la
          pwd
          cmake ../AprgCommon \
            -DCMAKE_C_COMPILER=${{ matrix.config.c_compiler_location }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.config.cpp_compiler_location }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_INSTALL_PREFIX:PATH=GithubInstall
            
      - name: Build
        shell: bash
        working-directory: AprgCommon/GitHubBuild
        run: |
          cmake --build . --config ${{ matrix.config.build_type }}
          ls -la
          pwd

      - name: Install
        shell: bash
        working-directory: AprgCommon/GitHubBuild
        run: |
          cmake --install . --strip
          ls -la
          pwd

      - name: Run
        shell: bash
        working-directory: AprgCommon/GithubInstall
        run: |
          ls -la
          pwd
