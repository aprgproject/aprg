on:
  push:
    branches: [main]
    paths:
      - '**'
env:
  buildAndRunScriptRelativePath: AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh
  detectChangedProjectsRelativePath: AllCommonScripts/DetectChangedProjects/DetectChangedProjects.sh

jobs:

  detectGitChanges:
    name: Detect Git Changes
    runs-on: ubuntu-latest
    outputs:
      project1: ${{ steps.idOfDetectGitChanges.outputs.detectedProject1 }}
      project2: ${{ steps.idOfDetectGitChanges.outputs.detectedProject2 }}
      projectsToBuild: [project1, project2]
    steps:
      - name: Checkout code for changes checking
        id: idOfCheckout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2

      - name: Detect Git Changes
        id: idOfDetectGitChanges
        run: |
          detectChangedProjectsPath=$(realpath "$(pwd)/${{ env.detectChangedProjectsRelativePath }}")
          echo "detectChangedProjectsPath: [$detectChangedProjectsPath]"
          chmod +x $detectChangedProjectsPath
          echo "detectedProject1=AprgCommon/AprgCommon" >> "$GITHUB_OUTPUT"
          echo "detectedProject2=AprgMath/AprgMath" >> "$GITHUB_OUTPUT"
#          $detectChangedProjectsPath
          
          
  build-and-test:
    name: Build and Test in ${{ matrix.config.name }} for ${{ matrix.project }}
    needs: detectGitChanges
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        project: ${{ needs.detectGitChanges.outputs.projectsToBuild }}
        config: 
        - {
            name: "WindowsLatestMsvc",
            os: windows-latest,
            buildType: "Release",
            cc: "cl",
            cxx: "cl",
            environmentScript: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Visual Studio 17 2022"
          }
        - {
            name: "WindowsLatestMingw",
            os: windows-latest,
            buildType: "Release",
            cc: "gcc",
            cxx: "g++",
            generators: "Ninja"
          }
        - {
            name: "UbuntuLatestGcc",
            os: ubuntu-latest,
            buildType: "Release",
            cc: "gcc",
            cxx: "g++",
            cCompilerLocation: "/usr/bin/gcc",
            cppCompilerLocation: "/usr/bin/g++",
            generators: "Ninja"
          }
        - {
            name: "UbuntuLatestClang",
            os: ubuntu-latest,
            buildType: "Release",
            cc: "clang",
            cxx: "clang++",
            cCompilerLocation: "/usr/bin/clang",
            cppCompilerLocation: "/usr/bin/clang++",
            generators: "Ninja"
          }
# MAC OS is not supported
#        - {
#            name: "macOS Latest Clang",
#            os: macos-latest,
#            buildType: "Release",
#            cc: "clang",
#            cxx: "clang++",
#            generators: "Ninja"
#          }

    steps:
    
      - name: Checkout code for building
        uses: actions/checkout@v3
          
      - name: Print environment
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version
          #Not needed to run environment script
          #echo "Executing visual studio environment script..."
          #cmd "${{ matrix.config.environmentScript }}"
          #echo "Finished visual studio environment script."

      - name: Install dependencies on ubuntu/gcc
        if: startsWith(matrix.config.name, 'UbuntuLatestGcc')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version

      - name: Install dependencies on ubuntu/clang
        if: startsWith(matrix.config.name, 'UbuntuLatestClang')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          clang --version
          
# MAC OS is not supported          
#      - name: Install dependencies on macos
#        if: startsWith(matrix.config.os, 'macos')
#        run: |
#          brew install cmake ninja
#          ninja --version
#          cmake --version
            
      - name: Prepare aprg directories and scripts
        shell: bash
        run: |
          buildAndRunScriptPath=$(realpath "$(pwd)/${{ env.buildAndRunScriptRelativePath }}")
          echo "buildAndRunScriptPath: [$buildAndRunScriptPath]"
          chmod +x $buildAndRunScriptPath
          cd AprgCommon/AprgCommon
            
      - name: Configure for windows
        if: startsWith(matrix.config.os, 'windows')
        shell: bash
        run: |
          buildAndRunScriptPath=$(realpath "$(pwd)/${{ env.buildAndRunScriptRelativePath }}")
          echo "buildAndRunScriptPath: [$buildAndRunScriptPath]"
          cd AprgCommon/AprgCommon
          $buildAndRunScriptPath configureWithDefaultCompiler GithubBuild Debug "${{ matrix.config.generators }}"
            
      - name: Configure for ubuntu/gcc
        if: matrix.config.name == 'UbuntuLatestGcc'
        shell: bash
        run: |
          buildAndRunScriptPath=$(realpath "$(pwd)/${{ env.buildAndRunScriptRelativePath }}")
          echo "buildAndRunScriptPath: [$buildAndRunScriptPath]"
          cd AprgCommon/AprgCommon
          $buildAndRunScriptPath configureWithGcc GithubBuild Debug "${{ matrix.config.generators }}"
            
      - name: Configure for ubuntu/clang
        if: matrix.config.name == 'UbuntuLatestClang'
        shell: bash
        run: |
          buildAndRunScriptPath=$(realpath "$(pwd)/${{ env.buildAndRunScriptRelativePath }}")
          echo "buildAndRunScriptPath: [$buildAndRunScriptPath]"
          cd AprgCommon/AprgCommon
          $buildAndRunScriptPath configureWithClang GithubBuild Debug "${{ matrix.config.generators }}"
            
      - name: Build
        shell: bash
        run: |
          buildAndRunScriptPath=$(realpath "$(pwd)/${{ env.buildAndRunScriptRelativePath }}")
          echo "buildAndRunScriptPath: [$buildAndRunScriptPath]"
          cd AprgCommon/AprgCommon
          $buildAndRunScriptPath build GithubBuild Debug
            
      - name: Install
        shell: bash
        run: |
          buildAndRunScriptPath=$(realpath "$(pwd)/${{ env.buildAndRunScriptRelativePath }}")
          echo "buildAndRunScriptPath: [$buildAndRunScriptPath]"
          cd AprgCommon/AprgCommon
          $buildAndRunScriptPath install GithubBuild Debug

      - name: Run
        shell: bash
        run: |
          buildAndRunScriptPath=$(realpath "$(pwd)/${{ env.buildAndRunScriptRelativePath }}")
          echo "buildAndRunScriptPath: [$buildAndRunScriptPath]"
          cd AprgCommon/AprgCommon
          $buildAndRunScriptPath run GithubBuild
