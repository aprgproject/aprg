name: Build And Run Workflow

on:
  push:
    branches:
      - '*'
    paths:
      - '**'
  workflow_dispatch:
    inputs:
      cppProjects:
        description: 'C/C++ Project ("all" for all projects)'
        type: string
        required: true
        default: 'all'
      branch:
        description: 'Branch'
        type: string
        required: true
        default: 'main'
      cppBuildConfigurations:
        description: 'Build Configurations'
        required: true
        default: '["WindowsLatestMsvc", "WindowsLatestMingw", "WindowsLatestClang", "UbuntuLatestGcc", "UbuntuLatestClang"]'  #"MacOSLatestClang"
      cppCMakeBuildType:
        description: 'Build Type to use for C/C++ Project'
        type: choice
        required: true
        default: 'Debug'
        options:
        - Debug
        - Release
      enableValgrind:
        description: 'Enable Valgrind for Ubuntu Gcc'
        type: boolean
        required: true
        default: false
      enableAsan:
        description: 'Enable Address Sanitizer for Clang Builds'
        type: boolean
        required: true
        default: false
      enableMsan:
        description: 'Enable Memory Sanitizer for Clang Builds'
        type: boolean
        required: true
        default: false
      enableTsan:
        description: 'Enable Thread Sanitizer for Clang Builds'
        type: boolean
        required: true
        default: false
      enableUbsan:
        description: 'Enable Undefined Behavior Sanitizer for Clang Builds'
        type: boolean
        required: true
        default: false
      enableStaticAnalyzers:
        description: 'Enable Static Analyzers for Clang Builds'
        type: boolean
        required: true
        default: false


env:
  checkCMakeFilesRelativePath: "AllCommonScripts/ScriptsForCMakeFiles/checkCMakeFiles.sh"
  checkShellScriptsRelativePath: "AllCommonScripts/ScriptsForShellScripts/checkShellScripts.sh"
  checkPythonScriptsRelativePath: "AllCommonScripts/ScriptsForPython/checkPythonScripts.sh"
  determineCppProjectsRelativePath: "AllCommonScripts/GithubWorkflowScripts/DetermineCppProjects.sh"
  buildAndRunScriptRelativePath: "AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh"
  buildType: ${{ inputs.cppCMakeBuildType || 'Debug'}} # default value
  buildDirectory: "GithubBuild"
  windowsEnvironmentScript: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"

jobs:

  lintChecks:
    name: Perform linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.head_ref }} # default value
        
      - name: Prepare for linting
        shell: bash
        run: |
          sudo apt update
          pip install --upgrade pip
          sudo pip install cmakelang 
          echo "cmake-lint version: [$(cmake-lint --version)]"
          sudo apt install shellcheck
          echo "shellcheck version: [$(shellcheck --version)]"
          sudo apt install pylint
          echo "pylint version: [$(pylint --version)]"
          
      - name: Perform linting for cmake files
        shell: bash
        continue-on-error: true
        run: |
          checkCMakeFilesPath=$(realpath "$(pwd)/${{ env.checkCMakeFilesRelativePath }}")
          echo "checkCMakeFilesPath: [$checkCMakeFilesPath]"
          chmod +x "$checkCMakeFilesPath"
          "$checkCMakeFilesPath"
          lintStatus=$?
          echo "lintStatus: [$lintStatus]"
          echo "cmakeLintStatus=$lintStatus" >> "$GITHUB_ENV"
          
      - name: Perform linting for shell scripts
        shell: bash
        continue-on-error: true
        run: |
          checkShellScriptsPath=$(realpath "$(pwd)/${{ env.checkShellScriptsRelativePath }}")
          echo "checkShellScriptsPath: [$checkShellScriptsPath]"
          chmod +x "$checkShellScriptsPath"
          "$checkShellScriptsPath"
          lintStatus=$?
          echo "lintStatus: [$lintStatus]"
          echo "shellLintStatus=$lintStatus" >> "$GITHUB_ENV"
          
      - name: Perform linting for python scripts
        shell: bash
        continue-on-error: true
        run: |
          checkPythonScriptsPath=$(realpath "$(pwd)/${{ env.checkPythonScriptsRelativePath }}")
          echo "checkPythonScriptsPath: [$checkPythonScriptsPath]"
          chmod +x "$checkPythonScriptsPath"
          "$checkPythonScriptsPath"
          lintStatus=$?
          echo "lintStatus: [$lintStatus]"
          echo "pythonLintStatus=$lintStatus" >> "$GITHUB_ENV"
          
      - name: Check overall linting status
        shell: bash
        run: |
          overallLintStatus=0
          echo "Checking linting errors..."
          echo "cmakeLintStatus: [$cmakeLintStatus]"
          if [ "$cmakeLintStatus" != "0" ]; then
            echo "CMake linting failed, so the overall linting status is set to failed."
            overallLintStatus=1
          fi
          echo "shellLintStatus: [$shellLintStatus]"
          if [ "$shellLintStatus" != "0" ]; then
            echo "Shell linting failed, so the overall linting status is set to failed."
            overallLintStatus=1
          fi
          echo "pythonLintStatus: [$pythonLintStatus]"
          if [ "$pythonLintStatus" != "0" ]; then
            echo "Python linting failed, so the overall linting status is set to failed."
            overallLintStatus=1
          fi
          echo "overallLintStatus: [$overallLintStatus]"
          if [ "$overallLintStatus" != "0" ]; then
            echo "There were no linting issues found."
          fi
          exit $overallLintStatus


  determineCppProjects:
    name: Determine CPP Projects
    runs-on: ubuntu-latest
    outputs:
      projectsToBuild: ${{ steps.idOfGetCppProjectStep.outputs.APRG_CPP_DIRECTORIES }}
      excludedConfigurations: ${{ steps.idOfGetCppProjectStep.outputs.APRG_EXCLUDED_CONFIGURATIONS }}
      projectsWithBoost: ${{ steps.idOfGetCppProjectStep.outputs.APRG_PROJECTS_WITH_BOOST }}
      projectsWithGsl: ${{ steps.idOfGetCppProjectStep.outputs.APRG_PROJECTS_WITH_GSL }}
      projectsWith7Zip: ${{ steps.idOfGetCppProjectStep.outputs.APRG_PROJECTS_WITH_7ZIP }}
    steps:
      - name: Checkout code for changes checking
        id: idOfCheckout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.head_ref }} # default value
          fetch-depth: 2
          
      - name: Get C/C++ Projects from Git Diff and User Input
        shell: bash
        id: idOfGetCppProjectStep
        run: |
          determineCppProjectsPath=$(realpath "$(pwd)/${{ env.determineCppProjectsRelativePath }}")
          echo "determineCppProjectsPath: [$determineCppProjectsPath]"
          chmod +x "$determineCppProjectsPath"
          userInput="${{ inputs.cppProjects }}"
          if [[ -z $userInput ]]; then
            echo "User input is empty, [checkGit] is set as argument to script."
            "$determineCppProjectsPath" checkGit
          else
            echo "User input is not empty, [checkUserInputWithMultipleOutput] is set as argument to script."
            "$determineCppProjectsPath" checkUserInputWithMultipleOutput "${{ inputs.cppProjects }}"
          fi


  buildAndTest:
    name: Test ${{ matrix.project }} on ${{ matrix.configurationName }}
    needs: determineCppProjects
    if: needs.determineCppProjects.outputs.projectsToBuild != '[]'
    runs-on: ${{ startsWith(matrix.configurationName, 'Windows') && 'windows-latest' || startsWith(matrix.configurationName, 'Ubuntu') && 'ubuntu-latest' || 'macos-latest'}} # ternary operator
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.determineCppProjects.outputs.projectsToBuild) }}
        configurationName: ${{ fromJSON(inputs.cppBuildConfigurations || '["WindowsLatestMsvc", "WindowsLatestMingw", "WindowsLatestClang", "UbuntuLatestGcc", "UbuntuLatestClang"]') }}  # default value
        exclude: ${{ fromJSON(needs.determineCppProjects.outputs.excludedConfigurations) }}
        
    steps:
      - name: Print Job Details
        shell: bash
        run: |
          echo "github.event_name: [${{ github.event_name }}]"
          echo "github.event.action: [${{ github.event.action }}]"
          echo "c/c++ projects: [${{ needs.determineCppProjects.outputs.projectsToBuild }}]"
          echo "matrix.project: [${{ matrix.project }}]"
          echo "matrix.configurationName: [${{ matrix.configurationName }}]"
          echo "buildType: [${{ env.buildType }}]"
          
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.head_ref }} # default value
          
      - name: Install dependencies on Windows
        shell: bash
        if: startsWith(matrix.configurationName, 'Windows')
        run: |
          choco install cmake ninja
          choco info cmake
          echo "cmake version: [$(cmake --version)]"
          choco info ninja
          echo "ninja version: [$(ninja --version)]"
          # Not needed to run environment script
          # echo "Executing visual studio environment script..."
          # cmd "${{ env.windowsEnvironmentScript }}"
          # echo "Finished visual studio environment script."

      - name: Update APT for dependencies in Ubuntu
        shell: bash
        if: startsWith(matrix.configurationName, 'Ubuntu')
        run: |
          sudo apt update

      - name: Install dependencies on Ubuntu/Gcc
        shell: bash
        if: matrix.configurationName == 'UbuntuLatestGcc'
        run: |
          sudo apt install cmake ninja-build
          echo "cmake version: [$(cmake --version)]"
          echo "ninja version: [$(ninja --version)]"
          echo "gcc version: [$(gcc --version)]"

      - name: Install dependencies on Ubuntu/Clang
        shell: bash
        if: matrix.configurationName == 'UbuntuLatestClang'
        run: |
          sudo apt install ninja-build cmake
          echo "cmake version: [$(cmake --version)]"
          echo "ninja version: [$(ninja --version)]"
          echo "clang version: [$(clang --version)]"
          
# MAC OS is not supported          
#      - name: Install dependencies on macos
#        if: startsWith(matrix.configurationName, 'MacOS')
#        run: |
#          brew install cmake ninja
#          ninja --version
#          cmake --version

      - name: Install Boost on Ubuntu
        shell: bash
        if: startsWith(matrix.configurationName, 'Ubuntu') && contains(fromJSON(needs.determineCppProjects.outputs.projectsWithBoost), matrix.project)
        run: |
          sudo apt install libboost-all-dev
          echo "libboost-all-dev version (dpkg): [$(dpkg -l | grep libboost-all-dev | tr -s ' ')]"

      - name: Install GSL on Ubuntu
        shell: bash
        if: startsWith(matrix.configurationName, 'Ubuntu') && contains(fromJSON(needs.determineCppProjects.outputs.projectsWithGsl), matrix.project)
        run: |
          sudo apt install libgsl-dev
          echo "libgsl-dev version (dpkg): [$(dpkg -l | grep libgsl-dev | tr -s ' ')]"

      - name: Install 7zip on Ubuntu
        shell: bash
        if: startsWith(matrix.configurationName, 'Ubuntu') && contains(fromJSON(needs.determineCppProjects.outputs.projectsWith7Zip), matrix.project)
        run: |
          sudo apt install p7zip-full
          echo "p7zip-full version (dpkg): [$(dpkg -l | grep p7zip-full | tr -s ' ')]"

      - name: Install valgrind on Ubuntu
        shell: bash
        if: startsWith(matrix.configurationName, 'Ubuntu') && inputs.enableValgrind
        run: |
          sudo apt install valgrind
          echo "valgrind version: [$(valgrind -v)]"
          
      - name: Prepare aprg directories and scripts
        shell: bash
        run: |
          buildAndRunScriptPath=$(realpath "$(pwd)/${{ env.buildAndRunScriptRelativePath }}")
          echo "buildAndRunScriptPath: [$buildAndRunScriptPath]"
          chmod +x "$buildAndRunScriptPath"
          echo "buildAndRunScriptPath=$buildAndRunScriptPath" >> "$GITHUB_ENV"
            
      - name: Configure for Windows/MSVC
        shell: bash
        if: matrix.configurationName == 'WindowsLatestMsvc'
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" cleanAndConfigureWithDefaultCompiler "${{ env.buildDirectory }}" "${{ env.buildType }}" "Visual Studio 17 2022"
            
      - name: Configure for Windows/Mingw
        shell: bash
        if: matrix.configurationName == 'WindowsLatestMingw'
        working-directory: ${{ matrix.project }}
        run: |
          echo "gcc version: [$(gcc --version)]"
          "$buildAndRunScriptPath" cleanAndConfigureWithGcc "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja" "APRG_COMPILER_FLAGS_FOR_RELEASE_NO_FLAGS" "APRG_LINKER_FLAGS_FOR_RELEASE_WITH_STATIC"
            
      - name: Configure for Windows/Clang
        shell: bash
        if: matrix.configurationName == 'WindowsLatestClang'
        working-directory: ${{ matrix.project }}
        run: |
          echo "clang version: [$(clang --version)]"
          "$buildAndRunScriptPath" cleanAndConfigureWithClang "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
            
      - name: Configure for Ubuntu/Gcc
        shell: bash
        if: matrix.configurationName == 'UbuntuLatestGcc'
        working-directory: ${{ matrix.project }}
        run: |
          echo "gcc version: [$(gcc --version)]"
          "$buildAndRunScriptPath" cleanAndConfigureWithGcc "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
            
      - name: Configure for Ubuntu/Clang
        shell: bash
        if: matrix.configurationName == 'UbuntuLatestClang'
        working-directory: ${{ matrix.project }}
        run: |
          echo "clang version: [$(clang --version)]"
          "$buildAndRunScriptPath" cleanAndConfigureWithClang "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
            
      - name: Build
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" build ${{ env.buildDirectory }} ${{ env.buildType }}
            
      - name: Install
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" install ${{ env.buildDirectory }} ${{ env.buildType }}

      - name: Run
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" run ${{ env.buildDirectory }}

      - name: Initialize step statuses
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          echo "valgrindStatus=0" >> "$GITHUB_ENV"
          echo "asanStatus=0" >> "$GITHUB_ENV"
          echo "msanStatus=0" >> "$GITHUB_ENV"
          echo "tsanStatus=0" >> "$GITHUB_ENV"
          echo "ubsanStatus=0" >> "$GITHUB_ENV"
          echo "clangStaticAnalysisStatus=0" >> "$GITHUB_ENV"
          echo "otherStaticAnalysisStatus=0" >> "$GITHUB_ENV"

      - name: Run with valgrind
        shell: bash
        continue-on-error: true
        if: matrix.configurationName == 'UbuntuLatestGcc' && inputs.enableValgrind
        working-directory: ${{ matrix.project }}
        run: |
          set +e
          "$buildAndRunScriptPath" run ${{ env.buildDirectory }} valgrind
          valgrindStatus=$?
          set -e
          echo "valgrindStatus: [$valgrindStatus]"
          echo "valgrindStatus=$valgrindStatus" >> "$GITHUB_ENV"
            
      - name: Build and Run with Address Sanitizer
        shell: bash
        continue-on-error: true
        if: matrix.configurationName == 'UbuntuLatestClang' && inputs.enableAsan
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" cleanAndConfigureWithClang "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja" "APRG_COMPILER_FLAGS_FOR_DEBUG_WITH_ASAN"
          echo "Building and running with ASAN..."
          set +e
          "$buildAndRunScriptPath" build ${{ env.buildDirectory }} ${{ env.buildType }}
          "$buildAndRunScriptPath" install ${{ env.buildDirectory }} ${{ env.buildType }}
          "$buildAndRunScriptPath" run ${{ env.buildDirectory }}
          asanStatus=$?
          set -e
          echo "asanStatus: [$asanStatus]"
          echo "asanStatus=$asanStatus" >> "$GITHUB_ENV"
            
      - name: Build and Run with Memory Sanitizer
        shell: bash
        continue-on-error: true
        if: matrix.configurationName == 'UbuntuLatestClang' && inputs.enableMsan
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" cleanAndConfigureWithClang "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja" "APRG_COMPILER_FLAGS_FOR_DEBUG_WITH_MSAN"
          echo "Building and running with MSAN..."
          set +e
          "$buildAndRunScriptPath" build ${{ env.buildDirectory }} ${{ env.buildType }}
          "$buildAndRunScriptPath" install ${{ env.buildDirectory }} ${{ env.buildType }}
          "$buildAndRunScriptPath" run ${{ env.buildDirectory }}
          msanStatus=$?
          set -e
          echo "msanStatus: [$msanStatus]"
          echo "msanStatus=$msanStatus" >> "$GITHUB_ENV"
            
      - name: Build and Run with Thread Sanitizer
        shell: bash
        continue-on-error: true
        if: matrix.configurationName == 'UbuntuLatestClang' && inputs.enableTsan
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" cleanAndConfigureWithClang "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja" "APRG_COMPILER_FLAGS_FOR_DEBUG_WITH_TSAN"
          echo "Building and running with TSAN..."
          set +e
          "$buildAndRunScriptPath" build ${{ env.buildDirectory }} ${{ env.buildType }}
          "$buildAndRunScriptPath" install ${{ env.buildDirectory }} ${{ env.buildType }}
          "$buildAndRunScriptPath" run ${{ env.buildDirectory }}
          tsanStatus=$?
          set -e
          echo "tsanStatus: [$tsanStatus]"
          echo "tsanStatus=$tsanStatus" >> "$GITHUB_ENV"
            
      - name: Build and Run with Undefined Behavior Sanitizer
        shell: bash
        continue-on-error: true
        if: matrix.configurationName == 'UbuntuLatestClang' && inputs.enableUbsan
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" cleanAndConfigureWithClang "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja" "APRG_COMPILER_FLAGS_FOR_DEBUG_WITH_UBSAN"
          echo "Building and running with UBSAN..."
          set +e
          "$buildAndRunScriptPath" build ${{ env.buildDirectory }} ${{ env.buildType }}
          "$buildAndRunScriptPath" install ${{ env.buildDirectory }} ${{ env.buildType }}
          "$buildAndRunScriptPath" run ${{ env.buildDirectory }}
          ubsanStatus=$?
          set -e
          echo "ubsanStatus: [$ubsanStatus]"
          echo "ubsanStatus=$ubsanStatus" >> "$GITHUB_ENV"
            
      - name: Run with Clang Static Analyzer
        shell: bash
        continue-on-error: true
        if: contains(matrix.configurationName, 'Clang') && inputs.enableStaticAnalyzers
        working-directory: ${{ matrix.project }}
        run: |
          echo "Running Clang Static Analysis..."
          set +e
          "$buildAndRunScriptPath" cleanAndConfigureWithClangStaticAnalyzer "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
          clangStaticAnalysisStatus=$?
          set -e
          echo "clangStaticAnalysisStatus: [$clangStaticAnalysisStatus]"
          echo "clangStaticAnalysisStatus=$clangStaticAnalysisStatus" >> "$GITHUB_ENV"

# Commented out because we have a separate job for this
#      - name: Build and Run with Static Analyzers
#        shell: bash
#        continue-on-error: true
#        if: contains(matrix.configurationName, 'Clang') && inputs.enableStaticAnalyzers
#        working-directory: ${{ matrix.project }}
#        run: |
#          "$buildAndRunScriptPath" cleanAndConfigureWithClangAndStaticAnalyzers "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
#          echo "Running Static Analysis..."
#          set +e
#          "$buildAndRunScriptPath" build ${{ env.buildDirectory }} ${{ env.buildType }}
#          "$buildAndRunScriptPath" install ${{ env.buildDirectory }} ${{ env.buildType }}
#          "$buildAndRunScriptPath" run ${{ env.buildDirectory }}
#          otherStaticAnalysisStatus=$?
#          set -e
#          echo "otherStaticAnalysisStatus: [$otherStaticAnalysisStatus]"
#          echo "otherStaticAnalysisStatus=$otherStaticAnalysisStatus" >> "$GITHUB_ENV"
          
      - name: Check overall additional step status
        shell: bash
        run: |
          overallStepStatus=0
          echo "Checking step statuses..."
          echo "valgrindStatus: [$valgrindStatus]"
          if [ "$valgrindStatus" != "0" ]; then
            echo "Valgrind failed, so the overall step status is set to failed."
            overallStepStatus=1
          fi
          echo "asanStatus: [$asanStatus]"
          if [ "$asanStatus" != "0" ]; then
            echo "ASAN failed, so the overall step status is set to failed."
            overallStepStatus=1
          fi
          echo "msanStatus: [$msanStatus]"
          if [ "$msanStatus" != "0" ]; then
            echo "MSAN failed, so the overall step status is set to failed."
            overallStepStatus=1
          fi
          echo "tsanStatus: [$tsanStatus]"
          if [ "$tsanStatus" != "0" ]; then
            echo "TSAN failed, so the overall step status is set to failed."
            overallStepStatus=1
          fi
          echo "ubsanStatus: [$ubsanStatus]"
          if [ "$ubsanStatus" != "0" ]; then
            echo "UBSAN failed, so the overall step status is set to failed."
            overallStepStatus=1
          fi
          echo "clangStaticAnalysisStatus: [$clangStaticAnalysisStatus]"
          if [ "$clangStaticAnalysisStatus" != "0" ]; then
            echo "Clang Static Analysis failed, so the overall step status is set to failed."
            overallStepStatus=1
          fi
          echo "otherStaticAnalysisStatus: [$otherStaticAnalysisStatus]"
          if [ "$otherStaticAnalysisStatus" != "0" ]; then
            echo "Other Static Analysis failed, so the overall step status is set to failed."
            overallStepStatus=1
          fi
          echo "overallStepStatus: [$overallStepStatus]"
          if [ "$overallStepStatus" != "0" ]; then
            echo "There were issues found in other steps."
          fi
          exit $overallStepStatus
