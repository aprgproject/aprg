on:
  push:
    branches: [main]
    paths:
      - '**'
  workflow_dispatch:
    inputs:
      cppCMakeProject:
        description: 'C/C++ CMake Project (use "all" for all projects)'
        required: true

env:
  checkShellScriptsRelativePath: "AllCommonScripts/ScriptsForShellScripts/checkShellScripts.sh"
  determineCppProjectsRelativePath: "AllCommonScripts/GithubWorkflowScripts/DetermineCppProjects.sh"
  buildAndRunScriptRelativePath: "AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh"
  buildType: "Debug" #buildType: "Release"
  buildDirectory: "GithubBuild"
  windowsEnvironmentScript: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"

jobs:

  shellcheck:
    name: Perform shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install shellcheck on ubuntu/gcc
        run: |
          sudo apt-get update
          sudo apt-get install shellcheck
          shellcheck --version
      - name: Run shellCheck on shell scripts
        shell: bash
        run: |
          checkShellScriptsPath=$(realpath "$(pwd)/${{ env.checkShellScriptsRelativePath }}")
          echo "checkShellScriptsPath: [$checkShellScriptsPath]"
          chmod +x "$checkShellScriptsPath"
          "$checkShellScriptsPath"


  determineCppProjects:
    name: Determine CPP Projects
    runs-on: ubuntu-latest
    outputs:
      projectsToBuild: ${{ steps.idOfGetCppProjectStep.outputs.APRG_CPP_DIRECTORIES }}
      excludedConfigurations: ${{ steps.idOfGetCppProjectStep.outputs.APRG_EXCLUDED_CONFIGURATIONS }}
    steps:
      - name: Checkout code for changes checking
        id: idOfCheckout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2
      - name: Get C/C++ Projects from Git Diff and User Input
        id: idOfGetCppProjectStep
        run: |
          determineCppProjectsPath=$(realpath "$(pwd)/${{ env.determineCppProjectsRelativePath }}")
          echo "determineCppProjectsPath: [$determineCppProjectsPath]"
          chmod +x "$determineCppProjectsPath"
          "$determineCppProjectsPath" "${{ inputs.cppCMakeProject }}"


  buildAndTest:
    name: Test ${{ matrix.project }} on ${{ matrix.configurationName }}
    needs: determineCppProjects
    runs-on: ${{ startsWith(matrix.configurationName, 'Windows') && 'windows-latest' || startsWith(matrix.configurationName, 'Ubuntu') && 'ubuntu-latest' || 'macos-latest'}}
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.determineCppProjects.outputs.projectsToBuild) }}
        configurationName: ["WindowsLatestMsvc", "WindowsLatestMingw", "UbuntuLatestGcc", "UbuntuLatestClang"] #"MacOSLatestClang"
        exclude: ${{ fromJSON(needs.determineCppProjects.outputs.excludedConfigurations) }}
        
    steps:
    
      - name: Checkout code for building
        uses: actions/checkout@v3
          
      - name: Print Job Details
        run: |
          echo matrix.project: ${{ matrix.project }}
          echo matrix.configurationName: ${{ matrix.configurationName }}
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          
      - name: Install dependencies on windows
        if: startsWith(matrix.envConfig.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version
          # Not needed to run environment script
          # echo "Executing visual studio environment script..."
          # cmd "${{ env.windowsEnvironmentScript }}"
          # echo "Finished visual studio environment script."

      - name: Install dependencies on ubuntu/gcc
        if: matrix.configurationName == 'UbuntuLatestGcc'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version

      - name: Install dependencies on ubuntu/clang
        if: matrix.configurationName == 'UbuntuLatestClang'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          clang --version

      - name: Install dependencies on File Extractor
        if: startsWith(matrix.envConfig.os, 'ubuntu') && matrix.project == 'AprgFileExtractor/AprgFileExtractor'
        run: |
          sudo apt-get update
          sudo apt-get install p7zip-full
          
# MAC OS is not supported          
#      - name: Install dependencies on macos
#        if: startsWith(matrix.envConfig.os, 'macos')
#        run: |
#          brew install cmake ninja
#          ninja --version
#          cmake --version
            
      - name: Prepare aprg directories and scripts
        shell: bash
        run: |
          buildAndRunScriptPath=$(realpath "$(pwd)/${{ env.buildAndRunScriptRelativePath }}")
          echo "buildAndRunScriptPath: [$buildAndRunScriptPath]"
          chmod +x "$buildAndRunScriptPath"
          echo "buildAndRunScriptPath=$buildAndRunScriptPath" >> "$GITHUB_ENV"
            
      - name: Configure for windows/msvc
        if: matrix.configurationName == 'WindowsLatestMsvc'
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" configureWithDefaultCompiler "${{ env.buildDirectory }}" "${{ env.buildType }}" "Visual Studio 17 2022"
            
      - name: Configure for windows/mingw
        if: matrix.configurationName == 'WindowsLatestMingw'
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" configureWithDefaultCompiler "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
            
      - name: Configure for ubuntu/gcc
        if: matrix.configurationName == 'UbuntuLatestGcc'
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" configureWithGcc "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
            
      - name: Configure for ubuntu/clang
        if: matrix.configurationName == 'UbuntuLatestClang'
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" configureWithClang "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
            
      - name: Build
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" build ${{ env.buildDirectory }} ${{ env.buildType }}
            
      - name: Install
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" install ${{ env.buildDirectory }} ${{ env.buildType }}

      - name: Run
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" run ${{ env.buildDirectory }}
