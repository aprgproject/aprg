on:
  push:
    branches: [main]
    paths:
      - '**'
  workflow_dispatch:
    inputs:
      cppCMakeProjects:
        description: 'C/C++ CMake Project (use "all" for all projects)'
        required: true
        default: 'all'
      cppCMakeBuildType:
        description: 'Build Type to use for C/C++ CMake Project'
        required: true
        default: 'Debug'
        type: choice
        options:
        - Debug
        - Release
      enableAsan:
        description: 'Enable Address Sanitizer for Ubuntu/Clang'
        required: true
        default: false
        type: boolean
      enableStaticAnalyzers:
        description: 'Enable Static Analyzers for Ubuntu/Clang'
        required: true
        default: false
        type: boolean

env:
  checkShellScriptsRelativePath: "AllCommonScripts/ScriptsForShellScripts/checkShellScripts.sh"
  checkCmakeFilesRelativePath: "AllCommonScripts/ScriptsForCmake/checkCmakeFiles.sh"
  determineCppProjectsRelativePath: "AllCommonScripts/GithubWorkflowScripts/DetermineCppProjects.sh"
  buildAndRunScriptRelativePath: "AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh"
  buildType: ${{ inputs.cppCMakeBuildType != '' && inputs.cppCMakeBuildType || 'Debug'}} # ternary operator
  buildDirectory: "GithubBuild"
  windowsEnvironmentScript: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"

jobs:

  lintChecks:
    name: Perform linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Prepare for linting
        run: |
          sudo apt-get update
          
      - name: Perform linting for cmake files
        shell: bash
        continue-on-error: true
        run: |
          sudo pip install cmakelang 
          echo "cmake-lint version: [$(cmake-lint --version)]"
          currentDirectory="$(pwd)"
          checkCMakeFilesPath=$(realpath "$currentDirectory/${{ env.checkCmakeFilesRelativePath }}")
          echo "checkCMakeFilesPath: [$checkCMakeFilesPath]"
          chmod +x "$checkCMakeFilesPath"
          "$checkCMakeFilesPath" | grep -P "\[\w\d+\]" | tee "$currentDirectory/cmakeLintIssues.txt" || true
          
          
      - name: Perform linting for shell scripts
        shell: bash
        continue-on-error: true
        run: |
          sudo apt-get install shellcheck
          echo "shellcheck version: [$(shellcheck --version)]"
          currentDirectory="$(pwd)"
          checkShellScriptsPath=$(realpath "$currentDirectory/${{ env.checkShellScriptsRelativePath }}")
          echo "checkShellScriptsPath: [$checkShellScriptsPath]"
          chmod +x "$checkShellScriptsPath"
          "$checkShellScriptsPath" | tee "$currentDirectory/shellLintIssues.txt" || true
          
          
      - name: Flag an error if there are issues from linting
        shell: bash
        run: |
          lintingExitCode=0
          currentDirectory="$(pwd)"
          echo "Checking linting errors..."
          if [ -s "$currentDirectory/cmakeLintIssues.txt" ]; then
            echo "There were some issues found regarding cmake, so the error status is set.
            lintingExitCode=1
          fi
          if [ -s "$currentDirectory/shellLintIssues.txt" ]; then
            echo "There were some issues found regarding shell, so the error status is set.
            lintingExitCode=1
          fi
          if [ $lintingExitCode -eq 0 ]; then
            echo "There were no linting issues found."
          fi
          echo "lintingExitCode: [$lintingExitCode]"
          exit $lintingExitCode


  determineCppProjects:
    name: Determine CPP Projects
    runs-on: ubuntu-latest
    outputs:
      projectsToBuild: ${{ steps.idOfGetCppProjectStep.outputs.APRG_CPP_DIRECTORIES }}
      excludedConfigurations: ${{ steps.idOfGetCppProjectStep.outputs.APRG_EXCLUDED_CONFIGURATIONS }}
      projectsWithBoost: ${{ steps.idOfGetCppProjectStep.outputs.APRG_PROJECTS_WITH_BOOST }}
      projectsWithGsl: ${{ steps.idOfGetCppProjectStep.outputs.APRG_PROJECTS_WITH_GSL }}
      projectsWith7Zip: ${{ steps.idOfGetCppProjectStep.outputs.APRG_PROJECTS_WITH_7ZIP }}
    steps:
      - name: Checkout code for changes checking
        id: idOfCheckout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2
      - name: Get C/C++ Projects from Git Diff and User Input
        id: idOfGetCppProjectStep
        run: |
          determineCppProjectsPath=$(realpath "$(pwd)/${{ env.determineCppProjectsRelativePath }}")
          echo "determineCppProjectsPath: [$determineCppProjectsPath]"
          chmod +x "$determineCppProjectsPath"
          "$determineCppProjectsPath" "${{ inputs.cppCMakeProjects }}"


  buildAndTest:
    name: Test ${{ matrix.project }} on ${{ matrix.configurationName }}
    needs: determineCppProjects
    runs-on: ${{ startsWith(matrix.configurationName, 'Windows') && 'windows-latest' || startsWith(matrix.configurationName, 'Ubuntu') && 'ubuntu-latest' || 'macos-latest'}} # ternary operator
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.determineCppProjects.outputs.projectsToBuild) }}
        configurationName: ["WindowsLatestMsvc", "WindowsLatestMingw", "UbuntuLatestGcc", "UbuntuLatestClang"] #"MacOSLatestClang"
        exclude: ${{ fromJSON(needs.determineCppProjects.outputs.excludedConfigurations) }}
        
    steps:
    
      - name: Checkout code for building
        uses: actions/checkout@v3
          
      - name: Print Job Details
        run: |
          echo matrix.project: ${{ matrix.project }}
          echo matrix.configurationName: ${{ matrix.configurationName }}
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          
      - name: Install dependencies on Windows
        if: startsWith(matrix.configurationName, 'Windows')
        run: |
          choco install cmake ninja
          choco info cmake
          echo "cmake version: [$(cmake --version)]"
          choco info ninja
          echo "ninja version: [$(ninja --version)]"
          # Not needed to run environment script
          # echo "Executing visual studio environment script..."
          # cmd "${{ env.windowsEnvironmentScript }}"
          # echo "Finished visual studio environment script."

      - name: Update APT for dependencies in Ubuntu
        if: startsWith(matrix.configurationName, 'Ubuntu')
        run: |
          sudo apt-get update

      - name: Install dependencies on Ubuntu/Gcc
        if: matrix.configurationName == 'UbuntuLatestGcc'
        run: |
          sudo apt-get install cmake ninja-build
          echo "cmake version: [$(cmake --version)]"
          echo "ninja version: [$(ninja --version)]"
          echo "gcc version: [$(gcc --version)]"

      - name: Install dependencies on Ubuntu/Clang
        if: matrix.configurationName == 'UbuntuLatestClang'
        run: |
          sudo apt-get install ninja-build cmake
          echo "cmake version: [$(cmake --version)]"
          echo "ninja version: [$(ninja --version)]"
          echo "clang version: [$(clang --version)]"
          
# MAC OS is not supported          
#      - name: Install dependencies on macos
#        if: startsWith(matrix.configurationName, 'MacOS')
#        run: |
#          brew install cmake ninja
#          ninja --version
#          cmake --version

      - name: Install Boost on Ubuntu
        if: startsWith(matrix.configurationName, 'Ubuntu') && contains(fromJSON(needs.determineCppProjects.outputs.projectsWithBoost), matrix.project)
        run: |
          sudo apt-get install libboost-all-dev
          echo "libboost-all-dev version (dpkg): [$(dpkg -l | grep libboost-all-dev)]"

      - name: Install GSL on Ubuntu
        if: startsWith(matrix.configurationName, 'Ubuntu') && contains(fromJSON(needs.determineCppProjects.outputs.projectsWithGsl), matrix.project)
        run: |
          sudo apt-get install libgsl-dev
          echo "libgsl-dev version (dpkg): [$(dpkg -l | grep libgsl-dev)]"

      - name: Install 7zip
        if: startsWith(matrix.configurationName, 'Ubuntu') && contains(fromJSON(needs.determineCppProjects.outputs.projectsWith7Zip), matrix.project)
        run: |
          sudo apt-get install p7zip-full
          echo "p7zip-full version (dpkg): [$(dpkg -l | grep p7zip-full)]"
          
      - name: Prepare aprg directories and scripts
        shell: bash
        run: |
          buildAndRunScriptPath=$(realpath "$(pwd)/${{ env.buildAndRunScriptRelativePath }}")
          echo "buildAndRunScriptPath: [$buildAndRunScriptPath]"
          chmod +x "$buildAndRunScriptPath"
          echo "buildAndRunScriptPath=$buildAndRunScriptPath" >> "$GITHUB_ENV"
          unquotedProject=$(echo "${{ matrix.project }}" | tr -d '"')
          echo "unquotedProject: [$unquotedProject]"
          echo "unquotedProject=$unquotedProject" >> "$GITHUB_ENV"
            
      - name: Configure for Windows/MSVC
        if: matrix.configurationName == 'WindowsLatestMsvc'
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" configureWithDefaultCompiler "${{ env.buildDirectory }}" "${{ env.buildType }}" "Visual Studio 17 2022"
            
      - name: Configure for Windows/Mingw
        if: matrix.configurationName == 'WindowsLatestMingw'
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" configureWithDefaultCompiler "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
            
      - name: Configure for Ubuntu/Gcc
        if: matrix.configurationName == 'UbuntuLatestGcc'
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" configureWithGcc "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
            
      - name: Configure for Ubuntu/Clang
        if: matrix.configurationName == 'UbuntuLatestClang'
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" configureWithClang "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
            
      - name: Build
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" build ${{ env.buildDirectory }} ${{ env.buildType }}
            
      - name: Install
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" install ${{ env.buildDirectory }} ${{ env.buildType }}

      - name: Run
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" run ${{ env.buildDirectory }}
            
      - name: Build and Run with Address Sanitizer
        if: matrix.configurationName == 'UbuntuLatestClang' && inputs.enableAsan
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" clean ${{ env.buildDirectory }}
          "$buildAndRunScriptPath" configureWithClangWithAsan "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
          "$buildAndRunScriptPath" build ${{ env.buildDirectory }} ${{ env.buildType }}
          "$buildAndRunScriptPath" install ${{ env.buildDirectory }} ${{ env.buildType }}
          "$buildAndRunScriptPath" run ${{ env.buildDirectory }}
            
      - name: Build and Run with Static Analyzers
        if: matrix.configurationName == 'UbuntuLatestClang' && inputs.enableStaticAnalyzers
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          sudo apt-get install clang-tidy cppcheck clazy
          echo "clang-tidy version: [$(clang-tidy --version)]"
          echo "cppcheck version: [$(cppcheck --version)]"
          echo "clazy version: [$(clazy --version)]"
          currentDirectory="$(pwd)"
          "$buildAndRunScriptPath" cleanAndConfigureWithClangAndStaticAnalyzers "${{ env.buildDirectory }}" "${{ env.buildType }}" "Ninja"
          "$buildAndRunScriptPath" build ${{ env.buildDirectory }} ${{ env.buildType }} | grep -P "^.*$unquotedProject.* (style|warning|error): .*$" | tee "$currentDirectory/analyzerIssues.txt" || true
          if [ -s "$currentDirectory/analyzerIssues.txt" ]; then
            echo "There are some issues found in the static analysis, so exiting with error status."
            exit 1
          else
            echo "No errors detected."
          fi
          "$buildAndRunScriptPath" install ${{ env.buildDirectory }} ${{ env.buildType }}
          "$buildAndRunScriptPath" run ${{ env.buildDirectory }}
