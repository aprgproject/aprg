on:
  push:
    branches: [main]
    paths:
      - '**'
  workflow_dispatch:
    inputs:
      cppCMakeProject:
        description: 'C/C++ CMake Project (use "all" for all projects)'
        required: true

env:
  checkShellScriptsRelativePath: AllCommonScripts/ScriptsForShellScripts/checkShellScripts.sh
  determineCppProjectsRelativePath: AllCommonScripts/GithubWorkflowScripts/DetermineCppProjects.sh
  buildAndRunScriptRelativePath: AllCommonScripts/BuildAndRunScripts/BuildAndRun.sh

jobs:

  shellcheck:
    name: Perform shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install shellcheck on ubuntu/gcc
        run: |
          sudo apt-get update
          sudo apt-get install shellcheck
          shellcheck --version
      - name: Run shellCheck on shell scripts
        shell: bash
        run: |
          checkShellScriptsPath=$(realpath "$(pwd)/${{ env.checkShellScriptsRelativePath }}")
          echo "checkShellScriptsPath: [$checkShellScriptsPath]"
          chmod +x "$checkShellScriptsPath"
          "$checkShellScriptsPath"


  determineCppProjects:
    name: Determine CPP Projects
    runs-on: ubuntu-latest
    outputs:
      projectsToBuild: ${{ steps.idOfGetCppProjectStep.outputs.APRG_CPP_DIRECTORIES }}
    steps:
      - name: Checkout code for changes checking
        id: idOfCheckout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 2
      - name: Get C/C++ Projects from Git Diff and User Input
        id: idOfGetCppProjectStep
        run: |
          determineCppProjectsPath=$(realpath "$(pwd)/${{ env.determineCppProjectsRelativePath }}")
          echo "determineCppProjectsPath: [$determineCppProjectsPath]"
          chmod +x "$determineCppProjectsPath"
          "$determineCppProjectsPath" "${{ inputs.cppCMakeProject }}"


  buildAndTest:
    name: Test ${{ matrix.project }} on ${{ matrix.envConfig.name }}
    needs: determineCppProjects
    runs-on: ${{ matrix.envConfig.os }}
    strategy:
      fail-fast: false
      matrix:
        exclude:
          - matrix:
              envConfig.name: "WindowsLatestMsvc"
        project: ${{ fromJSON(needs.determineCppProjects.outputs.projectsToBuild) }}
        envConfig: 
        - {
            name: "WindowsLatestMsvc",
            os: windows-latest,
            buildType: "Release",
            cc: "cl",
            cxx: "cl",
            environmentScript: "C:/Program Files (x86)/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            generators: "Visual Studio 17 2022"
          }
        - {
            name: "WindowsLatestMingw",
            os: windows-latest,
            buildType: "Release",
            cc: "gcc",
            cxx: "g++",
            generators: "Ninja"
          }
        - {
            name: "UbuntuLatestGcc",
            os: ubuntu-latest,
            buildType: "Release",
            cc: "gcc",
            cxx: "g++",
            cCompilerLocation: "/usr/bin/gcc",
            cppCompilerLocation: "/usr/bin/g++",
            generators: "Ninja"
          }
        - {
            name: "UbuntuLatestClang",
            os: ubuntu-latest,
            buildType: "Release",
            cc: "clang",
            cxx: "clang++",
            cCompilerLocation: "/usr/bin/clang",
            cppCompilerLocation: "/usr/bin/clang++",
            generators: "Ninja"
          }
# MAC OS is not supported
#        - {
#            name: "macOS Latest Clang",
#            os: macos-latest,
#            buildType: "Release",
#            cc: "clang",
#            cxx: "clang++",
#            generators: "Ninja"
#          }
          
    steps:
    
      - name: Checkout code for building
        uses: actions/checkout@v3
          
      - name: Print environment
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          
      - name: Install dependencies on windows
        if: startsWith(matrix.envConfig.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version
          #Not needed to run environment script
          #echo "Executing visual studio environment script..."
          #cmd "${{ matrix.envConfig.environmentScript }}"
          #echo "Finished visual studio environment script."

      - name: Install dependencies on ubuntu/gcc
        if: matrix.envConfig.name == 'UbuntuLatestGcc'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          gcc --version

      - name: Install dependencies on ubuntu/clang
        if: matrix.envConfig.name == 'UbuntuLatestClang'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake
          ninja --version
          cmake --version
          clang --version

      - name: Install dependencies on File Extractor
        if: startsWith(matrix.envConfig.os, 'ubuntu') && matrix.project == 'AprgFileExtractor/AprgFileExtractor'
        run: |
          sudo apt-get update
          sudo apt-get install p7zip-full
          
# MAC OS is not supported          
#      - name: Install dependencies on macos
#        if: startsWith(matrix.envConfig.os, 'macos')
#        run: |
#          brew install cmake ninja
#          ninja --version
#          cmake --version
            
      - name: Prepare aprg directories and scripts
        shell: bash
        run: |
          buildAndRunScriptPath=$(realpath "$(pwd)/${{ env.buildAndRunScriptRelativePath }}")
          echo "buildAndRunScriptPath: [$buildAndRunScriptPath]"
          chmod +x "$buildAndRunScriptPath"
          echo "buildAndRunScriptPath=$buildAndRunScriptPath" >> "$GITHUB_ENV"
            
      - name: Configure for windows
        if: startsWith(matrix.envConfig.os, 'windows')
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" configureWithDefaultCompiler GithubBuild Debug "${{ matrix.envConfig.generators }}"
            
      - name: Configure for ubuntu/gcc
        if: matrix.envConfig.name == 'UbuntuLatestGcc'
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" configureWithGcc GithubBuild Debug "${{ matrix.envConfig.generators }}"
            
      - name: Configure for ubuntu/clang
        if: matrix.envConfig.name == 'UbuntuLatestClang'
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" configureWithClang GithubBuild Debug "${{ matrix.envConfig.generators }}"
            
      - name: Build
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" build GithubBuild Debug
            
      - name: Install
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" install GithubBuild Debug

      - name: Run
        shell: bash
        working-directory: ${{ matrix.project }}
        run: |
          "$buildAndRunScriptPath" run GithubBuild
